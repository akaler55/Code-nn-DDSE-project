[{"nl_num": [3, 1727, 291, 869, 2610, 3631, 55, 1650, 3495, 4], "code_num": [2], "code": "view.substr(view.line(view.sel()[0]))", "id": "30115649", "code_sizes": 1}, {"nl_num": [3, 3925, 2330, 1240, 2, 4019, 1297, 1828, 188, 4238, 4], "code_num": [2], "code": "def compat5(L1, L2):\\n    z = zip(L1, L2)\\n    return not any(j1<k1 and j2>k2 for j1,j2 in z for k1,k2 in z)", "id": "6228375", "code_sizes": 1}, {"nl_num": [3, 1113, 2385, 3332, 155, 1297, 694, 4179, 350, 4], "code_num": [2], "code": "BlogPost.objects.filter(q1 | q2).annotate(blog_times=Count('id')).order_by('blog_times')", "id": "25080645", "code_sizes": 1}, {"nl_num": [3, 1574, 1490, 1605, 2604, 2019, 2973, 336, 1708, 3913, 4], "code_num": [2], "code": "import feedparser\\nd = feedparser.parse('http://www.reddit.com/r/Python/.rss')\\nfor entry in d.entries:\\n  date = entry.published_parsed\\n  if date.tm_year == 2015 and date.tm_mon == 4 and date.tm_mday >= 15 and date.tm_mday <= 16:\\n    print entry.title", "id": "29691148", "code_sizes": 1}, {"nl_num": [3, 655, 3747, 2, 2, 428, 2, 3747, 69, 568, 2878, 4628, 4139, 1708, 1400, 2, 3293, 1400, 2473, 4139, 1605, 2604, 2227, 2326, 4], "code_num": [2], "code": "placeholders = []\\nfor plugin in project.projectplugin_set.all():\\n    placeholders.append(plugin.placeholder_id)\\nNewsEntry.objects.filter(content__in=placeholders).distinct()", "id": "22001151", "code_sizes": 1}, {"nl_num": [3, 3397, 1424, 3976, 1708, 2, 223, 188, 4], "code_num": [2], "code": "from pygithub3 import Github\\n\\nusername = raw_input(\"Please enter a Github username: \")\\npassword = raw_input(\"Please enter the account password: \")\\n\\ngh = Github(login=username, password = password)\\n\\nget_user = gh.users.get()\\n\\nuser_repos = gh.repos.list().all()\\n\\nfor repo in user_repos:\\n    print repo.language", "id": "22083477", "code_sizes": 1}, {"nl_num": [3, 1810, 3055, 2206, 169, 3068, 1400, 2977, 4], "code_num": [2], "code": "from random import sample\\n\\nset_a = set(sample(range(0, 50), 10))\\nset_b = set(sample(range(0, 50), 10))\\n\\nprint set_a.intersection(set_b) # [3, 4]\\nprint set_a & set_b # sugar for the same thing", "id": "26522390", "code_sizes": 1}, {"nl_num": [3, 1019, 2610, 2, 2042, 4], "code_num": [2], "code": "import turtle as t\\npolygon = [(0,0), (0,100), (100,0), (100,100)]\\nt.goto(0,0)\\nfp = None\\nfor p in polygon:\\n  t.goto(p)\\n  if not fp: fp=p\\nt.goto(fp)\\nt.up()\\nt.goto(90,90)\\nt.write(\"90,90\")\\nt.dot(10)\\nt.goto(50,80)\\nt.write(\"50,80\")\\nt.dot(10)\\nt.done()", "id": "16325720", "code_sizes": 1}, {"nl_num": [3, 188, 3767, 3747, 1710, 4760, 2, 4518, 568, 2, 2, 4], "code_num": [2], "code": "import matplotlib.pyplot as plt\\nd=[2,5,10,20,30,40,50,70,100,200]\\nt0=[0.04,0.08,0.15,0.4,0.6,0.8,1.0,1.4,2.1,5.5]\\nfig, ax = plt.subplots()\\nplt.plot(d,t0,marker='o')\\nax.set_xticks(d)\\nax.set_yticks(t0)\\nplt.show()", "id": "29760821", "code_sizes": 1}, {"nl_num": [3, 2737, 1442, 568, 1138, 1261, 1959, 169, 4130, 3138, 4], "code_num": [2], "code": "gen = (x for x in xyz if x not in a)\\n\\nfor x in gen:\\n    print x", "id": "6981717", "code_sizes": 1}, {"nl_num": [3, 3324, 1897, 4500, 4179, 4500, 2610, 188, 4], "code_num": [2], "code": "class Obj1(object):\\n    def __init__(self):\\n        self.list_of_obj2 = []", "id": "7101988", "code_sizes": 1}, {"nl_num": [3, 1699, 391, 4179, 1828, 2710, 2610, 990, 540, 1828, 2189, 4], "code_num": [28], "code": "sys.stdout.flush()", "id": "14092493", "code_sizes": 1}, {"nl_num": [3, 550, 568, 163, 1828, 2587, 177, 1196, 4], "code_num": [2], "code": "a = np.array([1,2,3])\\nb = np.array([4])\\nc = np.hstack([a,b])", "id": "30772577", "code_sizes": 1}, {"nl_num": [3, 766, 1828, 2385, 627, 2549, 4], "code_num": [2], "code": "def make_form(exclude_user=True):\\n    class Form(forms.ModelForm):\\n        class Meta:\\n            model = Folder         \\n            exclude = ['user'] if exclude_user else None\\n    return Form\\n\\nform_cls = make_form(request.user != folder.owner)", "id": "10248044", "code_sizes": 1}, {"nl_num": [3, 4142, 4420, 4060, 2610, 990, 4], "code_num": [2], "code": "PySys_SetPath(\".\"); \\nmymod = PyImport_ImportModule(\"your_DLL_name or Py_module_name\");", "id": "10767154", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3994, 1828, 3647, 2610, 4171, 3293, 188, 4227, 2326, 4], "code_num": [2], "code": "import subprocess\\nsubprocess.Popen(['C:\\\\Users\\\\Me\\Desktop\\\\externalfileIwanttorun.exe'])", "id": "27723619", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4174, 1828, 1678, 1708, 3438, 3747, 4428, 2326, 4], "code_num": [2], "code": "coll = Elasticsearch()\\ncoll.update(index='stories-test',doc_type='news',id=hit.meta.id,\\n                body={\"doc\": {\"stanford\": 1, \"parsed_sents\": parsed }})", "id": "30598152", "code_sizes": 1}, {"nl_num": [3, 3387, 2, 3293, 1828, 3467, 4], "code_num": [2], "code": "import re, ahocorasick,random,time\\n\\n# search N words from dict\\nN=3\\n\\n#file from http://norvig.com/big.txt\\nwith open(\"big.txt\",\"r\") as f:\\n    text = f.read()\\n\\nwords = set(re.findall('[a-z]+', text.lower())) \\nsearch_words = random.sample([w for w in words],N)\\n\\nA = ahocorasick.Automaton()\\nfor i,w in enumerate(search_words):\\n    A.add_word(w, (i, w))\\n\\nA.make_automaton()\\n#test time for ahocorasic\\nstart = time.time()\\nprint(\"ah matches\",sum(1 for i in A.iter(text))) \\nprint(\"aho done in \", time.time() - start)\\n\\n\\nexp = re.compile('|'.join(search_words))\\n#test time for re\\nstart = time.time()\\nm = exp.findall(text)\\nprint(\"re matches\",sum(1 for _ in m))\\nprint(\"re done in \",time.time()-start)", "id": "30370992", "code_sizes": 1}, {"nl_num": [3, 1214, 4459, 4179, 193, 2610, 655, 2604, 1569, 314, 223, 3674, 4563, 4], "code_num": [2], "code": "INSTALLED_APPS = (\\n    'django.contrib.auth',\\n    'django.contrib.contenttypes',\\n    'django.contrib.sessions',\\n    # 'django.contrib.sites',\\n    'django.contrib.messages',\\n    'django.contrib.staticfiles',\\n    'purchaseapp', #this is my app\\n    # Uncomment the next line to enable the admin:\\n    'django.contrib.admin',\\n    # Uncomment the next line to enable admin documentation:\\n    'django.contrib.admindocs',\\n    # Use email as username https://github.com/dabapps/django-email-as-username\\n     'emailusernames',\\n)", "id": "14701711", "code_sizes": 1}, {"nl_num": [3, 1734, 4498, 568, 1828, 2, 711, 4414, 549, 3446, 4032, 4], "code_num": [2], "code": "import csv\\n\\ndef append_record_to_csv(dic, csvfile):\\n    with open(csvfile, 'rb') as f:\\n        # discover order of field names in header row\\n        fieldnames = next(csv.reader(f))   \\n    with open(csvfile, 'ab') as f:\\n        # assumes that dic contains only fieldnames in csv file\\n        dwriter = csv.DictWriter(f, fieldnames=fieldnames) \\n        dwriter.writerow(dic)", "id": "25792747", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 4732, 1828, 2564, 2610, 990, 4], "code_num": [2], "code": "os.rename(os.path.join(mypath, f), os.path.join(mypath, frenamed))", "id": "34427751", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 976, 1828, 1250, 2019, 1828, 2710, 2326, 4], "code_num": [2], "code": "def reorder(s, word, delta):\\n  words = s.split()\\n  oldpos = words.index(word)\\n  words.insert(oldpos+delta, words.pop(oldpos))\\n  return ' '.join(words)\\n\\nprint reorder('The quick brown fox jumps over the lazy dog', 'quick', 2)", "id": "13574132", "code_sizes": 1}, {"nl_num": [3, 1810, 1828, 2, 3990, 2817, 4], "code_num": [2], "code": "from Tkinter import Tk, Button, RAISED\\nfrom functools import partial\\nroot = Tk()\\nbuttons = [['1','2','3'],\\n          ['4','5','6'],\\n          ['7','8','9'],\\n          ['*','0','#']]\\n\\ndef buttonClicked(buttonVal):\\n    print(buttonVal)\\n\\nfor r in range(4):\\n    for c in range(3):\\n        button = Button(root,\\n                        relief = RAISED,\\n                        padx = 10,\\n                        text = buttons[r][c],\\n                        command = partial(buttonClicked, buttons[r][c]))\\n        button.grid(row = r, column = c)\\n\\nroot.mainloop()", "id": "34113208", "code_sizes": 1}, {"nl_num": [3, 1372, 2587, 4018, 4167, 3293, 2587, 177, 1073, 899, 4], "code_num": [2], "code": "# You might need to do this to get X as an ndarray (for example if X is a list)\\nX = numpy.asarray(X)\\n\\n# Then you can simply do\\nX[s, [0, 1, 2]]\\n\\n# Or more generally\\nX_argmax = X[s, numpy.arange(X.shape[1])]", "id": "14222110", "code_sizes": 1}, {"nl_num": [3, 3124, 746, 4050, 4179, 1563, 540, 2, 528, 4], "code_num": [2], "code": "windowicon = window.render_icon(gtk.STOCK_DIALOG_AUTHENTICATION, gtk.ICON_SIZE_MENU)\\nwindow.set_icon(windowicon)", "id": "5746620", "code_sizes": 1}, {"nl_num": [3, 3925, 1976, 817, 604, 4582, 593, 4], "code_num": [2], "code": "def get_int_input(prompt):\\n    while True:\\n        s = raw_input(prompt)\\n        try:\\n            i = int(s)\\n        except ValueError:\\n            print \"Please enter an integer.\"\\n        else:\\n            return i\\n\\ndef get_non_int_input(prompt):\\n    while True:\\n        s = raw_input(prompt)\\n        try:\\n            i = int(s)\\n        except ValueError:\\n            return s\\n        else:\\n            print \"Please don't enter an integer.\"", "id": "24999880", "code_sizes": 1}, {"nl_num": [3, 821, 864, 872, 2878, 2, 169, 2, 2610, 188, 897, 3293, 2449, 2326, 4], "code_num": [2], "code": "import boto\\naccess_key = boto.config.get_value('Credentials', 'aws_access_key_id')\\nsecret_key = boto.config.get_value('Credentials', 'aws_secret_access_key')", "id": "28864308", "code_sizes": 1}, {"nl_num": [3, 188, 822, 3956, 1712, 4], "code_num": [2], "code": "def print_table(table):\\n    col_width = [max(len(x) for x in col) for col in zip(*table)]\\n    for line in table:\\n        print \"| \" + \" | \".join(\"{:{}}\".format(x, col_width[i])\\n                                for i, x in enumerate(line)) + \" |\"\\n\\ntable = [(str(x), str(f(x))) for x in mylist]\\nprint_table(table)", "id": "8356501", "code_sizes": 1}, {"nl_num": [3, 990, 2103, 654, 2252, 2238, 2610, 2, 822, 3528, 568, 533, 2710, 4], "code_num": [2], "code": "new_key.publickey().exportKey(\"DER\")", "id": "32145159", "code_sizes": 1}, {"nl_num": [3, 188, 1530, 568, 1957, 2710, 4], "code_num": [2], "code": "def splitAppId(self, url):\\n        idMatch = re.search(r'/id([^/]+)\\?[^/]*$', url)\\n        return idMatch.group(1)", "id": "20365402", "code_sizes": 1}, {"nl_num": [3, 3387, 1927, 169, 3256, 327, 3293, 1828, 4238, 4], "code_num": [2], "code": "xs = [p[0] for p in pp]\\nys = [p[1] for p in pp]", "id": "21282941", "code_sizes": 1}, {"nl_num": [3, 2, 4179, 3840, 209, 3884, 1537, 2, 4], "code_num": [2], "code": "import ConfigParser\\n\\nclass acc(ConfigParser.RawConfigParser, object):\\n    def __init__(self, acc_file):\\n        super(acc, self).__init__()\\n        self.lol = 1\\n        print self.has_section(self.lol)\\n\\na=acc(1)", "id": "27628471", "code_sizes": 1}, {"nl_num": [3, 188, 2933, 1828, 4350, 2019, 1828, 1790, 4], "code_num": [2], "code": "import imp\\nhest  = imp.load_source(\"Name\", Path)", "id": "20719347", "code_sizes": 1}, {"nl_num": [3, 3082, 1828, 1717, 3047, 927, 540, 2385, 1227, 2523, 4], "code_num": [2], "code": "from haystack.management.commands import update_index\\nupdate_index.Command().handle()", "id": "4358771", "code_sizes": 1}, {"nl_num": [3, 550, 568, 997, 169, 191, 2587, 4018, 299, 1400, 640, 2326, 4], "code_num": [2], "code": "b = a.reshape(10,48)\\na = b.reshape(10,4,4,3)", "id": "16212232", "code_sizes": 1}, {"nl_num": [3, 2, 1422, 990, 427, 3343, 540, 2, 1404, 4], "code_num": [2], "code": "def f():\\n    s = ('123'\\n         '456')\\n    return s", "id": "18537267", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4229, 3467, 3293, 3703, 2728, 4588, 3886, 1400, 4260, 3452, 4047, 2, 4], "code_num": [2], "code": "if elem1.tag == 'Components':\\n    temp = 0\\n    for elem2 in list(elem1):\\n        if elem2.tag == 'Component':\\n            for elem3 in list(elem2):\\n                if elem3.tag == 'ComponentID':\\n                    asset['CompID'+str(temp)] = elem3.text\\n                if elem3.tag == 'ComponentName':\\n                    asset['CompName'+str(temp)] = elem3.text\\n                if elem3.tag == 'Description':\\n                    asset['Description'+str(temp)] = elem3.text\\n            temp+=1", "id": "13822386", "code_sizes": 1}, {"nl_num": [3, 2049, 2858, 1442, 568, 2878, 2828, 2618, 3909, 223, 3703, 2, 3257, 4], "code_num": [2], "code": "result = df[df.pct_change < -0.015].reindex(filtered_dates, method='bfill')", "id": "14084234", "code_sizes": 1}, {"nl_num": [3, 1727, 4550, 1105, 4179, 547, 1541, 2610, 3004, 188, 4], "code_num": [2], "code": "lookup = 'the dog barked'\\n\\nwith open(filename) as myFile:\\n    for num, line in enumerate(myFile, 1):\\n        if lookup in line:\\n            print 'found at line:', num", "id": "3961265", "code_sizes": 1}, {"nl_num": [3, 655, 3715, 864, 1535, 3715, 540, 3746, 2326, 4], "code_num": [2], "code": "theModel.objects.filter(theString__in=[1,4,7])", "id": "13441539", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 3663, 4062, 4179, 359, 2, 1708, 3316, 1931, 4], "code_num": [2], "code": "pen.isdown()", "id": "30810121", "code_sizes": 1}, {"nl_num": [3, 3715, 3506, 338, 3293, 2385, 4139, 4], "code_num": [2], "code": "positions = [\\n  tcu.position_set.order_by('-id').values('latitude','longitude')[0]   \\n  for tcu in request.user.tcu_set.prefetch_related('position_set')\\n  ]", "id": "33916150", "code_sizes": 1}, {"nl_num": [3, 3184, 1828, 4714, 4179, 1326, 3293, 733, 540, 188, 4], "code_num": [2], "code": "lxml.html", "id": "2514931", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3918, 1422, 2, 549, 3789, 3100, 4238, 2326, 4], "code_num": [2], "code": "all_events = [\\n    200.0, 420.0, 560.0, 1100.0, 1900.0, 2700.0, 3400.0, 3900.0, 4234.2, 4800.0]\\n\\ndef get_events_by_hour(all_events):\\n    return [\\n        len([x for x in all_events if int(x/3600.0) == hour]) \\n        for hour in xrange(24)\\n    ]\\n\\nprint get_events_by_hour(all_events)", "id": "28430323", "code_sizes": 1}, {"nl_num": [3, 2, 869, 2610, 2160, 4179, 4400, 2610, 3767, 1242, 540, 4361, 3256, 290, 4], "code_num": [2], "code": "ax2 = ax1.twinx()\\np1 = ax2.plot(ind, total_facilities, '--bo')\\np2 = ax1.bar(ind, pdb_facilities, width, color='gray',edgecolor = \"none\")\\nplt.xlim([-1,len(total_facilities)])\\nax2.set_yscale('symlog')\\nax1.yaxis.tick_right()\\nax2.yaxis.tick_left()\\nplt.show()", "id": "30770316", "code_sizes": 1}, {"nl_num": [3, 990, 3881, 223, 3018, 1297, 2, 1773, 4], "code_num": [2], "code": "d = { k:None for k in  ('a:b','c:d','e:f','d:c','b:a','f:e') }\\nfor k in d.keys():\\n    if '{}:{}'.format(k[2],k[0]) in d:\\n        d.pop(k)", "id": "33157980", "code_sizes": 1}, {"nl_num": [3, 9, 1949, 1828, 4238, 540, 3405, 1547, 2985, 4], "code_num": [2], "code": "cand = [[0, 0] for _ in range(4)]", "id": "16227055", "code_sizes": 1}, {"nl_num": [3, 3195, 1927, 2206, 2610, 990, 179, 4], "code_num": [2], "code": "num_evens = {} \\nfor combination in itertools.product(*li):\\n    even_counter = len([ y for y in combination if y & 1 == 0 ])\\n    num_evens.setdefault(even_counter,[]).append(combination)\\n\\nimport pprint\\npprint.pprint(num_evens)", "id": "3472048", "code_sizes": 1}, {"nl_num": [3, 2, 2, 2366, 568, 2655, 540, 3921, 684, 835, 4], "code_num": [2], "code": "def checkuser(request):\\n    if request.method == \"POST\":\\n        conn = Connection('localhost', 27017)\\n        db = conn['user-data']\\n        userTable = db[\"logins\"]\\n\\n        userToCheck = request.form['usertocheck']\\n\\n        #search for user to check if it already exists\\n        doesExist = str(userTable.find_one({\"username\": userToCheck}))\\n        conn.close()\\n\\n        if doesExist == \"None\":\\n            return \"Username is available\"\\n        elif doesExist.find(\"ObjectId\") != -1:\\n            return \"Username already taken.\"\\n        else:\\n            return \"Error\"\\n\\n\\n@app.route('/register/checkuser', methods=['POST'])\\ndef func():\\n    return checkUser(request)", "id": "22895751", "code_sizes": 1}, {"nl_num": [3, 2385, 540, 2, 169, 2, 2464, 865, 1400, 1614, 3594, 2038, 1007, 1711, 2869, 850, 4], "code_num": [2], "code": "world.browser.find_by_id(field).fill(value)", "id": "7414481", "code_sizes": 1}, {"nl_num": [3, 739, 540, 549, 2613, 1950, 1959, 2610, 990, 4], "code_num": [2], "code": "with open(\"c:/achip.txt\", \"rU\") as f:\\n  columns = f.readline().strip().split()\\n  sums = [0.0] * len(columns)\\n  row_counts = [0] * len(columns)\\n\\n  for line in f:\\n    line = line.strip()\\n    if not line:\\n      continue\\n\\n    for col, v in enumerate(line.split()):\\n      if v != \"NA\":\\n        sums[col] += int(v)\\n        row_counts[col] += 1\\n\\nwith open(\"c:/chipdone.txt\", \"w\") as out:\\n  for name, sum, rows in zip(columns, sums, row_counts):\\n    print >>out, name,\\n    if rows == 0:\\n      print >>out, \"NA\"\\n    else:\\n      print >>out, sum / rows", "id": "3788229", "code_sizes": 1}, {"nl_num": [3, 188, 593, 2947, 540, 4059, 4], "code_num": [2], "code": "AllocationSet(\\n    Alloc( name=\"some name\", value=1.23 ),\\n    Alloc( name=\"another name\", value=2.34 ),\\n    Alloc( name=\"yet another name\", value=4.56 ),\\n)", "id": "351760", "code_sizes": 1}, {"nl_num": [3, 3333, 327, 2610, 1006, 2272, 568, 1400, 927, 2610, 549, 4018, 540, 3767, 2610, 188, 4], "code_num": [2], "code": "import numpy as np\\nimport matplotlib.pyplot as plt\\n\\ndelta_Array = np.array([0.01,0.02,0.03, 0.04, 0.05,\\n                        0.06,0.07, 0.08, 0.09, 0.10])\\n#Initialized to 0s. Actual values will be appended to matrix by function\\ntheta_Matrix = np.random.random() * np.random.rand(delta_Array.size, 8) \\n\\nfig = plt.figure()\\np1 = plt.plot(delta_Array, theta_Matrix)\\n# make a legend for both plots\\nleg = plt.legend(p1, '', loc=1)\\n\\nplt.show()", "id": "13434146", "code_sizes": 1}, {"nl_num": [3, 2551, 1828, 449, 568, 449, 1977, 1708, 3279, 1674, 4], "code_num": [2], "code": "class Gif(ndb.Model):\\n    author = ndb.UserProperty()\\n    link = ndb.StringProperty(indexed=False)\\n    # you store array of tag keys here you can also just make this\\n    # StringProperty(repeated=True)\\n    tag = ndb.KeyProperty(repeated=True)\\n\\n    @classmethod\\n    def get_by_tag(cls, tag_name):\\n        # a query to a repeated property works the same as if it was a single value\\n        return cls.query(cls.tag == ndb.Key(Tag, tag_name)).fetch()\\n\\n# we will put the tag_name as its key.id()\\n# you only really need this if you wanna keep records of your tags\\n# you can simply keep the tags as string too\\nclass Tag(ndb.Model):\\n    gif_count = ndb.IntegerProperty(indexed=False)", "id": "18774735", "code_sizes": 1}, {"nl_num": [3, 4527, 3215, 1989, 4179, 2, 4], "code_num": [2], "code": "def main():\\n    intro()\\n\\n    my_board = placeMyShips(emptyBoard())\\n    my_hit_board = emptyBoard()\\n    comp_board = placeCompShips(emptyBoard())\\n    comp_hit_board = emptyBoard()\\n\\n    myMoves(comp_board, my_hit_board)", "id": "28866424", "code_sizes": 1}, {"nl_num": [3, 380, 338, 2610, 2, 1708, 2385, 4], "code_num": [2], "code": "import sys, os\\n\\nsys.path.append('/Path/To/Django/Projects/')\\nos.environ['DJANGO_SETTINGS_MODULE'] = 'myproject.settings'\\n\\nfrom django.core.serializers import serialize\\nfrom myproject.myapp import models\\n\\nmodel_names = [] # a list of the names of the models you want to export\\n\\nfor model_name in model_names:\\n    cls = getattr(models, model_name)\\n    filename = model_name.lower() + \".json\"\\n    file = open(filename, \"w\")\\n    file.write(serialize(\"json\", cls.objects.all()))", "id": "2019379", "code_sizes": 1}, {"nl_num": [3, 3990, 191, 1297, 4590, 2610, 188, 2, 1828, 2637, 568, 3467, 4667, 239, 28, 2610, 727, 4], "code_num": [2], "code": "query = \"\"\"\\n    INSERT INTO user_profiles \\n        (user_id, json_source, user_timestamp) \\n    VALUES \\n        (%s, %s, %s)\\n\"\"\"\\ncur.execute(query, (data[0], data[1].encode('utf-8'), data[2]))", "id": "33458893", "code_sizes": 1}, {"nl_num": [3, 2, 1170, 2610, 188, 4], "code_num": [2], "code": "# beginner\\n\\ndef fac(n):\\n    f = 1\\n    i = 1\\n    while i <= n:\\n        f *= i\\n        i += 1\\n    return f\\n\\n# advanced beginner\\n\\ndef fac(n):\\n    return n * fac(n - 1) if n > 1 else 1\\n\\n# intermediate\\n\\ndef fac(n):\\n    return reduce(lambda x, y: x * y, range(1, n + 1))\\n\\n# advanced intermediate\\n\\nimport operator\\ndef fac(n):\\n    return reduce(operator.mul, xrange(1, n + 1))\\n\\n# professional\\n\\nimport math\\nprint math.factorial(5)\\n\\n# guru\\n\\nimport scipy.misc as sc\\nprint sc.factorial(5, exact=True)", "id": "19491295", "code_sizes": 1}, {"nl_num": [3, 550, 568, 746, 1828, 96, 223, 2, 1708, 990, 4], "code_num": [2], "code": "m = gurobipy.model()\\nm.setParam('TimeLimit', 5*60)", "id": "28238920", "code_sizes": 1}, {"nl_num": [3, 4137, 990, 2464, 69, 1352, 1757, 1652, 4220, 3739, 3293, 1312, 4691, 711, 625, 1400, 4252, 4691, 1007, 451, 960, 2326, 4], "code_num": [2], "code": "from legacy_module import *", "id": "11980062", "code_sizes": 1}, {"nl_num": [3, 2367, 694, 4179, 740, 3293, 3128, 4179, 3004, 4], "code_num": [2], "code": "f = open('filename.ext', 'rb')\\nf.seek(255) # skip the first 255 bytes\\nrest = f.read() # read rest", "id": "18465822", "code_sizes": 1}, {"nl_num": [3, 3078, 3055, 4195, 3670, 1863, 4], "code_num": [2], "code": "(moviesRDD\\n    .join(ratingsRDD) # Join by key\\n    .values() # Extract values\\n    .map(lambda x: (x[1][0], x[0], x[1][1]))) # Reshape", "id": "31866591", "code_sizes": 1}, {"nl_num": [3, 4405, 4023, 3293, 177, 2, 2238, 4256, 3183, 177, 3971, 3528, 2991, 2610, 188, 4], "code_num": [2], "code": "alldata = impdat.root.data\\ndatastruct = {}\\nfor names in impdat.rood.data.__members___:\\n    datastruct[names] = eval('alldata.' + names + '[0][:]')", "id": "23158910", "code_sizes": 1}, {"nl_num": [3, 1987, 3483, 1956, 2, 169, 2951, 2711, 4], "code_num": [2], "code": "import threading\\nimport subprocess\\n\\nclass RepeatingTimer(threading._Timer):\\n    def run(self):\\n        while True:\\n            self.finished.wait(self.interval)\\n            if self.finished.is_set():\\n                return\\n            else:\\n                self.function(*self.args, **self.kwargs)\\n\\n\\ndef status():\\n    print \"I'm alive\"\\ntimer = RepeatingTimer(1.0, status)\\ntimer.daemon = True # Allows program to exit if only the thread is alive\\ntimer.start()\\n\\nproc = subprocess.Popen([ '/bin/sleep', \"5\" ])\\nproc.wait()\\n\\ntimer.cancel()", "id": "5429577", "code_sizes": 1}, {"nl_num": [3, 3387, 528, 2126, 3293, 1400, 343, 1708, 188, 4], "code_num": [2], "code": "import urllib, re\\n\\nsource = urllib.urlopen('http://www.cbssports.com/nba/draft/mock-draft').read()\\n\\n## every image name is an abbreviation composed by capital letters, so...\\nfor link in re.findall('http://sports.cbsimg.net/images/nba/logos/30x30/[A-Z]*.png', source):\\n    print link\\n\\n\\n    ## the code above just prints the link;\\n    ## if you want to actually download, set the flag below to True\\n\\n    actually_download = False\\n    if actually_download:\\n        filename = link.split('/')[-1]\\n        urllib.urlretrieve(link, filename)", "id": "11350464", "code_sizes": 1}, {"nl_num": [3, 1535, 483, 2616, 148, 3747, 2969, 568, 2, 3669, 1637, 3886, 4729, 2204, 438, 483, 2217, 2326, 4], "code_num": [2], "code": "notify-osd", "id": "11916934", "code_sizes": 1}, {"nl_num": [3, 188, 864, 3968, 3843, 4684, 2610, 3004, 4179, 3146, 4], "code_num": [2], "code": "for file, n in num.iteritems():\\n    print file, n", "id": "8562079", "code_sizes": 1}, {"nl_num": [3, 188, 3817, 1594, 1422, 2366, 2, 2943, 869, 4], "code_num": [2], "code": "now  = time.strftime(\"%X\")\\npeer = socket.getpeername()\\nprint(\"{} - {}\".format(now, peer))", "id": "23326123", "code_sizes": 1}, {"nl_num": [3, 3486, 740, 604, 1829, 264, 711, 2, 4043, 4], "code_num": [2], "code": "sendPacket('\\x5f\\x00\\x00\\x00\\x01\\x00\\x07\\x01\\xcc\\x00\\x00\\x00\\x1f\\x8b')", "id": "20925772", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3881, 2613, 1828, 2725, 3477, 2610, 2385, 2326, 4], "code_num": [2], "code": "django.template.loader.get_template(template_name)", "id": "5690213", "code_sizes": 1}, {"nl_num": [3, 3990, 990, 540, 1844, 568, 885, 2375, 1133, 413, 4], "code_num": [2], "code": "#!/usr/bin/env python\\nfrom contextlib import closing\\nfrom selenium.webdriver import Firefox # pip install selenium\\n\\nurl = \"http://example.com\"\\n\\n# use firefox to get page with javascript generated content\\nwith closing(Firefox()) as browser:\\n    n = 1\\n    while n < 10:\\n        browser.get(url) # load page\\n        link = browser.find_element_by_link_text(str(n))\\n        while link:\\n           browser.get(link.get_attribute(\"href\")) # get individual 1,2,3,4 pages\\n           #### save(browser.page_source)\\n           browser.back() # return to page that has 1,2,3,next -like links\\n           n += 1\\n           link = browser.find_element_by_link_text(str(n))\\n\\n        link = browser.find_element_by_link_text(\"next\")\\n        if not link: break\\n        url = link.get_attribute(\"href\")", "id": "8650999", "code_sizes": 1}, {"nl_num": [3, 3527, 1828, 4238, 4179, 2315, 1605, 1957, 1400, 2272, 4238, 4179, 327, 2610, 990, 4], "code_num": [2], "code": "data = [\\n    {'name':'John', 'color':'red'},\\n    {'name':'Bob', 'color':'green'},\\n    {'name':'Tom', 'color':'blue'}\\n]\\ncolors = ['blue', 'red', 'green']\\nresult = []\\n\\nfor c in colors:\\n    result.extend([d for d in data if d['color'] == c])\\n\\nprint result", "id": "1485660", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2616, 3148, 1563, 4062, 568, 2, 2610, 2135, 4], "code_num": [2], "code": "self.showMaximized()", "id": "14726296", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2692, 2, 1422, 2674, 540, 990, 169, 1822, 4], "code_num": [2], "code": "if self.ammo and player_rect.colliderect(self.ammo.rect):\\n        self.ammo_amount += 50\\n        self.all_sprites_list.remove(self.ammo)\\n        self.ammo = None", "id": "20065430", "code_sizes": 1}, {"nl_num": [3, 3311, 2, 2464, 69, 568, 403, 3055, 1250, 3703, 265, 2326, 4], "code_num": [2], "code": "bigrams = [word_list[i] + \" \" + wordlist[i+1] for i in range(len(wordlist)-1)]", "id": "33684818", "code_sizes": 1}, {"nl_num": [3, 188, 684, 338, 1708, 3244, 4], "code_num": [2], "code": "from pprint import pformat\\n\\ndef application(environ, start_response):\\n    # show the environment:\\n    output = ['<pre>']\\n    output.append(pformat(environ))\\n    output.append('</pre>')\\n\\n    #create a simple form:\\n    output.append('<form method=\"post\">')\\n    output.append('<input type=\"text\" name=\"test\">')\\n    output.append('<input type=\"submit\">')\\n    output.append('</form>')\\n\\n    if environ['REQUEST_METHOD'] == 'POST':\\n        # show form data as received by POST:\\n        output.append('<h1>FORM DATA</h1>')\\n        output.append(pformat(environ['wsgi.input'].read()))\\n\\n    # send results\\n    output_len = sum(len(line) for line in output)\\n    start_response('200 OK', [('Content-type', 'text/html'),\\n                              ('Content-Length', str(output_len))])\\n    return output", "id": "394465", "code_sizes": 1}, {"nl_num": [3, 3178, 4220, 1400, 4663, 2343, 2610, 1828, 3467, 3004, 540, 3703, 3909, 209, 3055, 2343, 1605, 4403, 4663, 4], "code_num": [2], "code": "ld = {} # basic dictionary\\n# now open & read file\\nwith open('linked_id.txt') as fin:\\n    for ln in fin: # process each line in the file\\n        k, v = ln.split() # split each line eg. k = 'ID1', v = 'ID2'\\n        # make a dictionary entry - setdefault puts the k(ey) in and\\n        # in this case set the value to a list, append then adds to \\n        # the list by k(ey)\\n        ld.setdefault(k, []).append(v) \\n\\nunq = [] # start an empty list\\nfor k, v in ld.items(): # process the dictionary elements\\n    v.append(k)  # make the value list include the key\\n    ll = sorted(v)  # sort the new list\\n    if not ll in unq: # see if its in the unq (unique) list\\n        unq.append(ll) # if not add it\\n\\nprint(unq)  # show the unique sets", "id": "33654979", "code_sizes": 1}, {"nl_num": [3, 1875, 3372, 568, 889, 4179, 4647, 1598, 4238, 2610, 990, 4], "code_num": [2], "code": "from operator import itemgetter\\nfrom string import ascii_uppercase\\n\\ndata = [19, 14, 36]\\n\\nlabelled = zip(data, ascii_uppercase) # [(19, 'A'), (14, 'B'), (36, 'C')]\\n\\nsorted_data = sorted(labelled, \\n                     key=itemgetter(0)) # [(14, 'B'), (19, 'A'), (36, 'C')]\\n\\nlabels = [pair[1] for pair in sorted_data] # ['B', 'A', 'C']", "id": "23152883", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 2878, 2746, 3293, 3390, 3332, 2326, 4], "code_num": [2], "code": "import sqlite3\\n\\ndef dict_factory(cursor, row):\\n    d = {}\\n    for idx, col in enumerate(cursor.description):\\n        d[col[0]] = row[idx]\\n    return d\\n\\ncon = sqlite3.connect(\":memory:\")\\ncon.row_factory = dict_factory\\ncur = con.cursor()\\ncur.execute(\"select 1 as a\")\\nprint cur.fetchone()[\"a\"]", "id": "3300464", "code_sizes": 1}, {"nl_num": [3, 2291, 62, 568, 383, 3803, 694, 4179, 4465, 2610, 2473, 3909, 2610, 188, 4], "code_num": [2], "code": "count = input(\"How many numbers do you want to input?\")\\nnumbers = [float(num) for num in raw_input(\"Input numbers, please...\").split()]\\nif count != len(numbers):\\n  raise SystemExit(\"You lied to me!\")", "id": "33324324", "code_sizes": 1}, {"nl_num": [3, 1376, 2677, 184, 889, 1708, 655, 4], "code_num": [2], "code": "for pm in root.Document.Placemark:\\n    point = [p for p in pm.getchildren() if p.tag.endswith('Point')]\\n    if point:\\n        coords = point[0].coordinates.text\\n    else:\\n        poly = [p for p in pm.getchildren() if p.tag.endswith('Polygon')]\\n        if poly:\\n            coords = poly[0].outerBoundaryIs.LinearRing.coordinates.text\\n    print pm.name, coords", "id": "31349868", "code_sizes": 1}, {"nl_num": [3, 3427, 4051, 3747, 2388, 540, 990, 4], "code_num": [2], "code": "import matplotlib.pyplot as plt\\na = '\\\\frac{a}{b}'  #notice escaped slash\\nplt.plot()\\nplt.text(0.5, 0.5,'$%s$'%a)\\nplt.show()", "id": "4028267", "code_sizes": 1}, {"nl_num": [3, 3089, 1352, 483, 2217, 568, 1652, 568, 2, 3348, 568, 3674, 260, 2326, 4], "code_num": [2], "code": "import os\\nos.environ[\"DJANGO_SETTINGS_MODULE\"] = \"mysite.settings\"\\n\\nfrom mysite.polls.models import Poll, Choice", "id": "182229", "code_sizes": 1}, {"nl_num": [3, 2246, 4474, 568, 4047, 2, 3293, 177, 41, 3004, 540, 188, 2118, 4], "code_num": [2], "code": "urlFile = open(\"mailList.txt\", \"r+\")\\nmailList = [i.strip() for i in urlFile.readlines()]", "id": "6941811", "code_sizes": 1}, {"nl_num": [3, 188, 864, 1113, 1828, 4238, 2912, 568, 3055, 3498, 4], "code_num": [2], "code": "def custom_sort(population):\\n    pop_dict = { ind.ID: ind for ind in population }\\n\\n    start = []\\n    nones = []\\n    end = []\\n    for ind in population:\\n        if ind.mate is None:\\n            nones.append(ind)\\n        elif pop_dict[ind.mate] not in start:\\n            start.insert(0, ind)\\n            end.append(pop_dict[ind.mate])\\n    return start + nones + end", "id": "18447433", "code_sizes": 1}, {"nl_num": [3, 2, 2464, 2, 1959, 889, 1227, 2, 1280, 873, 4], "code_num": [2], "code": "import math\\nfrom decimal import Decimal\\n\\ndef s(x):\\n    return (Decimal(0.298**k))/ Decimal(math.factorial(k))\\n\\nprevSK = 0\\nsum=0\\nvalueList = {}\\nfor k in (range(0,501)):\\n\\n    try:\\n        a = (round(s(k),5))\\n        r = (round(s(k)/prevSK,5))\\n        print \"a{n}: {a}\".format(n=k, a=a)\\n        print \"r{n}: {r}\".format(n=k, r=r)\\n        valueList[k] = {\"a{n}\".format(n=k) : a, \"r{n}\".format(n=k) : r}\\n        prevSK = s(k)\\n        summa = sum=sum+a\\n    except Exception, e:\\n        print e\\n        prevSK = (Decimal(s(k),))\\n\\n    continue\\n\\nprint \"The sum is:\", summa", "id": "27217111", "code_sizes": 1}, {"nl_num": [3, 66, 1828, 2710, 540, 1828, 1584, 1651, 3630, 3055, 3648, 4], "code_num": [2], "code": "s = \"534349511\"\\nprint ' '.join([s[i:i+2] for i in range(0,len(s),2)])", "id": "29089085", "code_sizes": 1}, {"nl_num": [3, 655, 3747, 2255, 3747, 2, 2, 540, 2, 2464, 2, 169, 2, 4], "code_num": [2], "code": "DAB_FIELD_RENDERER = 'django_admin_bootstrapped.renderers.BootstrapFieldRenderer'", "id": "30101793", "code_sizes": 1}, {"nl_num": [3, 188, 825, 1828, 3004, 1297, 1180, 4], "code_num": [2], "code": "sortedfreqlist = sorted(freqlist, key=lambda item: int(item[1]), reverse=True)", "id": "5923792", "code_sizes": 1}, {"nl_num": [3, 1945, 2489, 568, 900, 987, 540, 990, 3747, 987, 4], "code_num": [2], "code": "python-docx", "id": "31013454", "code_sizes": 1}, {"nl_num": [3, 2480, 2613, 1828, 2710, 2604, 1828, 1394, 2, 223, 1828, 3995, 4], "code_num": [2], "code": "tests=(\\n    ('fck','fc kopenhavn',True),\\n    ('fco','fc kopenhavn',False),\\n    ('irl','in real life',True),\\n    ('irnl','in real life',False),    \\n    ('ifk','ifk gotebork',True),   \\n    ('ifko','ifk gotebork',False),    \\n    ('aik','allmanna idrottskluben',True),\\n    ('aid','allmanna idrottskluben',True),\\n    ('manu','manchester united',True), \\n    ('fz','faz zoo',True), \\n    ('fzz','faz zoo',True),\\n    ('fzzz','faz zoo',False),    \\n    )\\n\\ndef is_abbrev(abbrev, text):\\n    abbrev=abbrev.lower()\\n    text=text.lower()\\n    words=text.split()\\n    if not abbrev:\\n        return True\\n    if abbrev and not text:\\n        return False\\n    if abbrev[0]!=text[0]:\\n        return False\\n    else:\\n        return (is_abbrev(abbrev[1:],' '.join(words[1:])) or\\n                any(is_abbrev(abbrev[1:],text[i+1:])\\n                    for i in range(len(words[0]))))\\n\\nfor abbrev,text,answer in tests:\\n    result=is_abbrev(abbrev,text)\\n    print(abbrev,text,result,answer)\\n    assert result==answer", "id": "7331462", "code_sizes": 1}, {"nl_num": [3, 4476, 1383, 3369, 1915, 2326, 4], "code_num": [2], "code": "print '<a href=\"%(url)s\">%(url)s</a>' % {'url': my_url}", "id": "2451821", "code_sizes": 1}, {"nl_num": [3, 2, 2952, 1133, 4791, 2238, 156, 568, 2, 434, 3528, 4], "code_num": [2], "code": "mapper.connect('st','/st/submit_data',controller=storm, action='submit_data')", "id": "23072247", "code_sizes": 1}, {"nl_num": [3, 71, 4805, 3738, 1518, 2, 4178, 3674, 2, 4], "code_num": [2], "code": "class NonscientificDecimalField(DecimalField):\\n    \"\"\" Prevents values from being displayed with E notation, with trailing 0's\\n        after the decimal place  truncated. (This causes precision to be lost in\\n        many cases, but is more user friendly and consistent for non-scientist\\n        users)\\n    \"\"\"\\n    def value_from_object(self, obj):\\n        def remove_exponent(val):\\n            \"\"\"Remove exponent and trailing zeros.\\n               >>> remove_exponent(Decimal('5E+3'))\\n               Decimal('5000')\\n            \"\"\"\\n            context = decimal.Context(prec=self.max_digits)\\n            return val.quantize(decimal.Decimal(1), context=context) if val == val.to_integral() else val.normalize(context)\\n\\n        val = super(NonscientificDecimalField, self).value_from_object(obj)\\n        if isinstance(val, decimal.Decimal):\\n            return remove_exponent(val)", "id": "23436220", "code_sizes": 1}, {"nl_num": [3, 1217, 4505, 1708, 1828, 694, 4518, 540, 3703, 3004, 4597, 4179, 1400, 3995, 4179, 1400, 3004, 4], "code_num": [2], "code": "import os\\n\\ndef upload(file_name_number,files_dict): \\n\\n    filename = int(raw_input(file_name_number))\\n    #as the key to dictionary is integer\\n    if filename in files_dict:\\n        # upload code here\\n        print \"dummy\"\\n    else:\\n        print \"The selected number does not exist in current directory.\"\\n        upload(file_name_number,files_dict)#why are you calling this again\\n    return filename\\n\\ndef create():\\n    files_dict = showListAndSaveDict()\\n    firstFile  = upload(\"Select the number of first file:\",files_dict)\\n    secondFile = upload(\"Select the number of second file:\",files_dict)\\n    thirdFile  = upload(\"Select the number of third file:\",files_dict)\\n\\ndef showListAndSaveDict():\\n    files = [f for f in os.listdir('.') if os.path.isfile(f)]\\n    files_dict = {}\\n    i=0\\n    for f in files:\\n        i = i+1\\n        print (str(i) + \" - \" + f)  \\n        files_dict[i] = f\\n    return files_dict\\n\\ncreate()", "id": "29397725", "code_sizes": 1}, {"nl_num": [3, 566, 568, 1869, 1828, 262, 2610, 188, 1007, 451, 3119, 4], "code_num": [2], "code": "year=['51-52', '53', '55' , '56' , '58', '59', '60', '61']\\nphoto=[[70,72,73], [64,65,68],[79,80,81,82],[74,77,78],[60,61,62],[84,85,87],[57,58,59],[53,54,55,56]]\\n\\nfor i in range(len(year)):\\n   for j in range(len(photo[i])):\\n       print '<img src=\\\"http://files.getdropbox.com/u/100000/Akuja/%s/P10104%s.JPG>' % (year[i], photo[i][j])", "id": "1046584", "code_sizes": 1}, {"nl_num": [3, 1727, 2, 4491, 3293, 817, 1047, 1708, 2, 1422, 2, 4], "code_num": [2], "code": "pyaudio.paInt16", "id": "34029573", "code_sizes": 1}, {"nl_num": [3, 1390, 2975, 2, 1422, 2523, 3426, 2, 2, 4178, 1295, 4], "code_num": [2], "code": "import logging\\nclass RequestsConnectionFilter(logging.Filter):\\n    def filter(self, record):\\n        return False\\nlogging.getLogger('newrelic.lib.requests.packages.urllib3.connectionpool').addFilter(RequestsConnectionFilter())", "id": "13262170", "code_sizes": 1}, {"nl_num": [3, 2880, 1122, 1828, 4519, 2610, 1447, 4], "code_num": [2], "code": "import warnings\\nfrom sqlalchemy import exc as sa_exc\\n\\nwith warnings.catch_warnings():\\n    warnings.simplefilter(\"ignore\", category=sa_exc.SAWarning)\\n    # code here...", "id": "5225780", "code_sizes": 1}, {"nl_num": [3, 550, 483, 1535, 2616, 2943, 899, 4178, 2, 169, 2, 4790, 2, 2326, 4], "code_num": [2], "code": "import cx_Oracle\\n\\ndsn_tns = cx_Oracle.makedsn('my_ip_address_server_next_port', 0000, 'sid')\\ndb = cx_Oracle.connect('user', 'password', dsn_tns)\\ncurs = db.cursor()\\ncurs.callproc(\"dbms_output.enable\")\\n\\ncurs.callproc('where.my_package.ger_result', ['something',])\\n\\nstatusVar = curs.var(cx_Oracle.NUMBER)\\nlineVar = curs.var(cx_Oracle.STRING)\\nwhile True:\\n  curs.callproc(\"dbms_output.get_line\", (lineVar, statusVar))\\n  if statusVar.getvalue() != 0:\\n    break\\n  print lineVar.getvalue()", "id": "11861704", "code_sizes": 1}]