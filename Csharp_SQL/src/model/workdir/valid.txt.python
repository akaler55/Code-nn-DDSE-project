[{"nl_num": [3, 4189, 3747, 3918, 1828, 938, 1297, 1568, 3747, 2, 1180, 4], "code_num": [2], "code": "P.resample('30min')", "id": "25963961", "code_sizes": 1}, {"nl_num": [3, 9, 2836, 4756, 69, 2291, 1535, 1568, 3006, 3674, 1330, 568, 4022, 2326, 4], "code_num": [2], "code": "from graphics import *\\n\\ndef redCircles():\\n    win = GraphWin(\"Patch2\" ,100,100)\\n    for x in (10, 30, 50, 70, 90):\\n        for y in (10, 30, 50, 70, 90):\\n            c = Circle(Point(x,y), 10)\\n            d = Circle(Point(x,y), 10)\\n            if x in (30, 70):\\n                r = Rectangle(Point(x - 10, y), Point(x + 10, y + 10))                \\n            else:\\n                r = Rectangle(Point(x - 10, y- 10), Point(x, y + 10))\\n            c.setFill(\"red\")\\n            d.setOutline(\"red\") \\n            r.setFill(\"white\")\\n            r.setOutline('white')\\n            c.draw(win)\\n            r.draw(win)\\n            d.draw(win)\\n\\nif __name__=='__main__':\\n    redCircles()", "id": "27274991", "code_sizes": 1}, {"nl_num": [3, 550, 568, 179, 3006, 1828, 2, 1422, 2, 2610, 1828, 2684, 1708, 1133, 177, 4428, 2326, 4], "code_num": [2], "code": "# Create copy of the form\\nform = myform()\\n\\n# Append the dropdown to the form elements.\\nform.inputs = tuple(list(form.inputs) + [mydropdown])", "id": "4697058", "code_sizes": 1}, {"nl_num": [3, 3264, 549, 2, 2610, 4018, 2610, 990, 4], "code_num": [2], "code": "car = [\\n    [\"Brand\", \"Citroen\"],\\n    [\"Model\", \"C4\"],\\n    [\"Details\", \"Lounge\"],\\n    [\"shift\",\\n        [\\n            [\"manual\",\"5\", \"shifts\"],\\n            [\"automatic\",\"5\", \"sequential\"],\\n            [\"automatic\",\"5\", \"paddleshift\"]\\n        ]\\n    ]\\n]\\n\\nprint(car)", "id": "32060874", "code_sizes": 1}, {"nl_num": [3, 2364, 1828, 3568, 2, 2610, 188, 4], "code_num": [2], "code": "from collections import Counter\\n\\ndef __repr__(self):\\n    counter = Counter(self.data)\\n    items = ', '.join('%s (%s)' % (name, count) for name, count in counter.iteritems())\\n    return \"<Bag: '{}' with {} >\".format(self.name, items)", "id": "29220516", "code_sizes": 1}, {"nl_num": [3, 284, 2, 2284, 4261, 540, 284, 303, 4], "code_num": [2], "code": "import time\\nimport multiprocessing\\n\\ndef multi_thread(files):\\n    m = multiprocessing.Manager()\\n    q = m.Queue()\\n\\n    for f in files:\\n        q.put(f)\\n\\n    p = multiprocessing.Pool(5)\\n    for i in range(5):\\n        p.apply_async(worker_test, args=(i, q))\\n\\n    p.close()\\n    p.join()\\n\\ndef worker_test(i, q):\\n    print 'hello'\\n    print i\\n\\ndef main():\\n    files = ['a', 'b', 'c', 'd']\\n\\n    multi_thread(files[0:4])\\n\\nif __name__ == '__main__':\\n    main()", "id": "28338099", "code_sizes": 1}, {"nl_num": [3, 2, 338, 3293, 2, 540, 4189, 4], "code_num": [2], "code": "data = Quandl.get('CURRFX/GPBUSD')", "id": "25714496", "code_sizes": 1}, {"nl_num": [3, 2, 3187, 1460, 2610, 175, 1708, 1844, 4], "code_num": [2], "code": "--disable-user-media-security", "id": "21628904", "code_sizes": 1}, {"nl_num": [3, 3427, 4491, 4179, 3963, 4178, 2943, 869, 4], "code_num": [2], "code": "for x in xrange(1, 10):\\n    print x,", "id": "18424899", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4335, 3283, 4179, 1828, 2, 2, 1561, 452, 2326, 4137, 188, 2326, 4], "code_num": [2], "code": "# -*- Mode: Python -*-\\n# vi:si:et:sw=4:sts=4:ts=4\\n\\np = \"Plural-Forms: nplurals=3; plural=n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2;\\n\"\\n\\n# extract rule\\nimport re\\nmatcher = re.compile('plural=(.*);')\\nmatch = matcher.search(p)\\nrule = match.expand(\"\\\\1\")\\n\\n# convert rule to python syntax\\noldrule = None\\nwhile oldrule != rule:\\n    oldrule = rule\\n    rule = re.sub('(.*)\\?(.*):(.*)', r'(\\1) and (\\2) or (\\3)', oldrule)\\n\\nrule = re.sub('&&', 'and', rule)\\nrule = re.sub('\\|\\|', 'or', rule)\\n\\nfor n in range(40):\\n    code = \"n = %d\" % n\\n    print n, eval(rule)", "id": "749170", "code_sizes": 1}, {"nl_num": [3, 672, 1828, 2049, 927, 4182, 2, 4], "code_num": [2], "code": "df = data[['Age', 'FG', 'FGA', '3P', '3PA']]", "id": "22162391", "code_sizes": 1}, {"nl_num": [3, 2, 3747, 3376, 472, 338, 1708, 188, 4], "code_num": [2], "code": "import sys\\n\\nd = {}\\nfor line in sys.stdin:\\n    parts = line.split(\"=\",2)\\n    if len(parts) < 2:\\n        continue\\n    k = parts[0].strip()\\n    v = parts[1].strip()\\n    d[k] = v\\n\\nprint d['CENTRAL_BODY']", "id": "1585950", "code_sizes": 1}, {"nl_num": [3, 188, 864, 3055, 4238, 749, 250, 223, 1959, 223, 927, 4], "code_num": [2], "code": "for i in xrange(len(list_1)-1):\\n    l1 = list_1[:]\\n    l2 = list_2[:]\\n    var_list_1_1 = l1.pop(i)\\n    var_list_1_2 = l1\\n    var_list_2_1 = l2.pop(i)\\n    var_list_2_2 = l2", "id": "33241021", "code_sizes": 1}, {"nl_num": [3, 1254, 3332, 540, 4182, 3138, 4], "code_num": [2], "code": "User.query.filter(User.id.in_([1, 5, 12, 4]))", "id": "11360296", "code_sizes": 1}, {"nl_num": [3, 2076, 3759, 1039, 3293, 1828, 188, 4018, 2237, 4178, 3047, 4506, 4], "code_num": [2], "code": "from random import choice\\n\\na = [[0,1,0],[0,1,1],[1,0,1]]\\nmylist = []\\n\\n[[mylist.append((i,j)) for j, x in enumerate(v) if x == 1] for i, v in enumerate(a)]\\nprint(choice(mylist))", "id": "4247983", "code_sizes": 1}, {"nl_num": [3, 550, 4570, 1850, 2610, 1828, 2901, 540, 2, 4178, 3494, 4], "code_num": [2], "code": "from tkinter import *\\nv=Tk()\\nv.geometry(\"400x400\")\\na= IntVar()\\n# round function simply rounds the var upto given number of decimal places in the function argument\\na.set(round(5.494949,2))\\n\\nl=Label(textvariable= a)\\nl.pack()", "id": "32158180", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 746, 3993, 2238, 3498, 3528, 4178, 1828, 3004, 2610, 1828, 2, 3004, 1708, 188, 1007, 451, 3664, 4691, 2326, 4], "code_num": [2], "code": "buffer = \"path/filename.zip\"  # zip filename to write (or file-like object)\\nname = \"folder/data.txt\"      # name of file inside zip \\nbytes = \"blah blah blah\"      # contents of file inside zip\\n\\nzip = zipfile.ZipFile(buffer, \"w\", zipfile.ZIP_DEFLATED)\\ninfo = zipfile.ZipInfo(name)\\ninfo.external_attr = 0777 << 16L # give full access to included file\\nzip.writestr(info, bytes)\\nzip.close()", "id": "434641", "code_sizes": 1}, {"nl_num": [3, 4237, 2613, 4220, 327, 2610, 1828, 2587, 4018, 4403, 3497, 4], "code_num": [2], "code": "numpy.array_equal(a1, a2)", "id": "7100995", "code_sizes": 1}, {"nl_num": [3, 4706, 540, 1550, 2366, 2610, 990, 4], "code_num": [2], "code": "def add(a, b):\\n    if a == 0 and b ==0:\\n       return 0\\n    elif b == 0 and a>= 0:\\n       return 1 +add(a-1, 0)\\n    elif a ==0 and b>= 0:\\n       return 1 + add(0, b-1)\\n    else: return 2 + add(a-1, b-1)", "id": "24463538", "code_sizes": 1}, {"nl_num": [3, 3243, 3703, 869, 4179, 2, 853, 3630, 4807, 869, 4179, 2, 2238, 188, 3528, 4], "code_num": [2], "code": "import contextlib\\nimport os\\n\\nfilenames = ['a','b','c','d','e']\\noutput_file = 'fred'\\n\\n# setup files for test\\nfor filename in filenames:\\n    with open(filename, 'w') as fp:\\n        for i in range(10):\\n            fp.write('%s %d\\n' % (filename, i))\\nif os.path.exists('fred'):\\n    os.remove('fred')\\n\\n# open all the files and use zip to interleave the lines    \\nwith open(output_file, 'w') as out_file, contextlib.ExitStack() as in_files:\\n    files = [in_files.enter_context(open(fname)) for fname in filenames]\\n    for lines in zip(*files):\\n        # if you're not sure last line has a \\n\\n        for line in lines:\\n            out_file.write(line)\\n            if not line.endswith('\\n'):\\n                out_file.write('\\n')\\n        # if you are sure last line has a \\n\\n        # out_file.write(''.join(lines))\\n\\nprint(open('fred').read())", "id": "27026538", "code_sizes": 1}, {"nl_num": [3, 4624, 483, 3191, 1828, 3316, 3518, 3293, 1828, 4640, 2326, 4], "code_num": [2], "code": "d = {1: [2, 3, 4, 7], 2: [1, 3, 4]}\\n\\nd[1].remove(2)\\n\\nprint(d)\\n\\n# {1: [3, 4, 7], 2: [1, 3, 4]}", "id": "28472835", "code_sizes": 1}, {"nl_num": [3, 1673, 4733, 2610, 990, 4], "code_num": [2], "code": "Servers=[]\\n\\n''' Servers Metaclass that handles addition of servers to the list '''\\nclass MetaServer(type):\\n    def __init__(self, name, bases, attrs):\\n        self.name = name.capitalize()\\n        Servers.append(self)\\n        super(MetaServer, self).__init__(name, bases, attrs)\\n\\nclass ServerBase:\\n    __metaclass__ = MetaServer\\n    name='' #name of the specific server class, for each server class\\n\\n    def __init__(self):\\n        self.connected = False", "id": "30964948", "code_sizes": 1}, {"nl_num": [3, 2, 873, 2677, 4179, 4505, 4], "code_num": [2], "code": "import ast\\n\\n# find field types\\nfor row in csv.DictReader(my_csvfile, delimiter=delimiter):\\n    break\\nelse:\\n    assert 0, \"no rows to process\"\\ncast = {}\\nfor k, v in row.iteritems():\\n    for f in (int, float, ast.literal_eval):\\n        try: \\n            f(v)\\n            cast[k] = f\\n            break\\n        except (ValueError, SyntaxError):\\n            pass\\n    else: # no suitable conversion\\n        cast[k] = lambda x: x.decode(encoding)\\n\\n# read data\\nmy_csvfile.seek(0)\\n\\ndata = [dict((k.decode(encoding), cast[k](v)) for k, v in row.iteritems())\\n        for row in csv.DictReader(my_csvfile, delimiter=delimiter)]", "id": "2981563", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 1875, 1828, 262, 568, 1828, 2817, 817, 2326, 4], "code_num": [2], "code": "def fetch(entries):\\n   filename = ''.join(entries[f].get() for f in fields)\\n   print(filename)\\n   #whatever you want to do with the result", "id": "30767750", "code_sizes": 1}, {"nl_num": [3, 483, 62, 568, 2426, 1400, 1039, 250, 1828, 3746, 4179, 2639, 223, 3674, 1170, 4], "code_num": [2], "code": "def vencedor_linha(t):\\n    tl1=(t[0],t[1],t[2])\\n    tl2=(t[3],t[4],t[5])\\n    tl3=(t[6],t[7],t[8])\\n    tl=(tl1,tl2,tl3)\\n    for row in tl:\\n        if all(x == 'X' for x in row) or all(x == 'O' for x in row):\\n            return True\\n    return False", "id": "15273965", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4570, 1828, 2, 4347, 4296, 822, 4347, 3886, 1383, 2910, 2610, 2385, 2326, 4], "code_num": [2], "code": "{{ your_date_value|date:\"SHORT_DATE_FORMAT\" }}", "id": "10989184", "code_sizes": 1}, {"nl_num": [3, 1210, 2, 2610, 990, 77, 4], "code_num": [2], "code": "fig = plt.figure(figsize=(6,6)) # 6x6 image\\n\\nax = plt.gca()       #SubplotZero(fig,111,) #Plot arrows over figure\\n\\n#fig.add_subplot(ax) # Plot arrows over figure\\n\\n# Plot both nulcines on same graph\\n\\nplt.axis((0,1,0,1))\\nax.set_title('v = 1',fontweight=\"bold\", size=20) # Title\\nax.set_ylabel('Active Wee1', fontsize = 20.0) # Y label\\nax.set_xlabel('Active Cdc2-cyclin B', fontsize = 20) # X label\\nplt.plot (NulclineXX,Nulclinevalues, label = \" Cdc2 nulcline\",c = 'r')\\nplt.plot (Nulclinevalues,NulclineYY, label = \"Wee1 nulcline\",c = '#FF8C00')\\n\\nax.quiver(x,y,X,Y,M) # plot quiver plot on graph\\nax.grid(True) # Show major ticks    \\nax.legend(handletextpad=0,loc='upper right') # Plot legend\\n\\nplt.show() # Show plot", "id": "27474764", "code_sizes": 1}, {"nl_num": [3, 3345, 2011, 1708, 2, 3293, 2101, 3747, 4], "code_num": [2], "code": "import matplotlib.pyplot as plt\\nimport mpl_toolkits.mplot3d.axes3d as axes3d\\nimport numpy as np\\n\\nx = np.arange(6)\\ny = np.linspace(0, 11, 50)\\nz = x[:, np.newaxis] + y**2\\n\\nfig = plt.figure()\\nax = fig.add_subplot(1, 1, 1, projection = '3d')\\nfor xval, zrow in zip(x, z):\\n    ax.plot(xval*np.ones_like(y), y, zrow, color = 'black')\\nplt.show()", "id": "9053255", "code_sizes": 1}, {"nl_num": [3, 1208, 1422, 509, 1828, 3587, 4179, 2, 3987, 4], "code_num": [2], "code": "# X= your Geo Array\\n\\n# Standardize features by removing the mean and scaling to unit variance\\nX = StandardScaler().fit_transform(X)\\n\\n# Compute DBSCAN\\ndb = DBSCAN(eps=0.3, min_samples=3).fit(X)\\n\\n# HERE\\n# eps -- The maximum distance between two samples \\n#  for them to be considered as in the same neighborhood.\\n# min_samples -- The number of samples in a neighborhood for a point \\n#  to be considered as a core point.\\n\\ncore_samples = db.core_sample_indices_\\nlabels = db.labels_\\n\\n# Number of clusters in labels, ignoring noise if present.\\nn_clusters_ = len(set(labels)) - (1 if -1 in labels else 0)", "id": "22130512", "code_sizes": 1}, {"nl_num": [3, 1405, 2, 568, 869, 2011, 2610, 2199, 4], "code_num": [2], "code": "line(x, y)\\ncircle(x, y, size=8, alpha=0)", "id": "28645631", "code_sizes": 1}, {"nl_num": [3, 188, 2817, 2, 1708, 540, 931, 2969, 4], "code_num": [2], "code": "import matplotlib\\nimport matplotlib.pyplot\\n\\n# force headless backend, or set 'backend' to 'Agg'\\n# in your ~/.matplotlib/matplotlibrc\\nmatplotlib.use('Agg')\\n\\n# force non-interactive mode, or set 'interactive' to False\\n# in your ~/.matplotlib/matplotlibrc\\nmatplotlib.pyplot.ioff()", "id": "15061135", "code_sizes": 1}, {"nl_num": [3, 3550, 1521, 2601, 3467, 868, 4], "code_num": [2], "code": "response.meta.get('link_text')", "id": "20482684", "code_sizes": 1}, {"nl_num": [3, 188, 2067, 4179, 889, 2610, 3875, 1708, 2, 4], "code_num": [2], "code": "import heapq\\n\\ndef huffman_depths(frequencies):\\n    depths = [0] * len(frequencies)\\n\\n    heap = [(f, [i]) for i, f in enumerate(frequencies)]\\n    heapq.heapify(heap)\\n\\n    while len(heap) > 1:\\n        f1, indexes1 = heapq.heappop(heap)         # pop two least frequent nodes\\n        f2, indexes2 = heapq.heappop(heap)\\n\\n        frequency = f1 + f2                        # combine them\\n        indexes = indexes1 + indexes2\\n\\n        for i in indexes:\\n            depths[i] += 1                         # increment depth count of each index\\n\\n        heapq.heappush(heap, (frequency, indexes)) # push the combined result back on\\n\\n    return depths", "id": "22678646", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 4570, 188, 568, 703, 1828, 3004, 3293, 492, 2, 2326, 4], "code_num": [2], "code": "os.chmod", "id": "2763350", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1545, 1828, 4640, 540, 4047, 3247, 2464, 3703, 540, 4047, 327, 568, 1828, 3079, 2610, 188, 2326, 4], "code_num": [2], "code": "import csv\\n\\ncla_1results = {\\n    \"Tom\": [1, 7, 4],\\n    \"Dunc\": [3, 9, 4],\\n    \"Jack\": [1, 3, 5]\\n}\\n\\nwith open(\"test.csv\", 'w+') as file:\\n    writer = csv.writer(file)\\n\\n    for name in cla_1results:\\n        writer.writerow([name, ] + [i for i in cla_1results[name]])", "id": "30662860", "code_sizes": 1}, {"nl_num": [3, 3990, 2, 2610, 188, 568, 3178, 3055, 3132, 4179, 528, 2019, 528, 4], "code_num": [2], "code": "y1,x1 = np.unravel_index(result.argmax(),result.shape)", "id": "20889809", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 1545, 338, 568, 4224, 2610, 480, 3747, 3183, 1843, 2610, 188, 2326, 4], "code_num": [2], "code": "data = urlopen(uri).read().decode(encoding)\\nf = open(file_name, 'wb')\\nf.write(data.encode('utf-8'))\\nf.close()", "id": "3128648", "code_sizes": 1}, {"nl_num": [3, 1501, 169, 188, 1650, 3747, 2153, 549, 528, 3293, 664, 4], "code_num": [2], "code": "import sys\\nfrom PyQt4 import QtGui\\nimport urllib.request\\n\\nclass Example(QtGui.QWidget):\\n\\n    def __init__(self):\\n        super(Example, self).__init__()\\n\\n        self.initUI()\\n\\n    def initUI(self):\\n        hbox = QtGui.QHBoxLayout(self)\\n\\n        url = 'http://www.google.com/images/srpr/logo1w.png'\\n        data = urllib.request.urlopen(url).read()\\n\\n        image = QtGui.QImage()\\n        image.loadFromData(data)\\n\\n        lbl = QtGui.QLabel(self)\\n        lbl.setPixmap(QtGui.QPixmap(image))\\n\\n        hbox.addWidget(lbl)\\n        self.setLayout(hbox)\\n\\n        self.show()\\n\\ndef main():\\n\\n    app = QtGui.QApplication(sys.argv)\\n    ex = Example()\\n    sys.exit(app.exec_())\\n\\n\\nif __name__ == '__main__':\\n    main()", "id": "24003043", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3348, 863, 4139, 3090, 655, 177, 2, 4], "code_num": [2], "code": "settings.AUTH_USER_MODEL", "id": "29574853", "code_sizes": 1}, {"nl_num": [3, 990, 1977, 1349, 4], "code_num": [2], "code": "def dbset(self, name, value):\\n    self.transaction.append((name, self.database.get(name)))\\n    self.database[name]=value\\n\\ndef rollback(self):\\n    # undo all changes\\n    while self.transaction:\\n        name, old_value = self.transaction.pop()\\n        self.database[name] = old_value\\n\\ndef commit(self):\\n    # everything went fine, drop undo information\\n    self.transaction = []", "id": "17373024", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 1757, 3191, 1400, 4780, 3995, 3909, 3293, 1828, 2049, 938, 2326, 4], "code_num": [2], "code": "df.to_csv('filename.csv', sep=',' , header=False , index=False)", "id": "19781609", "code_sizes": 1}, {"nl_num": [3, 655, 1310, 568, 2728, 681, 4115, 4], "code_num": [2], "code": "def get_response(self, context=None):\\n        self.template_context.update(context)\\n        return render_to_response(self.template_name, self.template_context,\\n                                 content_type=self.response_type)", "id": "20769762", "code_sizes": 1}, {"nl_num": [3, 69, 568, 1498, 4105, 3630, 4807, 1250, 2610, 2710, 2610, 990, 4], "code_num": [2], "code": "string = \"Here is my dog\"\\n\\ndef alternateUppercase(s):\\n    i = 0\\n    a = s.split(' ')\\n    l = []\\n    for w in a:\\n        if i:\\n            l.append(w.upper())\\n        else:\\n            l.append(w)\\n        i = int(not i)\\n    return \" \".join(l)\\n\\nprint alternateUppercase(string)", "id": "8452616", "code_sizes": 1}, {"nl_num": [3, 2831, 1442, 568, 4314, 1400, 2252, 2237, 4178, 4640, 3518, 2610, 990, 4], "code_num": [2], "code": "for key1, val1 in dict1.iteritems():\\n        for key2,val2 in dict2.iteritems():\\n            if key1 == val2:\\n                print key2", "id": "30565904", "code_sizes": 1}, {"nl_num": [3, 4624, 483, 4570, 1828, 2710, 551, 1828, 3369, 399, 2610, 990, 4], "code_num": [2], "code": "td = timedelta(**{my_var: 5})", "id": "24450889", "code_sizes": 1}, {"nl_num": [3, 2871, 2613, 1828, 3867, 2604, 2239, 3293, 1312, 4], "code_num": [2], "code": "self.assertTrue( issubclass(QuizForm, forms.Form) )", "id": "5628084", "code_sizes": 1}, {"nl_num": [3, 2480, 1400, 1656, 336, 4179, 4171, 4388, 4], "code_num": [2], "code": "import _winreg as reg\\nfrom datetime import datetime\\n\\nkey = reg.OpenKey(reg.HKEY_LOCAL_MACHINE, r'SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion')\\nsecs = reg.QueryValueEx(key, 'InstallDate')[0] # This is stored as a UNIX timestamp\\ndate = datetime.fromtimestamp(secs)", "id": "24144042", "code_sizes": 1}, {"nl_num": [3, 1503, 4633, 4667, 4691, 2604, 3889, 1400, 2441, 2304, 4], "code_num": [2], "code": "import logging\\nimport sys\\nimport traceback\\ndef tracer(func):\\n    def new_func(*args, **kwargs):\\n        try:\\n            traceback.print_stack(sys.stderr)\\n        except:\\n            traceback.print_exc(sys.stderr)\\n        return func(*args, **kwargs)\\n    return new_func\\nold_addHandler = logging.root.addHandler\\nlogging.root.addHandler = tracer(old_addHandler)\\n\\n# run your code", "id": "12522080", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2997, 1828, 1531, 2610, 1828, 2817, 2047, 2326, 4], "code_num": [2], "code": "from Tkinter import *\\nimport os\\n\\nroot = Tk()\\ntermf = Frame(root, height=400, width=500)\\n\\ntermf.pack(fill=BOTH, expand=YES)\\nwid = termf.winfo_id()\\nos.system('xterm -into %d -geometry 40x20 -sb &' % wid)\\n\\nroot.mainloop()", "id": "7253448", "code_sizes": 1}, {"nl_num": [3, 2480, 2604, 1828, 3746, 540, 1828, 3518, 2604, 2610, 1828, 4238, 2610, 990, 4], "code_num": [2], "code": "any(a == 'Mary' for a, b in tuples) # check if any tuple has a name equal to Mary", "id": "31256716", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2358, 2, 4179, 1828, 373, 869, 2610, 188, 2326, 4], "code_num": [2], "code": "from datetime import datetime\\n\\ndt = datetime.fromtimestamp(int(stats_dict[\"db_update\"]))\\nprint(\"DB Updated: \" + dt.strftime('%a %b %d %H:%M:%S %Y'))", "id": "13155445", "code_sizes": 1}, {"nl_num": [3, 4189, 38, 1566, 3747, 3738, 327, 4], "code_num": [2], "code": "df[df != 0] = value", "id": "24021909", "code_sizes": 1}, {"nl_num": [3, 188, 3916, 3206, 864, 216, 2, 3886, 3289, 568, 1828, 2969, 4], "code_num": [2], "code": "conn.recv(2048)", "id": "28402119", "code_sizes": 1}, {"nl_num": [3, 4197, 1838, 2238, 3528, 568, 1828, 262, 4], "code_num": [2], "code": "from pydoc_data import topics\\n\\na = topics.topics['class']\\nprint a", "id": "15462424", "code_sizes": 1}, {"nl_num": [3, 69, 1352, 1757, 4536, 1828, 1554, 3108, 3886, 2557, 1828, 684, 626, 2610, 655, 2326, 4], "code_num": [2], "code": "def test_post_endpoint(self):\\n   data = {'hello':'23'}\\n   c = Client() #above, from django.test import TestCase,Client\\n   #optional, but may be necessary for your configuration: c.login(\"username\",\"password\")\\n   response = c.post('/api/project',params=data)\\n   self.assertEqual(response.status_code, 200)", "id": "25003527", "code_sizes": 1}, {"nl_num": [3, 3767, 74, 463, 2632, 568, 2839, 4], "code_num": [2], "code": "cb = colorbar(im, ax=ax, orientation='vertical')", "id": "24378414", "code_sizes": 1}, {"nl_num": [3, 3049, 249, 540, 2587, 568, 1242, 540, 2101, 2610, 990, 4], "code_num": [2], "code": "x1= A[:,0][:4]\\nx2= A[:,0][4:]\\nc0= A[:,1]\\ny_meas1= A[:,2][:4]       \\ny_meas2= A[:,2][4:]\\n\\nplt.plot(x1,y_meas1,'-b') \\nplt.plot(x2,y_meas2,'-g') \\n\\nplt.title('Reaction') \\nplt.legend(['Data1', 'Data2'], loc='lower right')\\nplt.show()", "id": "21221304", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2, 2878, 1400, 2778, 4179, 1828, 2587, 2, 1170, 4], "code_num": [2], "code": "A = np.argwhere(bins<data)\\nprint A[np.r_[A[1:,0] != A[:-1,0], True]]", "id": "24758813", "code_sizes": 1}, {"nl_num": [3, 2, 2, 2, 1956, 2610, 1959, 4], "code_num": [2], "code": "QtCore.QCoreApplication.processEvents()", "id": "24738333", "code_sizes": 1}, {"nl_num": [3, 4291, 2103, 1867, 4097, 2, 2, 853, 365, 2644, 4], "code_num": [2], "code": "try:\\n    import Tkinter as tk     ## Python 2.x\\nexcept ImportError:\\n    import tkinter as tk     ## Python 3.x\\n\\n\\ngrape_gif='''\\\\nR0lGODlhIAAgALMAAAAAAAAAgHCAkC6LV76+vvXeswD/ANzc3DLNMubm+v/6zS9PT6Ai8P8A////\\n/////yH5BAEAAAkALAAAAAAgACAAAAS00MlJq7046803AF3ofAYYfh8GIEvpoUZcmtOKAO5rLMva\\n0rYVKqX5IEq3XDAZo1GGiOhw5rtJc09cVGo7orYwYtYo3d4+DBxJWuSCAQ30+vNTGcxnOIARj3eT\\nYhJDQ3woDGl7foNiKBV7aYeEkHEignKFkk4ciYaImJqbkZ+PjZUjaJOElKanqJyRrJyZgSKkokOs\\nNYa2q7mcirC5I5FofsK6hcHHgsSgx4a9yzXK0rrV19gRADs=\\n'''\\nmaster=tk.Tk()\\nmaster.geometry(\"100x100\")\\nphoto=tk.PhotoImage(data=grape_gif)\\n\\ncanvas=tk.Canvas(master)\\ncanvas.grid()\\ncanvas.create_image(0, 0, image=photo, anchor=\"nw\")\\n\\nmaster.mainloop()", "id": "27090694", "code_sizes": 1}, {"nl_num": [3, 1398, 938, 568, 549, 2088, 4189, 4], "code_num": [2], "code": "cov = {}\\nind_lev_1 = [str(round(q,2)) for q in quantiles]\\nind_lev_2 = states\\nindex = pd.MultiIndex.from_product([ind_lev_1, ind_lev_2], names=['QUANTILE', 'STATE'])\\ncolumns = pd.Index(ind_lev_2, name='STATE')\\n\\nfor tpd in time_periods:\\n    cov[tpd] = pd.DataFrame(index=index, columns=columns)\\n    for q in quantiles:\\n        q = str(round(q,2))\\n        cov[tpd].loc[(q,), :] = cov_var(arr=data_for_q, means=pop_means_for_q)", "id": "34219238", "code_sizes": 1}, {"nl_num": [3, 3968, 4780, 327, 2610, 2049, 4], "code_num": [2], "code": "dictionary = {'Year': [1985, 1985, 1986, 1986, 1987, 1987, 1987]}\\npdf = pd.DataFrame(dictionary)\\ngb = pdf.groupby('Year')['Year'].count()", "id": "28933537", "code_sizes": 1}, {"nl_num": [3, 2, 4032, 2610, 4135, 4059, 4], "code_num": [2], "code": "ret = os.system('cp -fr \"%s\" \"%s\"' % (src_abs_path, dst_abs_path))", "id": "16423633", "code_sizes": 1}, {"nl_num": [3, 1511, 2, 4023, 2610, 2995, 4], "code_num": [2], "code": "class Category(MPTTModel):\\n    descr = models.CharField(max_length=200)\\n    parent = TreeForeignField('self', null=True, related_name='children')\\n\\nclass CategoryResource(ModelResource):\\n    category = fields.ToOneField('self', 'parent', full=True, null=True)\\n\\n    # Rest of your Resource class", "id": "27967267", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 2, 1828, 3004, 1305, 540, 2, 177, 2, 2238, 2564, 3528, 1122, 869, 2326, 4], "code_num": [2], "code": "#!/usr/local/bin/python2.7\\n# -*- coding: UTF-8 -*-\\n\"\"\"analyze_dmp.py takes the file INFILEPATH [a pstats dump file] Producing OUTFILEPATH [a human readable python profile]\\nUsage:   analyze_dmp.py INFILEPATH  OUTFILEPATH\\nExample: analyze_dmp.py stats.dmp   stats.log\\n\"\"\"\\nimport sys, os\\nimport cProfile, pstats, StringIO\\n\\ndef analyze_dmp(myinfilepath='stats.dmp', myoutfilepath='stats.log'):\\n    out_stream = open(myoutfilepath, 'w')\\n    ps = pstats.Stats(myinfilepath, stream=out_stream)\\n    sortby = 'cumulative'\\n\\n    ps.strip_dirs().sort_stats(sortby).print_stats(.3)  # plink around with this to get the results you need\\n\\nNUM_ARGS = 2\\ndef main():\\n    args = sys.argv[1:]\\n    if len(args) != NUM_ARGS or \"-h\" in args or \"--help\" in args:\\n        print __doc__\\n        s = raw_input('hit return to quit')\\n        sys.exit(2)\\n    analyze_dmp(myinfilepath=args[0], myoutfilepath=args[1])\\n\\nif __name__ == '__main__':\\n    main()", "id": "29630667", "code_sizes": 1}, {"nl_num": [3, 2, 949, 840, 2, 1708, 1828, 999, 4254, 891, 4], "code_num": [2], "code": "from itertools import combinations\\nimport numpy as np\\n\\ncandy = [ [\"snickers\", 150.5], [\"mars\", 130.3], [\"choc\", 10.0]]\\n\\nn = len(candy)\\nww = np.array([c[1] for c in candy]) # extract weights of candys\\nidx = np.arange(n) # list of indexes\\n\\niidx,sums = [],[]\\n# generate all possible sums with index list\\nfor k in range(n):\\n    for ii in combinations(idx, k+1):\\n        ii = list(ii) # convert tupel to list, so it can be used as a list of indeces\\n        sums.append(np.sum(ww[ii]))\\n        iidx.append(ii)\\nsums = np.asarray(sums)\\nll = np.where(np.abs(sums-160.5)<1e-9)  # filter out values which match 160.5\\n\\n# print results\\nfor le in ll:\\n    print([candy[e] for e in iidx[le]])", "id": "21418768", "code_sizes": 1}, {"nl_num": [3, 717, 2, 2, 95, 540, 188, 4], "code_num": [2], "code": "import urllib2\\nimport json\\n\\nurl = \"https://www.googleapis.com/qpxExpress/v1/trips/search?key=XXX\"\\ncode = {\\n  \"request\": {\\n    \"passengers\": {\\n      \"kind\": \"qpxexpress#passengerCounts\",\\n      \"adultCount\": 1,\\n    },\\n    \"slice\": [\\n      {\\n        \"kind\": \"qpxexpress#sliceInput\",\\n        \"origin\": \"DCA\",\\n        \"destination\": \"NYC\",\\n        \"date\": \"2015-11-20\",\\n      }\\n    ],\\n    \"refundable\": \"false\",\\n    \"solutions\": 5\\n  }\\n}\\njsonreq = json.dumps(code, encoding = 'utf-8')\\nreq = urllib2.Request(url, jsonreq, {'Content-Type': 'application/json'})\\nflight = urllib2.urlopen(req)\\nresponse = flight.read()\\nflight.close()\\nprint(response)", "id": "26877855", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4570, 4047, 438, 2, 2610, 3674, 3898, 611, 3138, 2610, 990, 2326, 4], "code_num": [2], "code": "\"My name is %s.  Your name is %s.\" % (\"Sam\", \"Joe\")", "id": "33502235", "code_sizes": 1}, {"nl_num": [3, 69, 568, 4570, 4612, 177, 2, 2238, 3528, 2610, 990, 4], "code_num": [2], "code": "tf = tempfile.NamedTemporaryFile(delete=False)", "id": "3924117", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 2103, 1828, 4238, 2610, 549, 4018, 4], "code_num": [2], "code": "import numpy as np\\n\\nwtf = ['\"442116.503118\",\"442116.251106\"',\\n     '\"442141.502863\",\"442141.247462\"']\\n\\nto_list = []\\n\\nfor nest1 in wtf:\\n    nest2 = nest1.split(',')\\n    for each in nest2:\\n        to_list.append(float(each.strip('\"')))\\n\\nto_array = np.asarray(to_list)", "id": "32589474", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 2291, 3119, 169, 4314, 1828, 3518, 3293, 1828, 1170, 2610, 990, 2326, 4], "code_num": [2], "code": "def exe(a,b):\\n    if a == b:\\n        print(1)\\n        return 1", "id": "30815912", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4522, 1828, 3867, 3293, 1828, 2455, 2285, 2658, 1708, 2, 4], "code_num": [2], "code": "from mocker import Mocker\\nmocker = Mocker()\\ncommandGen = cmdgen.CommandGenerator()\\ncommandGenMock = mocker.patch(commandGen)\\ncommandGenMock.doSomething()\\nmocker.replay()", "id": "8944626", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2640, 549, 1748, 841, 2610, 3531, 2326, 4], "code_num": [2], "code": "oder.customer           = customer.key", "id": "16762923", "code_sizes": 1}, {"nl_num": [3, 3938, 3747, 3406, 318, 1594, 2610, 1828, 4066, 4], "code_num": [2], "code": "def make_closure():\\n  x = 123\\n  l = locals()\\n  return lambda(varname): eval(varname, None, l)\\n\\nclosure = make_closure()\\nprint closure(\"x\") # 123", "id": "11110304", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1626, 188, 1479, 1605, 4403, 1569, 1971, 2610, 3940, 4], "code_num": [2], "code": "flycheck-verify-setup", "id": "18103914", "code_sizes": 1}, {"nl_num": [3, 188, 4414, 1828, 1989, 1838, 2464, 2238, 2206, 3528, 4], "code_num": [2], "code": "validMoves = [item for item in pegholes if item != PEGGED]", "id": "8041768", "code_sizes": 1}, {"nl_num": [3, 550, 568, 86, 2, 2, 4519, 2610, 655, 3971, 177, 4209, 2326, 4], "code_num": [2], "code": "import warnings\\nwarnings.filterwarnings('ignore', r\"django.contrib.localflavor is deprecated\")", "id": "15277688", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 2531, 2610, 188, 2326, 4], "code_num": [2], "code": "total = 0\\nfor i in range(10):\\n    total += int(input(\"\\nEnter price here: \"))\\ngrand_total = 18 * total / 100 + total\\nprint(\"\\nThe total amount will equal to\", grand_total, \"(with 18% V.A.T)\")", "id": "10727791", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2545, 1400, 2, 2610, 2, 2, 1989, 4], "code_num": [2], "code": "self.parent.stop_serve()", "id": "24257213", "code_sizes": 1}, {"nl_num": [3, 587, 2, 1297, 3498, 2610, 188, 4], "code_num": [2], "code": "dct = dict(zip(data2['causes'], data2['analyst']))\\nall_data = mlab.rec_append_fields(data1, 'analyst',\\n    [dct[x] for x in data1['causes']])", "id": "7974824", "code_sizes": 1}, {"nl_num": [3, 4133, 2605, 2858, 568, 1388, 3197, 2464, 382, 2613, 237, 2326, 4], "code_num": [2], "code": "def caught_speeding(speed, is_birthday):\\n    adjustment = 5 if is_birthday else 0\\n    if speed <= 60 + adjustment:\\n        return 0\\n    elif speed <= 80 + adjustment:\\n        return 1\\n    else:\\n        return 2", "id": "4981675", "code_sizes": 1}, {"nl_num": [3, 2459, 1563, 1635, 2548, 2610, 1235, 4], "code_num": [2], "code": "self.get_window().set_decorations(Gdk.WMDecoration.BORDER)", "id": "14015253", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 1176, 1400, 694, 4179, 3132, 3288, 1828, 4660, 2326, 2385, 4], "code_num": [2], "code": "X.number_of_people = X.people_set.all().count()", "id": "29069426", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 4727, 3467, 2610, 1828, 2094, 568, 1400, 3729, 540, 4156, 2326, 4], "code_num": [2], "code": "sheet.cell(\"A1\").style.alignment.vertical = \"top\"", "id": "22986725", "code_sizes": 1}, {"nl_num": [3, 2259, 3747, 2610, 568, 1828, 2590, 1708, 717, 2464, 226, 4182, 2889, 2, 540, 188, 4], "code_num": [2], "code": "import twitter\\n\\n# Remember to put these values\\napi = twitter.Api(consumer_key=\"\",\\n                  consumer_secret=\"\",\\n                  access_token_key=\"\",\\n                  access_token_secret=\"\")\\n\\n# Get your timeline\\nprint api.GetHomeTimeline()", "id": "18903979", "code_sizes": 1}, {"nl_num": [3, 582, 2610, 188, 711, 1708, 1828, 3958, 1422, 4461, 262, 4], "code_num": [2], "code": "def function(x):\\n    if(x != 1):\\n        function(x / 2)\\n    print x", "id": "23210236", "code_sizes": 1}, {"nl_num": [3, 3793, 2, 864, 550, 1535, 483, 3881, 2613, 4042, 4179, 327, 2610, 4238, 4403, 354, 2326, 4], "code_num": [2], "code": "import re\\nbad_words = [\"stupid\", \"idiot\"]\\nregex = re.compile(\"|\".join(re.escape(word) for word in bad_words), re.IGNORECASE)\\nprint regex.search('youareanidiot').group()\\n\\n# prints \"idiot\"", "id": "6177208", "code_sizes": 1}, {"nl_num": [3, 2385, 3747, 3925, 223, 3055, 260, 2613, 4649, 3723, 3247, 1957, 4], "code_num": [2], "code": "setts.objects.filter(data_parsed_setid__isnull=True)", "id": "26064115", "code_sizes": 1}, {"nl_num": [3, 3991, 949, 869, 2750, 2816, 4], "code_num": [2], "code": "if(re.search(\"USN:.*MediaRenderer\", datagram, flags=re.IGNORECASE)):\\n    deviceXML = re.search(\"LOCATION:(.*.xml)\",\\n                          datagram, \\n                          flags=re.IGNORECASE).group(1)", "id": "23671507", "code_sizes": 1}, {"nl_num": [3, 188, 777, 2677, 169, 1750, 2, 4], "code_num": [2], "code": "NS_MAP = {\"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\\n        \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\\n        \"art\": \"http://simile.mit.edu/2003/10/ontologies/artstor#\",\\n        \"foaf\": \"http://xmlns.com/foaf/0.1/\",\\n        \"dcterms\": \"http://purl.org/dc/terms/\",\\n        \"sioc\": \"http://rdfs.org/sioc/ns#\",\\n         \"oa\": \"http://www.openannotation.org/ns/\"}\\n#short hands the ns\\nRDF = \"{%s}\" % NS_MAP['rdf']\\nRDFS = \"{%s}\" % NS_MAP['rdfs']\\nART = \"{%s}\" % NS_MAP['art']\\nFOAF = \"{%s}\" % NS_MAP['foaf']\\nDCTERMS = \"{%s}\" % NS_MAP['dcterms']\\nSIOC = \"{%s}\" % NS_MAP['sioc']\\nOA = \"{%s}\" % NS_MAP['oa']", "id": "27787824", "code_sizes": 1}, {"nl_num": [3, 9, 2, 4018, 281, 1828, 3746, 2326, 1127, 568, 4570, 4018, 4167, 551, 4465, 3594, 1182, 2238, 3528, 1932, 1007, 1711, 1251, 4], "code_num": [2], "code": "(1, 2)[1:]\\n#>>> (2,)\\n\\n(1, 2)[1]\\n#>>> 2", "id": "20175158", "code_sizes": 1}, {"nl_num": [3, 1096, 4548, 1400, 1976, 568, 1931, 1828, 2252, 4], "code_num": [2], "code": "def wait():\\n    while True:\\n        for event in pygame.event.get():\\n            if event.type == QUIT:\\n                pygame.quit()\\n                sys.exit()\\n            if event.type == KEYDOWN and event.key == K_f:\\n                return", "id": "20748326", "code_sizes": 1}, {"nl_num": [3, 4764, 1828, 2, 4179, 2, 568, 2, 4], "code_num": [2], "code": "with pm.Model() as model:\\n    #priors\\n    p = pm.Uniform( \"p\", 0 , 1) #this is the fraction that come from mean1 vs mean2\\n\\n    ber = pm.Bernoulli( \"ber\", p = p, shape=len(data)) # produces 1 with proportion p.\\n\\n    sigma = pm.Uniform('sigma', 0, 100)\\n    precision = sigma**-2\\n\\n    mean = pm.Normal( \"mean\", 0, 0.01, shape=2 )\\n\\n    mu = pm.Deterministic('mu', mean[ber])\\n\\n    process = pm.Normal('process', mu=mu, tau=precision, observed=data)\\n\\nwith model:\\n    step1 = pm.Metropolis([p, sigma, mean])\\n    step2 = pm.BinaryMetropolis([ber])\\n    trace = pm.sample(10000, [step1, step2])", "id": "21005541", "code_sizes": 1}, {"nl_num": [3, 1710, 2346, 2610, 188, 3293, 1095, 4], "code_num": [2], "code": "d = {'gender' : Series(['M', 'F', 'F', 'F', 'M']),'year' : Series([1900, 1910, 1920, 1920, 1920])}\\ndf = DataFrame(d)\\n\\ngrouped = df.groupby('gender').year\\ngrouped.plot(kind='hist',legend=True)", "id": "29870656", "code_sizes": 1}, {"nl_num": [3, 3106, 640, 3356, 4], "code_num": [2], "code": "import datetime\\nimport matplotlib.pyplot as plt\\n\\ndates = [datetime.date(2002, 3, 11) - datetime.timedelta(days=x) for x in range(0, 10)]\\nyvalues = [2, 4, 1,7,9,2, 4, 1,7,9]\\nerrorvalues = [0.4, 0.1, 0.3,0.4, 0.1,.4, 0.1, 0.3,0.4, 0.1]\\n\\nfig = plt.figure() \\nax = fig.add_subplot(1, 1, 1)\\nax.errorbar(dates,yvalues,yerr=errorvalues,fmt='.') \\nax.margins(x=0.05)\\nfig.autofmt_xdate()\\n\\nplt.show()", "id": "30445708", "code_sizes": 1}, {"nl_num": [3, 566, 568, 611, 3761, 2087, 540, 1844, 2610, 188, 4], "code_num": [2], "code": "from selenium import webdriver\\n\\nURL = 'http://kolkata.quikr.com/post-classifieds-ads/?postadcategoryid=971'\\n\\ndriver = webdriver.Firefox()\\ndriver.get(URL)\\n\\ninputBHK = driver.find_element_by_id(\"No_of_Rooms_newpap\")\\ninputBHK.click()\\n\\ncontainer = driver.find_element_by_id(\"No_of_Rooms_l4Attr_RadioBox_div\")\\ninput1BHK = container.find_element_by_xpath(\".//label[1]\")\\ninput1BHK.click()", "id": "26947985", "code_sizes": 1}, {"nl_num": [3, 1530, 169, 3532, 2067, 1566, 2129, 2537, 2977, 4], "code_num": [2], "code": "INNER = r\"(?:\\\\{|\\\\}|[^{}])\"", "id": "13906180", "code_sizes": 1}, {"nl_num": [3, 1956, 2149, 4663, 4238, 568, 694, 3518, 28, 2876, 4], "code_num": [2], "code": "def list_to_number(head):\\n    p = True\\n    final_number = ''\\n    for number in head:\\n        n = number if number > 0 else -number\\n        final_number = int(str(final_number) + str(n))\\n\\n    return final_number if p else -final_number", "id": "22498237", "code_sizes": 1}, {"nl_num": [3, 4405, 889, 4179, 1828, 990, 4238, 2693, 1297, 1828, 2176, 2637, 4], "code_num": [2], "code": "a = ['NEW:kim:OPERATOR', 'DELETE:joe:USER_ROLE_GUEST']\\na[0].split(\":\")[0] # returns NEW", "id": "28876534", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4570, 4047, 4268, 540, 1400, 177, 822, 2238, 3528, 1170, 2610, 188, 4], "code_num": [2], "code": "print(\"this is a {:>30.2f} test \".format(2.345345345345))", "id": "14971809", "code_sizes": 1}, {"nl_num": [3, 3748, 2710, 568, 4238, 4179, 391, 169, 2, 4], "code_num": [2], "code": "def tobits(s):\\n    result = []\\n    for c in s:\\n        bits = bin(ord(c))[2:]\\n        bits = '00000000'[len(bits):] + bits\\n        result.extend([int(b) for b in bits])\\n    return result\\n\\ndef frombits(bits):\\n    chars = []\\n    for b in range(len(bits) / 8):\\n        byte = bits[b*8:(b+1)*8]\\n        chars.append(chr(int(''.join([str(bit) for bit in byte]), 2)))\\n    return ''.join(chars)", "id": "10237926", "code_sizes": 1}, {"nl_num": [3, 2, 2124, 2610, 2385, 4139, 4], "code_num": [2], "code": "def save(self, *args, **kwargs):\\n    if self.version != self.read_current_version():\\n        raise ConcurrentModificationError('Ooops!!!!')\\n    super(MyModel, self).save(*args, **kwargs)", "id": "1645269", "code_sizes": 1}, {"nl_num": [3, 2080, 2874, 399, 223, 822, 2710, 1956, 3005, 3079, 853, 727, 1977, 4], "code_num": [2], "code": "for row in csv_data:\\n    data=row[0].split('\\t')\\n    if len(data) < 4: continue\\n    query=\"\"\"insert into newsletter_subscriber (id, name, email) values \\n      (%d, '%s', '%s')\"\"\" %(int(data[0]), data[1], data[2])\\n    cursor.execute(query)", "id": "20210433", "code_sizes": 1}, {"nl_num": [3, 2, 1828, 2710, 2237, 4178, 3061, 327, 4], "code_num": [2], "code": "import re\\n\\ndatex = re.compile('(19|20)\\d\\d-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])')\\n\\nxl = \"\"\"\\n0    United States; 2004 - present           None\\n1          2004-01-04 - 2004-01-10             23\\n2          2004-01-11 - 2004-01-17             23\\n3          2004-01-18 - 2004-01-24             23\\n\\n    617        2015-10-25 - 2015-10-31         24\\n 618        2015-11-01 - 2015-11-07         25\\n 619        2015-11-08 - 2015-11-14         26\\n 620        2015-11-15 - 2015-11-21           \\n 621                     Spokane WA         20\\n 622                    New York NY         20\\n\"\"\"\\n\\ndates = []\\nfor ln in xl.splitlines():\\n    if datex.search(ln):\\n       dates.append(ln)", "id": "33789303", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2987, 3266, 3293, 3703, 869, 1924, 1828, 3004, 1704, 2326, 4], "code_num": [2], "code": "with open('words.txt') as f:\\n    words = [word.strip() for word in f]", "id": "18865210", "code_sizes": 1}, {"nl_num": [3, 990, 3079, 3178, 3467, 2610, 3004, 169, 1279, 3178, 1828, 3843, 4780, 4], "code_num": [2], "code": "import csv\\nwith open(\"/tmp/database.txt\", 'r') as file:\\n  reader = csv.reader(file)\\n  third_where_pineapple = [line[2] for line in reader if line[0] == 'pineapple']\\n  print (third_where_pineapple)", "id": "8520329", "code_sizes": 1}, {"nl_num": [3, 3397, 1007, 2, 1007, 3976, 223, 2, 327, 4179, 1828, 4139, 2610, 1007, 3238, 1007, 4], "code_num": [2], "code": "import numpy as np\\npred = np.array(mod_fit.predict(test) > threshold, dtype=float)\\ntable = np.histogram2d(test.Y, pred, bins=2)[0]", "id": "22520964", "code_sizes": 1}, {"nl_num": [3, 2385, 3747, 3697, 549, 1387, 2710, 4], "code_num": [19], "code": "# -*- coding: utf-8 -*-", "id": "26982572", "code_sizes": 1}, {"nl_num": [3, 1520, 2047, 1422, 1927, 3747, 2, 3004, 2610, 990, 4], "code_num": [2], "code": "re.sub('\"http://.*?\"','\"http://some other url\"' ,data)", "id": "31663463", "code_sizes": 1}, {"nl_num": [3, 3148, 1422, 1331, 2464, 2, 540, 862, 2, 568, 4570, 2, 223, 3467, 2, 2094, 4], "code_num": [2], "code": "painter.setClipRect(textRect.translated(-textRect.topLeft()))", "id": "30893565", "code_sizes": 1}, {"nl_num": [3, 3550, 3747, 3549, 4047, 1194, 1708, 899, 3293, 1400, 2828, 664, 4], "code_num": [2], "code": "def parse(self, response):\\n    # Get the list of URLs, for example:\\n    list = [\"http://a.com\", \"http://b.com\", \"http://c.com\"]\\n\\n    for link in list:\\n        request = scrapy.Request(link)\\n        yield request", "id": "28981743", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 1828, 862, 4050, 840, 1971, 2610, 549, 528, 147, 2714, 2326, 4], "code_num": [2], "code": "img = gtk.Image()\\nimg.set_from_file(filename)\\nnew = gtk.ImageMenuItem(gtk.STOCK_NEW, 'New')\\nnew.set_image(img)", "id": "4318943", "code_sizes": 1}, {"nl_num": [3, 3767, 1242, 540, 262, 869, 244, 4], "code_num": [2], "code": "from matplotlib.collections import LineCollection\\nx=linspace(0,4*pi,10000)\\ny=cos(x)\\nlwidths=1+x[:-1]\\npoints = np.array([x, y]).T.reshape(-1, 1, 2)\\nsegments = np.concatenate([points[:-1], points[1:]], axis=1)\\nlc = LineCollection(segments, linewidths=lwidths,colors='blue')\\nfig,a = plt.subplots()\\na.add_collection(lc)\\na.set_xlim(0,4*pi)\\na.set_ylim(-1.1,1.1)\\nfig.show()", "id": "19390895", "code_sizes": 1}, {"nl_num": [3, 1727, 4220, 1782, 4179, 3061, 3995, 2610, 1544, 2326, 4], "code_num": [2], "code": "tree = etree.parse(open('./test.xml'))\\nreviews = tree.findall(\".//Review\")", "id": "10701137", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3222, 4064, 3715, 3332, 3293, 2549, 2, 551, 2710, 4289, 2, 4], "code_num": [2], "code": "_query = {'Id__istartswith': value}\\nreturn Q(**_query)", "id": "30948684", "code_sizes": 1}, {"nl_num": [3, 1315, 4092, 568, 840, 1971, 223, 549, 4018, 3571, 327, 1525, 540, 2101, 903, 4], "code_num": [2], "code": "x,y=meshgrid(linspace(0,1),linspace(0,1))\\nfig=plt.figure()\\na=fig.add_subplot(111,axisbg='gray')\\nz=ma.masked_array(x**2-y**2,mask=y>-x+1)\\na.contourf(z)", "id": "17042932", "code_sizes": 1}, {"nl_num": [3, 188, 864, 772, 4684, 3293, 3004, 853, 1828, 746, 4], "code_num": [2], "code": "set(line.strip() for line in open('filename.txt'))", "id": "874017", "code_sizes": 1}, {"nl_num": [3, 3191, 2, 4588, 540, 4429, 4], "code_num": [2], "code": "for d in soup.findAll('del'):\\n  d.decompose()", "id": "32745836", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2729, 188, 1007, 451, 2, 4178, 4171, 223, 2381, 2326, 2238, 568, 2616, 1133, 177, 4428, 1251, 3528, 4], "code_num": [2], "code": "web.wsgi.runwsgi = lambda func, addr=('127.0.0.1', 8080): web.wsgi.runfcgi(func, addr)", "id": "5133762", "code_sizes": 1}, {"nl_num": [3, 2246, 4047, 3004, 2169, 540, 2, 2610, 188, 4], "code_num": [2], "code": "import requests\\n\\nprint requests.post(\"https://api.mailgun.net/v2/samples.mailgun.org/messages\",\\n                    auth=(\"api\", \"key-3ax6xnjp29jd6fds4gc373sgvjxteol0\"),\\n                    files=[(\"attachment\", open(\"files/test.jpg\")),\\n                           (\"attachment\", open(\"files/test.txt\"))],\\n                    data={\"from\": \"Excited User <me@samples.mailgun.org>\",\\n                          \"to\": \"foo@example.com\",\\n                          \"cc\": \"baz@example.com\",\\n                          \"bcc\": \"bar@example.com\",\\n                          \"subject\": \"Hello\",\\n                          \"text\": \"Testing some Mailgun awesomness!\",\\n                          \"html\": \"<html>HTML version of the body</html>\"})", "id": "21268524", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 2103, 3531, 2, 568, 4465, 2326, 4], "code_num": [2], "code": "import time\\nvalue = time.time()", "id": "4140944", "code_sizes": 1}, {"nl_num": [3, 3527, 4684, 540, 4361, 4409, 1162, 4], "code_num": [2], "code": "def text_processing( file_location ):\\n    import re\\n    file_variable = open( file_location )\\n    lines = file_variable.readlines()\\n\\n    double_letter = re.compile(r'.*(.)\\1.*', re.IGNORECASE)\\n    double_letter_list = []\\n\\n    for line in lines:\\n        for word in line.split(\" \"):\\n            match = double_letter.match(word)\\n            if match:\\n                double_letter_list.append(match.group())\\n\\n    print double_letter_list", "id": "9593622", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2878, 1400, 1303, 1039, 4179, 1828, 990, 4238, 4182, 1828, 1750, 2613, 1569, 757, 4], "code_num": [2], "code": "x[index] if len(x) > index else default", "id": "2492087", "code_sizes": 1}, {"nl_num": [3, 188, 1422, 2367, 2176, 2637, 3293, 2710, 4], "code_num": [2], "code": "re.sub('[^a-zA-Z0-9-_*.]', '', my_string)", "id": "25991612", "code_sizes": 1}, {"nl_num": [3, 2, 1652, 2464, 2869, 3372, 4179, 1479, 3005, 1828, 4691, 4], "code_num": [2], "code": "import inspect\\nlast_frame = inspect.stack()[1]\\nprint 'Module imported from file:line_no = %s:%i' % last_frame[1:3]", "id": "11539971", "code_sizes": 1}, {"nl_num": [3, 188, 864, 550, 568, 2795, 4119, 4179, 4047, 188, 2241, 2951, 2610, 4171, 2, 4], "code_num": [2], "code": "import wmi\\nc = wmi.WMI ()\\n\\nfor process in c.Win32_Process ():\\n    print process.ProcessId, process.Name, process.Status", "id": "25247965", "code_sizes": 1}, {"nl_num": [3, 188, 1650, 2817, 3747, 1380, 1063, 4633, 4179, 1273, 897, 4], "code_num": [2], "code": "from tkinter import *\\nroot = Tk()\\n\\nclass StopWatch(Frame):\\n    def __init__(self, parent=None, **kw):\\n        Frame.__init__(self, parent, kw)\\n        self.on = 1\\n        TimeAdjustLabel = LabelFrame(root, text='Frame',)\\n        TimeAdjustLabel.grid(column=0, row=1, padx=10, pady=10)\\n        self.b1 = Button(TimeAdjustLabel, text='Reset', width=10, command=lambda:self.Start(self.on))\\n        self.b1.grid(row=0, column=0)\\n\\n    def Start(self, onoff):\\n        if onoff == 0:\\n            onoff = 1\\n        else: \\n            onoff = 0\\n        self.enable(onoff)\\n\\n\\n    def enable(self,enableonoff):\\n        if enableonoff == 0:\\n            self.b1.configure(state='disabled')\\n        else: \\n            self.b1.configure(state='normal')\\n\\ndef main():\\n    app = StopWatch(root)\\n    root.mainloop()\\n\\nif __name__ == '__main__':\\n    main()", "id": "20485192", "code_sizes": 1}, {"nl_num": [3, 454, 2, 4179, 2, 551, 1828, 4349, 4], "code_num": [2], "code": "def equal(u, v):\\n   if u.D != v.D: return False  # domains must be equal\\n   return all(u.f.get(x, 0) == v.f.get(x, 0) for x in u.D)", "id": "28711463", "code_sizes": 1}, {"nl_num": [3, 188, 864, 3744, 528, 338, 568, 460, 4], "code_num": [2], "code": "import numpy as np\\nimport matplotlib.pyplot as plt\\n\\n\\nif __name__=='__main__':\\n\\n    rows = 144\\n    columns = 175\\n\\n    camera_image = np.loadtxt(r'path/to/filename')\\n    if(not camera_image.size == rows * columns):\\n        raise Exception('Size mismatch!')\\n\\n    my_image = np.reshape(camera_image, (rows, columns)) / 255.0\\n\\n    figure = plt.figure()\\n    axes = figure.add_subplot(1, 1, 1)\\n\\n    axes.imshow(my_image)\\n\\n    plt.show()", "id": "25133313", "code_sizes": 1}, {"nl_num": [3, 4624, 188, 4335, 1828, 3759, 694, 1605, 2, 1828, 746, 4179, 3963, 2464, 711, 1708, 3814, 2326, 4], "code_num": [2], "code": "import random\\nnumbers = range(a,b) + range(c,d)\\nr = random.choice(numbers)", "id": "10666661", "code_sizes": 1}, {"nl_num": [3, 3474, 1828, 593, 1422, 1170, 3293, 1828, 3867, 262, 4], "code_num": [2], "code": "class Foo:\\n\\n   def run(self):\\n      responses = [func(self) for func_name, func in Foo.foo_dict.items()]\\n\\n   def foo1(self):\\n      return True\\n\\n   def foo2(self):\\n      return False\\n\\n   foo_dict = {'foo1':foo1,'foo2':foo2}", "id": "25538630", "code_sizes": 1}, {"nl_num": [3, 2990, 2583, 2610, 990, 4], "code_num": [2], "code": "class obj2(object):\\n    def __init__(self, v1, v2, obj1):\\n        self.v1 = v1\\n        self.v2 = v2\\n        if type(obj1) is dict:\\n            self.obj1 = obj1(**obj1)\\n        else:\\n            self.obj1 = obj1", "id": "33656112", "code_sizes": 1}, {"nl_num": [3, 4340, 3703, 1039, 4179, 1828, 4238, 568, 1828, 1170, 1605, 1429, 4047, 2947, 2610, 188, 2326, 4], "code_num": [2], "code": "zip(*a)", "id": "3558593", "code_sizes": 1}, {"nl_num": [3, 188, 4174, 4640, 2237, 4178, 2252, 3518, 2868, 4], "code_num": [2], "code": "import itertools\\nmain = [\\n{'country': u'CYPRUS', 'naziv': 'AKEL', 'FCI': 2}, \\n{'country': u'CYPRUS', 'naziv': 'DIKO', 'FCI': 4}, \\n]\\nsecond = [\\n{'likes': '8625.00', 'talks': '1215.00', 'naziv': 'AKEL'}, \\n{'likes': '2746.00', 'talks': 0, 'naziv': 'DIKO'}, \\n]\\n\\n\\nlst = sorted(itertools.chain(main,second), key=lambda x:x['naziv'])\\nlist_c = []\\nfor k,v in itertools.groupby(lst, key=lambda x:x['naziv']):\\n    d = {}\\n    for dct in v:\\n        d.update(dct)\\n    list_c.append(d)\\nprint list_c", "id": "33784050", "code_sizes": 1}, {"nl_num": [3, 3990, 1482, 262, 223, 4358, 3499, 2326, 4], "code_num": [2], "code": "import sys\\n\\nclass MyClass:\\n\\n    def __init__(self, arg):\\n        self.arg = arg\\n\\n    def fn1(self):\\n        return self.fn2() # just as a simple example which calls other functions\\n\\n    def fn2(self):\\n        return self.fn3()\\n\\n    def fn3(self):\\n        return self.fn4()\\n\\n    def fn4(self):\\n        return self.fn5()\\n\\n    def fn5(self):\\n        return self.arg\\n\\n\\ndef main():\\n    m = MyClass(arg=sys.argv[1])\\n    print m.fn1() # prints output based on command line argument\\n\\n\\nif __name__ == '__main__':\\n    main()", "id": "17617876", "code_sizes": 1}, {"nl_num": [3, 1072, 188, 1170, 568, 1176, 1029, 4179, 549, 1039, 2610, 1828, 4238, 4], "code_num": [2], "code": "def recursiveCount(lst,key):\\n    if lst == []: #base case\\n        return 0\\n    if lst[0] == key:\\n        return 1 + recursiveCount(lst[1:],key)\\n    else:\\n        return 0 + recursiveCount(lst[1:],key)\\n\\nprint recursiveCount(['a','b','a'],'a') #prints 2", "id": "27466350", "code_sizes": 1}, {"nl_num": [3, 550, 568, 611, 2000, 2577, 540, 4429, 2326, 4], "code_num": [2], "code": "from BeautifulSoup import BeautifulSoup\\nimport urllib\\n\\nsoup = BeautifulSoup(urllib.urlopen(\"http://www.ilrg.com/nlj250/\"))\\n\\nrows = soup.findAll(name='tr',attrs={'class':'small'})\\nfor row in rows:\\n    number = row.find('td').text\\n    tds = row.findAll(name='td',attrs={'align':'left'})\\n    link = tds[0].find('a')['href']\\n    firm = tds[0].text\\n    office = tds[1].text\\n    attorneys = tds[3].text\\n    partners = tds[4].text\\n    associates = tds[5].text\\n    salary = tds[6].text\\n    print number, firm, office, attorneys, partners, associates, salary", "id": "7604272", "code_sizes": 1}, {"nl_num": [3, 1398, 3518, 853, 4238, 169, 2616, 2344, 4238, 4], "code_num": [2], "code": "list_of_lists = [ [b, input('What label?')] for b in my_bag ]", "id": "34207234", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3305, 4238, 568, 2013, 540, 990, 4], "code_num": [2], "code": "g_weeks =  ['platform', 'week 47', 'week 48', 'week 49', 'week 50']\\n\\nnums = []\\nfor week in g_weeks:\\n    words = week.split()\\n    try:\\n        nums.append(int(words[-1]))\\n    except ValueError:\\n        pass\\n\\nprint nums  -- [47, 48, 49, 50]", "id": "27518296", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 3881, 2613, 1828, 2710, 540, 1828, 1976, 4019, 817, 2604, 3497, 568, 1828, 547, 135, 1422, 1250, 2610, 188, 4], "code_num": [2], "code": "while (userin!=\"c\" or low == high):\\n    userin = raw_input()", "id": "31042323", "code_sizes": 1}, {"nl_num": [3, 1016, 1828, 4238, 4179, 327, 568, 1828, 1170, 4], "code_num": [2], "code": "function( ['this', 'is', 'a', 'list', 'of', 'words'] )", "id": "4018178", "code_sizes": 1}, {"nl_num": [3, 2, 2429, 4179, 889, 4179, 4238, 4], "code_num": [2], "code": "class Movie(object):\\n    \"\"\" A movie, thing to spend a few hours\\n        watching, then a few hours hating yourself\\n        over watching it. \"\"\"\\n\\n    def __init__(self, name, year):\\n        self.name = name\\n        self.year = year\\n\\n    def __str__(self):\\n        return '{} ({})'.format(self.name, self.year)\\n\\nmovie_collection = [Movie('Titanic', 1997), Movie('Showgirls', 1995)]\\nfor movie in movie_collection:\\n     print(movie)", "id": "27620231", "code_sizes": 1}, {"nl_num": [3, 2385, 4159, 568, 4159, 770, 1315, 3306, 4], "code_num": [2], "code": "for author in Author.objects.filter(post__isnull=False):\\n    print author", "id": "27907832", "code_sizes": 1}, {"nl_num": [3, 442, 1326, 4179, 1828, 4139, 4], "code_num": [2], "code": "object = Emp.objects.get(pk=profile.id)\\nobject.save(force_insert=True)", "id": "2628893", "code_sizes": 1}, {"nl_num": [3, 1727, 3004, 3995, 1637, 2238, 711, 4778, 169, 4219, 3528, 3293, 3004, 3647, 4], "code_num": [2], "code": "ntpath.basename(filepath).split('.')[0]", "id": "23213850", "code_sizes": 1}, {"nl_num": [3, 188, 1530, 223, 2013, 2470, 3293, 2, 568, 2, 4], "code_num": [2], "code": "import collections\\ncodes = collections.defaultdict(list)\\nfor line in open('code_postaux_v201410.csv'):\\n    if not line[:1].isdigit():\\n        continue\\n    row = line.strip().split(';')\\n    codes[row[2]]+= [row[1].strip()]\\n\\ndef test_failures(regexp):\\n    r = re.compile(regexp)\\n    return [code for code in codes if not r.match(code)]\\n\\nlen(test_failures(r'^((0[1-9]{1})|([1-8]{1}[0-9]{1})|9[0-5]{1})[0-9]{3}$'))\\n# 283 !\\n\\n# not ideal, because it does not guarantee the input to be an existing one\\nlen(test_failures(r'^0[1-9]|[1-8][0-9]|9[0-8]|2A|2B[0-9]{3}$'))\\n# but at least no miss!", "id": "31720422", "code_sizes": 1}, {"nl_num": [3, 188, 2793, 568, 4147, 2710, 4], "code_num": [2], "code": "GetString(pbasename, -1, ASCSTR_UNICODE)", "id": "21850005", "code_sizes": 1}, {"nl_num": [3, 3809, 2473, 4588, 540, 660, 2489, 4179, 2728, 3004, 853, 4807, 2728, 3004, 990, 4], "code_num": [2], "code": "f.write(ElementTree.tostring(i))", "id": "33691455", "code_sizes": 1}, {"nl_num": [3, 990, 521, 3186, 540, 2, 4352, 3738, 4], "code_num": [2], "code": "a = 1234567890e12\\nA = str(a)\\nexp = A.find('e+')\\nconverted = '0.' + A[0] + A[2:exp] + 'e+' + str(int(A[exp+2:])+1)", "id": "21266850", "code_sizes": 1}, {"nl_num": [3, 483, 2217, 4110, 568, 383, 2605, 1007, 451, 1133, 1614, 2610, 1828, 4559, 3015, 2238, 64, 2, 3528, 4], "code_num": [2], "code": "driver = webdriver.Firefox()\\n\\n# Resize the window to the screen width/height\\ndriver.set_window_size(300, 500)\\n\\n# Move the window to position x/y\\ndriver.set_window_position(200, 200)", "id": "13571349", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 997, 3055, 2206, 853, 1828, 3316, 4238, 2326, 4], "code_num": [2], "code": "[j for i in zip(a,b) for j in i]", "id": "3471999", "code_sizes": 1}, {"nl_num": [3, 550, 568, 191, 1400, 2710, 853, 2379, 2610, 990, 4], "code_num": [2], "code": "import re\\nyour_string = '<python><regex><split>'\\nparts = re.findall(r'<.+?>', your_string)  \\nprint parts # ['<python>', '<regex>', '<split>']", "id": "11188619", "code_sizes": 1}, {"nl_num": [3, 69, 568, 2955, 949, 1413, 4], "code_num": [2], "code": "result = 1\\nfor f in factors:\\n    result *= f\\n\\nprint result", "id": "31301175", "code_sizes": 1}, {"nl_num": [3, 993, 4008, 1105, 2480, 3747, 188, 4], "code_num": [2], "code": "SSN = raw_input(\"enter SSN (ddd-dd-dddd):\")\\nchunks = SSN.split('-')\\nvalid=False\\nif len(chunks) ==3: \\n   if len(chunks[0])==3 and len(chunks[1])==2 and len(chunks[2])==4:\\n       valid=True\\nprint valid", "id": "22215314", "code_sizes": 1}, {"nl_num": [3, 2484, 2714, 3293, 4238, 4179, 2315, 4], "code_num": [2], "code": "[d for d in a if d['name'] == 'pluto']", "id": "7900882", "code_sizes": 1}, {"nl_num": [3, 760, 2974, 169, 2408, 568, 3042, 4104, 1805, 1751, 540, 188, 1374, 4], "code_num": [2], "code": "import requests\\n\\nurl = 'http://my-public-bucket.s3.amazonaws.com/'\\nfiles = {\\n    'key': ('', 'test/test.jpg'),\\n    'file': open('test.jpg', 'rb'),\\n}\\n\\nr = requests.post(url, files=files)", "id": "21007885", "code_sizes": 1}, {"nl_num": [3, 2367, 3018, 3293, 1400, 4238, 4179, 2315, 4], "code_num": [2], "code": "new_d = []\\nfor x in d:\\n    if x not in new_d:\\n        new_d.append(x)", "id": "8972076", "code_sizes": 1}, {"nl_num": [3, 2385, 4660, 540, 1527, 3715, 4], "code_num": [2], "code": "qs = super(PrescriptionTrendListView,self).get_queryset().extra(select={'month': truncate_date})", "id": "32191012", "code_sizes": 1}, {"nl_num": [3, 4137, 188, 2464, 69, 568, 3068, 3055, 2206, 169, 2878, 4220, 1218, 4179, 350, 2326, 4], "code_num": [2], "code": "[([int(item1 == item2) for item2 in list2], [n for n, item2 in enumerate(list2) if item1 == item2]) for item1 in list1]", "id": "4937634", "code_sizes": 1}, {"nl_num": [3, 188, 2464, 2, 1776, 1893, 4], "code_num": [2, 2], "code": "import re\\n\\ntext = \"your text here. i.e. something.\"\\nsentences = re.split(r'(?<!\\w\\.\\w.)(?<![A-Z][a-z]\\.)(?<=\\.|\\?)\\s', text)", "id": "32748859", "code_sizes": 2}, {"nl_num": [3, 188, 3747, 3697, 2610, 1828, 3004, 3293, 549, 2, 1959, 4], "code_num": [2], "code": "open(\"logfile.txt\", \"a\")", "id": "22406537", "code_sizes": 1}, {"nl_num": [3, 550, 568, 483, 4314, 2583, 2610, 1485, 990, 4015, 3293, 1312, 2229, 568, 1400, 1614, 2326, 4], "code_num": [2], "code": "import requests\\nr = requests.get(QUERY_URL)\\nreturn r.json\\n\\n#normal return\\nreturn jsonify(username=g.user.username,\\n               email=g.user.email,\\n               id=g.user.id)", "id": "11870396", "code_sizes": 1}, {"nl_num": [3, 2076, 327, 3293, 1856, 3945, 1170, 4135, 4], "code_num": [2], "code": "def OnClick (self, event=None):\\n    if event==None: return self.LastMousePosition\\n    self.LastMousePosition = event.GetMousePosition()\\n\\npos = OnClick()", "id": "31795000", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3191, 1566, 3747, 469, 2, 4498, 2610, 3674, 3079, 4], "code_num": [2], "code": "import csv, sys\\n\\nfilename = sys.argv[1]\\ncsvfile = open(filename, 'r')\\ncsvreader = csv.DictReader(csvfile)\\nrows = []\\nfor row in csvreader:\\n  try:\\n      row['keywords'].decode('ascii')\\n      rows.append(row) \\n  except UnicodeDecodeError:\\n      pass\\n\\nprint rows", "id": "5656528", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1704, 2000, 3079, 4505, 2610, 1828, 2544, 2610, 990, 4], "code_num": [2], "code": "import pandas as pd\\ndf = pd.concat([pd.read_csv('file%d.csv' % x) for x in range(1,41)])\\ndf.to_csv('output.csv')", "id": "31620829", "code_sizes": 1}, {"nl_num": [3, 2, 2124, 2610, 4135, 4], "code_num": [2], "code": "# in your init method\\nself.Bind(wx.EVT_LISTBOX_DCLICK, self.EvtListBoxDClick, self.mainlist)\\n\\n\\n# the callback\\ndef EvtListBoxDClick(self, event):\\n     self.otherlist.Append(self.mainlist.GetSelection())\\n     self.mainlist.Delete(self.lb1.GetSelection())", "id": "2871762", "code_sizes": 1}, {"nl_num": [3, 2385, 2, 3747, 2119, 2462, 1217, 4], "code_num": [2], "code": "from filebrowser import signals\\n\\ndef pre_upload_callback(sender, **kwargs):\\n    \"\"\"\\n    Receiver function called before an upload starts.\\n    \"\"\"\\n    print \"Pre Upload Callback\"\\n    print \"kwargs:\", kwargs\\n    # your code HERE\\nsignals.filebrowser_pre_upload.connect(pre_upload_callback)", "id": "26191509", "code_sizes": 1}, {"nl_num": [3, 554, 1828, 3004, 169, 1712, 2406, 4505, 3813, 4726, 4179, 2799, 3004, 4], "code_num": [2], "code": "with open(\"path/to/file.txt\",\"r\") as f:\\n    d = {}\\n    for line in f:\\n        content,gene  = line.strip().split()\\n        if d.has_key(gene):\\n            d[gene].append(content)\\n        else:\\n            d[gene] = []\\n            d[gene].append(content)\\n\\n    for key,value in d.iteritems():\\n        f = open(\"path/to/destination/{}.txt\".format(key), \"w\")\\n        for item in value:    \\n            f.write(\"{}\\n\".format(item))\\n        f.close()", "id": "28175045", "code_sizes": 1}, {"nl_num": [3, 4476, 2208, 2610, 188, 4], "code_num": [2], "code": "s = \"\"\"A' B F2 E' B2 A2 C' D2 C D' E2 F\"\"\"\\n\\nL = s.split(' ')\\n\\nfor i in xrange(len(L)):\\n  if len(L[i]) == 1:\\n    L[i] += 'x'\\n\\nstr_out = ' '.join(L)", "id": "2264202", "code_sizes": 1}, {"nl_num": [3, 3809, 528, 568, 4171, 3349, 2610, 990, 540, 2571, 169, 2, 2326, 4], "code_num": [2], "code": "from cStringIO import StringIO\\nimport win32clipboard\\nfrom PIL import Image\\n\\ndef send_to_clipboard(clip_type, data):\\n    win32clipboard.OpenClipboard()\\n    win32clipboard.EmptyClipboard()\\n    win32clipboard.SetClipboardData(clip_type, data)\\n    win32clipboard.CloseClipboard()\\n\\nfilepath = 'image.jpg'\\nimage = Image.open(filepath)\\n\\noutput = StringIO()\\nimage.convert(\"RGB\").save(output, \"BMP\")\\ndata = output.getvalue()[14:]\\noutput.close()\\n\\nsend_to_clipboard(win32clipboard.CF_DIB, data)", "id": "7050448", "code_sizes": 1}, {"nl_num": [3, 3105, 338, 3293, 727, 4714, 568, 1828, 3467, 3004, 540, 188, 4], "code_num": [2], "code": "import MySQLdb\\n\\ndb = MySQLdb.connect(host=\"\", user=\"\", passwd=\"\", db=\"\")\\ncursor = db.cursor()\\nsql = \"\"\"SELECT DISTINCT keywords FROM keywords\"\"\"\\ntweets = open(\"keywords.txt\", \"w\")\\nfor row in cursor.execute(sql):\\n   print>>tweets, row[0]\\ntweets.close()\\ndb.close()", "id": "13834460", "code_sizes": 1}, {"nl_num": [3, 550, 2039, 834, 2058, 4179, 2, 3293, 188, 4350, 4], "code_num": [2], "code": "import httplib\\nconn = httplib.HTTPConnection(\"www.python.org\")\\nconn.request(\"GET\", \"/index.html\")\\nr1 = conn.getresponse()\\nprint r1.status, r1.reason", "id": "10158701", "code_sizes": 1}, {"nl_num": [3, 4624, 1828, 727, 2743, 840, 4395, 1651, 769, 2326, 4], "code_num": [2], "code": "def getConnectionPool():\\n    config = {\\n                \"user\":\"user\", \\n                \"password\":\"password\", \\n                \"host\":\"localhost\", \\n                \"port\":\"12345\", \\n                \"database\":\"database\"\\n              }\\n    pool = mysql.connector.pooling.MySQLConnectionPool(pool_name=\"MyPool\", pool_size=10, **config)\\n    return pool\\n\\ndef getAllObjects():\\n    pool = getConnectionPool()\\n    newObject = NewObject(pool)\\n\\nclass NewObject(object):\\n    def __init__(self, pool):\\n        self.conn = pool.get_connection()\\n        # cursor, etc.", "id": "24398965", "code_sizes": 1}, {"nl_num": [3, 188, 2529, 452, 1605, 350, 2694, 3214, 3963, 4], "code_num": [2], "code": "r'[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?'", "id": "12929308", "code_sizes": 1}, {"nl_num": [3, 188, 1630, 2047, 864, 1785, 327, 4], "code_num": [2], "code": "def get_sensor_output():\\n    #\\n    # Lot of initialisation... forget that part\\n    #\\n\\n    accel_xout = read_word_2c(0x3b)\\n    accel_yout = read_word_2c(0x3d)\\n    accel_zout = read_word_2c(0x3f)\\n    afs_sel = read_word_2c(0x28)\\n    LSB_afs_sel = 16384.0\\n\\n    accel_xout_sc = accel_xout / LSB_afs_sel\\n    accel_yout_sc = accel_yout / LSB_afs_sel\\n    accel_zout_sc = accel_zout / LSB_afs_sel\\n\\n    i2c_output = str(accel_xout_sc) + str(accel_yout_sc) + str(accel_zout_sc)\\n\\n    return i2c_output\\n\\nclass Index:\\n  def GET(self):\\n    return get_sensor_output()", "id": "32684468", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2007, 2, 4704, 3293, 1828, 990, 4350, 2326, 4], "code_num": [2], "code": "p = subprocess.Popen(\"svn info svn://xx.xx.xx.xx/project/trunk | grep \\\"Revision\\\" | awk '{print $2}'\", stdout=subprocess.PIPE, shell=True)\\n(output, err) = p.communicate()\\nprint \"Revision is\", output", "id": "16573474", "code_sizes": 1}, {"nl_num": [3, 2541, 1805, 2, 1217, 3747, 3004, 1598, 2124, 4], "code_num": [2], "code": "content-length-range", "id": "13854229", "code_sizes": 1}, {"nl_num": [3, 389, 2011, 4178, 2943, 1006, 4], "code_num": [2], "code": "self.ax.imshow(arr+are.T,cmap=plt.cm.Greys_r, interpolation='none')", "id": "15310662", "code_sizes": 1}, {"nl_num": [3, 188, 1530, 864, 3178, 3407, 438, 503, 2604, 1935, 2610, 4], "code_num": [2], "code": "re.compile('''WHERE [^.]+ =''')", "id": "6944857", "code_sizes": 1}, {"nl_num": [3, 3195, 2, 540, 990, 3747, 2, 2610, 188, 2326, 4], "code_num": [2], "code": "#!/bin/python \\n\\nfrom crontab import CronTab\\n\\ncron = CronTab(user=True)\\n\\njob = cron.new(command='python3 /opt/my_script.py')\\njob.minute.on(2)\\njob.hour.on(12)\\n\\ncron.write()", "id": "24079330", "code_sizes": 1}, {"nl_num": [3, 188, 864, 1997, 2710, 2610, 869, 2237, 4178, 1189, 4], "code_num": [2], "code": "# open file and parse values\\nwith open('values.csv') as f:                                               \\n    searches = [x.split(',')[1] for x in f.read().splitlines()]\\n\\n# function to check string\\ndef checkString(text):\\n    # iterate over searches and check each one\\n    for search in searches:\\n        if search in text:\\n            return True\\n    return False", "id": "12676416", "code_sizes": 1}, {"nl_num": [3, 4786, 568, 1828, 3843, 3909, 711, 4082, 3358, 4], "code_num": [2], "code": "f = open(file, 'a').write(what)", "id": "34404032", "code_sizes": 1}, {"nl_num": [3, 4133, 2605, 1394, 568, 3182, 1400, 1384, 2, 4179, 1828, 2666, 3867, 711, 2, 568, 2, 1400, 1384, 4], "code_num": [2], "code": "class Eggs(Spam):\\n    @Spam.foo.setter\\n    def foo(self, foo):\\n        self.bar = ' '.join(['Egg\\'s foo:', foo])", "id": "28151149", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 2, 2189, 2019, 1828, 3494, 365, 4], "code_num": [2], "code": "from tkinter import *\\nroot = Tk()\\ncanvas = Canvas(root)\\ncanvas.pack()\\ntime = 60\\ndef tick():\\n    # You have to clear the canvas each time the clock updates \\n    # (otherwise it writes on top of the old time).  Since the\\n    # time is the only thing in the canvas, delete(ALL) works\\n    # perfectly (if it wasn't however, you can delete the id\\n    # that goes with the clock).\\n    canvas.delete(ALL)\\n    # I have to declare time as a global because I'm not using\\n    # a class (otherwise, I could do something like self.time -= 1)\\n    global time\\n    time -= 1\\n    # You can place the time wherever in the canvas\\n    # (I chose 10,10 for the example)\\n    canvas.create_text(10, 10, text=time)\\n    if time == 0:\\n        do_something()\\n    else:\\n        canvas.after(1000, tick)\\ncanvas.after(1, tick)\\nroot.mainloop()", "id": "17538069", "code_sizes": 1}, {"nl_num": [3, 990, 2951, 1176, 4179, 327, 2610, 2746, 4], "code_num": [2], "code": "from collections import Counter\\n\\n\\nd = {1:'Bob',2:'Joe',3:'Bob', 4:'Bill', 5:'Bill'}\\n\\n\\nc = Counter()\\nnew_d = {}\\n\\nfor k in sorted(d.keys()):\\n    name = d[k]\\n    c[name] += 1;  \\n    new_d[k] = [name, c[name]]\\n\\nprint(new_d)  \\n# {1: ['Bob', 1], 2: ['Joe', 1], 3: ['Bob', 2], 4: ['Bill', 1], 5: ['Bill', 2]}", "id": "29270511", "code_sizes": 1}, {"nl_num": [3, 1906, 1828, 2181, 2, 540, 1822, 4], "code_num": [2], "code": "import pygame, sys\\n\\nscreen = pygame.display.set_mode((1024, 640))\\n\\nrunning = True\\n\\n#let's create a surface to hold our ellipse:\\nsurface = pygame.Surface((320, 240))\\n\\nred = (180, 50, 50)\\nsize = (0, 0, 300, 200)\\n\\n#drawing an ellipse onto the \\nellipse = pygame.draw.ellipse(surface, red, size)\\n\\n#new surface variable for clarity (could use our existing though)\\n#we use the pygame.transform module to rotate the original surface by 45?\\nsurface2 = pygame.transform.rotate(surface, 45)\\n\\nwhile running:\\n    screen.fill((255, 250, 200))\\n    for event in pygame.event.get():\\n        if event.type == pygame.QUIT:\\n            pygame.quit()\\n            sys.exit()\\n    screen.blit(surface2, (100, 100))\\n    pygame.display.update()", "id": "23281952", "code_sizes": 1}, {"nl_num": [3, 2, 1397, 1605, 3561, 4178, 2822, 1857, 4], "code_num": [2], "code": "import oauth2 as oauth\\n\\n# Create your consumer with the proper key/secret.\\nconsumer = oauth.Consumer(key=\"your-twitter-consumer-key\", \\n    secret=\"your-twitter-consumer-secret\")\\n\\n# Request token URL for Twitter.\\nrequest_token_url = \"http://twitter.com/oauth/request_token\"\\n\\n# Create our client.\\nclient = oauth.Client(consumer)\\n\\n# The OAuth Client request works just like httplib2 for the most part.\\nresp, content = client.request(request_token_url, \"GET\")\\nprint resp\\nprint content", "id": "5475571", "code_sizes": 1}, {"nl_num": [3, 1810, 1828, 2, 4406, 2583, 3004, 3293, 1828, 3433, 4], "code_num": [2], "code": "import csv\\n\\nsummary = {}\\nwith open('test.csv', 'rb') as data_file:\\n    reader = csv.reader(data_file)\\n    for itemid, value, action in reader:\\n        if itemid not in summary:\\n            summary[itemid] = dict(id=itemid, label=[value], meta={'action': action})\\n        else:\\n            summary[itemid]['label'].append(value)\\n\\ndata = {\"topics\": list(summary.values())}", "id": "30262861", "code_sizes": 1}, {"nl_num": [3, 4137, 990, 2604, 4190, 1828, 1442, 568, 4570, 1400, 4379, 2, 568, 3222, 1828, 3004, 3647, 4667, 1535, 1279, 840, 574, 551, 1828, 2710, 2326, 4], "code_num": [2], "code": "import Tkinter, tkFileDialog\\n\\nroot = Tkinter.Tk()\\n\\nx = tkFileDialog.askopenfilename() # Can pass optional arguments for this...\\n\\nroot.destroy()", "id": "20614289", "code_sizes": 1}, {"nl_num": [3, 4137, 188, 2464, 2633, 4311, 4179, 549, 2063, 3747, 2798, 297, 4], "code_num": [2], "code": "import email.utils\\nmap(email.utils.parseaddr, email_list)", "id": "3972128", "code_sizes": 1}, {"nl_num": [3, 188, 4575, 1406, 4238, 4179, 2206, 1007, 1237, 4], "code_num": [2], "code": "a = []\\nfor q in sorted((set(q) for q in sort), key=len, reverse=True):\\n    if not any(q.issubset(Q) for Q in a):\\n        a.append(q)\\na = [list(q) for q in a] # Back to lists, if you want", "id": "7535889", "code_sizes": 1}, {"nl_num": [3, 4189, 3747, 2, 1827, 2, 223, 2, 2326, 4], "code_num": [2], "code": "fig, ax = plt.subplots()\\ndf.plot(kind='barh', stacked=True, ax=ax)\\nax.set_yticklabels(['A', 'B', 'C', 'D', 'E', 'F'])\\ntime = pd.date_range(start=pd.to_datetime('07:00', format='%H:%M'), end=pd.to_datetime('13:00', format='%H:%M'),freq='H')\\ntime_x = [dt.strftime('%H:%M') for dt in time]\\nax.set_xticklabels(time_x)\\nfig.autofmt_xdate()\\nplt.show()", "id": "27453024", "code_sizes": 1}, {"nl_num": [3, 2, 4756, 438, 483, 1535, 2092, 1828, 1936, 188, 2253, 2326, 4], "code_num": [2], "code": "import tarfile; tarfile.open('Python-3.1.1.tar.bz2').extractall()", "id": "1801286", "code_sizes": 1}, {"nl_num": [3, 188, 864, 3794, 568, 3334, 3055, 2315, 4], "code_num": [2], "code": "result = {k: d2.get(v) for k, v in d1.items()}", "id": "17846545", "code_sizes": 1}, {"nl_num": [3, 748, 3098, 4307, 2464, 1062, 1757, 2, 1828, 2, 1735, 540, 1828, 1584, 3886, 2605, 1007, 451, 250, 551, 549, 399, 2326, 4], "code_num": [2], "code": "foo_bar = bar[i - 3][j + 2]\\nz = foobar(y=i-1, z=k+2)", "id": "10146745", "code_sizes": 1}, {"nl_num": [3, 4493, 1635, 568, 449, 77, 2610, 3767, 4], "code_num": [2], "code": "pyplot.suptitle", "id": "10717104", "code_sizes": 1}, {"nl_num": [3, 474, 1828, 3316, 4092, 2610, 2571, 2326, 4], "code_num": [2], "code": "#!/usr/bin/python\\nfrom PIL import Image\\nimport sys\\n\\nimg = Image.open(sys.argv[1])\\nimg = img.convert(\"RGBA\")\\n\\npixdata = img.load()\\n\\n# Clean the background noise, if color != white, then set to black.\\n\\nfor y in xrange(img.size[1]):\\n    for x in xrange(img.size[0]):\\n        if pixdata[x, y] == (255, 255, 255, 255):\\n            pixdata[x, y] = (0, 0, 0, 255)", "id": "3169384", "code_sizes": 1}, {"nl_num": [3, 236, 262, 2610, 262, 3995, 4], "code_num": [2], "code": "for i in range(1, 256):\\n    name = \"key{}\".format(i)\\n    print globals()[name]", "id": "24478093", "code_sizes": 1}, {"nl_num": [3, 2814, 551, 4392, 169, 4392, 551, 2814, 4], "code_num": [2], "code": "notes = {\\n    1: 'C',\\n    2: 'D',\\n    3: 'E',\\n    4: 'F',\\n    5: 'G',\\n    6: 'A',\\n    7: 'B'\\n}\\n\\n\\nnotes.update({v:k for k,v in notes.iteritems()})\\n\\nprint(notes)\\n{'A': 6, 1: 'C', 2: 'D', 3: 'E', 4: 'F', 5: 'G', 6: 'A', 7: 'B', 'F': 4, 'C': 1, 'G': 5, 'B': 7, 'E': 3, 'D': 2}\\nprint(notes[\"C\"])\\nprint(notes[1])\\n1\\nC", "id": "30802671", "code_sizes": 1}, {"nl_num": [3, 4189, 265, 503, 338, 2429, 3655, 551, 3963, 2326, 4], "code_num": [2], "code": "subset['Month'] = pd.PeriodIndex(subset['Created On'],freq='M').asobject", "id": "13432213", "code_sizes": 1}, {"nl_num": [3, 188, 1650, 864, 2000, 2, 2613, 3138, 4], "code_num": [2], "code": "level = 1 if logging else 0", "id": "12598237", "code_sizes": 1}, {"nl_num": [3, 263, 2, 2, 3747, 3812, 899, 3293, 549, 2317, 568, 1312, 4714, 4], "code_num": [2], "code": "cursor.execute(\"INSERT INTO secondtable VALUES %s\" % str(results))", "id": "28399053", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 2878, 2, 1063, 2464, 4526, 1297, 1828, 223, 1959, 2464, 568, 586, 817, 568, 4649, 1125, 2326, 2238, 188, 3528, 4], "code_num": [2], "code": "import Tkinter as tk\\n\\nclass ButtonEntry(tk.Frame):\\n    def __init__(self,master,ss):\\n        tk.Frame.__init__(self)\\n        self.var=tk.StringVar()\\n        self.var.set(ss)\\n        self.Button=tk.Button(self,text='Button',command=lambda :self.var.set(\"foo!\"))\\n        self.Entry=tk.Entry(self,textvariable=self.var)\\n        self.Button.grid(row=0,column=0)\\n        self.Entry.grid(row=0,column=1)\\n\\n\\nclass App(tk.Frame):\\n    def __init__(self,master=None):\\n        tk.Frame.__init__(self,master)\\n        self.BEs=[]\\n        for i in range(10):\\n            b=ButtonEntry(self,'Button %d'%i)\\n            b.grid(row=i,column=0)\\n            self.BEs.append(b)\\n\\n\\nif __name__ == '__main__':\\n    root=tk.Tk()\\n    f=App(root)\\n    f.grid(row=0,column=0)\\n    root.mainloop()", "id": "10987333", "code_sizes": 1}, {"nl_num": [3, 2, 2, 4179, 1828, 4561, 1105, 3787, 2610, 990, 4], "code_num": [2], "code": "def subt_tree(bnt):\\n    if not isinstance(bnt,tuple):\\n        return bnt\\n    else:\\n        return subt_tree(bnt[0]) - subt_tree(bnt[1])", "id": "29201805", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 3222, 1828, 4032, 4179, 549, 841, 2610, 188, 2326, 4], "code_num": [2], "code": "copy.deepcopy()", "id": "4794244", "code_sizes": 1}, {"nl_num": [3, 3748, 3518, 568, 3909, 927, 2610, 2479, 4018, 4], "code_num": [2], "code": "cat_index = np.searchsorted(categories, A[0])\\nB[A[1], cat_index] = A[2]", "id": "27156758", "code_sizes": 1}, {"nl_num": [3, 2, 1828, 2868, 4179, 3963, 551, 1828, 332, 2610, 188, 4], "code_num": [2], "code": "def neighbors(point):\\n    x, y = point", "id": "13333212", "code_sizes": 1}, {"nl_num": [3, 1592, 253, 2610, 822, 4179, 4347, 3747, 2, 864, 2560, 4347, 4], "code_num": [2], "code": "pytz.FixedOffset(-8*60)", "id": "11322475", "code_sizes": 1}, {"nl_num": [3, 4328, 1828, 2420, 491, 3747, 1865, 2372, 4179, 338, 2249, 568, 4591, 3923, 223, 547, 265, 4], "code_num": [2], "code": "while True:\\n    s.flushInput()\\n    print s.readline()\\n    time.sleep(.5)", "id": "19874623", "code_sizes": 1}, {"nl_num": [3, 4011, 1828, 4238, 4179, 1773, 853, 1828, 4238, 4179, 1437, 2, 990, 4], "code_num": [2], "code": "points= [list(map(int,v.split())) if v.strip().lower() != \"j\" else \"JUMP\" for v in vlist]", "id": "19147033", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 11, 1400, 1598, 4179, 1828, 3610, 2, 2326, 4], "code_num": [2], "code": "biggrasstile = pygame.transform.scale(grasstile, (16, 16))", "id": "10686822", "code_sizes": 1}, {"nl_num": [3, 4189, 3333, 540, 945, 3747, 2088, 4], "code_num": [2], "code": "summed_group.unstack(level=0).plot(kind='bar', subplots=True)", "id": "25386870", "code_sizes": 1}, {"nl_num": [3, 990, 2640, 528, 3293, 2229, 4], "code_num": [2], "code": "with open('pic1.jpg', 'wb') as handle:\\n        response = requests.get(pic_url, stream=True)\\n\\n        if not response.ok:\\n            print response\\n\\n        for block in response.iter_content(1024):\\n            if not block:\\n                break\\n\\n            handle.write(block)", "id": "30229231", "code_sizes": 1}, {"nl_num": [3, 3460, 169, 1383, 899, 2610, 4429, 4], "code_num": [2], "code": "for links in tmp:\\n    get  =  links.get('href').find(\"torrent_download\")\\n    if get != -1:\\n        print(links.get('href'),  get)", "id": "30203245", "code_sizes": 1}, {"nl_num": [3, 2, 188, 108, 818, 4171, 1897, 2, 4], "code_num": [2], "code": "[build]\\ncompiler = mingw32\\n\\n[build_ext]\\ncompiler = mingw32\\n\\n[build_clib]\\ncompiler = mingw32", "id": "8194188", "code_sizes": 1}, {"nl_num": [3, 990, 1127, 1838, 2, 1007, 2, 1007, 1268, 3630, 693, 2610, 1828, 2630, 4], "code_num": [2], "code": "import time\\n\\ndef pigsl():\\n    print()\\n    print(\"You said the following:\")\\n    time.sleep(1)\\n    sentenc = input(\"Please enter your sentence: \")\\n    print(sentenc)\\n    print()\\n    print(\"Your new sentence is:\")\\n    senten = news(sentenc)\\n    time.sleep(1)\\n    print(senten)\\n\\ndef news(c):\\n    new=''                         #instead of new=c, just start with an empty string        \\n    vowels = ('a', 'e', 'i', 'o', 'u')\\n    for x in c:                    #iterate through the sentence\\n        if x in vowels:            #if the character is a vowel\\n            new+=(x+'eg')          #append the vowel + 'eg' to the new empty string\\n        else:                      #otherwise\\n            new+=x                 #just append the consonant to the new string\\n    return new\\n\\npigsl()", "id": "29583342", "code_sizes": 1}, {"nl_num": [3, 1820, 169, 2905, 480, 3747, 2849, 4505, 2610, 188, 4], "code_num": [2], "code": "with open(filename, \"rb\") as data:\\n    header = data.read(24)\\n    text = data.read().decode('utf-16-le')", "id": "31251807", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2007, 601, 2542, 3254, 3522, 3293, 1531, 2610, 3806, 2326, 4], "code_num": [2], "code": "from views.celerytasks.mytask1 import my_mega_task_number_one\\nmy_mega_task_number_one.delay()", "id": "20050807", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1352, 1828, 1242, 2610, 81, 1654, 2326, 4], "code_num": [2], "code": "import matplotlib.pyplot as plt\\nplt.figure(figsize=(16, 10), dpi=100)\\n# ... your code\\nplt.savefig(filename)", "id": "10879064", "code_sizes": 1}, {"nl_num": [3, 69, 568, 2, 568, 1545, 1828, 2710, 2610, 3843, 4238, 2464, 4178, 3279, 3747, 4563, 3747, 4102, 4], "code_num": [2], "code": "p = db.StringProperty(choices=set([\"aa\", \"bb\", \"cc\"]))", "id": "3004265", "code_sizes": 1}, {"nl_num": [3, 2385, 1254, 223, 611, 2778, 2238, 2, 3528, 3293, 4714, 2794, 1297, 2238, 2, 3528, 2098, 4], "code_num": [2], "code": "Transition.objects.values('instance').annotate(Max('id'))", "id": "33239211", "code_sizes": 1}, {"nl_num": [3, 236, 188, 4181, 177, 4710, 568, 2633, 1828, 4238, 4179, 4505, 4], "code_num": [2], "code": "def fileList():\\n    matches = []\\n    for root, dirnames, filenames in os.walk(source):\\n        for filename in filenames:\\n            if filename.endswith(('.mov', '.MOV', '.avi', '.mpg')):\\n                matches.append(os.path.join(root, filename))\\n    return matches", "id": "8625991", "code_sizes": 1}, {"nl_num": [3, 1372, 2949, 2983, 3426, 3435, 4474, 4], "code_num": [2], "code": "import win32com.client\\nfrom win32com.client import Dispatch\\n\\nsession = Dispatch('MAPI.session')\\nsession.Logon ('Outlook') # this is profile name\\ninbox = session.Inbox\\nmessages = session.Inbox.Messages \\nmessage = inbox.Messages.GetFirst()\\n\\nif(message):\\n    attachments = message.Attachments\\n    for i in range(attachments.Count):\\n        attachment = attachments.Item(i + 1) # yep, indexes are 1 based\\n\\n        filename = \"c:\\\\tmpfile\" + str(i)\\n        attachment.WriteToFile(FileName=filename)\\nsession.Logoff()", "id": "440356", "code_sizes": 1}, {"nl_num": [3, 1315, 4678, 1942, 4179, 1432, 3886, 1217, 568, 1236, 2894, 1708, 188, 4], "code_num": [2], "code": "\"max-age=31536000\"", "id": "32897924", "code_sizes": 1}, {"nl_num": [3, 2, 1421, 3531, 3747, 1274, 4], "code_num": [2], "code": "class Task(ndb.Model):\\n    name = ndb.StringProperty(required=True)\\n    project = ndb.KeyProperty(kind='Project', repeated=True)\\n    description = ndb.TextProperty(required=True)\\n    task_state = ndb.StringProperty(required=True)", "id": "24579338", "code_sizes": 1}, {"nl_num": [3, 3105, 1828, 346, 4018, 551, 549, 528, 2238, 2, 3528, 4], "code_num": [2], "code": "import Image\\nimport numpy as np\\n\\ndata = np.random.random((100,100))\\n\\n#Rescale to 0-255 and convert to uint8\\nrescaled = (255.0 / data.max() * (data - data.min())).astype(np.uint8)\\n\\nim = Image.fromarray(rescaled)\\nim.save('test.png')", "id": "6915106", "code_sizes": 1}, {"nl_num": [3, 3990, 2, 568, 2878, 3976, 3293, 1828, 2715, 1039, 4], "code_num": [2], "code": "html = r\"\"\"<div id=\"karte_data_aktuelle_temperatur___CHA\" class=\"karte_text_hidden\">\\n    <span style=\"font-size: 10px;\">9.0</span>\\n    <br/>\\n</div>\"\"\"\\n\\n\\nfrom bs4 import BeautifulSoup\\n\\nsoup = BeautifulSoup(html)\\nelem = soup.find('div')\\n\\nprint elem['id'], 'is the id'\\nprint elem.text, 'is the value' #9.0", "id": "15998653", "code_sizes": 1}, {"nl_num": [3, 188, 864, 3049, 1828, 177, 41, 3004, 853, 4585, 169, 4370, 1400, 3167, 2827, 338, 2714, 2610, 2473, 4179, 1400, 4585, 4], "code_num": [2], "code": "# returns a df grouped by ArtistID and Tag\\ntag_counts = artists_tags.groupby(['ArtistID', 'Tag'])\\n# sum up tag counts and sort in descending order\\ntag_counts = tag_counts.sum().sort('Count', ascending=False).reset_index()\\n# keep only the top ranking tag per artist\\ntop_tags = tag_counts.groupby('ArtistID').first()\\n# top_tags is now a dataframe which contains the top tag for every artist\\n# We can simply lookup the top tag for Nirvana via it's index:\\ntop_tags.ix['5b11f4ce-a62d-471e-81fc-a69a8278c7da'][0]\\n# 'Grunge'", "id": "22740666", "code_sizes": 1}, {"nl_num": [3, 1822, 3747, 2155, 3957, 2776, 4], "code_num": [2], "code": "e = pygame.event.poll()\\nif e == pygame.MOUSEBUTTONDOWN:\\n    pos = e.pos\\n    # where \"screen\" is your variable holding the screen surface\\n    color = screen.get_at((pos))", "id": "4500493", "code_sizes": 1}, {"nl_num": [3, 4238, 3794, 4179, 1828, 382, 223, 1959, 4], "code_num": [2], "code": "with open('tabdelim.txt') as rows:\\n    lstcmp = [item for row in rows for item in row.strip().split('\\t')]\\n    print('\\n'.join(lstcmp))", "id": "31397219", "code_sizes": 1}, {"nl_num": [3, 3793, 2604, 1569, 2977, 2610, 1400, 1442, 1605, 483, 62, 568, 4], "code_num": [2], "code": "re.match(r'^[A-Za-z0-9_-]+$', 'gfds9 41.-=,434')", "id": "9805525", "code_sizes": 1}, {"nl_num": [3, 1671, 1442, 568, 1545, 1828, 2583, 3004, 568, 1828, 2853, 2326, 4], "code_num": [2], "code": "# embed.ly keys which map 1:1 with your database record keys\\nRESPONSE_KEYS = set([\\n    'provider_url', 'description', 'title', 'author_name', 'thumbnail_url',\\n    'thumbnail_width', 'thumbnail_height', 'author_url'\\n    ])\\n\\n# mapping from embed.ly's key name to your database record key\\nKEY_MAP = {\\n    'url': 'content_url',\\n    'width': 'width_px',\\n    'height': 'height_px',\\n    'type': 'url_type'\\n    }\\n\\nurl_return = get_oembed(content_url)\\nrecord = ContentQueue(submitted_url=content_url)\\nrecord.version = 1\\n\\n# iterate over the response keys and add them to the record\\nfor key_name in url_return.iterkeys():\\n    key = key_name if key_name in RESPONSE_KEYS else KEY_MAP.get(key_name)\\n    if key:\\n        record[key] = url_return[key_name]", "id": "5722305", "code_sizes": 1}, {"nl_num": [3, 888, 2701, 2108, 4], "code_num": [2], "code": "while not gameExit:\r\\n    for event in pygame.event.get():\r\\n        if event.type == pygame.QUIT:\r\\n            gameExit = True\r\\n        if event.type == pygame.KEYDOWN:\r\\n            if event.key == pygame.K_LEFT:\r\\n                lead_x -= 10\r\\n\r\\n            if event.key == pygame.K_RIGHT:\r\\n                lead_x +=10\r\\n\r\\n    gameDisplay.fill(white)\r\\n    pygame.draw.rect(gameDisplay, black,[lead_x,lead_y,10,100])\r\\n    pygame.display.update()", "id": "29460523", "code_sizes": 1}, {"nl_num": [3, 3001, 593, 223, 1949, 2206, 4179, 578, 433, 3963, 4], "code_num": [2], "code": "def eratosthenes2(n):\\n    multiples = set()\\n    for i in range(2, n+1):\\n        if i not in multiples:\\n            yield i\\n            multiples.update(range(i*i, n+1, i))\\n\\nprint(list(eratosthenes2(100)))", "id": "33395903", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3068, 1237, 2610, 1828, 990, 4640, 4], "code_num": [2], "code": "from itertools import combinations\\n\\nAllusers={\\n    'User1': {'Film1': 'Vote1', 'Film2': 'Vote2'},\\n    'User2': {'Film1': 'Vote1', 'Film2': 'Vote2'}\\n}\\n\\nfor comb in combinations(Allusers, 2):\\n    if Allusers[comb[0]] == Allusers[comb[1]]:\\n        print '{0} is same with {1}'.format(comb[0], comb[1])", "id": "12138338", "code_sizes": 1}, {"nl_num": [3, 3387, 1828, 941, 3004, 2610, 990, 3932, 941, 3004, 1812, 177, 3696, 3004, 2610, 2605, 2464, 169, 3664, 4740, 3869, 1623, 4], "code_num": [2], "code": "z = zipfile.ZipFile(file_name)\\nz.extractall()", "id": "20000266", "code_sizes": 1}, {"nl_num": [3, 326, 2583, 327, 2610, 188, 4], "code_num": [2], "code": "uv = api_result['data']['40332895']['user_values']\\nfor doc in uv:\\n    print uv[doc]", "id": "21845741", "code_sizes": 1}, {"nl_num": [3, 2385, 864, 1067, 1273, 3886, 2, 4238, 568, 862, 4640, 4], "code_num": [2], "code": "from collections import OrderedDict\\n\\nanyname = OrderedDict()", "id": "19684687", "code_sizes": 1}, {"nl_num": [3, 188, 1557, 2464, 2217, 1828, 4238, 4179, 350, 4], "code_num": [2], "code": "baseMatch = re.compile('123A[A-Z]{6}')\\nbaseMatch.findall('123AABCDEFxyz123AAABCDExyz')\\n['123AABCDEF', '123AAABCDE']", "id": "16943561", "code_sizes": 1}, {"nl_num": [3, 4154, 188, 2817, 3383, 3902, 4], "code_num": [2], "code": "if __name__ == '__main__':\\n    root = Tk()\\n    root.title(\"My Database\")\\n    root.geometry(\"500x400\")\\n    app = start_window(root)\\n    root.mainloop()", "id": "33637292", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4356, 664, 1915, 2610, 3198, 1374, 2610, 655, 2326, 4], "code_num": [2], "code": "class TrackView(View):\\n    def get(self, request):\\n        try:\\n            track,_ = Track.objects.get_or_create(domain = request.GET['domain'])\\n            track.url_name = request.GET['url']\\n            track.title = request.GET['title']\\n            track.ip = request.GET['ip']\\n            track.referrer = request.GET['referrer']\\n            track.save()\\n            return HttpResponse(status=200) \\n        except KeyError:\\n            return HttpResponse(status=400)", "id": "33680184", "code_sizes": 1}, {"nl_num": [3, 1176, 4179, 1400, 4047, 327, 2610, 1828, 4640, 990, 4], "code_num": [2], "code": "sum(len(val) for val in dictionary.itervalues())", "id": "7972674", "code_sizes": 1}, {"nl_num": [3, 69, 568, 3202, 2206, 2610, 990, 2326, 4], "code_num": [2], "code": "file_content[:10] + [var1] + rss_xml[11:]", "id": "2066213", "code_sizes": 1}, {"nl_num": [3, 188, 864, 550, 568, 1704, 1670, 1566, 1249, 3293, 1312, 955, 2326, 4], "code_num": [2], "code": "#!/usr/bin/python\\n\\nimport sys\\nimport subprocess\\n\\np = subprocess.Popen(\"\"\"python -c '\\nfrom time import sleep ; import sys\\nfor i in range(3):\\n    sleep(1)\\n    print \"Hello\", i\\n    sys.stdout.flush()\\n'\"\"\", shell = True, stdout = subprocess.PIPE)\\n\\nwhile True:\\n    inline = p.stdout.readline()\\n    if not inline:\\n        break\\n    sys.stdout.write(inline)\\n    sys.stdout.flush()\\n\\nprint \"Done\"", "id": "6413803", "code_sizes": 1}, {"nl_num": [3, 4624, 1007, 1711, 746, 144, 1598, 2610, 647, 4], "code_num": [2], "code": "from kivy.app import App\\nfrom kivy.uix.button import Button\\nfrom kivy.uix.boxlayout import BoxLayout\\nfrom kivy.uix.floatlayout import FloatLayout\\n\\nclass TestApp(App):\\n    def build(self):\\n        root = FloatLayout()\\n        layout = BoxLayout(orientation='vertical', size=(200,200), size_hint=(None, None))\\n        btn1 = Button(text='Hello', size=(50,50), size_hint=(None, None))\\n        btn2 = Button(text='World', size=(50,50), size_hint=(None, None))\\n        layout.add_widget(btn1)\\n        layout.add_widget(btn2)\\n        root.add_widget(layout)\\n        return root\\nTestApp().run()", "id": "12248620", "code_sizes": 1}, {"nl_num": [3, 2139, 4498, 3293, 3433, 551, 4640, 169, 166, 3886, 3247, 4403, 1400, 2943, 3747, 188, 4], "code_num": [2], "code": "yourdict = dict()\\n\\nwith open(file) as f:\\n   filedata = f.read().splitlines()\\n   for line in filedata:\\n       linedata = line.split()\\n       if linedata[0] not in yourdict:\\n           yourdict[linedata[0]] = []\\n       yourdict[linedata[0]].append(int(linedata[3]))\\n       yourdict[linedata[0]].append(int(linedata[4]))\\n\\nfor key in yourdict:\\n    yourdict[key] = [min(yourdict[key]), max(yourdict[key])]", "id": "30852759", "code_sizes": 1}, {"nl_num": [3, 188, 864, 159, 1422, 2858, 1442, 4179, 4370, 1828, 4238, 4179, 4684, 2610, 1828, 3467, 2326, 4], "code_num": [2], "code": "words = {\"this\": 0, \"that\": 0}\\nfor w in text.split():\\n  if w in words:\\n    words[w] += 1", "id": "3372332", "code_sizes": 1}, {"nl_num": [3, 2, 1976, 3293, 113, 540, 990, 4], "code_num": [2], "code": "import struct\\n\\nsig = 'hi32s4s32s256shhiii36x'\\nsize = struct.calcsize(sig)\\nfile = open('/var/run/utmp', 'rb')\\nchunk = file.read(size)\\nentrys = []\\nwhile len(chunk) == size:\\n    entry = struct.unpack(chunk)\\n    entrys.append()\\n    chunk = file.read(size)", "id": "19756530", "code_sizes": 1}, {"nl_num": [3, 188, 2808, 864, 864, 2732, 540, 96, 4025, 961, 4], "code_num": [2], "code": "# Balancing act:  We can't afford a pure busy loop, so we\\n# have to sleep; but if we sleep the whole timeout time,\\n# we'll be unresponsive.  The scheme here sleeps very\\n# little at first, longer as time goes on, but never longer\\n# than 20 times per second (or the timeout time remaining).", "id": "21779183", "code_sizes": 1}, {"nl_num": [3, 1780, 338, 568, 2583, 3087, 3157, 4178, 4119, 897, 4179, 2583, 3087, 4], "code_num": [2], "code": "for route, origincoord in izip(results, origincoords):\\n    if route[\"status\"] == \"OK\":\\n        route['routes'][0]['legs'][0][u'_sent_origin'] = origincoord\\n    else:\\n        route[u'_sent_origin'] = origincoord", "id": "30622431", "code_sizes": 1}, {"nl_num": [3, 188, 864, 3990, 1956, 1959, 1637, 568, 4314, 2710, 711, 1400, 4352, 2510, 4], "code_num": [2], "code": "def remove_leading_zeros(s):\\n    i = 0\\n    while i < len(s):\\n        if s[i] == '0':\\n            # do nothing\\n            i += 1\\n        else:\\n            return s[i:]", "id": "17139346", "code_sizes": 1}, {"nl_num": [3, 990, 2728, 2658, 540, 2035, 3322, 568, 3506, 2658, 4], "code_num": [2], "code": "xml.etree.ElementTree", "id": "10405111", "code_sizes": 1}, {"nl_num": [3, 1447, 3747, 2, 4458, 169, 4585, 540, 4059, 4], "code_num": [2], "code": "from sqlalchemy import *\\nfrom sqlalchemy.orm import *\\nfrom sqlalchemy.ext.declarative import declarative_base, DeferredReflection\\n\\nBase = declarative_base(cls=DeferredReflection)\\n\\n\\ne = create_engine(\"sqlite://\", echo=True)\\ne.execute(\"\"\"\\n    create table \"user table\" (\\n            \"id col\" integer primary key,\\n            \"data col\" varchar(30)\\n    )\\n\"\"\")\\n\\nfrom sqlalchemy import event\\n\\n@event.listens_for(Table, \"column_reflect\")\\ndef reflect_col(inspector, table, column_info):\\n    column_info['key'] = column_info['name'].replace(' ', '_')\\n\\nclass User(Base):\\n    __tablename__ = \"user table\"\\n\\nBase.prepare(e)\\n\\ns = Session(e)\\nprint s.query(User).filter(User.data_col == \"some data\")", "id": "19215759", "code_sizes": 1}, {"nl_num": [3, 4196, 3825, 528, 568, 717, 2822, 1857, 4], "code_num": [2], "code": "class TestBlobModel(ndb.Model):\\n    img = ndb.BlobProperty()\\n\\nclass Test(webapp2.RequestHandler):\\n    def get(self):\\n        image_id = self.request.get('id')\\n        if image_id:\\n            m = TestBlobModel.get_by_id(long(image_id))\\n            self.response.headers['content-type'] = 'image/png'\\n            self.response.out.write(m.img)\\n        else:\\n            self.response.out.write(\"\"\"\\n                <form enctype=\"multipart/form-data\" action=\"/test\" method=\"POST\">\\n                <input type=\"file\" name=\"image\" />\\n                <input type=\"submit\" />\\n                </form>\"\"\")\\n\\n    def post(self):\\n        img_data = self.request.get('image')\\n        m = TestBlobModel()\\n        m.img = img_data\\n        m.put()\\n\\n        html = '<a href=\"/test?id=%s\">View your image</a>' % m.key.id()\\n        self.response.out.write(html)", "id": "23560403", "code_sizes": 1}, {"nl_num": [3, 4220, 889, 2610, 1576, 3932, 3803, 1623, 4403, 2, 2610, 188, 4], "code_num": [2], "code": "import random\\n\\nDOMAIN_LOW = 0\\nDOMAIN_HIGH = 100\\n\\nelements = list()\\nnumbers_generated = 0\\n\\nwhile True:\\n    numbers_generated += 1\\n    random_num = random.randint(DOMAIN_LOW, DOMAIN_HIGH)\\n\\n    if random_num not in elements:\\n        elements.append(random_num)\\n\\n    if len(elements) == DOMAIN_HIGH - DOMAIN_LOW:\\n        break\\nprint(elements)\\nprint(numbers_generated)", "id": "28134308", "code_sizes": 1}, {"nl_num": [3, 544, 733, 540, 4429, 4], "code_num": [2], "code": "soup = BeautifulSoup(doc)\\ntags = soup.fetch('td')\\nfor tag in tags:\\n    if tag.contents[0] and tag.contents[0].strip() == 'Preferred Name':\\n        return tag", "id": "15148459", "code_sizes": 1}, {"nl_num": [3, 566, 568, 2, 338, 540, 632, 2755, 2610, 990, 4], "code_num": [2], "code": "elem = soup.find('input',{'id':'short-link-input'})\\nprint elem.get('value')", "id": "21514833", "code_sizes": 1}, {"nl_num": [3, 3942, 4691, 2375, 3293, 1828, 2544, 990, 4], "code_num": [2], "code": "var = \"module\" \\nmodule = __import__(\"modules.{0}\".format(var), globals(), locals(), [], -1)", "id": "15791191", "code_sizes": 1}, {"nl_num": [3, 2, 188, 746, 4179, 2013, 1708, 3140, 1165, 3946, 4], "code_num": [2], "code": "import array\\n\\nBITS_PER_ITEM = array.array('I').itemsize * 8\\n\\ndef make_bit_array(num_bits, initially=0):\\n    num_items = (num_bits + BITS_PER_ITEM - 1) // BITS_PER_ITEM\\n    return array.array('I', [initially]) * num_items\\n\\ndef set_bit(bit_array, offset):\\n    item_index = offset // BITS_PER_ITEM\\n    bit_index = offset % BITS_PER_ITEM\\n    bit_array[item_index] |= 1 << bit_index\\n\\ndef clear_bit(bit_array, offset):\\n    item_index = offset // BITS_PER_ITEM\\n    bit_index = offset % BITS_PER_ITEM\\n    bit_array[item_index] &= ~(1 << bit_index)\\n\\ndef get_bit(bit_array, offset):\\n    item_index = offset // BITS_PER_ITEM\\n    bit_index = offset % BITS_PER_ITEM\\n    return (bit_array[item_index] >> bit_index) & 1", "id": "4132207", "code_sizes": 1}, {"nl_num": [3, 4133, 4190, 1828, 3098, 1442, 568, 1352, 4256, 2124, 3886, 2, 1721, 335, 540, 32, 2326, 4], "code_num": [10], "code": "setup.py", "id": "5328691", "code_sizes": 1}, {"nl_num": [3, 280, 1956, 2403, 3090, 1828, 495, 4], "code_num": [2], "code": "def emails(self):\\n    mail_body = None\\n    mails_folder = os.listdir(self.path_to_mails_directory)\\n    for mail in mails_folder:\\n        if mail.startswith(\"!\"):\\n            pass\\n        else:\\n            with open(self.path_to_mails_directory+\"/\"+mail) as an_e_mail:\\n                mail_body = an_e_mail.read()\\n            yield mail, mail_body", "id": "33530425", "code_sizes": 1}, {"nl_num": [3, 238, 1647, 3518, 223, 1828, 4491, 4179, 327, 568, 3222, 3874, 2776, 4], "code_num": [2], "code": "def rgb(minimum, maximum, value):\\n    minimum, maximum = float(minimum), float(maximum)\\n    ratio = 2 * (value-minimum) / (maximum - minimum)\\n    b = int(max(0, 255*(1 - ratio)))\\n    r = int(max(0, 255*(ratio - 1)))\\n    g = 255 - b - r\\n    return r, g, b", "id": "20792445", "code_sizes": 1}, {"nl_num": [3, 69, 568, 2640, 2, 528, 1708, 1822, 568, 4224, 4], "code_num": [2], "code": "pygame.image.save(img, \"image.jpg\")", "id": "20502237", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3509, 655, 3212, 2252, 2, 3295, 4667, 209, 2556, 568, 2605, 1007, 451, 4785, 4139, 2326, 4], "code_num": [2], "code": "class FilterValue(models.Model):\\n    name = models.CharField('Name', max_length=255)\\n    filter = models.ForeignKey(Filter)\\n\\n    class Meta:\\n        unique_together = ((\"name\", \"filter\"),)", "id": "11031097", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2, 3119, 338, 3293, 4591, 2610, 990, 4], "code_num": [2], "code": "try:\\n    s.read(s.inWaiting())\\nexcept serial.serialutil.SerialException:\\n    pass # or maybe print s.inWaiting() to identify out how many chars the driver thinks there is", "id": "12738055", "code_sizes": 1}, {"nl_num": [3, 2049, 1661, 3055, 4585, 169, 4049, 3055, 4807, 4585, 4], "code_num": [2], "code": "df['sales'] = df['price'] * df['quantity']", "id": "17280651", "code_sizes": 1}, {"nl_num": [3, 4328, 3703, 4780, 3293, 3079, 3004, 4], "code_num": [2], "code": "import csv\\nwith open('some.csv', 'rb') as f:\\n    reader = csv.reader(f, delimiter=';')\\n    for row in reader:\\n        print row[0]", "id": "5741518", "code_sizes": 1}, {"nl_num": [3, 3089, 2604, 1828, 4198, 1442, 4179, 3790, 1400, 327, 4179, 949, 188, 2991, 853, 1828, 3316, 4640, 2326, 4], "code_num": [2], "code": "from collections import defaultdict\\nall_classes = defaultdict(set)\\nfor group in groups_and_classes.values():\\n    for c, vals in group.iteritems():\\n        all_classes[c].update(set(vals))", "id": "2433027", "code_sizes": 1}, {"nl_num": [3, 188, 4110, 2464, 69, 568, 2640, 2287, 3087, 2489, 2326, 4], "code_num": [2], "code": "fp = webdriver.FirefoxProfile()\\n\\nfp.set_preference(\"browser.download.folderList\",2)\\nfp.set_preference(\"browser.download.manager.showWhenStarting\",False)\\nfp.set_preference(\"browser.download.dir\",getcwd())\\nfp.set_preference(\"browser.helperApps.neverAsk.saveToDisk\",\"text/csv\")\\n\\nbrowser = webdriver.Firefox(firefox_profile=fp)", "id": "15819476", "code_sizes": 1}, {"nl_num": [3, 3748, 898, 1170, 568, 593, 2610, 990, 4], "code_num": [2], "code": "class Foo(object):                                                          \\n  def __init__(self):                                                 \\n    def f(a,self,b):                                            \\n      print a+b                                           \\n    self.g = functools.partial(f,1, self) # <= passing `self` also.\\n\\nx = Foo()\\nx.g(2)", "id": "3803517", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2878, 1700, 2714, 1176, 2610, 990, 2326, 4], "code_num": [2], "code": "import os\\n\\nlen(os.listdir('path/desktop'))", "id": "27663875", "code_sizes": 1}, {"nl_num": [3, 3748, 3317, 1125, 568, 1374, 4], "code_num": [2], "code": "import requests\\n\\nurl = 'https://itunes.apple.com/WebObjects/MZStore.woa/wa/viewMultiRoom?cc=us&fcId=363484947'\\nheaders = {\\n    'X-Apple-Store-Front': '143441-1,12',\\n    'X-Apple-Tz': '3600',\\n}\\n\\nrequests.get(url, headers=headers)", "id": "32131515", "code_sizes": 1}, {"nl_num": [3, 2, 2, 864, 3989, 1828, 4691, 853, 1828, 2, 4], "code_num": [2], "code": "# For backwards compatability\\nfrom project.topic1.module1 import AwesomeClass", "id": "33695386", "code_sizes": 1}, {"nl_num": [3, 188, 4640, 540, 1180, 4], "code_num": [2], "code": "#d = (('name-1', 100), ('name-2',90), ('name-3',80), ('name-1',80))\\nnames = \"name1,name2,name3,name1\".split(\",\")\\nsalaries = map(int,\"100,90,80,80\".split(\",\"))\\nd = zip(names,salaries)\\nprint max(d,key=lambda x:names.count(x[0])*1000+x[1])\\n\\n#('name-1', 100)\\nprint sorted(d,key=lambda x:names.count(x[0])*1000+x[1],reverse=True)\\n[('name-1', 100), ('name-1', 80), ('name-2', 90), ('name-3', 80)]", "id": "12594209", "code_sizes": 1}, {"nl_num": [3, 3333, 28, 4400, 4178, 2, 540, 4047, 101, 2610, 2049, 4], "code_num": [2], "code": "import pandas as pd\\nimport matplotlib.pyplot as plt\\ndf = pd.DataFrame([[4,6,1,3], [5,7,5,2]], columns = ['mean1', 'mean2', 'std1', 'std2'], index=['A', 'B'])\\nprint(df)\\n\\ndf[['mean1', 'mean2']].plot(kind='bar', yerr=df[['std1', 'std2']].values.T, alpha = 0.5,error_kw=dict(ecolor='k'))\\nplt.show()", "id": "23144784", "code_sizes": 1}, {"nl_num": [3, 69, 568, 179, 4615, 3909, 3337, 1708, 2, 2610, 990, 4], "code_num": [2], "code": "f.write(tabulate(([k] + v for k, v in first_table.iteritems())))", "id": "30609716", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1818, 1828, 3008, 2019, 1828, 3932, 2, 655, 1623, 2684, 2326, 4], "code_num": [2], "code": "required=False", "id": "10015583", "code_sizes": 1}, {"nl_num": [3, 1822, 1906, 1828, 2727, 1351, 103, 2218, 2464, 3594, 1637, 2, 2326, 4], "code_num": [2], "code": "pygame.draw.rect(self.image, [200,200,200],pygame.Rect([0,0],size), 5)", "id": "28271655", "code_sizes": 1}, {"nl_num": [3, 432, 1491, 540, 4583, 664, 2449, 568, 1251, 4], "code_num": [2], "code": "urlpatterns = patterns('',\\n    (r'^books/', include('books.urls')),\\n\\n    (r'^admin/', include(admin.site.urls)),\\n\\n\\n    (r'^static/(?P<path>.*)$', 'django.views.static.serve', {'document_root': settings.MEDIA_ROOT}),\\n    (r'^', include('search.urls')),\\n)", "id": "5374904", "code_sizes": 1}, {"nl_num": [3, 2367, 3620, 552, 3843, 1901, 2610, 3667, 4], "code_num": [2], "code": "f=open(\"file\")\\nfor line in f:\\n    if len(line)==81:\\n       n=f.next()\\n       line=line.rstrip()+n\\n    print line.rstrip()\\nf.close()", "id": "2468460", "code_sizes": 1}, {"nl_num": [3, 697, 2, 3747, 2, 1207, 2610, 1761, 4], "code_num": [2], "code": "from mongoengine import *\\n\\nclass User(Document):\\n    name = StringField()\\n    page = ReferenceField('Page')\\n\\nclass Page(Document):\\n    content = StringField()\\n    user = ReferenceField(User)", "id": "3885487", "code_sizes": 1}, {"nl_num": [3, 2476, 2591, 864, 1569, 4220, 2947, 2357, 1924, 2710, 1383, 4], "code_num": [2], "code": "cursor.execute(\"\"\"SELECT name FROM %s.customer WHERE firm_id=%%s\"\"\" % schema, each['id'])", "id": "21524482", "code_sizes": 1}, {"nl_num": [3, 188, 2711, 1125, 568, 2007, 2, 2464, 703, 1216, 3293, 3841, 4], "code_num": [2], "code": "import subprocess,os\\nstartupinfo = None\\nif os.platform == 'win32':\\n    startupinfo = subprocess.STARTUPINFO()\\n    startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW\\nVAL = subprocess.check_output(['adb.exe', 'version'], shell=False, startupinfo=startupinfo).decode()", "id": "22636420", "code_sizes": 1}, {"nl_num": [3, 1016, 3492, 4351, 568, 1828, 143, 3627, 1828, 3316, 2, 4], "code_num": [2], "code": "def get_context_data(self, **kwargs):\\n    articles = Article.objects.order_by(\"-published_date\")[:5]\\n    videos = Video.objects.order_by(\"-published_date\")[:5]\\n    items = list(articles) + list(videos)\\n    items.sort(key=lambda i: i.published_date, reverse=True)\\n    return {\"items\": items[:5]}", "id": "26557357", "code_sizes": 1}, {"nl_num": [3, 529, 4225, 2019, 1828, 547, 2516, 2610, 188, 4], "code_num": [2], "code": "import numpy as np\\nfrom itertools import product\\nfrom scipy.spatial import Delaunay\\n\\neps = 3.  # choose value, which filters out some points\\nA = np.array([[1,2],[3,4]])\\nB = np.array([[5,6],[7,8],[9,2]])\\n\\n# triangulate points:\\npts = np.vstack([A, B])\\ntri = Delaunay(pts)\\n\\n# extract all edges:\\nsi_idx = [[0, 1], [0, 2], [1, 2]]  # edge indeces in tri.simplices\\nedges = [si[i] for si, i in product(tri.simplices, si_idx)]\\ndist_edges = [np.linalg.norm(tri.points[ii[0]] - tri.points[ii[1]])\\n              for ii in edges]  # calculate distances\\n\\n# list points which are closer than eps:\\nfor ee, d in zip(edges, dist_edges):\\n    if d < eps:\\n        print(\"|p[{}] - p[{}]| = {}\".format(ee[0], ee[1], d))", "id": "29321712", "code_sizes": 1}, {"nl_num": [3, 2367, 696, 3412, 3293, 1828, 3467, 2610, 990, 4], "code_num": [2], "code": "def parse_documentation(filename):\\n    filename=open(filename, \"r\") # open file\\n    lines = filename.read(); # read all the lines in the file to a list named as \"lines\"\\n    invalidsymbols=[\"`\",\"~\",\"!\", \"@\",\"#\",\"$\"]\\n    for line in lines: # for each line in lines\\n        for x in invalidsymbols: # loop through the list of invalid symbols\\n            if x in line: # if the invalid symbols is in the line\\n                print(line) # print out the line\\n                print(x) # and also print out the invalid symbol you encountered in that line\\n                print(line.replace(x, \"\")) # print out a line with invalid symbol removed", "id": "20105875", "code_sizes": 1}, {"nl_num": [3, 2385, 1422, 188, 3747, 2778, 2238, 3528, 4179, 4238, 4021, 1828, 3746, 4], "code_num": [2], "code": "def get_spans(angle):\\n    spans = Spans.objects.values_list('span', flat=True).filter(\\n        max_roof_angle=angle,\\n    )\\n    max_span = max(spans)\\n    return max_span", "id": "13408874", "code_sizes": 1}, {"nl_num": [3, 2817, 2360, 4640, 2252, 853, 3467, 26, 2326, 4], "code_num": [2], "code": "from tkinter import *\\nx = []\\nroot = Tk()\\ndata = {'parakeet': ['fly', 'bird'], 'dog': 'animal', 'cat': 'feline'}\\nfor key in data.keys():\\n    x.append(key)\\n\\nLabel(root, text = \"Enter your name\").grid(row=0,ipadx = 10,ipady = 10)\\nLabel(root, text = x ).grid(row=1,ipadx = 10,ipady = 50)\\n\\nmainloop()", "id": "33921423", "code_sizes": 1}, {"nl_num": [3, 566, 568, 1217, 2983, 2610, 188, 4], "code_num": [2], "code": "from django.conf import settings\\nfrom django.conf.urls.static import static\\n\\nurlpatterns = patterns('',\\n    # ... the rest of your URLconf goes here ...\\n) + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)", "id": "18826868", "code_sizes": 1}, {"nl_num": [3, 4328, 2610, 1828, 3433, 3004, 4419, 825, 2605, 2610, 188, 4], "code_num": [2], "code": "def __cmp__(gem, other):\\n    if (gem.value / gem.carot) < (other.value / other.carot):\\n        return -1\\n    elif (gem.value / gem.carot) > (other.value / other.carot): \\n        return 1\\n    else:\\n        return 0", "id": "5643281", "code_sizes": 1}, {"nl_num": [3, 1127, 568, 2, 2238, 3528, 2, 3822, 1892, 2326, 4], "code_num": [2], "code": "sys.exit()", "id": "33598088", "code_sizes": 1}, {"nl_num": [3, 3089, 2613, 1400, 2881, 3747, 3183, 1843, 4115, 3004, 1812, 1828, 1566, 3747, 2881, 3747, 3183, 2637, 2326, 4], "code_num": [2], "code": "unicode_html = myfile.read().decode('utf-8', 'ignore')\\nsoup = BeautifulSoup (unicode_html)", "id": "8912980", "code_sizes": 1}, {"nl_num": [3, 2385, 2464, 2523, 2464, 621, 2464, 2960, 864, 2, 2, 223, 2, 3747, 818, 3747, 2, 4], "code_num": [2], "code": "INSERT_INTO_HOMEFEED_BATCH = 10000\\n\\n@shared_task\\ndef insert_into_homefeed(photo_id, user_id, index=0):\\n    # Grab the list of all follower IDs from Redis for user_id.\\n    r_server = redis.Redis(connection_pool=pool)\\n\\n    range_limit = index + INSERT_INTO_HOMEFEED_BATCH - 1 # adjust for zero-index\\n\\n    followers_list_batch = r_server.lrange(\"followers:%s\" % (user_id), index, range_limit)\\n\\n    if not followers_list_batch:\\n        return # zero followers or no more batches\\n\\n    # Now for each follower_id in followers_list_batch, find their homefeed key \\n    # in Redis and insert the photo_id into that homefeed list.\\n    for follower_id in followers_list:\\n        homefeed_list = r_server.lpush(\"homefeed:%s\" % (follower_id), photo_id)\\n\\n    insert_into_homefeed.delay(photo_id, user_id, range_limit + 1)", "id": "21007096", "code_sizes": 1}, {"nl_num": [3, 2737, 1442, 568, 1652, 338, 3293, 4047, 4505, 853, 549, 4018, 4], "code_num": [2], "code": "# Get folder path containing text files\\nfile_list = glob.glob(source_dir + '/*.TXT')\\ndata = []\\nfor file_path in file_list:\\n    data.append(\\n        np.genfromtxt(file_path, delimiter=',', skip_header=3, skip_footer=18))\\n# now you can access it outside the \"for loop...\"\\nfor d in data:\\n    print d", "id": "13627576", "code_sizes": 1}, {"nl_num": [3, 1592, 3090, 1828, 3467, 3004, 540, 2, 3821, 3932, 188, 1623, 4], "code_num": [2, 2], "code": "#!/usr/bin/env python\\n# -*- coding: utf-8 -*-   \\nimport re\\n\\nwordcount={}\\n\\nf = open(\"verbatim2.txt\", \"r\")\\nregex = r'\\b\\w{4,}\\b'\\n#regex = re.compile(r'[A-Z]\\p{L}+\\s*')\\n\\nfor line in f:\\n    words = re.findall(regex, line.decode('utf8'), re.UNICODE)\\n    for word in words:\\n        print word\\n        if word not in wordcount:\\n            wordcount[word] = 1\\n        else:\\n            for k,v in wordcount.items():\\n                wordcount[word] += 1\\nprint wordcount", "id": "31373531", "code_sizes": 2}, {"nl_num": [3, 550, 568, 1869, 1828, 2, 853, 3553, 2094, 1501, 2326, 4], "code_num": [2], "code": "class ExampleDelegate(QtGui.QStyledItemDelegate):\\n    def createEditor(self, parent, option, index):\\n        line_edit = QtGui.QLineEdit(parent)\\n        line_edit.setMaxLength(3)\\n        return line_edit\\n\\n\\nclass Example(QtGui.QDialog):\\n    def __init__(self,):\\n        super(Example, self).__init__()\\n        self.build_ui()\\n\\n    def build_ui(self):       \\n        self.table_model = QtGui.QStandardItemModel(4, 2)\\n        self.delegate = ExampleDelegate()\\n        self.table_view = QtGui.QTableView()\\n        self.table_view.setItemDelegateForColumn(0, self.delegate)\\n        self.table_view.setModel(self.table_model)\\n\\n        self.layout.addWidget(self.table_view)\\n        self.layout = QtGui.QGridLayout()\\n        self.setLayout(self.layout)", "id": "33916466", "code_sizes": 1}, {"nl_num": [3, 188, 864, 3397, 3518, 3293, 2, 2, 4], "code_num": [2], "code": "def asynchronous():\\n    threads = [Greenlet.spawn(fetch, i) for i in range(10)]\\n    result = gevent.joinall(threads)\\n    print [thread.value for thread in threads]", "id": "20579740", "code_sizes": 1}, {"nl_num": [3, 2, 4179, 1828, 694, 3964, 4], "code_num": [2], "code": "import numpy as np\\nwith open(filename) as f:\\n    for line in f:\\n        a=np.array(line.split(),dtype=int)\\n        print(a.std(),a.mean(),np.median(a))  #standard-deviation, mean, median", "id": "11689287", "code_sizes": 1}, {"nl_num": [3, 2039, 3178, 1400, 1378, 3147, 1422, 692, 3055, 3963, 2610, 1828, 4780, 4179, 3004, 2326, 4], "code_num": [2], "code": "import sys\\nlog_file = open(\"newc.txt\",\"a\")\\nthis_no, prev_no = 0, 0\\n\\nwith open(\"newfileinput.txt\",'r') as f:\\n    for line in f:\\n        row = line.split()\\n        this_no = int(row[1])\\n        log_file.write(line.replace(str(this_no), str(this_no - prev_no)))\\n        prev_no = this_no\\n\\nlog_file.close()", "id": "18780229", "code_sizes": 1}, {"nl_num": [3, 2367, 2018, 3293, 2, 4], "code_num": [2], "code": "cursor = QTextCursor(doc.findBlockByLineNumber(0))\\ncursor.select(QTextCursor.BlockUnderCursor)\\ncursor.deleteChar()\\ncursor.deleteChar()", "id": "16996679", "code_sizes": 1}, {"nl_num": [3, 4142, 4115, 3270, 540, 1475, 1422, 2855, 2610, 990, 4], "code_num": [2], "code": "b = ''\\nwhile 1:\\n    r = f.read()\\n    if r == '':break\\n    b += r", "id": "15551480", "code_sizes": 1}, {"nl_num": [3, 2, 2, 438, 568, 3178, 2, 4], "code_num": [2], "code": "sage.misc.package.install_package(\"pil\", force=True)", "id": "7605281", "code_sizes": 1}, {"nl_num": [3, 188, 3234, 3747, 2214, 1670, 1422, 2, 568, 3055, 1178, 4], "code_num": [2], "code": "subprocess.PIPE", "id": "1258863", "code_sizes": 1}, {"nl_num": [3, 2, 2610, 4575, 2238, 3528, 593, 4179, 990, 4], "code_num": [2], "code": "listobject.c", "id": "14236172", "code_sizes": 1}, {"nl_num": [3, 990, 3222, 1550, 2544, 2991, 4], "code_num": [2], "code": "import os\\nimport shutil\\n\\ndef doit():\\n    shutil.rmtree('c:/pythontest', ignore_errors=True)\\n    os.mkdir('c:/pythontest')\\n    os.chdir('c:/pythontest')\\n\\n    for i in range(0,3):\\n        fileName = 'folder%d' % i\\n        print fileName\\n        os.mkdir(fileName)\\n        os.chdir(fileName)\\n        for j in range(0,3):\\n            fileName = 'folder%d_%d' % (i,j)\\n            print fileName\\n            os.mkdir(fileName)\\n            os.chdir(fileName)\\n            for k in range(0,3):\\n                try:\\n                    with open('file%d_%d_%d.txt' % (i,j,k), 'w'):\\n                        pass\\n                except IOError:\\n                    pass\\n            os.chdir('..')\\n        os.chdir('..')", "id": "27792008", "code_sizes": 1}, {"nl_num": [3, 3148, 3747, 256, 2, 223, 2, 4], "code_num": [2], "code": "self.sender()", "id": "32407368", "code_sizes": 1}, {"nl_num": [3, 100, 2049, 338, 1074, 540, 1580, 3690, 1580, 338, 4], "code_num": [2], "code": "df = pd.DataFrame({'value': [1, 2, 15, 3, 7, 1, 3, 8, 5, 3, 1, 1, 8, 5, 19]},\\n              index=pd.DatetimeIndex(['2000-01-01', '2000-03-01', '2000-06-01', '2000-09-01',\\n                                      '2000-12-01', '2001-01-01', '2001-03-01', '2001-06-01',\\n                                      '2001-09-01', '2001-12-01', '2002-01-01', '2002-03-01',\\n                                      '2002-06-01', '2002-09-01', '2002-12-01']))\\n\\n\\npv = pd.pivot_table(df, index=df.index.month, columns=df.index.year,\\n                    values='value', aggfunc='sum')\\npv\\n#     2000  2001  2002\\n# 1      1     1     1\\n# 3      2     3     1\\n# 6     15     8     8\\n# 9      3     5     5\\n# 12     7     3    19\\n\\npv.plot()", "id": "30379789", "code_sizes": 1}, {"nl_num": [3, 3191, 3247, 3293, 2049, 177, 1095, 4], "code_num": [2], "code": "import pandas as pd\\nimport numpy as np\\n\\nkeys1 = [1,2,3,4]\\nkeys2 = [3,4,5,6]\\ndata1 = np.reshape(range(20),[4,5])\\ndata2 = np.reshape(range(20,40),[4,5])\\n\\ndf1 = pd.DataFrame(data1,index=keys1)\\ndf2 = pd.DataFrame(data2,index=keys2)\\n\\ndf1[-(df1.index.isin(df2.index))]", "id": "28952021", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3972, 4238, 1812, 1406, 889, 2326, 4], "code_num": [2], "code": "def addToList(self, str_to_add):\\n    if str_to_add not in self.list_of_strings:\\n        self.list_of_strings.append(str_to_add)", "id": "4743409", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2878, 1400, 1378, 1651, 3055, 2910, 2610, 596, 2464, 3604, 169, 2979, 177, 2326, 4], "code_num": [2], "code": "import datetime\\ndata1 = datetime.datetime.now()\\ndata2 = datetime.datetime.now()\\n\\ndays, seconds = diff.days, diff.seconds\\nhours = days * 24 + seconds // 3600\\nminutes = (seconds % 3600) // 60\\nseconds = seconds % 60\\n\\nprint hours,minutes,seconds", "id": "24217641", "code_sizes": 1}, {"nl_num": [3, 236, 1482, 1594, 551, 1750, 327, 4], "code_num": [2], "code": "from functools import wraps\\nfrom inspect import getcallargs\\n\\n\\ndef decorator(f):\\n    @wraps(f)\\n    def new(**kwargs):\\n        # filter only those vars, that are in the list of function's named args\\n        from_globals = {arg: globals()[arg] for arg in getcallargs(f)}\\n        # overwrite them with user supplied kwargs\\n        from_globals.update(kwargs)\\n        f(**from_gobals)\\n\\n    return new\\n\\n\\n@decorator\\ndef f(a=None, b=None, c=None):\\n    print a, b, c\\n\\n\\na = 1\\nb = 2\\nc = 3\\n\\nf(a=2, b=4) # 2 4 3", "id": "20241303", "code_sizes": 1}, {"nl_num": [3, 645, 864, 1185, 1663, 2793, 3348, 4], "code_num": [2], "code": "CoInitialised()", "id": "20293736", "code_sizes": 1}, {"nl_num": [3, 4375, 1912, 2, 4], "code_num": [2], "code": "def alter_list_data_to_serialize(self, request, data):\\n    #call external procedure here\\n    return data", "id": "16915678", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2933, 1828, 990, 1422, 4652, 4350, 2326, 2238, 568, 3644, 2, 3528, 4], "code_num": [2], "code": "import subprocess\\npassword = 'cGFzc3dvcmQ='.decode('base64')\\npath = \"C:\\Users\\blabla.tc\"\\nsubprocess.Popen(['truectypt','/a','/p',password,'/q','/e','/v',path]).communicate()", "id": "23969683", "code_sizes": 1}, {"nl_num": [3, 188, 1566, 2, 3047, 3467, 2610, 2710, 4], "code_num": [2], "code": "def test(dynamic, filename):\\n    return dynamic[:3] in filename", "id": "9167516", "code_sizes": 1}, {"nl_num": [3, 442, 3645, 4585, 3293, 2473, 3004, 568, 1312, 1708, 188, 4], "code_num": [2], "code": "with open('data.txt', 'r') as fin:\\n    with open('data2.txt', 'w') as fout:\\n        # Header\\n        fout.write(fin.readline())\\n        fout.write(fin.readline())\\n        # Columns\\n        for l in fin:\\n            cols = l.split()\\n            fout.write(\"%s  % f  % f\\n\" % (cols[0], float(cols[3]), float(cols[2])))", "id": "30716836", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 4570, 188, 568, 2103, 1828, 2710, 568, 1828, 694, 2613, 2605, 209, 1910, 2610, 2605, 551, 4680, 992, 2326, 4], "code_num": [2], "code": "import locale\\nlocale.setlocale( locale.LC_ALL, 'en_US.UTF-8' ) \\nlocale.atoi('1,000,000')\\n# 1000000\\nlocale.atof('1,000,000.53')\\n# 1000000.53", "id": "1779288", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2484, 547, 3518, 3293, 3402, 4179, 3467, 4505, 4], "code_num": [2], "code": "regex = '(.*):( *)(.*)\\n'", "id": "4611522", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4789, 2229, 1915, 568, 2, 862, 2, 2, 4], "code_num": [2], "code": "from repoze.what.plugins.pylonshq import ControllerProtector\\n\\nallow_only = All(not_anonymous(msg=l_(u'You must be logged on')),\\n                     my_custom_predicate(msg=l_(u'something wrong')))\\n\\n@ControllerProtector(allow_only)\\nclass MyController(BaseController):\\n\\n    def index(self, **kw):\\n        return dict()", "id": "3064576", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2616, 2496, 990, 4507, 2, 4], "code_num": [2], "code": "if sys.platform == \"win32\":\\n    base = \"Win32GUI\"", "id": "26352638", "code_sizes": 1}, {"nl_num": [3, 188, 2, 3055, 336, 1773, 4], "code_num": [2], "code": "from datetime import datetime\\n\\nstart_date = 'Sun Sep 16 16:05:15 +0000 2012'\\nend_date = 'Sun Sep 17 23:55:20 +0000 2012'\\n\\n\\ndef __datetime(date_str):\\n    return datetime.strptime(date_str, '%a %b %d %H:%M:%S +0000 %Y')\\n\\nstart = __datetime(start_date)\\nend = __datetime(end_date)\\n\\ndelta = end - start\\nprint delta  # prints: 1 day, 7:50:05\\nprint delta.total_seconds()  # prints: 114605.0", "id": "13293009", "code_sizes": 1}, {"nl_num": [3, 1727, 1828, 3212, 2252, 3008, 3886, 1708, 327, 169, 4186, 4], "code_num": [2], "code": "top_donors_month = Donation.objects.values('donator__first_name').annotate(Sum('amount')).order_by('-amount__sum').filter(datafilter)\\ntop_donors_all = Donation.objects.values('donator__first_name').annotate(Sum('amount')).order_by('-amount__sum')", "id": "22801040", "code_sizes": 1}, {"nl_num": [3, 3704, 3119, 3036, 568, 1828, 953, 1708, 4156, 4], "code_num": [2], "code": "def test_print_titles():\\n    wb = Workbook()\\n    ws1 = wb.create_sheet()\\n    ws2 = wb.create_sheet()\\n    ws1.add_print_title(2)\\n    ws2.add_print_title(3, rows_or_cols='cols')\\n\\n    def mystr(nr):\\n        return ','.join(['%s!%s' % (sheet.title, name) for sheet, name in nr.destinations])\\n\\n    actual_named_ranges = set([(nr.name, nr.scope, mystr(nr)) for nr in wb.get_named_ranges()])\\n    expected_named_ranges = set([('_xlnm.Print_Titles', ws1, 'Sheet1!$1:$2'),\\n                                 ('_xlnm.Print_Titles', ws2, 'Sheet2!$A:$C')])\\n    assert(actual_named_ranges == expected_named_ranges)", "id": "28204188", "code_sizes": 1}, {"nl_num": [3, 3748, 3433, 568, 2, 3747, 2081, 2583, 1708, 188, 4], "code_num": [2], "code": "import csv, simplejson, decimal, codecs\\n\\ndata = open(\"in.csv\")\\nreader = csv.DictReader(data, delimiter=\",\", quotechar='\"')\\n\\nwith codecs.open(\"out.json\", \"w\", encoding=\"utf-8\") as out:\\n   for r in reader:\\n      for k, v in r.items():\\n         # make sure nulls are generated\\n         if not v:\\n            r[k] = None\\n         # parse and generate decimal arrays\\n         elif k == \"loc\":\\n            r[k] = [decimal.Decimal(n) for n in v.strip(\"[]\").split(\",\")]\\n         # generate a number\\n         elif k == \"geonameid\":\\n            r[k] = int(v)\\n      out.write(simplejson.dumps(r, ensure_ascii=False, use_decimal=True)+\"\\n\")", "id": "13478222", "code_sizes": 1}, {"nl_num": [3, 2677, 177, 2728, 2, 1712, 540, 104, 4], "code_num": [2], "code": "Bio.Blast.NCBIXML", "id": "21314423", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2692, 1828, 1743, 2610, 188, 4], "code_num": [2], "code": "response.delete_cookie('cookie_name', domain=\"cookie_domain\")\\nreturn response", "id": "29456194", "code_sizes": 1}, {"nl_num": [3, 1595, 2582, 2529, 3022, 4], "code_num": [2, 2, 2], "code": "re.sub(r'(\\s?\\(\\w+\\))|(s?(Jr.|Sr.))|(\".+\"\\s?)', '', name)", "id": "29356552", "code_sizes": 3}, {"nl_num": [3, 2, 1822, 2360, 4], "code_num": [2], "code": "pygame.display.iconify()", "id": "10466590", "code_sizes": 1}, {"nl_num": [3, 550, 568, 361, 4220, 1400, 2974, 2464, 2, 2464, 3998, 2577, 4], "code_num": [2], "code": "from scrapy.contrib.linkextractors.lxmlhtml import LxmlParserLinkExtractor\\n\\ntags = ['img', 'embed', 'link', 'script']\\nattrs = ['src', 'href']\\nextractor = LxmlParserLinkExtractor(lambda x: x in tags, lambda x: x in attrs)\\nresource_urls = [l.url for l in extractor.extract_links(response)]", "id": "29836634", "code_sizes": 1}, {"nl_num": [3, 2990, 664, 1637, 1566, 3747, 469, 2637, 4], "code_num": [2], "code": "urllib.unquote", "id": "13857253", "code_sizes": 1}, {"nl_num": [3, 69, 1352, 2291, 4769, 4031, 3004, 2169, 604, 990, 4], "code_num": [2], "code": "from subprocess import call\\ncall([\"pdfdetach\", \"-saveall\", \"file.pdf\"])", "id": "26054500", "code_sizes": 1}, {"nl_num": [3, 1503, 1828, 2710, 2610, 1828, 2, 2710, 4], "code_num": [2], "code": "def check(sub, full):\\n    full_list = list(full)\\n    for char in sub:\\n        if char in full_list:\\n            full_list.remove(char)\\n        else:\\n            return False\\n    return True", "id": "26075342", "code_sizes": 1}, {"nl_num": [3, 1398, 619, 1608, 389, 338, 3299, 2610, 2049, 4], "code_num": [2], "code": "frames = [df1, df2, df3]\\nresult = pd.concat(frames)", "id": "34072671", "code_sizes": 1}, {"nl_num": [3, 188, 864, 2, 3746, 4179, 3963, 169, 2206, 4179, 1773, 4], "code_num": [2], "code": "b = [(a, b, c) for (a, b), c in zip(splitKeys, data)]", "id": "18347798", "code_sizes": 1}, {"nl_num": [3, 2135, 864, 69, 568, 3191, 889, 3293, 1828, 2, 2326, 4], "code_num": [2], "code": "widget = QWidget()    \\nlayout = QVBoxLayout()\\n\\nbtn = QPushButton(\"To be removed\")\\nlayout.addWidget(btn)\\nwidget.setLayout(layout)\\n\\n# later\\nbtn.setParent(None)", "id": "5889705", "code_sizes": 1}, {"nl_num": [3, 2385, 3747, 1727, 2, 3293, 4688, 4], "code_num": [2], "code": "from gravatar.templatetags.gravatar import _get_gravatar_id, gravatar_for_email", "id": "10412916", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2692, 4220, 4498, 2610, 990, 3494, 2, 2326, 4], "code_num": [2], "code": "for row in treeview.get_children():\\n    treeview.delete(row)", "id": "21940624", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 3191, 4220, 889, 2977, 549, 866, 2610, 990, 1708, 1544, 2326, 4], "code_num": [2], "code": "for elem in xml.xpath( '//foo' ) :\\n      elem.getparent().remove(elem)", "id": "3359151", "code_sizes": 1}, {"nl_num": [3, 188, 2677, 3645, 1021, 1422, 4491, 4179, 3467, 3004, 4], "code_num": [2], "code": "t = []\\nfor l in line:\\n    if 'tickme' in l:\\n        # Start a new bactch after saving the previous batch \\n        if t: batches.apend(t)\\n        t = [l.strip()]\\n    else:\\n        if len(l.strip()) > 1: t.append(l.strip())", "id": "24704172", "code_sizes": 1}, {"nl_num": [3, 701, 749, 3690, 302, 2610, 1828, 93, 2587, 4018, 4], "code_num": [2], "code": "np.linalg", "id": "27025788", "code_sizes": 1}, {"nl_num": [3, 2301, 2, 568, 1828, 4790, 990, 4], "code_num": [2], "code": "cost + cost2 + h(v2)", "id": "14990359", "code_sizes": 1}, {"nl_num": [3, 3206, 1096, 2223, 1605, 483, 1535, 4757, 4047, 3247, 552, 4531, 568, 2878, 3674, 2637, 568, 976, 2, 4], "code_num": [2], "code": "keys = pygame.key.get_pressed()\\n\\nif keys[K_LEFT]:\\n    self.char_x += 10\\n\\nif keys[K_RIGHT]:\\n    self.char_x -= 10\\n\\nif keys[K_UP]:\\n    self.char_y -= 10\\n\\nif keys[K_DOWN]:\\n    self.char_y += 10", "id": "12556535", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2103, 4220, 2947, 568, 2710, 2610, 2710, 1383, 4], "code_num": [2], "code": "import urllib2, json\\n\\ndef get_stock_quote(ticker_symbol):\\n    if isinstance(ticker_symbol, (list, tuple)):\\n        ticker_symbol = ','.join(ticker_symbol)\\n    url = 'http://finance.google.com/finance/info?q=%s' % ticker_symbol\\n    lines = urllib2.urlopen(url).read().splitlines()\\n    #print lines\\n    return json.loads('[%s]' % ''.join([x for x in lines if x not in ('// [', ']')]))\\n\\nif __name__ == '__main__':\\n    symbols = ('Goog',) \\n    symbols2 = ('Goog','MSFT')\\n    quotes = get_stock_quote(symbols2)\\n    for quote in quotes:\\n        print 'ticker: %s' % quote['t'],  'current price: %s' % quote['l_cur'], 'last trade: %s' % quote['ltt']\\n        print quote['t'],  quote['l'], quote['ltt']", "id": "7769419", "code_sizes": 1}, {"nl_num": [3, 3508, 177, 2, 4562, 568, 85, 3339, 2898, 3383, 3772, 3346, 2605, 1828, 1598, 4], "code_num": [2], "code": "import wx\\napp = wx.PySimpleApp()\\nframe = wx.Frame(None, -1, 'Test')\\nsizer = wx.BoxSizer(wx.VERTICAL)\\npanel = wx.Panel(frame, -1, size=(100,100), style=wx.BORDER_RAISED)\\nsizer.Add(panel)\\nframe.SetSizer(sizer)\\nframe.Show()\\napp.MainLoop()", "id": "1040290", "code_sizes": 1}, {"nl_num": [3, 69, 568, 1545, 1326, 853, 1828, 3004, 2610, 990, 438, 2473, 3143, 2, 1828, 262, 169, 4807, 2629, 1828, 2360, 3138, 2326, 4], "code_num": [2], "code": "f.write(\"value of a is: %d\" % (a))", "id": "23868627", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4570, 1659, 223, 1828, 2, 2464, 2385, 4], "code_num": [2], "code": "def __unicode__(self):\\n    return unicode(self.cliente)", "id": "23205161", "code_sizes": 1}, {"nl_num": [3, 1967, 69, 2, 3561, 188, 4], "code_num": [2], "code": "inner_one = a[4] # a[4] = 0\\ninner_two = a[inner_one] # a[0] = 1\\nresult = c[inner_two] # c[1] = 2", "id": "33225888", "code_sizes": 1}, {"nl_num": [3, 1780, 338, 853, 549, 2, 4238, 4], "code_num": [2], "code": "l = [x*x for x in range(0, 10)]", "id": "13340398", "code_sizes": 1}, {"nl_num": [3, 2, 3090, 472, 123, 568, 1519, 1400, 3518, 4179, 3703, 1782, 2326, 4], "code_num": [2], "code": "def increase_tree_values(node, delta):\\n    \"\"\" Increases/decreases the value of all nodes in the tree by the value 'delta'\\n    \"\"\"\\n\\n    # increase the current node's value\\n    node.value += delta\\n\\n    # recursively call function on left child, if it exists\\n    if node.left_child:\\n        increase_tree_values(node.left_child, delta)\\n\\n    # recursively call function on right child, if it exists\\n    if node.right_child:\\n        increase_tree_values(node.right_child, delta)\\n\\n\\n\\n# presuming you have some binary tree called 'tree' already constructed\\n# increase all nodes in 'tree' by 2\\nincrease_tree_values(tree, 2)", "id": "15287077", "code_sizes": 1}, {"nl_num": [3, 4078, 1176, 2610, 4189, 4], "code_num": [2], "code": "data.groupby(['post_product_list','cust_visid','date_time']).size()", "id": "34328161", "code_sizes": 1}, {"nl_num": [3, 188, 864, 748, 1959, 1708, 927, 4597, 4179, 382, 1959, 223, 389, 4780, 1712, 4], "code_num": [2], "code": "from itertools import izip\\n\\namount = []\\ntotal = 0\\n\\nmonth = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\\nidx = 0\\nwhile(idx < len(month)):\\n    am = int(raw_input(\"Enter amount of rainfall each month from Jan to Dec sequently: \"))\\n    amount.append(am)\\n    total+=am\\n    idx+=1\\n\\nprint \"\\nRainfall Statistics\"\\nprint \"Month\\t\\tTotal Rainfall\"\\nprint \"-----\\t\\t---------------\"\\n\\nfor each_month, month_amount in izip(month, amount):\\n    print each_month, \"\\t\\t\", month_amount\\n\\nprint \"\\nTotal rainfall: \", total\\n\\naverage = total/12\\nprint \"\\nAverage rainfall: \",average", "id": "19739801", "code_sizes": 1}, {"nl_num": [3, 4328, 869, 1297, 869, 3293, 1828, 1936, 3004, 2610, 990, 4], "code_num": [2], "code": "for name in root.namelist():\\n    if name.find(\"debug\") >= 0:\\n        for line in root.read(name).split(\"\\n\"):\\n            if line.find(\"BROKER_LOGON\") >= 0:\\n                print line", "id": "6428864", "code_sizes": 1}, {"nl_num": [3, 2803, 3759, 3995, 495, 2610, 188, 4], "code_num": [2], "code": "# create the dict and save it to a file\\nd={\\n'part1':[\\n    'Ae',\\n    'Di',\\n    'Mo',\\n    'Fam',],\\n'part2':[\\n    'dar',\\n    'kil',\\n    'glar',\\n    'tres',],\\n}\\n\\nimport pickle\\nf=open('syllables','w')\\npickle.dump(d,f)\\nf.close()\\n\\n\\n# read the dict back in from the file\\nf1=open('syllables','r')\\nsd=pickle.load(f1)\\nf1.close()\\n\\nimport random\\nfirst_part=sd['part1'][random.randint(0,len(sd['part1'])-1)]\\nsecond_part=sd['part2'][random.randint(0,len(sd['part2'])-1)]\\n\\nprint '%s%s'%(first_part,second_part)", "id": "5731670", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2, 2, 3293, 2473, 3867, 4667, 899, 568, 2, 2, 3293, 660, 2898, 3867, 2610, 2135, 4], "code_num": [2], "code": "#!/usr/bin/env python\\n#-*- coding:utf-8 -*-\\n\\nfrom PyQt4 import QtCore, QtGui\\n\\nclass myThread(QtCore.QThread):\\n    threadSignal = QtCore.pyqtSignal(str)\\n\\n    def __init__(self, parent=None):\\n        super(myThread, self).__init__(parent)\\n\\n    def run(self):\\n        while True:\\n            if True:\\n                self.threadSignal.emit('Yes')\\n\\n            else:\\n                self.threadSignal.emit('No')\\n\\n            break\\n\\nclass myMainClass(QtCore.QObject):\\n    mainSignal = QtCore.pyqtSignal(str)\\n\\n    def __init__(self, parent=None):\\n        super(myMainClass, self).__init__(parent)\\n\\n        testInstance = myThread(self)\\n        testInstance.threadSignal.connect(self.mainSignal.emit)\\n        testInstance.start()\\n\\ndef signalcalled(s):\\n    print s\\n\\nif __name__ == \"__main__\":\\n    import  sys\\n\\n    app = QtGui.QApplication(sys.argv)\\n    main = myMainClass()\\n    main.mainSignal.connect(signalcalled)\\n    sys.exit(app.exec_())", "id": "13898767", "code_sizes": 1}, {"nl_num": [3, 1158, 3703, 881, 2610, 1828, 3514, 3747, 869, 2710, 4149, 1584, 169, 353, 4035, 353, 3803, 2464, 69, 2326, 4], "code_num": [2], "code": "add2 = ''.join(chr(ord(c) + 2) if c not in \"\\n\\r \" else c for c in text)", "id": "2726688", "code_sizes": 1}, {"nl_num": [3, 3055, 4182, 619, 180, 2610, 1828, 655, 2725, 1268, 1400, 262, 4], "code_num": [2], "code": "objectList = [['John Smith'], ['Jim Jones'], ['Bill White']]", "id": "7509025", "code_sizes": 1}, {"nl_num": [3, 454, 1976, 1007, 451, 2083, 1422, 2320, 2369, 568, 1110, 1007, 451, 4524, 2610, 188, 1422, 2385, 4], "code_num": [2], "code": "intersection_set = set(list_a).intersection(list_b)", "id": "5137126", "code_sizes": 1}, {"nl_num": [3, 550, 568, 483, 703, 2200, 2610, 1828, 2, 3293, 1171, 2326, 4], "code_num": [2], "code": "widget = QtGui.QWidget()\\nhint = widget.sizeHint()\\nif hint.isValid():\\n    widget.setMinimumSize(hint)", "id": "10155560", "code_sizes": 1}, {"nl_num": [3, 188, 2640, 4062, 2610, 1828, 223, 1959, 223, 1828, 2320, 2735, 4], "code_num": [2], "code": "import sys\\nimport tweepy\\n\\n## OAuth keys go here.\\n\\nauth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)\\nauth.set_access_token(ACCESS_KEY, ACCESS_SECRET)\\napi = tweepy.API(auth)\\n\\nprinted_ids = []\\n\\ndef ask_bot():\\n    old_id = 0\\n    for tweet in api.mentions():\\n        if tweet.id not in printed_ids:\\n            print \"@%s: %s\" % (tweet.author.screen_name, tweet.text)\\n            printed_ids.append(tweet.id)\\n        else:\\n            pass", "id": "8949852", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 3222, 1828, 3215, 4638, 2326, 4], "code_num": [2], "code": "class InstancesList(object): \\n    def __new__(cls, *args, **kw):\\n        if not hasattr(cls, 'instances'):\\n            cls.instances = []\\n        return super(InstancesList, cls).__new__(cls, *args, **kw)\\n\\n    def __init__(self):\\n        self.index = len(type(self).instances)\\n        type(self).instances.append(self)\\n\\nclass Foo(InstancesList):\\n    def __init__(self, arg1, arg2):\\n        super(Foo, self).__init__()\\n        # Foo-specific initialization", "id": "15836263", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1945, 2466, 2, 2587, 249, 2326, 4], "code_num": [2], "code": "c = b.copy()\\nc[...,0] += a", "id": "8638156", "code_sizes": 1}, {"nl_num": [3, 1734, 2, 568, 2385, 2, 1460, 2326, 4], "code_num": [2], "code": "request = self.factory.get(reverse('home'), HTTP_USER_AGENT='Mozilla/5.0')", "id": "17539254", "code_sizes": 1}, {"nl_num": [3, 3083, 927, 4633, 4179, 4491, 223, 3759, 2, 4714, 4], "code_num": [2], "code": "table[i].append(randint(0,n-1))", "id": "29632538", "code_sizes": 1}, {"nl_num": [3, 4137, 188, 69, 1535, 483, 38, 1828, 3518, 2610, 1828, 3467, 3004, 540, 1828, 2406, 2382, 4256, 4179, 1605, 3518, 1708, 1828, 1170, 2326, 4], "code_num": [2], "code": "def update_score(new_score, file_name=\"save.txt\"):\\n    with open(file_name,'r+') as saved_file:\\n        existing_score = int(saved_file.read())\\n    if new_score > existing_score:\\n        # replace existing score\\n        with open(file_name,'w') as saved_file:\\n            saved_file.write(str(new_score))", "id": "27945151", "code_sizes": 1}, {"nl_num": [3, 3733, 1828, 3004, 223, 1773, 3293, 1828, 18, 3004, 4], "code_num": [2], "code": "set1=set(line[:6] for line in open('file1.txt'))\\nset2=set(line[:6] for line in open('file2.txt'))\\nnot_found = set1 - set2\\nif not_found:\\n    print \"Some keys not found: \" + ', '.join(not_found)", "id": "2016006", "code_sizes": 1}, {"nl_num": [3, 188, 2058, 568, 4115, 3004, 4], "code_num": [2], "code": "with open(\"/tmp/myfile.html\", \"w\") as my_file:\\n  my_file.write(\"<html><body><table>\")\\n  for x in range(5):\\n    my_file.write(\"<tr><td>%d</td></tr>\" % x)\\n  my_file.write(\"</table></body></html>\")", "id": "16461534", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 703, 188, 1007, 451, 3782, 2238, 389, 3528, 3293, 328, 1828, 1057, 4], "code_num": [2], "code": "import urllib2\\n\\n#redirect_handler = urllib2.HTTPRedirectHandler()\\n\\nclass MyHTTPRedirectHandler(urllib2.HTTPRedirectHandler):\\n    def http_error_302(self, req, fp, code, msg, headers):\\n        print \"Cookie Manip Right Here\"\\n        return urllib2.HTTPRedirectHandler.http_error_302(self, req, fp, code, msg, headers)\\n\\n    http_error_301 = http_error_303 = http_error_307 = http_error_302\\n\\ncookieprocessor = urllib2.HTTPCookieProcessor()\\n\\nopener = urllib2.build_opener(MyHTTPRedirectHandler, cookieprocessor)\\nurllib2.install_opener(opener)\\n\\nresponse =urllib2.urlopen(\"WHEREEVER\")\\nprint response.read()\\n\\nprint cookieprocessor.cookiejar", "id": "554446", "code_sizes": 1}, {"nl_num": [3, 3845, 4344, 4189, 938, 3293, 578, 4238, 4179, 2639, 1422, 4498, 4], "code_num": [2], "code": "pandas.DataFrame(initialload, columns=list_of_column_names)", "id": "11415701", "code_sizes": 1}, {"nl_num": [3, 2, 1828, 1530, 1637, 3886, 2605, 2038, 1007, 1711, 1957, 1312, 1530, 2238, 188, 3528, 4], "code_num": [2], "code": "regex1 = re.compile('\\{.*\\}')\\nregex2 = re.compile('\\{\\{.*\\}\\}')\\n\\ndef replace(match):\\n    match = match.group(0)\\n    if regex2.match(match):\\n        return match\\n    return 'replacement'\\n\\n\\nregex1.sub(replace, data)", "id": "889045", "code_sizes": 1}, {"nl_num": [3, 188, 3741, 389, 2944, 540, 2, 4], "code_num": [2], "code": "from cassandra.cluster import Cluster\\nfrom cassandra.auth import PlainTextAuthProvider\\n\\nauth_provider = PlainTextAuthProvider(username='cassandra', \\n                                      password='cassandra')\\ncluster = Cluster(auth_provider=auth_provider)", "id": "23808059", "code_sizes": 1}, {"nl_num": [3, 4601, 338, 2610, 188, 4], "code_num": [2], "code": "with open('test.json') as json_data:\\n    for line in json_data:\\n        dataline = json.loads(line)\\n        row = []\\n        for i in keys:#iterate through keys\\n            try:\\n                row.append(dataline[i])\\n            except:\\n                pass\\n        data.append(row)\\njson_data.close()", "id": "21790505", "code_sizes": 1}, {"nl_num": [3, 1168, 1442, 568, 1138, 336, 169, 265, 1773, 568, 3316, 425, 841, 1708, 188, 4], "code_num": [2], "code": "import datetime as dt\\nmytime = dt.datetime.strptime('0130','%H%M').time()\\nmydatetime = dt.datetime.combine(dt.date.today(), mytime)", "id": "9578906", "code_sizes": 1}, {"nl_num": [3, 2, 568, 1400, 942, 2319, 1708, 188, 1650, 169, 4429, 2963, 4], "code_num": [2], "code": "soup = BeautifulSoup(webContent)\\na = soup.find('a', href=True, text=re.compile(\"Next\"))\\nif a:\\n    link = a[\"href\"]", "id": "16992100", "code_sizes": 1}, {"nl_num": [3, 2101, 2723, 389, 2011, 540, 2940, 290, 2610, 2943, 4571, 4], "code_num": [2], "code": "plt.errorbar(data[0],data[1],yerr=data[2],fmt='o')\\nplt.xscale('log',basex=10)\\nplt.yscale('log',basey=10)\\nplt.plot(data[0],data[0]**aslope*10**binter,'r')\\nplt.plot(data[0],data[0]**(aslope-aerr)*10**(binter+berr),'--')\\nplt.plot(data[0],data[0]**(aslope+aerr)*10**(binter-berr),'--')\\nplt.xticks(freqlist,freqlist.astype('int'))\\nplt.yticks(tdlist,tdlist.astype('float'))\\nplt.xlabel('Frequency (MHz)')\\nplt.ylabel('t_s (msec)')\\nfitndx1 = 'Fit slope '+\"{0:.2f}\".format(aslope)+u\"\\u00B1\"+\"{0:.2f}\".format(aerr)\\nplt.legend(('Data',fitndx1))\\nplt.show()", "id": "26896333", "code_sizes": 1}, {"nl_num": [3, 188, 694, 4179, 889, 250, 1828, 4238, 4], "code_num": [2], "code": "MyList = ['1','2','3 4 5 6 7','33333']\\nprint [len(x.split()) for x in MyList ]\\n[1, 1, 5, 1]", "id": "24681016", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 3881, 2613, 1828, 2710, 1812, 2, 1162, 3293, 1400, 4114, 2326, 4], "code_num": [2], "code": "re.search('[a-zA-Z]', the_string)", "id": "9072844", "code_sizes": 1}, {"nl_num": [3, 3264, 1828, 664, 2610, 1828, 2385, 2725, 4588, 4], "code_num": [2], "code": "from django.utils.safestring import mark_safe\\n\\n@register.filter(name='shorten')\\ndef shorten(content, post_id):\\n    #will show up to the first 500 characters of the post content\\n    if len(content) > 500:\\n        output = \"{0}... <a href='/entry/{1}'>(cont.)</a>\".format(content[:500], post_id)\\n    else:\\n        output = \"{0}\".format(content)\\n\\n    return mark_safe(output)", "id": "15801986", "code_sizes": 1}, {"nl_num": [3, 188, 128, 2710, 540, 1939, 1162, 169, 3963, 4], "code_num": [2], "code": "number = base36encode(base36decode(number) + 1)", "id": "32261157", "code_sizes": 1}, {"nl_num": [3, 188, 864, 3748, 1828, 4238, 4179, 990, 2315, 568, 549, 4018, 4179, 2583, 769, 4], "code_num": [2], "code": "json.dumps([dict(mpn=pn) for pn in lst])", "id": "11312733", "code_sizes": 1}, {"nl_num": [3, 3306, 1828, 3211, 2, 655, 2610, 2473, 869, 2326, 4], "code_num": [2], "code": "administrators = User.objects.filter(leagueadministrator__league__id=1).distinct()", "id": "25593345", "code_sizes": 1}, {"nl_num": [3, 280, 2905, 2610, 3906, 2610, 3270, 897, 2544, 4], "code_num": [2], "code": "import re\\n\\nsingleLinePattern = re.compile(\"//.*$\", flags=re.MULTILINE+re.DOTALL)\\nmultiLinePattern = re.compile(\"/\\*.*?\\*/\", flags=re.MULTILINE+re.DOTALL)\\n\\ndef main(queue):\\n    for item in queue:\\n        with open(\"output.txt\", \"a\") as out_file:\\n            out_file.write(str(\"\\t<FILE: \" + item.split(\"\\\\\")[len(item.split()) - 1] + \">\"))\\n            with open(item, \"r\") as f:\\n                java_file = f.read()\\n            print \"singles:\", singleLinePattern.findall(java_file)\\n            print \"multis:\", multiLinePattern.findall(java_file)\\n            # You can write the results to the output file here.", "id": "24215768", "code_sizes": 1}, {"nl_num": [3, 2, 2658, 3627, 188, 4], "code_num": [2], "code": "import sys\\nimport zorba_api\\n\\ndef example1(zorba):\\n  xquery = zorba.compileQuery(\"1+2\")\\n  print xquery.printPlanAsXML()\\n  print xquery.execute()\\n  return\\n\\ndef example2(zorba):\\n  xquery = zorba.compileQuery(\"(1,2,3,4,5)\")\\n  iter = xquery.iterator()\\n  iter.open()\\n  item = zorba_api.Item_createEmptyItem()\\n  while iter.next(item):\\n    print item.getStringValue()\\n  iter.close()\\n  iter.destroy()\\n  return\\n\\ndef example3(zorba):\\n  try:\\n    xquery = zorba.compileQuery(\"1 div 0\")\\n    print xquery.execute()\\n  except RuntimeError, e:\\n    print e\\n  return", "id": "2133648", "code_sizes": 1}, {"nl_num": [3, 188, 1953, 1828, 4561, 4023, 2610, 1833, 4178, 4224, 4], "code_num": [2], "code": "import cPickle\\n\\nout_file = open(file_name, 'w')\\ncPickle.dump(data, out_file)\\nout_file.close()\\n\\nin_file = open(file_name, 'r')\\ndata = cPickle.load(in_file)\\nin_file .close()", "id": "21537749", "code_sizes": 1}, {"nl_num": [3, 1398, 3647, 568, 990, 4227, 4], "code_num": [2], "code": "def load():\\n    filedir, _ = os.path.split(__file__)\\n    arch = pd.read_csv(os.path.join(filedir, 'read.csv'))\\n    print arch", "id": "33619026", "code_sizes": 1}, {"nl_num": [3, 3202, 2710, 169, 694, 1708, 1286, 2610, 990, 4], "code_num": [2], "code": "template = Template(\\n            \"{{ name }} ;\"\\n            \"{{ ' 'if age }}{{age if age }}{{' 'if age}};\"\\n            \"{{ ' ' if email}};{{ email if email}}{{ ' ' if email}};\")\\n\\nfor item in mylist:\\n    people_tag =template.render(\\n                    name= item['name'],\\n                    age = item.get('age'),\\n                    email= item.get('email'))", "id": "17832589", "code_sizes": 1}, {"nl_num": [3, 4171, 4058, 540, 217, 2610, 188, 4], "code_num": [2], "code": "Server=myServerAddress;Database=myDataBase;Trusted_Connection=yes;Uid=auth_window;", "id": "29857084", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1352, 1828, 3345, 2, 1242, 2610, 2101, 2326, 4], "code_num": [2], "code": "from mpl_toolkits.mplot3d import Axes3D\\nfrom matplotlib import cm\\nimport matplotlib.pyplot as plt\\nimport numpy as np\\n\\nfig = plt.figure()\\nax = fig.gca(projection='3d')\\nX = np.arange(-5, 5, 0.25)\\nY = np.arange(-5, 5, 0.25)\\nX, Y = np.meshgrid(X, Y)\\n\\nZ = -(abs(X) + abs(Y))\\n\\n## 1) Initial surface\\n# Flatten mesh arrays, necessary for plot_trisurf function\\nX = X.flatten()\\nY = Y.flatten()\\nZ = Z.flatten()\\n\\n# Plot initial 3D surface with triangles (more flexible than quad)\\n#surfi = ax.plot_trisurf(X, Y, Z, cmap=cm.jet, linewidth=0.2)\\n\\n## 2) Cut off\\n# Get desired values indexes\\ncut_idx = np.where(Z > -5)\\n\\n# Apply the \"cut off\"\\nXc = X[cut_idx]\\nYc = Y[cut_idx]\\nZc = Z[cut_idx]\\n\\n# Plot the new surface (it would be impossible with quad grid)\\nsurfc = ax.plot_trisurf(Xc, Yc, Zc, cmap=cm.jet, linewidth=0.2)\\n\\n# You can force limit if you want to compare both graphs...\\nax.set_xlim(-5,5)\\nax.set_ylim(-5,5)\\nax.set_zlim(-10,0)\\n\\nplt.show()", "id": "13432492", "code_sizes": 1}, {"nl_num": [3, 621, 864, 550, 568, 4111, 1828, 4238, 155, 4], "code_num": [2], "code": "myredis.lpush('foo', *[1,2,3,4])", "id": "15850112", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 2291, 1388, 2344, 3670, 540, 3055, 1824, 4714, 2610, 655, 4307, 2326, 4], "code_num": [2], "code": "ctype = ContentType.objects.get_for_model(BlogPost)\\nblog_items = BlogPost.objects.filter(user=user_id).extra(select={\\n        'comment_count': \"\"\"\\n        SELECT COUNT(*) AS comment_count\\n        FROM django_comments\\n        WHERE\\n            content_type_id=%s AND\\n            object_pk=blog_post.id\\n        \"\"\"\\n        }, select_params=[ctype.pk])", "id": "9167282", "code_sizes": 1}, {"nl_num": [3, 2385, 1530, 1188, 1597, 209, 3884, 2, 4], "code_num": [2], "code": "user = CharField(\\n    max_length=30,\\n    required=True,\\n    validators=[\\n        RegexValidator(\\n            regex='^[a-zA-Z0-9]*$',\\n            message='Username must be Alphanumeric',\\n            code='invalid_username'\\n        ),\\n    ]\\n)", "id": "17760367", "code_sizes": 1}, {"nl_num": [3, 188, 1704, 528, 568, 2587, 4018, 540, 284, 4], "code_num": [2], "code": "shared_arr = mp.Array(ctypes.c_double, N)\\narr = tonumpyarray(shared_arr)", "id": "19948253", "code_sizes": 1}, {"nl_num": [3, 1997, 2, 540, 1530, 2610, 188, 4], "code_num": [2], "code": "regex = r'978(?:-?\\d){10}'", "id": "18227021", "code_sizes": 1}, {"nl_num": [3, 1710, 1637, 2828, 169, 764, 869, 3293, 1306, 4], "code_num": [2], "code": "import traceback\\ntry:\\n     codethatwillthrowanexception()\\nexcept:\\n     exceptiondata = traceback.format_exc().splitlines()\\n     exceptionarray = [exceptiondata[-1]] + exceptiondata[1:-1]", "id": "20884761", "code_sizes": 1}, {"nl_num": [3, 4392, 2209, 568, 4047, 2315, 4], "code_num": [2], "code": "class State:\\n    instance_count = 0  # as an example, this is now a static variable counting instances.\\n\\n    def __init__(self, name):\\n        self.name = name      # name is now a member variable\\n        self.transitions = {} # transitions is now a member variable\\n        State.instance_count += 1\\n\\n    def addTransition(self, symbol, transition):\\n        self.transitions[symbol] = transition\\n\\n    def __del__(self):\\n        State.instance_count -= 1", "id": "23159723", "code_sizes": 1}, {"nl_num": [3, 33, 4092, 2610, 2101, 754, 3076, 4], "code_num": [2], "code": "cmap = mpl.colors.ListedColormap(['r', 'g', 'b', 'c'])", "id": "23765965", "code_sizes": 1}, {"nl_num": [3, 3037, 1977, 768, 169, 694, 822, 4], "code_num": [2], "code": "import locale\\n\\nlocale.setlocale('locale.LC_ALL', 'fr_FR.UTF-8')\\nlocale.atof('1000,53')", "id": "31609274", "code_sizes": 1}, {"nl_num": [3, 1132, 733, 338, 411, 1297, 990, 3293, 1828, 18, 990, 3004, 4], "code_num": [2], "code": "userAnswer = cgi.FieldStorage(keep_blank_values=True)", "id": "24224203", "code_sizes": 1}, {"nl_num": [3, 3490, 2, 625, 1273, 2610, 2207, 169, 2049, 4], "code_num": [2], "code": "Ordered.reset_index().merge(Ordered, Unordered, on=ByWhatColumn).set_index('index')", "id": "15718908", "code_sizes": 1}, {"nl_num": [3, 2, 2, 761, 3747, 4579, 2326, 4], "code_num": [2], "code": "import sys\\nfrom gevent import server\\nfrom gevent.baseserver import _tcp_listener\\nfrom gevent import pywsgi\\nfrom gevent.monkey import patch_all; patch_all()\\nfrom multiprocessing import Process, current_process, cpu_count\\n\\ndef hello_world(env, start_response):\\n    if env['PATH_INFO'] == '/':\\n        start_response('200 OK', [('Content-Type', 'text/html')])\\n        return [\"<b>hello world</b>\"]\\n    else:\\n        start_response('404 Not Found', [('Content-Type', 'text/html')])\\n        return ['<h1>Not Found</h1>']\\n\\nlistener = _tcp_listener(('127.0.0.1', 8001))\\n\\ndef serve_forever(listener):\\n    pywsgi.WSGIServer(listener, hello_world).serve_forever()\\n\\nnumber_of_processes = 5\\nprint 'Starting %s processes' % number_of_processes\\nfor i in range(number_of_processes):\\n    Process(target=serve_forever, args=(listener,)).start()\\n\\nserve_forever(listener)", "id": "7407868", "code_sizes": 1}, {"nl_num": [3, 566, 568, 2878, 1828, 3087, 3293, 2287, 684, 4], "code_num": [2], "code": "print request", "id": "14149203", "code_sizes": 1}, {"nl_num": [3, 255, 540, 2, 336, 822, 2610, 990, 2049, 4], "code_num": [2], "code": "eur3m.index = [datetime.datetime.strptime(x, '%d/%m/%Y') for x in eur3m.index]", "id": "11871152", "code_sizes": 1}, {"nl_num": [3, 4583, 1828, 1240, 3518, 4179, 4018, 3690, 1828, 1959, 2464, 990, 4], "code_num": [2], "code": "a = np.genfromtxt('dir1.txt').T[0]\\n\\nloop=np.arange(2, 50)\\nfor arg in loop:\\n    str(arg)\\n    a += np.genfromtxt('dir'+arg+'.txt').T[0]", "id": "18021424", "code_sizes": 1}, {"nl_num": [3, 2, 1400, 1176, 3293, 2473, 4714, 4019, 1828, 3518, 3293, 1312, 4], "code_num": [2], "code": "c.execute(\"\"\"SELECT MonkeyVillage.BananaType, count(*)  \\nFROM MonkeyVillage\\nWHERE MonkeyVillage.BananaType IN (\\nSELECT MonkeyHouse.BananaType\\nFROM MonkeyHouse)\\nGROUP BY MonkeyVillage.BananaType\"\"\")", "id": "25466470", "code_sizes": 1}, {"nl_num": [3, 2365, 2610, 990, 1605, 2, 2710, 2238, 568, 2971, 1342, 2464, 3540, 4182, 213, 3528, 4], "code_num": [2], "code": "def justify(s, pos):\\n    if len(s)<=70:\\n        if pos == l:\\n            print 30*' ' + s\\n        elif pos == c:\\n            print ((70 - len(s))/2)*' ' + s\\n        elif pos == r:\\n            #you missed it here...\\n            print (40 - len(s))*' ' + s\\n        else:\\n            print('You entered invalid argument-(use either r, c or l)')\\n    else:\\n        print(\"The entered string is more than 70 character long. Couldn't be justified.\")", "id": "29592679", "code_sizes": 1}, {"nl_num": [3, 2480, 2710, 223, 3963, 2610, 188, 4], "code_num": [2], "code": "s = \"3.14\"\\ntry:\\n  val = float(s)\\nexcept ValueError:\\n  val = None", "id": "6941866", "code_sizes": 1}, {"nl_num": [3, 1872, 2000, 180, 4178, 1400, 2, 4179, 1828, 2710, 2610, 990, 4], "code_num": [2], "code": "mystr = '...../your_string'\\nmystr = '/' + mystr.lstrip('./')", "id": "7906854", "code_sizes": 1}, {"nl_num": [3, 4370, 3843, 3132, 4179, 1538, 2610, 2710, 2610, 188, 4], "code_num": [2], "code": "s= \"((Random filler goes here))\"\\nprint s[2:-2]", "id": "25431867", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2878, 2583, 1678, 551, 1976, 817, 2610, 990, 4], "code_num": [2], "code": "import json\\n#read string input \\ndataone= raw_input()  \\nm=json.loads(dataone)\\nprint (m[\"attribute name in double quotes \"])", "id": "32162757", "code_sizes": 1}, {"nl_num": [3, 4582, 1605, 2219, 568, 1352, 4073, 4047, 817, 4], "code_num": [2], "code": "s = raw_input(\"Please input something: \")\\n# now I input \"f John Cleese\", so that is now the value of 's'\\n# printing the value of 's' will let you see what it is exactly.\\n\\ncommand = s.split(' ', 1) \\n# the above code will split the string 's' on a ' ' space, \\n# and only do it once, and then create a list with the pieces\\n# so the value of 'command' will be ['f', 'John Cleese'] for your example.\\n\\n# to access items in the command list use brackets []\\ncommand[0] # 'f'\\ncommand[1] # 'John Cleese'", "id": "15848912", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2, 1828, 1298, 4219, 1708, 990, 2326, 4], "code_num": [2], "code": "import os\\n\\nos.cmd (\"mkdir ~/mnt/data_dir mount -t data:/dir/ /mnt/data_dir\")", "id": "2232420", "code_sizes": 1}, {"nl_num": [3, 2551, 3083, 4179, 1817, 1297, 1303, 1039, 2610, 188, 4], "code_num": [2], "code": "[t for t in list_of_tuples if t[1] == n or t[2] == n]", "id": "15422047", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2616, 1828, 2087, 2610, 1828, 1989, 3867, 540, 3494, 4], "code_num": [2], "code": "buttons()", "id": "32537212", "code_sizes": 1}, {"nl_num": [3, 1997, 528, 4713, 2610, 1828, 4219, 3747, 2, 1608, 4181, 177, 4710, 2238, 3528, 2326, 4], "code_num": [2], "code": "def find_all_ImageSequences(dir):\\n\\n    child_directories = [x for x in os.listdir(dir) if len(x.split(\".\")) == 1]\\n    if len(child_directories) >= 1:\\n        for directory in child_directories:\\n            if os.path.isdir(dir + \"\\\\\" + directory):\\n                find_all_ImageSequences(dir + \"\\\\\" + directory)\\n\\n    for object in os.listdir(dir):\\n        if object.endswith(('.dpx','.jpg','.jpeg','.exr','.tif')):\\n            image_filename = object.split(\".\")[0]\\n            Image_Sequences_List.append(dir + \"\\\\\" + str(object))\\n            if any([x for x in os.listdir(dir) if x.split(\".\")[0] != image_filename and len(x.split(\".\")) > 1]):\\n                extras = set([x.split(\".\")[0] for x in os.listdir(dir) if x.split(\".\")[0] != image_filename])\\n                for i in extras:\\n                    Image_Sequences_List.append(i)\\n            break", "id": "21755625", "code_sizes": 1}, {"nl_num": [3, 550, 568, 906, 1942, 2610, 1485, 2, 2326, 4], "code_num": [2], "code": "response = make_response(send_file(mp3_filepath))\\nresponse.headers['X-Something'] = 'header value goes here'\\nreturn response", "id": "31554680", "code_sizes": 1}, {"nl_num": [3, 4347, 2, 4344, 1828, 2, 2462, 1828, 2, 4347, 3293, 3709, 4], "code_num": [2], "code": "if __name__ == \"__main__\":\\n    app = QtGui.QApplication(sys.argv)\\n    main_window = MainWindowClass()\\n    main_window.show()\\n    sys.exit(app.exec_())", "id": "19383684", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1869, 1712, 4179, 990, 897, 2610, 1400, 1494, 822, 2326, 4], "code_num": [2], "code": "l = Label(root, textvariable = var)", "id": "20044412", "code_sizes": 1}, {"nl_num": [3, 1727, 4220, 2227, 1047, 3995, 4178, 1400, 1298, 3747, 188, 4], "code_num": [2], "code": "import subprocess\\nnmap = subprocess.Popen(('nmap'), stdout-subprocess.PIPE)\\nipout = nmap.communicate()[0]", "id": "31494237", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 2692, 1237, 4179, 4238, 4], "code_num": [2], "code": "n = int(input(\"Number of values in list: \"))\\nnumbers = []\\naverage=0\\nfor i in range(n):\\n    lists = float(input(\"Enter a floating number: \"))\\n    numbers.append(lists)\\n    average=average+ lists/n\\n\\nprint (numbers)\\n\\n# filter numbers not greater than average, and get a new list\\nnumbers = [n for n in numbers if n <= average]\\nprint (numbers)", "id": "29068445", "code_sizes": 1}, {"nl_num": [3, 188, 2794, 2035, 3407, 2610, 3004, 3717, 2473, 869, 4], "code_num": [2], "code": "from collections import defaultdict\\n\\nd = defaultdict(list)\\nwith open('input.txt') as f:\\n    for line in f.readlines():\\n        data = line.split()\\n        d[data[0]].extend(data[1:])\\n\\nwith open('output.txt', 'w') as f:\\n    for key, value in d.iteritems():\\n        f.write(\\n            '%(key)s %(value)s\\n' \\n            % {'key': key, 'value': \" \".join(sorted(value))}\\n        )", "id": "9732074", "code_sizes": 1}, {"nl_num": [3, 2385, 864, 4583, 4439, 4179, 2, 223, 2, 4], "code_num": [2], "code": "'south'", "id": "32260264", "code_sizes": 1}, {"nl_num": [3, 550, 568, 38, 549, 1007, 2, 1007, 2610, 1828, 4238, 540, 1828, 135, 2272, 568, 549, 2, 4238, 4], "code_num": [2], "code": "def hide_word(word, letters=[]):\\n    letters = map(str.lower, letters)\\n    word = word.lower()\\n    print ''.join((letter if letter in letters else '_ ' for letter in word))\\n\\nhide_word('hiddenword', ['i','d','n']) #_ idd_ n_ _ _ d", "id": "27638519", "code_sizes": 1}, {"nl_num": [3, 1911, 3747, 1519, 4092, 4179, 869, 2613, 338, 2604, 1130, 1608, 3738, 2326, 4], "code_num": [2], "code": "import matplotlib.pyplot as plt\\nimport numpy as np\\n\\nsignal = 1.2*np.sin(np.linspace(0, 30, 2000))\\npos_signal = signal.copy()\\nneg_signal = signal.copy()\\n\\npos_signal[pos_signal <= 0] = np.nan\\nneg_signal[neg_signal > 0] = np.nan\\n\\n#plotting\\nplt.style.use('fivethirtyeight')\\nplt.plot(pos_signal, color='r')\\nplt.plot(neg_signal, color='b')\\nplt.savefig('pos_neg.png', dpi=200)\\nplt.show()", "id": "31345489", "code_sizes": 1}, {"nl_num": [3, 2459, 3148, 4563, 3293, 539, 4], "code_num": [2], "code": "import sys\\nfrom PyQt4.QtGui import *\\n\\nif __name__ == '__main__':\\n    app = QApplication(sys.argv)\\n\\n    widget = QWidget()\\n\\n    mainWindow = QMainWindow(widget)\\n    mainWindow.show()\\n\\n    sys.exit(app.exec_())", "id": "4044994", "code_sizes": 1}, {"nl_num": [3, 3860, 958, 2, 188, 1422, 621, 2969, 4], "code_num": [2], "code": "wsgiref.WSGIServer", "id": "19784948", "code_sizes": 1}, {"nl_num": [3, 188, 864, 4298, 1828, 4238, 3774, 2326, 4], "code_num": [2], "code": "def parse_line(line):\\n    line = line.strip('\\n')\\n    parts = line.split('+')\\n    addrs = parts[-1].split(',')", "id": "15216363", "code_sizes": 1}, {"nl_num": [3, 3131, 990, 864, 550, 568, 3344, 2710, 568, 2, 4], "code_num": [2], "code": "arr.extend(format(id, \"04x\").encode('ascii'))", "id": "22656250", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 3119, 1400, 926, 1162, 4179, 549, 817, 2610, 990, 4], "code_num": [2], "code": "print inp[1::2]", "id": "33833755", "code_sizes": 1}, {"nl_num": [3, 2121, 4196, 540, 4445, 1708, 1973, 2317, 2941, 4], "code_num": [2], "code": "cursor.execute(\"INSERT INTO room_use_log VALUES (\"+\\n   \"(SELECT bldg_flr_spc_id FROM bldg_flr_spc WHERE rm_atl_nbr='\"+\\n     rooms[y][\"Name\"] +\"'),'t','f',dateadd(ms,\"+\\n     str(int(str(r.get(rooms[y][\"Name\"]))[1:])) +\", '1970-01-01'),\"+\\n     \" dateadd(ms,\"+\\n     str(int(time.time())) +\\n     \", '1970-01-01'))\" #<----that one\\n    )", "id": "27806857", "code_sizes": 1}, {"nl_num": [3, 4349, 568, 4714, 2610, 655, 4], "code_num": [2], "code": "def panel(request):\\n    adlist = [{'title': 'haas', 'price': 12.50, 'bid': 50.0, 'seen': 23.11}]\\n    return render(request, 'panel.html', {'adlist' : adlist})", "id": "22964298", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4570, 2074, 3747, 3911, 3154, 232, 540, 2, 2326, 4], "code_num": [2], "code": "app = QtGui.QApplication(sys.argv)\\nQtGui.QFontDatabase.addApplicationFont('path/to/font')\\n# or load the font data directly\\n# QtGui.QFontDatabase.addApplicationFontFromData(fontdata)\\nstylesheet = open('mystylesheet.qss').read()\\napp.setStyleSheet(stylesheet)", "id": "27955654", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 1545, 1828, 2385, 2725, 862, 4588, 1605, 2, 1828, 1732, 2462, 1828, 3316, 1899, 2326, 4], "code_num": [2], "code": "def addslashes(value):\\n    \"\"\"\\n    Adds slashes before quotes. Useful for escaping strings in CSV, for\\n    example. Less useful for escaping JavaScript; use the ``escapejs``\\n    filter instead.\\n    \"\"\"\\n    return value.replace('\\\\', '\\\\\\\\').replace('\"', '\\\\\"').replace(\"'\", \"\\\\'\")\\naddslashes.is_safe = True\\naddslashes = stringfilter(addslashes)", "id": "2195588", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 1757, 1007, 3191, 1007, 1828, 2587, 4018, 3293, 1828, 4238, 4179, 2587, 249, 2326, 4], "code_num": [2], "code": "def removearray(L,arr):\\n    ind = 0\\n    size = len(L)\\n    while ind != size and not np.array_equal(L[ind],arr):\\n        ind += 1\\n    if ind != size:\\n        L.pop(ind)\\n    else:\\n        raise ValueError('array not found in list.')", "id": "3157374", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2616, 1828, 4777, 3008, 629, 2610, 1828, 2684, 2326, 4], "code_num": [2], "code": "from .models import Question\\n\\nclass QuestionAdmin(admin.ModelAdmin):\\n    prepopulated_fields = {\"slug\": (\"naslov\",)}\\n\\n\\nadmin.site.register(Question, QuestionAdmin)", "id": "30201619", "code_sizes": 1}, {"nl_num": [3, 2741, 2905, 1828, 3467, 3004, 2464, 4671, 1352, 483, 2878, 3147, 1007, 2610, 2160, 4179, 3703, 869, 2326, 4], "code_num": [2], "code": "open(bill_file_name,'r')", "id": "19580928", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3348, 1400, 3843, 2592, 4179, 549, 4465, 4238, 2610, 188, 2326, 4], "code_num": [2], "code": "operator.itemgetter(*b)(a)", "id": "7350301", "code_sizes": 1}, {"nl_num": [3, 4133, 4042, 17, 1442, 568, 2616, 1828, 4238, 1812, 2000, 2013, 568, 2010, 1828, 4238, 1812, 2000, 2639, 2326, 4], "code_num": [2], "code": "pairs = zip(*[iter(a)]*2)", "id": "15731581", "code_sizes": 1}, {"nl_num": [3, 4251, 338, 2991, 223, 990, 338, 2, 4350, 2326, 4], "code_num": [2], "code": "# dict[22] = [20141011, 20120101, 20140923]\\n\\ndict[id] = [ expDate, startDate, endDate ]\\n\\n\\n# Format \\nprint str(id) + ' | ' + ' | '.join(str(x) for x in dict[id])\\n\\n# Result\\n# 22 | 20141011 | 20120101 | 20140923", "id": "20628167", "code_sizes": 1}, {"nl_num": [3, 554, 1828, 3004, 1297, 4684, 2610, 188, 4], "code_num": [2], "code": "tokens = []    \\nfor linea in f.readlines():\\n    line_content = linea.split(' ')\\n    for token in line_content:\\n        tokens.append(token)\\nprint(tokens)", "id": "26621449", "code_sizes": 1}, {"nl_num": [3, 2, 540, 3244, 1422, 3521, 4], "code_num": [2], "code": "cherrypy.quickstart(Root(), \"/\")", "id": "678409", "code_sizes": 1}, {"nl_num": [3, 990, 3119, 2610, 3540, 4], "code_num": [2], "code": "def center_print(s):\\n    import os,sys\\n    command = \"mode con ^ | findstr Columns\" if sys.platform == 'win32' else \"stty size\"\\n    ignore, columns = os.popen(command).read().split()\\n    print \" \"*((int(columns)-len(s))/2)+s\\n\\ncenter_print(\"aaaaaaaaaaaaaaaa\")", "id": "22886031", "code_sizes": 1}, {"nl_num": [3, 1810, 3162, 2237, 4178, 1828, 4238, 1704, 3293, 1828, 3467, 3004, 4], "code_num": [2], "code": "folder = folder.strip()", "id": "26861317", "code_sizes": 1}, {"nl_num": [3, 3990, 2, 223, 4744, 3747, 3004, 4178, 4224, 4], "code_num": [2], "code": "with open(\"filename.pdf\", \"rb\") as pdffile:\\n      pdfdata=pdffile.read()\\n\\nxmldata = scraperwiki.pdftoxml(pdfdata)\\nroot = lxml.html.fromstring(xmldata)", "id": "30464349", "code_sizes": 1}, {"nl_num": [3, 2076, 3518, 3293, 1828, 955, 2, 1170, 2610, 990, 2610, 284, 4], "code_num": [2], "code": "return whatever", "id": "4623238", "code_sizes": 1}, {"nl_num": [3, 473, 864, 550, 568, 1388, 2151, 3670, 540, 3239, 2326, 4], "code_num": [2], "code": "# sample sub-query for testing\\n_another_query = session.query(Evaluation.module).filter(Evaluation.module > 3)\\n\\n# define aliases\\nE1 = aliased(Evaluation, name=\"e1\")\\nE2 = aliased(Evaluation, name=\"e2\")\\n\\n# inner query\\nsq = (\\n    session\\n    # .query(E1)\\n    # select columns explicitely to control labels\\n    .query(E1.user.label(\"user\"), E1.points.label(\"points\"))\\n    .outerjoin(E2, and_(\\n        E1.user == E2.user,\\n        E1.module == E2.module,\\n        E1.time < E2.time,\\n    ))\\n    .filter(E2.user == None)\\n    .filter(E1.module.in_(_another_query))\\n)\\nsq = sq.subquery(name=\"sq\")\\n\\n# now lets group by\\nq = (\\n    session\\n    .query(sq.c.user, func.sum(sq.c.points))\\n    .group_by(sq.c.user)\\n    .order_by(func.sum(sq.c.points))\\n    .limit(5)\\n)", "id": "33185289", "code_sizes": 1}, {"nl_num": [3, 188, 1374, 2229, 868, 4667, 1812, 1828, 262, 3143, 4], "code_num": [2], "code": "import csv\\nimport requests\\n\\ninputfile = open('trycode.csv','r')\\nfor row in inputfile:\\n    url = 'http://en.wikipedia.org/wiki/Monty_Python/' + row\\n    source = requests.get(url)\\ninputfile .close()", "id": "31728161", "code_sizes": 1}, {"nl_num": [3, 3486, 3435, 2798, 568, 4047, 2253, 2206, 2610, 188, 4], "code_num": [2], "code": "from win32com.client.gencache import EnsureDispatch\\nfrom win32com.client import constants\\n\\noutlook = EnsureDispatch(\"Outlook.Application\")\\nnewMail = outlook.CreateItem(constants.olMailItem)\\nnewMail.Subject = \"This is subject\"\\n\\nsamplegrp1 = newMail.Recipients.Add(\"samplegrp1\")\\nsamplegrp2 = newMail.Recipients.Add(\"samplegrp2\")\\nsamplegrp1.Type = constants.olCC\\nsamplegrp3.Type = constants.olCC\\nnewMail.Recipients.ResolveAll()", "id": "24054762", "code_sizes": 1}, {"nl_num": [3, 3068, 425, 540, 2, 223, 2, 2326, 4], "code_num": [2], "code": "dt.datetime.strptime('2000', '%Y').date() == myRecalledDbObj.dateFieldVal", "id": "17409621", "code_sizes": 1}, {"nl_num": [3, 990, 2464, 2978, 2845, 177, 3971, 2464, 3759, 694, 4324, 4], "code_num": [2], "code": "import numpy.random as R\\n\\ndef getRandomValue(fieldName1):\\n    return R.random()\\n\\nprint getRandomValue()", "id": "16302087", "code_sizes": 1}, {"nl_num": [3, 550, 568, 611, 1681, 2, 568, 1400, 3540, 2610, 3703, 2936, 2610, 4317, 3747, 2936, 2326, 4], "code_num": [2], "code": "scipy.cluster.vq.py_vq", "id": "11093735", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 1545, 1828, 42, 1470, 223, 2, 2326, 4], "code_num": [2], "code": "def find_or_make_logfolder(self):\\n    try:\\n        makedirs(self.logfolder)\\n    except OSError:\\n        #self.logfolder was already a directory, continue on.\\n        pass", "id": "23947312", "code_sizes": 1}, {"nl_num": [3, 3101, 2550, 4108, 55, 1833, 3492, 2, 2610, 188, 4], "code_num": [2], "code": "f.seek(0)", "id": "27261058", "code_sizes": 1}, {"nl_num": [3, 990, 1227, 2101, 864, 550, 568, 2616, 2, 2, 2, 3690, 1400, 640, 2326, 4], "code_num": [2], "code": "matplotlib.axes.tick_params(direction='inout')", "id": "20315070", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 4570, 1828, 3280, 2189, 3293, 2019, 1828, 4754, 3867, 568, 1154, 2473, 4179, 1400, 3739, 835, 2326, 4], "code_num": [2], "code": "import threading\\nfrom java.util import Timer, TimerTask\\n\\nclass MyTimerTask(TimerTask):\\n    def run(self):\\n        print 'Getting Realtime Data'\\n\\n\\nclass IBTHXHandler(threading.Thread):\\n\\n    def __init__(self):\\n        threading.Thread.__init__(self, name='IBTHX Handler Thread')\\n        self.start()\\n\\n    def run(self):\\n        print 'ibthx thread running'\\n        timer = Timer()\\n        timer.schedule(MyTimerTask(), 0, 1000)\\n\\nIBTHXHandler()", "id": "13885058", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 2878, 1400, 1959, 568, 2360, 1400, 2680, 4339, 169, 69, 568, 635, 2, 1007, 3319, 1007, 551, 1712, 4], "code_num": [2], "code": "s = int(input(\"Starting number of organisms: \"))\\ni = float(input(\"Average daily increase[%]: \"))/100.0\\nd = int(input(\"Number of days to multiply: \"))\\nfirst = True\\nprint(\"Day Approximate\\tPopulation\")\\nfor d in range(s, d + 1):\\n    if first:\\n        print(1, '\\t', s)\\n        first = False\\n    add = s * i\\n    s = s + add\\n    print(d - 1, '\\t', s)", "id": "26580086", "code_sizes": 1}, {"nl_num": [3, 1113, 4238, 4179, 1773, 1297, 4465, 3442, 2610, 990, 4], "code_num": [2], "code": "sorted(the_list, key = lambda x: int(x.split(\"_\")[1]))", "id": "4287209", "code_sizes": 1}, {"nl_num": [3, 777, 1545, 4597, 4179, 3119, 4], "code_num": [2], "code": "f = open(filename, 'w')\\nfor s in itemlist:\\n   f.write(s.attributes['name'].value + \"\\n\")", "id": "34420914", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4575, 4238, 681, 949, 2326, 4], "code_num": [2], "code": "li_sorted = sorted(li, key=lambda x: x['age'])", "id": "17667407", "code_sizes": 1}, {"nl_num": [3, 188, 2049, 1095, 90, 2464, 540, 2613, 575, 4], "code_num": [2], "code": "df[df.categories.map(lambda cats: 'Restaurants' in cats)]", "id": "18790233", "code_sizes": 1}, {"nl_num": [3, 655, 2728, 4335, 841, 209, 3884, 1537, 1007, 2878, 1007, 4], "code_num": [2], "code": "data = serializers.serialize(\"xml\", MessageHeaderModel2.objects.all())\\nwith open(\"file.xml\", \"w\") as out:\\n     out.write(data)\\nout.close()", "id": "24464513", "code_sizes": 1}, {"nl_num": [3, 4137, 990, 2464, 69, 1352, 483, 4032, 4505, 853, 1828, 4219, 169, 2545, 4531, 1605, 4219, 2, 1828, 547, 1598, 4], "code_num": [2], "code": "current_destination = CreateOutputDirectory()\\nfor root, folders, files in os.walk(input_directory):\\n   for file in files:\\n       file_size = os.path.getsize(file)\\n       if os.path.getsize(current_destination) + file_size > limit:\\n          current_destination = CreateOutputDirectory()\\n       CopyFileToDirectory(root, file, current_destination)", "id": "5657216", "code_sizes": 1}, {"nl_num": [3, 1096, 445, 1569, 1987, 873, 4], "code_num": [2], "code": "pygame.display.flip()", "id": "17845259", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4575, 1828, 4714, 1297, 1452, 3518, 4179, 1828, 4780, 1708, 1485, 1422, 1447, 2326, 4], "code_num": [2], "code": "# count the number of friends for each user\\n# friends are users as well, so need alias\\n# construct subquery for use in final query\\n\\nfriend = db.aliased(User)\\n\\nsub = db.session.query(\\n    User.id,\\n    db.func.count(friend.id).label('fc')\\n).join(friend, User.friends\\n).group_by(User.id).subquery()\\n\\n# query users, join on subquery to get friend count\\n# order by friend count, descending\\n\\nusers = db.session.query(User\\n).join(sub, sub.c.id == User.id\\n).order_by(sub.c.fc.desc()\\n).paginate(page, MONKEYS_PER_PAGE, False)", "id": "23144751", "code_sizes": 1}, {"nl_num": [3, 2043, 2629, 1828, 3843, 1384, 2610, 2, 990, 4], "code_num": [2], "code": "labels,num=label(image, return_num=True)\\nfor i in range(num):\\n    area[i]=size(np.where(labels==i)[1])", "id": "29216179", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1945, 1828, 4347, 2150, 4347, 568, 1828, 990, 2, 4692, 2238, 209, 3396, 3528, 1081, 4], "code_num": [2], "code": "body = \"Text for body\"\\nmsg.attach(MIMEText(body,'plain'))", "id": "29950454", "code_sizes": 1}, {"nl_num": [3, 188, 864, 4154, 2, 2, 2544, 275, 4], "code_num": [2], "code": "from winreg import*\\n\\na=OpenKey(HKEY_CURRENT_USER,\"Software\\\\Microsoft\\\\Command Processor\",0,KEY_WRITE)\\nSetValueEx(a,\"Autorun\",0,REG_SZ,\"cd\\\\The path that I wantsss.\")\\nCloseKey(a)", "id": "11893958", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4314, 1400, 155, 4179, 1400, 2828, 3254, 3293, 1828, 2542, 270, 2326, 4], "code_num": [2], "code": "r = chain(hello.s(), hey.s())()\\n\\nr.parent.get(timeout=1)\\nr.parent.parent.get(timeout=1)\\n\\nfirst = r\\nwhile first.parent:\\n    first = first.parent", "id": "14341465", "code_sizes": 1}, {"nl_num": [3, 3990, 3793, 568, 1954, 223, 327, 2610, 188, 4], "code_num": [2], "code": "with open(\"tweet37.txt\", \"w\") as o:\\n    for tweet in tweets:\\n        tweet_id = tweet['id']\\n        if tweet_id.endswith('700') or tweet_id.endswith('300'):\\n            print >> o, str(tweet['id'])", "id": "20183459", "code_sizes": 1}, {"nl_num": [3, 3397, 3055, 4409, 889, 3293, 1828, 4238, 3630, 2, 889, 4], "code_num": [2], "code": "[elem for i, elem in enumerate(A) if i %10 in (0, 1)]", "id": "31507813", "code_sizes": 1}, {"nl_num": [3, 4762, 540, 1828, 2710, 3813, 4047, 2637, 2, 4], "code_num": [2], "code": "latin1 = \"latin-1\"\\njapanese = \"Shift-JIS\"\\n\\ncontrol_l = \"\\x0c\"\\ncontrol_j = \"\\n\"\\n\\nencodingMap = {\\n    control_l: latin1,\\n    control_j: japanese}\\n\\ndef funkyDecode(s, initialCodec=latin1):\\n    output = u\"\"\\n    accum = \"\"\\n    currentCodec = initialCodec\\n    for ch in s:\\n        if ch in encodingMap:\\n            output += accum.decode(currentCodec)\\n            currentCodec = encodingMap[ch]\\n            accum = \"\"\\n        else:\\n            accum += ch\\n    output += accum.decode(currentCodec)\\n    return output", "id": "197759", "code_sizes": 1}, {"nl_num": [3, 4527, 1828, 4702, 156, 2610, 2, 4], "code_num": [2], "code": "import sys\\nsys.exit(-1)", "id": "12036620", "code_sizes": 1}, {"nl_num": [3, 188, 864, 611, 1828, 3843, 869, 3293, 3467, 4], "code_num": [2], "code": "str1 = \"Start\"\\nfp = open(\"C:...test.txt\")\\ncheck = 0\\nfor i,line in enumerate(fp):\\n    if str1 in line:\\n        check = i\\n        continue\\n    if \"contain\" in line and (i == check + 3):\\n        print \"OK\"\\n    else:\\n        print \"NOK\"", "id": "32050069", "code_sizes": 1}, {"nl_num": [3, 1679, 2817, 1892, 718, 2, 2, 2238, 990, 3528, 4], "code_num": [2], "code": "import Tkinter as Tk #tkinter\\n\\ndef toggle():\\n    if frame1.winfo_ismapped():\\n        frame1.grid_remove()\\n    else:\\n        frame1.grid()\\n\\nroot = Tk.Tk()\\nroot.geometry('-450+250')\\nframe1 = Tk.Frame(root, width=200, height=100, bg='red')\\nframe1.grid(row=0, column=0)\\nframe2 = Tk.Frame(root, width=200, height=100, bg='blue')\\nframe2.grid(row=0, column=1)\\nTk.Button(root, text='toggle', command=toggle).grid(row=1, column=1)\\n\\nroot.mainloop()", "id": "6870118", "code_sizes": 1}, {"nl_num": [3, 1226, 1828, 754, 1242, 2237, 4178, 1828, 1006, 4179, 4516, 327, 1708, 1106, 4], "code_num": [2], "code": "import numpy as np\\nimport pylab as plt\\n\\n# The example dict/matrix\\ndict = {}\\nfor x in range(0, 11):\\n    dict[x] = [0,1,2,3,4,5,6,7,8,9,10]\\n\\n# Create an empty numpy array with the right dimensions\\nnparr = np.zeros((len(dict.keys()), len(dict[0])))\\n\\n# Loop through converting each list into a row of the new array\\nfor ii in xrange(nparr.shape[0]):\\n    nparr[ii] = dict[ii]\\n\\n# Plotting as a contour\\nplt.contour(nparr)\\nplt.show()", "id": "23462736", "code_sizes": 1}, {"nl_num": [3, 3082, 1828, 2471, 4653, 540, 2, 4], "code_num": [2], "code": "query.prepare(QString(\"UPDATE news SET Raw = :value WHERE id = :id \"));\\nquery.bindValue(\":value\", raw);\\nquery.bindValue(\":id\", news_id);", "id": "21973008", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4335, 2, 2473, 265, 726, 2252, 223, 1360, 2610, 990, 4], "code_num": [2], "code": "random_key = os.urandom(16)", "id": "5000946", "code_sizes": 1}, {"nl_num": [3, 90, 1828, 4238, 223, 4238, 3794, 3594, 625, 2, 327, 4], "code_num": [2], "code": "booleans= [[l[0]]+[1 if i is None else 0 for i in l[1:4]]+l[4:] for l in my_list]", "id": "28047214", "code_sizes": 1}, {"nl_num": [3, 550, 568, 976, 549, 2714, 2610, 1828, 4238, 3055, 2, 2678, 4], "code_num": [2], "code": "def move (l, from_, to = 2):\\n    return l.insert (to, l.pop (from_) )", "id": "19410981", "code_sizes": 1}, {"nl_num": [3, 2, 2610, 4399, 2464, 3636, 2610, 188, 4], "code_num": [2], "code": "from Crypto.Cipher import AES\\nimport base64\\n\\nAES.key_size=128\\niv=\"your iv\"\\nkey=\"your key\"\\ncrypt_object=AES.new(key=key,mode=AES.MODE_CBC,IV=iv)\\n\\ndecoded=base64.b64decode(plain) # your ecrypted and encoded text goes here\\ndecrypted=crypt_object.decrypt(decoded)", "id": "10534393", "code_sizes": 1}, {"nl_num": [3, 69, 568, 1792, 1400, 3211, 2229, 223, 3198, 2326, 4], "code_num": [2], "code": "href=\"{% url foo %}?bar=1\"", "id": "4554180", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3119, 3843, 3506, 4238, 1237, 2326, 4], "code_num": [2], "code": "from __future__ import print_function\\n\\nimport json\\n\\nraw_response = '[[\"Message\",\"User string from here.\"]]'\\ndata = json.loads(raw_response)\\n\\nprint(data[0][1])", "id": "31932374", "code_sizes": 1}, {"nl_num": [3, 2103, 990, 2710, 336, 568, 813, 425, 4], "code_num": [2], "code": "month_of_the_year = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dec']\\n\\ndef convert_to_mysql_format(string):\\n  explode = string.split()\\n  day_of_the_month = explode[2][:-1]\\n  if int(explode[2][:-1]) < 10:\\n    day_of_the_month = \"%02d\" % (int(explode[2][:-1]),)\\n\\n  if explode[5] == 'am':\\n    time_split = explode[4].split(':')\\n    if time_split[0] == '12':\\n      time_split[0] = '00'\\n    elif int(time_split[0]) < 10:\\n      time_split[0] = \"%02d\" % int(time_split[0])\\n\\n  else:\\n    time_split = explode[4].split(':')\\n    if int(time_split[0]) in range(1, 12):\\n      time_split[0] = str(int(time_split[0]) + 12)\\n\\n\\n  if month_of_the_year.index(explode[1]) < 12:\\n    explode[1] = \"%02d\" % (month_of_the_year.index(explode[1])+1)\\n\\n  return explode[3]+'-'+explode[1]+'-'+day_of_the_month+' '+time_split[0]+':'+time_split[1]+':00'\\n\\nprint convert_to_mysql_format(\"Lun Ene 27, 2014 9:52 am\")\\nprint convert_to_mysql_format(\"Lun Ene 27, 2014 9:52 pm\")", "id": "23197551", "code_sizes": 1}, {"nl_num": [3, 2402, 2710, 2540, 2, 4], "code_num": [2], "code": "inputstring = 'wrong_syntax(b>=c) correct_syntax(b,>=,c)'\\nregex = r\"([^,])(>=|<=|!=|==|>|<|=)([^,])\"\\nreplace = r\"\\1,\\2,\\3\"\\n\\nresult = re.sub(regex, replace, inputstring)\\n\\nprint(result)", "id": "21124230", "code_sizes": 1}, {"nl_num": [3, 188, 523, 568, 1251, 540, 2, 338, 2326, 4], "code_num": [2], "code": "from shapely.geometry import MultiPoint\\npoints = MultiPoint([(0.0, 0.0), (1.0, 1.0)])\\nprint points.centroid #True centroid, not necessarily an existing point", "id": "15561103", "code_sizes": 1}, {"nl_num": [3, 188, 2710, 1383, 4], "code_num": [2], "code": "name = 'foo'\\nage = 42\\nprint \"Hi %s, you are %d years old\\n\" % (name, age)", "id": "9078680", "code_sizes": 1}, {"nl_num": [3, 4154, 2094, 1598, 2610, 990, 3508, 26, 4], "code_num": [2], "code": "sizer = wx.BoxSizer(wx.VERTICAL)\\nsizer.Add(myWidget, proportion=1, flag=wx.EXPAND|wx.ALL, border=5)\\nsizer.Add(myOtherWidget, proportion=0, flag=wx.ALL, border=5)", "id": "23353198", "code_sizes": 1}, {"nl_num": [3, 2403, 3690, 3369, 2639, 2610, 1828, 4238, 4], "code_num": [2], "code": "def price(rlist):\\n    return [item.price for item in rlist]", "id": "31236211", "code_sizes": 1}, {"nl_num": [3, 2049, 1095, 2464, 69, 568, 1945, 2406, 3909, 967, 4], "code_num": [2], "code": "columns = ['A', 'B']\\nuser_list = pd.DataFrame(np.zeros((1000, 2)) + np.nan, columns=columns)\\nuser_list.iloc[0] = [3, 4]\\nuser_list.iloc[1] = [4, 5]", "id": "24640529", "code_sizes": 1}, {"nl_num": [3, 188, 864, 4370, 3247, 540, 1406, 327, 2610, 1828, 4640, 2326, 4], "code_num": [2], "code": "countMap = {}\\nfor v in a.itervalues():\\n    countMap[v] = countMap.get(v,0) + 1\\nuni = [ k for k, v in a.iteritems() if countMap[v] == 1]", "id": "1032281", "code_sizes": 1}, {"nl_num": [3, 4196, 2610, 2020, 2583, 540, 188, 2464, 2, 2, 4], "code_num": [2], "code": "from django.core.urlresolvers import resolve\\nview_match = resolve('/json/test_day/4982/')\\njson_data = view_match.func(request,**view_match.kwargs).content", "id": "13898332", "code_sizes": 1}, {"nl_num": [3, 3082, 1977, 540, 217, 2610, 188, 4], "code_num": [24], "code": "db.commit()", "id": "29957434", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3881, 1400, 764, 1039, 4179, 1828, 990, 4238, 2326, 4], "code_num": [2], "code": "stack[-1]", "id": "4085417", "code_sizes": 1}, {"nl_num": [3, 4773, 2610, 188, 568, 4356, 169, 3047, 2702, 2, 223, 4680, 4179, 3539, 4117, 2326, 4], "code_num": [2], "code": "import numpy as np\\n\\nnbLamps = 200000\\nnbDays = 365\\n\\narr = np.array([nbLamps, nbDays], dtype=np.bool)", "id": "4734591", "code_sizes": 1}, {"nl_num": [3, 2, 3747, 221, 549, 1958, 4020, 540, 990, 4], "code_num": [2], "code": "from PIL import Image\\n\\ntry:\\n    im = Image.open('test.gif')\\n    f=0    \\n    while True:        \\n        im.seek(f)\\n        im.save('test_%02d.png' % f)\\n        f += 1\\nexcept EOFError:\\n    print \"Done!\"\\nexcept:\\n    print \"Some Other Error\"", "id": "26210214", "code_sizes": 1}, {"nl_num": [3, 550, 3659, 483, 2616, 3674, 2319, 4615, 1651, 4583, 338, 3293, 1828, 1573, 3747, 2678, 147, 4182, 1828, 3467, 3747, 3008, 2326, 4], "code_num": [2], "code": "if 'on' in form and form['on']:\\n    doSomethingWithOn()\\nelse:\\n    doSomethingWithDrop()", "id": "16681022", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 4570, 2, 169, 2, 169, 4314, 327, 3293, 1828, 4640, 2326, 4], "code_num": [2], "code": "def __iter__(self): return self.books.itervalues()", "id": "1780571", "code_sizes": 1}, {"nl_num": [3, 4229, 2422, 540, 990, 2, 3799, 4], "code_num": [2], "code": "for item in list:\\n    print item[u'text'].encode('utf-8')", "id": "19271220", "code_sizes": 1}, {"nl_num": [3, 2, 169, 2310, 3536, 1651, 3055, 3467, 4505, 4], "code_num": [2], "code": "words1 = set(open(\"some1.txt\").read().split())\\nwords2 = set(open(\"some2.txt\").read().split())\\n\\nduplicates  = words1.intersection(words2)\\nuniques = words1.difference(words2).union(words2.difference(words1))\\n\\nprint \"Duplicates(%d):%s\"%(len(duplicates),duplicates)\\nprint \"\\nUniques(%d):%s\"%(len(uniques),uniques)", "id": "16289458", "code_sizes": 1}, {"nl_num": [3, 2177, 2049, 2353, 540, 1864, 3518, 4], "code_num": [2], "code": "yes_records_sample['name'].isnull()", "id": "26893419", "code_sizes": 1}, {"nl_num": [3, 188, 2049, 1095, 2794, 1297, 2237, 4178, 1828, 575, 4], "code_num": [2], "code": "df.groupby('column').filter(lambda group: group.size > X)", "id": "31303417", "code_sizes": 1}, {"nl_num": [3, 990, 2533, 223, 964, 4], "code_num": [2], "code": "import re\\nimport os\\nimport xmlutils # download it from: https://gist.github.com/huseyinyilmaz/1448723\\n\\nmy_dir = '<absolute path to my dir>'\\n\\ndoc_dict = dict()\\n\\nfor root, dirs, files in os.walk(my_dir):\\n    for filename in files:\\n        if filename.endswith('.py'):\\n            with open(os.path.join(root, filename), 'r') as py_file:\\n                basename = os.path.basename(filename)\\n                doc_dict[basename] = [m.group('doc') for m in re.finditer(\\n                    re.compile(r'(\"|\\'){3}(?P<doc>.*?)\\1{3}', re.DOTALL),\\n                    py_file.read()\\n                )]\\n\\ndict2xml(dict(root=doc_dict))", "id": "16731267", "code_sizes": 1}, {"nl_num": [3, 550, 568, 145, 2027, 2, 2739, 574, 1297, 1458, 2, 568, 2, 619, 2504, 4], "code_num": [2], "code": "scipy.sparse.hstack", "id": "15938025", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1470, 655, 2047, 1179, 2610, 233, 2326, 4], "code_num": [2], "code": "__init__.py\\nmodels.py", "id": "6483636", "code_sizes": 1}, {"nl_num": [3, 188, 839, 4238, 4179, 921, 1773, 853, 1977, 4], "code_num": [2], "code": "con.commit()", "id": "23982710", "code_sizes": 1}, {"nl_num": [3, 2, 188, 69, 568, 1150, 326, 1400, 1712, 4], "code_num": [2], "code": "prob.set_log_stream(None)\\nprob.set_error_stream(None)\\nprob.set_warning_stream(None)\\nprob.set_results_stream(None)", "id": "20365775", "code_sizes": 1}, {"nl_num": [3, 1753, 2, 540, 463, 2326, 4], "code_num": [2], "code": "import seaborn as sns\\nimport matplotlib.pyplot as plt\\n\\ntips = sns.load_dataset(\"tips\")\\n\\npoints = plt.scatter(tips[\"total_bill\"], tips[\"tip\"],\\n                     c=tips[\"size\"], s=75, cmap=\"BuGn\")\\nplt.colorbar(points)\\n\\nsns.regplot(\"total_bill\", \"tip\", data=tips, scatter=False, color=\".1\")", "id": "30353363", "code_sizes": 1}, {"nl_num": [3, 69, 568, 3119, 1095, 711, 927, 4], "code_num": [2], "code": "print df.to_string(index=False)", "id": "24644656", "code_sizes": 1}, {"nl_num": [3, 69, 568, 3736, 2, 941, 3004, 2610, 655, 4], "code_num": [2], "code": "zip_file = open(path_to_file, 'r')\\nresponse = HttpResponse(zip_file, content_type='application/force-download')\\nresponse['Content-Disposition'] = 'attachment; filename=\"%s\"' % 'foo.zip'\\nreturn response", "id": "19459300", "code_sizes": 1}, {"nl_num": [3, 188, 864, 145, 1828, 4032, 4179, 1828, 4238, 3747, 2, 2326, 4], "code_num": [2], "code": "c = copy.deepcopy(a)", "id": "30657705", "code_sizes": 1}, {"nl_num": [3, 69, 568, 1704, 169, 1545, 2, 3004, 540, 188, 2326, 4], "code_num": [2], "code": "import configparser\\n\\nconfig = configparser.ConfigParser()\\nconfig.read('FILE.INI')\\nprint(config['DEFAULT']['path'])     # -> \"/path/name/\"\\nconfig['DEFAULT']['path'] = '/var/shared/'    # update\\nconfig['DEFAULT']['default_message'] = 'Hey! help me!!'   # create\\n\\nwith open('FILE.INI', 'w') as configfile:    # save\\n    config.write(configfile)", "id": "8884188", "code_sizes": 1}, {"nl_num": [3, 2604, 4190, 1828, 1442, 568, 4688, 1400, 3270, 4179, 1828, 4691, 3293, 2019, 1400, 990, 4749, 2326, 4], "code_num": [2], "code": "import module\\nimport inspect\\nsrc = inspect.getsource(module)", "id": "2055110", "code_sizes": 1}, {"nl_num": [3, 346, 864, 2088, 3352, 4018, 1297, 4516, 3747, 927, 4018, 4], "code_num": [2], "code": "import numpy as np \\n\\na = np.arange(3*3*3).reshape(3,3,3)\\nz = np.array([[1, 0, 2],\\n       [2, 2, 1],\\n       [1, 1, 0]])\\ni = np.arange(a.shape[0]).repeat(a.shape[0]).reshape(a.shape[0], a.shape[1])\\nj = i.T\\n#Should do the same as this. possible more efficient, did not test.\\n#i, j = np.indices(a[...,0].shape)\\nprint a[i,j,z]", "id": "22859293", "code_sizes": 1}, {"nl_num": [3, 188, 3554, 864, 566, 568, 4108, 3586, 4457, 4], "code_num": [2], "code": "article = article[:325-len(current_dir)]\\nout.write(os.path.join(current_dir, article + '.txt'))", "id": "10669608", "code_sizes": 1}, {"nl_num": [3, 188, 2057, 326, 549, 1527, 353, 3803, 223, 1828, 2, 452, 4], "code_num": [2], "code": "from z3 import *\\n\\nset_param(max_lines=1, max_width=1000000)\\nprint(str(clause))", "id": "26982776", "code_sizes": 1}, {"nl_num": [3, 188, 4572, 2, 864, 1708, 990, 568, 2, 4199, 4], "code_num": [2], "code": "list1 = [('chr1', '123', '345'), ('chr1', '567', '678'), ('chr2', '123', '234')]\\n\\nlist2 = [('chr1', '123', '567'), ('chr1', '777', '890'), ('chr2', '1', '288')]\\nnewlist = []\\n\\nfor j,k,l in list1:\\n    for x,y,z in list2:\\n        if j == x:\\n            if int(k) >= int(y) or int(l) <= int(z):\\n                newlist.append(k)\\n            else:\\n                 pass\\n        else:\\n            pass", "id": "28123534", "code_sizes": 1}, {"nl_num": [3, 2263, 549, 2822, 1857, 3227, 2790, 540, 338, 3293, 3307, 4], "code_num": [2], "code": "form.populate_obj(user)\\nuser.put()", "id": "27792630", "code_sizes": 1}, {"nl_num": [3, 2, 2610, 990, 4], "code_num": [2], "code": "class Directions:\\n    up = 0\\n    down = 1\\n    left = 2\\n    right =3", "id": "1969005", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 1742, 1400, 990, 4749, 2019, 1828, 4227, 2238, 223, 208, 3152, 3528, 2326, 4], "code_num": [2], "code": "import code\\nimport sys    \\n\\ndef DebugKeyboard(banner=\"Debugger started (CTRL-D to quit)\"):\\n\\n    # use exception trick to pick up the current frame\\n    try:\\n        raise None\\n    except:\\n        frame = sys.exc_info()[2].tb_frame.f_back\\n\\n    # evaluate commands in current namespace\\n    namespace = frame.f_globals.copy()\\n    namespace.update(frame.f_locals)\\n\\n    print \"START DEBUG\"\\n    code.interact(banner=banner, local=namespace)\\n    print \"END DEBUG\"", "id": "4511763", "code_sizes": 1}, {"nl_num": [3, 701, 3779, 4182, 2016, 4179, 2, 4], "code_num": [2], "code": "import errno\\nimport socket\\nimport time\\nimport mock\\n\\nPORT = 50123\\n\\n\\ndef connect_mock(*agrs):\\n    raise socket.error(errno.WSAECONNREFUSED, \"Testing\")\\n\\n\\ndef main():\\n    s = socket.socket()\\n    s.bind(('127.0.0.1', PORT))\\n    s.listen(0)\\n    client = socket.socket()\\n    client.connect(('127.0.0.1', PORT))\\n\\n    client2 = socket.socket()\\n    start = time.time()\\n\\n    with mock.patch('socket.socket.connect', connect_mock):\\n        try:\\n            client2.connect(('127.0.0.1', PORT))\\n            print \"done\"\\n        except socket.error as e:\\n            assert e.errno == errno.WSAECONNREFUSED\\n            print 'connection attempt took', time.time() - start\\n        finally:\\n            client2.close()\\n            client.close()\\n            s.close()\\n\\n\\nif __name__ == '__main__':\\n    main()", "id": "21167888", "code_sizes": 1}, {"nl_num": [3, 2710, 191, 2610, 990, 4], "code_num": [2], "code": "left, right = line.split(None, 1)", "id": "6691539", "code_sizes": 1}, {"nl_num": [3, 2432, 1828, 2746, 4178, 2, 4], "code_num": [2], "code": "def itersorted(d):\\n    for key in sorted(d):\\n        yield d[key]", "id": "102394", "code_sizes": 1}, {"nl_num": [3, 550, 568, 997, 4047, 3048, 540, 2943, 2252, 2326, 4], "code_num": [2], "code": "ds = [d1, d2]\\nd = {}\\nfor k in d1.iterkeys():\\n    d[k] = tuple(d[k] for d in ds)", "id": "5946236", "code_sizes": 1}, {"nl_num": [3, 188, 3758, 2464, 69, 568, 746, 2489, 2429, 4], "code_num": [2], "code": "from flask import Response\\n@app.route('/ajax_ddl')\\ndef ajax_ddl():\\n    xml = 'foo'\\n    return Response(xml, mimetype='text/xml')", "id": "11773348", "code_sizes": 1}, {"nl_num": [3, 1407, 1708, 990, 3747, 4032, 2, 568, 2406, 4543, 528, 4], "code_num": [2], "code": "import os\\nimport cv2\\n\\nimg = cv2.imread(filename)\\nroi = img[row:row+height,column:column+width]\\ncv2.imshow('ROI',roi)\\ncv2.waitKey(0)", "id": "25734545", "code_sizes": 1}, {"nl_num": [3, 2, 1828, 2406, 1566, 3747, 1249, 955, 1708, 188, 4178, 3321, 833, 148, 4], "code_num": [2], "code": "import os\\npid = os.fork()\\nif 0 == pid:\\n  os.system('firefox')\\n  os._exit(0)\\nelse:\\n  os._exit(0)", "id": "6441807", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 3994, 1828, 3816, 4652, 3178, 1125, 3293, 188, 2326, 4], "code_num": [2], "code": "subprocess.call([\"find\", \".\", \"-exec\", \"touch\", \"{}\", \";\"])", "id": "18796402", "code_sizes": 1}, {"nl_num": [3, 1059, 1355, 332, 2794, 2610, 2541, 2, 1708, 1940, 4], "code_num": [2], "code": "pg = conn.get_all_dbparameters('mygroup')\\npg2 = conn.get_all_dbparameters('mygroup', marker = pg.Marker)\\npg2['slow_query_log'].value = True\\npg2['slow_query_log'].apply(True)", "id": "8873519", "code_sizes": 1}, {"nl_num": [3, 2, 2610, 188, 1170, 568, 2705, 3909, 4179, 338, 4], "code_num": [2], "code": "for line in nlines:\\n    line = line.strip()\\n    if line == '': \\n        continue # skip empty lines\\n\\n    line = line.replace('\\t',' ')\\n    x, y, z = line.split()\\n\\n    if x > somevalue: \\n        continue # skip line if x > somevalue\\n\\n    X.append(x)\\n    Y.append(y)\\n    Z.append(z)", "id": "10727905", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3644, 2, 4231, 1708, 1375, 1422, 2, 4], "code_num": [2], "code": "if self.isVisible:\\n    self.com_app.Visible = self.isVisible\\ncom_ppt = self.com_app.Presentations.Open(filename, WithWindow = isVisible)", "id": "5554707", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4575, 4238, 4179, 4476, 711, 2918, 4201, 3821, 169, 540, 4105, 1412, 4], "code_num": [2], "code": "sorted(list1, key=lambda x: re.sub('[^A-Za-z]+', '', x).lower())", "id": "13589560", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2, 1651, 3198, 169, 684, 2610, 3517, 2340, 4], "code_num": [2], "code": "import os\\nprint os.environ['REQUEST_METHOD']", "id": "25008081", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4570, 3055, 574, 327, 3293, 1828, 1170, 2610, 1312, 1170, 2326, 2, 2238, 3528, 4], "code_num": [2], "code": "def findGrid(n):   #This function takes one parameter.\\n    row = n + 1\\n    col = row ** 2\\n\\n    return  row, col                  #Return two values\\n\\ndef calculate(a, b):\\n    a = a + 2\\n    b = a // 2\\n\\n    return a, b\\n\\ndef main():\\n    x = int(input(\"Enter a number: \"))\\n    y,z = findGrid(x)\\n    a,b = calculate(y, z)\\n    print a\\n    print b\\n\\nmain()", "id": "29663683", "code_sizes": 1}, {"nl_num": [3, 3139, 4726, 4179, 2, 2, 2912, 568, 4649, 1901, 568, 2878, 4471, 2, 4], "code_num": [2], "code": "expected_query_seq = \"\"\\nfor record in records:\\n   for alignment in record.alignments:\\n                hits = sorted((hsp.query_start, hsp.query_end, hsp.sbjct_start, hsp.sbjct_end, alignment.title, hsp.query, hsp.sbjct)\\\\n                               for hsp in alignment.hsps)\\n                for q_start, q_end, sb_start, sb_end, title, query, sbjct in hits:\\n                      print title\\n                      print 'The query starts from position: ' + str(q_start)\\n                      print 'The query ends at position: ' + str(q_end)\\n                      print 'The hit starts at position: ' + str(sb_start)\\n                      print 'The hit ends at position: ' + str(sb_end)\\n                      print 'The  query is: ' + query\\n                      print 'The hit is: ' + sbjct\\n\\n                      expected_query_seq += str(query[q_start:q_end])\\nprint expected_query_seq", "id": "21496963", "code_sizes": 1}, {"nl_num": [3, 2591, 4178, 3927, 3004, 383, 4], "code_num": [2], "code": "from BeautifulSoup import BeautifulSoup as bs\\n\\ndef readHTML():   \\n    soup = bs(\"stats.html\")\\n    print(soup.prettify())", "id": "26921044", "code_sizes": 1}, {"nl_num": [3, 69, 568, 179, 3559, 338, 2610, 1828, 4238, 2610, 990, 4], "code_num": [2], "code": "# create an empty list\\na = [];\\n# take limt as input\\nlim = raw_input(\"Enter limit\")\\n\\n# this is python style of for loop\\n# here i will start from 0 and will go upto limit\\nfor i in range (0, int(lim)):\\n    # take input from user one by one and append to list\\n    elem = raw_input(\"\")\\n    a.append(int(elem))", "id": "23925042", "code_sizes": 1}, {"nl_num": [3, 3726, 2, 540, 990, 4025, 4209, 177, 2, 3004, 4], "code_num": [2], "code": "video = cv2.VideoWriter(r\"C:\\Users\\Josh\\Desktop\\video.avi\", \\ncv2.cv.CV_FOURCC('F','M','P', '4'), 15, (1536, 1536), 1)", "id": "17328450", "code_sizes": 1}, {"nl_num": [3, 118, 3715, 2610, 4238, 3747, 2, 540, 3867, 262, 4], "code_num": [2], "code": "userSubset = set([user for user in users for record in user.records if dt < record.datetime < dt + timedelta(days=7)])", "id": "28560701", "code_sizes": 1}, {"nl_num": [3, 2367, 943, 4713, 3293, 129, 3004, 2237, 4178, 4129, 4], "code_num": [2], "code": "ids = set()\\nfor rec in blah:\\n    if rec.id not in ids:\\n        ids.add(rec.id)\\n        # process it", "id": "26502490", "code_sizes": 1}, {"nl_num": [3, 2, 1828, 4238, 3293, 1170, 568, 1170, 2610, 990, 4], "code_num": [2], "code": "def show_multiples(low, high, multi):   \\n    #make empty list\\n    multi_list = []    \\n    #make the list\\n    for i in range(high, low, -1):    \\n        if i % multi == 0:\\n            multi_list.append(i)\\n            print('List was created')   \\n    return multi_list # <-- this should be out of the loop", "id": "25555532", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1539, 2822, 1857, 2, 2, 2326, 4], "code_num": [2], "code": "def abort(self, abort_message=''):\\n    \"\"\"Mark the entire pipeline up to the root as aborted.\\n    Note this should only be called from *outside* the context of a running\\n    pipeline. Synchronous and generator pipelines should raise the 'Abort'\\n    exception to cause this behavior during execution.\\n\\n    Args:\\n      abort_message: Optional message explaining why the abort happened.\\n\\n    Returns:\\n      True if the abort signal was sent successfully; False if the pipeline\\n      could not be aborted for any reason.\\n    \"\"\"", "id": "29979036", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 3303, 1442, 568, 3178, 889, 2610, 777, 1041, 4], "code_num": [2], "code": "import re\\npattern = re.compile(r'<[c|d][^>]*>(?P<text>[^<]*)</[c|d]>')\\nwith open('filename', 'r') as f:\\n    for txt in pattern.finditer(f.read()):\\n        print(txt.group('text').strip())", "id": "32383452", "code_sizes": 1}, {"nl_num": [3, 3089, 2604, 1400, 159, 1442, 568, 2878, 1400, 328, 338, 853, 1825, 822, 1708, 4780, 3337, 2326, 4], "code_num": [2], "code": "arr = np.array([[1., 0., 0.], [1., 0., 0.], [0., 0.,1.], [0.,1.,0.]])\\nnames = ['age01', 'age02', 'age03']\\nval = [float(names[ind][4:6]) for ind in np.where(arr == 1.)[1]]", "id": "32755706", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1519, 336, 822, 1708, 2, 2610, 990, 4], "code_num": [2], "code": "from matplotlib.dates import DateFormatter\\nformatter = DateFormatter('%Y-%m-%d %H:%M:%S')\\nplt.gcf().axes[0].xaxis.set_major_formatter(formatter)", "id": "12911987", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 4356, 1828, 177, 2, 739, 1833, 551, 3467, 540, 188, 2326, 4], "code_num": [2], "code": "currentHelp = base64.b64decode(helpData.read())", "id": "19326086", "code_sizes": 1}, {"nl_num": [3, 3195, 2805, 2610, 2101, 1708, 4186, 4], "code_num": [2], "code": "plt.annotate(\\n    '30.2',\\n    xy=(3, y),\\n    xycoords='data',\\n    xytext=(3, y - 5),\\n    textcoords='data',\\n    horizontalalignment='center',\\n    arrowprops=dict(facecolor='black', arrowstyle=\"->\")\\n)", "id": "30001328", "code_sizes": 1}, {"nl_num": [3, 550, 568, 955, 1828, 2710, 853, 4271, 4179, 3129, 4], "code_num": [2], "code": "lst = \"aaabaabacabaacaca\"\\n\\ndef go(it):\\n    for x in it:\\n        if x == 'b':\\n            yield [x] + list(go(it))\\n        else:\\n            yield x\\n            if x == 'c':\\n                break \\n\\n\\nprint list(go(iter(lst)))", "id": "10415752", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 191, 1828, 2710, 1956, 3675, 2911, 4], "code_num": [2], "code": "re.findall('[(][^)]*[)]|\\S+', key)", "id": "10566204", "code_sizes": 1}, {"nl_num": [3, 3001, 1442, 568, 2936, 3760, 1708, 3784, 3747, 1668, 4], "code_num": [2], "code": "import numpy as np\\nimport cv2\\n\\nsrc = cv2.imread('objects.png')\\nsrc_flatten = np.reshape(np.ravel(src, 'C'), (-1, 3))\\ndst = np.zeros(src.shape, np.float32)\\n\\ncolors = np.array([[0x00, 0x00, 0x00],\\n                   [0xff, 0xff, 0xff],\\n                   [0xff, 0x00, 0x00],\\n                   [0x00, 0xff, 0x00],\\n                   [0x00, 0x00, 0xff]], dtype=np.float32)\\nclasses = np.array([[0], [1], [2], [3], [4]], np.float32)\\n\\nknn = cv2.KNearest()\\nknn.train(colors, classes)\\nretval, result, neighbors, dist = knn.find_nearest(src_flatten.astype(np.float32), 1)\\n\\ndst = colors[np.ravel(result, 'C').astype(np.uint8)]\\ndst = dst.reshape(src.shape).astype(np.uint8)\\n\\ncv2.imshow('src', src)\\ncv2.imshow('dst', dst)\\ncv2.waitKey()", "id": "24685436", "code_sizes": 1}, {"nl_num": [3, 3990, 2, 568, 1704, 2610, 1828, 4238, 3293, 1125, 869, 4268, 4], "code_num": [2], "code": "import ast\\n(options, args) = parser.parse_args()    \\nmyopt = ast.literal_eval(options.myopt)", "id": "3175606", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3881, 900, 3518, 2610, 1977, 169, 1519, 2605, 2326, 4], "code_num": [2], "code": "def check_function():\\n    form = CheckForm()\\n    code=form.some_code.data\\n    check_code = Codes.query.filter_by(code=code).first()\\n    if not check_code:\\n        print 'Code not found'\\n        return   # You don't have to worry about that again\\n\\n    if check_code.activated == True:\\n        print 'Code already used'\\n        return   # Second case is already covered\\n\\n    # That's the only case left, no need for an `if` condition\\n    check_code.activated = True\\n    db.session.add(check_code)\\n    db.session.commit()", "id": "26755183", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2878, 2, 2, 2058, 4179, 3312, 307, 2610, 346, 420, 2326, 4], "code_num": [2], "code": "numpy.set_printoptions(suppress=True)", "id": "30614542", "code_sizes": 1}, {"nl_num": [3, 1727, 3200, 2368, 327, 3293, 2587, 4018, 2417, 2, 169, 2046, 4], "code_num": [2], "code": "import numpy as np\\na = np.random.rand(20)\\na[4] = -np.inf\\nk = 10\\na[np.isneginf(a)] = inf\\nresult = a[np.argsort(a)[:k]]", "id": "16193202", "code_sizes": 1}, {"nl_num": [3, 2568, 2610, 2, 3747, 188, 4], "code_num": [2], "code": "ir.sequence", "id": "16784271", "code_sizes": 1}, {"nl_num": [3, 4137, 4640, 2464, 2149, 1400, 3518, 3293, 2710, 568, 4465, 4], "code_num": [2], "code": "dict_with_ints = dict((k,int(v)) for k,v in dict_with_strs.iteritems())", "id": "9224385", "code_sizes": 1}, {"nl_num": [3, 2, 188, 864, 3427, 1650, 2, 3407, 3293, 1828, 2, 4], "code_num": [2], "code": "def cmds(cmd):\\n    infile = Popen(cmd, shell=True, stdout=PIPE).stdout\\n    print infile.readline()\\n    print infile.readline()\\n    print infile.readline()\\n    while True:\\n        line = infile.readline()\\n        if not line:\\n            break\\n        if line == '\\n':\\n            print infile.readline()\\n            print infile.readline()\\n            print infile.readline()", "id": "5502454", "code_sizes": 1}, {"nl_num": [3, 1616, 1828, 3518, 853, 1828, 4561, 3733, 3787, 2610, 188, 4], "code_num": [2], "code": "def insert(item, tree):\\n    if (item < tree.entry):\\n        if (tree.left != None):\\n            insert(item, tree.left)\\n        else:\\n            tree.left = Tree(item)\\n    else:\\n        if (tree.right != None):\\n            insert(item, tree.right)\\n        else:\\n            tree.right = Tree(item)", "id": "16505568", "code_sizes": 1}, {"nl_num": [3, 796, 4047, 4498, 3293, 1977, 2610, 655, 2326, 4], "code_num": [2], "code": "for item in value:\\n    item.col", "id": "14579324", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3881, 2613, 1400, 291, 265, 2604, 2610, 4491, 2610, 990, 1708, 265, 1773, 2326, 4], "code_num": [2], "code": "import time\\n\\nold_time = time.strptime('01:00', '%H:%M')\\nnew_time = time.strptime('06:00', '%H:%M')\\n\\nprint(old_time)\\nprint(new_time)\\n\\nif old_time > new_time:\\n    print('old time is old')\\nelse:\\n    print('new is cool')", "id": "34421521", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1882, 1025, 549, 777, 1833, 2610, 188, 2326, 4], "code_num": [2], "code": "for child in [child for child_root in tree_root for child in child_root]:\\n    print(child)", "id": "29166324", "code_sizes": 1}, {"nl_num": [3, 697, 2, 835, 540, 188, 1075, 95, 2326, 4], "code_num": [2], "code": "PyObject_IsInstance()", "id": "2805841", "code_sizes": 1}, {"nl_num": [3, 4328, 3293, 1828, 3467, 3004, 853, 1828, 4640, 540, 262, 4585, 4], "code_num": [2], "code": "users = {}\\n\\nwith open(text_file) as f:\\n    for line in f:\\n        parts = line.rstrip().split(', ')\\n        name = parts[0]\\n        users[name] = {}\\n\\n        for rating in parts[1:]:\\n            song, score = rating.split(': ')\\n            song = song[1:-1]\\n            users[name][song] = score\\n\\nprint users", "id": "26352774", "code_sizes": 1}, {"nl_num": [3, 2228, 89, 1980, 2610, 990, 4], "code_num": [2], "code": "def spyder_getpass(prompt='Password: '):\\n  set_spyder_echo(False)\\n  password = raw_input(prompt)\\n  set_spyder_echo(True)\\n  return password", "id": "10142947", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 2007, 2000, 990, 897, 2610, 1312, 955, 2326, 4], "code_num": [2], "code": "from multiprocessing import Process\\n\\ndef f(name):\\n    print 'hello', name\\n\\nif __name__ == '__main__':\\n    p = Process(target=f, args=('bob',))\\n    p.start()\\n    p.join()", "id": "6357850", "code_sizes": 1}, {"nl_num": [3, 4133, 2605, 1394, 568, 2933, 899, 853, 1406, 2206, 3293, 250, 4179, 1828, 3794, 2326, 4], "code_num": [2], "code": "even = []\\nodd = []\\nfor i in my_list:\\n    (odd if i % 2 else even).append(i)", "id": "17266931", "code_sizes": 1}, {"nl_num": [3, 1550, 1170, 223, 1828, 655, 4139, 2220, 4], "code_num": [2], "code": "def get_thread(msg):\\n    messages = [] # empty message set\\n\\n    while msg.response_to:  \\n         messages.append(msg)\\n         msg = msg.response_to\\n\\n    messages.append(msg) # will append the original message\\n\\n    return messages", "id": "1797586", "code_sizes": 1}, {"nl_num": [3, 188, 864, 3427, 1637, 1400, 1597, 4178, 2002, 4], "code_num": [2], "code": "warnings.showwarning()", "id": "2187269", "code_sizes": 1}, {"nl_num": [3, 188, 817, 1422, 1773, 4], "code_num": [2], "code": "while True:\\n    try:\\n        # in python 3:\\n        # age = int(input('Please enter your age.(numerical value)'))\\n        # in python 2.7\\n        age = int(raw_input('Please enter your age.(numerical value)'))\\n        break\\n    except ValueError:\\n        print('that was not an integer; try again...')", "id": "33713213", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2878, 1400, 2489, 4179, 1828, 2, 2319, 2610, 188, 4], "code_num": [2], "code": "''.join(soup.findAll(text=True))", "id": "2416823", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2616, 2, 3293, 4729, 177, 3682, 4182, 1828, 611, 3747, 3138, 4], "code_num": [2], "code": "translator = { 'BINARY'         : 'RAW',\\\\n           'BFILE'          : 'BFILE',\\\\n           'BLOB'           : 'BLOB',\\\\n           'CLOB'           : 'CLOB',\\\\n           'CURSOR'         : 'CURSOR',\\\\n           'DATETIME'       : 'DATE',\\\\n           'FIXED_CHAR'     : 'CHAR',\\\\n           'FIXED_UNICODE'  : 'NCHAR',\\\\n           'INTERVAL'       : 'INTERVAL',\\\\n           'LONG_STRING'    : 'LONG',\\\\n           'LONG_UNICODE'   : 'LONG ',\\\\n           'NCLOB'          : 'NCLOB',\\\\n           'NUMBER'         : \"NUMBER\",\\\\n           'OBJECT'         : 'OBJECT',\\\\n           'ROWID'          : 'ROWID',\\\\n           'STRING'         : 'VARCHAR2',\\\\n           'TIMESTAMP'      : 'TIMESTAMP',\\\\n           'UNICODE'        : \"NVARCHAR2\" }\\n\\nstr_coltype     # example:  \"<type 'cx_Oracle.NUMBER'>\"\\ncx_coltp = re.findall(\"\\.([^\\.]+)'>$\", str_coltype)[0]\\nora_coltp = translator[ cx_coltp ]", "id": "28997004", "code_sizes": 1}, {"nl_num": [3, 1780, 4238, 338, 568, 41, 4], "code_num": [2], "code": "txt = txt[:tagEnd] + ' '.join(lis) + wikiText + txt[endTag:]", "id": "13328930", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2073, 3293, 4238, 4179, 4684, 568, 1828, 4238, 4179, 3053, 1162, 2610, 188, 4], "code_num": [2], "code": "words = 'She sells seashells by the seashore'\\n\\nunique_letters = set(words.lower())\\nunique_letters.discard(' ') # If there was a space, remove it.", "id": "2245903", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 997, 3055, 990, 2, 2326, 4], "code_num": [2], "code": "def imerge(a, b):\\n    for i, j in itertools.izip(a,b):\\n        yield i\\n        yield j", "id": "243865", "code_sizes": 1}, {"nl_num": [3, 872, 746, 3002, 990, 2746, 4], "code_num": [2], "code": "def create_deep_dict(value, layers):\\n\\n    orig_data = {}\\n    data = orig_data\\n    last_layer = layers[-1]\\n\\n    for layer in layers[:-1]:\\n        data[layer] = {}\\n        data = data[layer]\\n\\n    data[last_layer] = value\\n\\n    return orig_data\\n\\ndef deep_dict_value(data, layers):\\n\\n    for layer in layers:\\n        data = data[layer]\\n\\n    return data", "id": "19937210", "code_sizes": 1}, {"nl_num": [3, 2, 426, 768, 2610, 3824, 4], "code_num": [2], "code": "def abcmaker(ind):\\n    def abc(state):\\n        self.feature_inputs[ind].setEnabled(state == Qt.Checked)\\n    return abc\\nactive_checkbox.stateChanged.connect(abcmaker(i))", "id": "14611931", "code_sizes": 1}, {"nl_num": [3, 483, 4592, 1828, 3466, 3293, 1828, 3079, 3004, 169, 2217, 568, 4254, 873, 2473, 4179, 1400, 4585, 2610, 990, 4], "code_num": [2], "code": "import csv\\nimport sys\\nimport os\\n\\nif __name__ == '__main__':\\n    total = 0\\n    source = '.'\\n    with open(os.path.join(source, 'data.csv'), 'r') as f:\\n        rows = csv.reader(f)\\n        for row in rows:\\n            try:\\n                t = row[1].split('_')\\n            except IndexError:\\n                continue\\n            if len(t) >= 4 and t[3] == '001': \\n                total += int(row[13])\\n    print ('Club 001' + '\\t' + str(total))", "id": "18897675", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4174, 327, 568, 1400, 4249, 3627, 4244, 2610, 345, 2, 4], "code_num": [2], "code": "#update list upon drop down\\nself.cbox = Combobox(self, width = 10, postcommand = self.updtcblist)\\n\\ndef updtcblist(self):\\n    list = self.getPortLst()\\n    self.cbox['values'] = list", "id": "18906047", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 4570, 188, 568, 4672, 339, 1422, 1670, 568, 1579, 4350, 4], "code_num": [2], "code": "def std_output(stdout,outfile=''):\\n    out = 0\\n    f = codecs.open(outfile,'w','UTF-8')\\n    for line in iter(stdout.readline, ''):\\n        f.write('%s\\n'%(line.rstrip().decode('UTF-8')))\\n        out += 1\\n        if i == out: break\\n    stdout.close()\\n    f.close()\\n\\noutfile = '/path/myout'\\ninfile = '/path/mydata'\\n\\nsubproc = subprocess.Popen(args,**kw)\\nt = threading.Thread(target=std_output,args=[subproc.stdout,outfile])\\nt.daemon = True\\nt.start()\\n\\ni = 0\\nf = codecs.open(infile,'r','UTF-8')\\nfor line in f:\\n    subproc.stdin.write('%s\\n'%(line.strip().encode('UTF-8')))\\n    i += 1\\nsubproc.stdin.write('%s\\n'%(' '*4096)) ### push dummy data ###\\nf.close()\\nt.join()\\nsubproc.terminate()", "id": "8698280", "code_sizes": 1}, {"nl_num": [3, 2385, 864, 3397, 338, 4518, 540, 2303, 2610, 1976, 177, 4], "code_num": [2], "code": "drafts = Draft.objects.filter(user=request.user)", "id": "11871553", "code_sizes": 1}, {"nl_num": [3, 4028, 2494, 1273, 2164, 2525, 568, 1251, 540, 2, 4], "code_num": [2], "code": "# Add new to old and sort the whole lot...\\nold_hash_list.extend(new_hash_list)\\nold_hash_list.sort()\\n\\n# Assuming new is already sorted than create new list of merged\\nimport heapq\\nold_and_new = list(heapq.merge(old_hash_list, sorted(new_hash_list)))", "id": "21203326", "code_sizes": 1}, {"nl_num": [3, 2385, 4458, 3372, 4], "code_num": [2], "code": "Meta.app_label", "id": "9308395", "code_sizes": 1}, {"nl_num": [3, 550, 568, 97, 2523, 1422, 2385, 305, 2951, 2, 2610, 1706, 4], "code_num": [2], "code": "CELERY_ALWAYS_EAGER = True", "id": "12698212", "code_sizes": 1}, {"nl_num": [3, 2385, 2794, 1297, 568, 3178, 1400, 1176, 4], "code_num": [2], "code": "pages = Page.objects.annotate(num_countries=Count('country'))\\npages[0].num_countries  # 3\\npages[1].num_countries  # 4", "id": "29740098", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2484, 1400, 765, 2094, 3293, 2697, 1600, 1708, 990, 4], "code_num": [2], "code": "link = sh.hyperlink_map.get((row,2))", "id": "25904365", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4789, 1828, 3004, 568, 4065, 2969, 2610, 549, 4065, 3747, 768, 4592, 1297, 188, 1007, 451, 3455, 2326, 4], "code_num": [2], "code": "s = paramiko.SSHClient()\\ns.set_missing_host_key_policy(paramiko.AutoAddPolicy())\\ns.connect(\"xxx.xxx.xxx.xxx\",22,username=xxx,password='',timeout=4)\\n\\nsftp = s.open_sftp()\\nsftp.put('/home/me/file.ext', '/remote/home/file.ext')", "id": "11499507", "code_sizes": 1}, {"nl_num": [3, 2701, 3747, 3722, 1828, 2346, 4], "code_num": [2], "code": "import numpy as np\\nimport matplotlib\\nimport matplotlib.pyplot as plt\\n# set up the bins\\nNbins = 10\\nbins = np.linspace(0, 1, Nbins +1, endpoint=True)\\n# get some fake data\\nx = np.random.rand(300)\\ny = np.arange(300)\\n# figure out which bin each x goes into\\nbin_num = np.digitize(x, bins, right=True) - 1\\n# compute the counts per bin\\nhist_vals = np.bincount(bin_num)\\n# set up array for bins\\nmeans = np.zeros(Nbins)\\n# numpy slicing magic to sum the y values by bin\\nmeans[bin_num] += y\\n# take the average\\nmeans /= hist_vals\\n\\n# make the figure/axes objects\\nfig, ax = plt.subplots(1,1)\\n# get a color map\\nmy_cmap = cm.get_cmap('jet')\\n# get normalize function (takes data in range [vmin, vmax] -> [0, 1])\\nmy_norm = Normalize()\\n# use bar plot \\nax.bar(bins[:-1], hist_vals, color=my_cmap(my_norm(means)), width=np.diff(bins))\\n\\n# make sure the figure updates\\nplt.draw()\\nplt.show()", "id": "21610858", "code_sizes": 1}, {"nl_num": [3, 1592, 733, 1605, 2604, 2, 2503, 2326, 4], "code_num": [2], "code": "import requests\\nimport bs4\\nimport re\\nurl = \"http://www.tytnetwork.com/annual-archives/{year}-main-show-archives/\"\\n\\n\\ndef getPodCasts(m,d,y):\\n     my_url = url.format(year=y)\\n     print my_url\\n     soup = bs4.BeautifulSoup(requests.get(my_url,headers={'User-agent': 'Mozilla/5.0'}).content)\\n     calendar_row_for_month=soup.findAll(text=re.compile(\"^%s.*%s\"%(m,y)))[0].parent.parent.parent\\n     for sib in calendar_row_for_month.findNextSiblings():\\n        if \">%02d<\"%d in str(sib):\\n           break\\n     assert \">%02d<\"%d in str(sib), \"Error Date %s/%s/%s Not Found\"%(m,d,y)\\n     audios = sib.find(text=\"%02d\"%d).next.next\\n     return re.findall('https?:[^\" ]*',str(audios))\\n\\n\\nprint getPodCasts(\"June\",12,2014)", "id": "24345066", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3222, 1828, 578, 2049, 1095, 3293, 549, 3898, 3332, 711, 2951, 4633, 4179, 3946, 2326, 4], "code_num": [2], "code": "import pandas as pd\\nimport pandas.io.sql as psql\\nchunk_size = 10000\\noffset = 0\\ndfs = []\\nwhile True:\\n  sql = \"SELECT * FROM MyTable limit %d offset %d order by ID\" % (chunk_size,offset) \\n  dfs.append(psql.read_frame(sql, cnxn))\\n  offset += chunk_size\\n  if len(dfs[-1]) < chunk_size:\\n    break\\nfull_df = pd.concat(dfs)", "id": "18107953", "code_sizes": 1}, {"nl_num": [3, 4133, 2605, 1394, 568, 2878, 1828, 1957, 3282, 3293, 3728, 177, 2, 2326, 4], "code_num": [2], "code": "child.match.group(1)", "id": "24940023", "code_sizes": 1}, {"nl_num": [3, 1727, 412, 2252, 2462, 2672, 726, 4], "code_num": [2], "code": "parent = Parent()\\ndb.session.add(parent)\\ndb.session.flush()\\n\\nprint parent.id  # after flush(), parent object would be automatically\\n                 # assigned with a unique primary key to its id field \\n\\nchild = Child()\\nchild.parent_id = parent.id\\ndb.session.add(child)", "id": "28242523", "code_sizes": 1}, {"nl_num": [3, 2, 1828, 4238, 4179, 2206, 568, 1547, 1828, 4238, 4], "code_num": [2], "code": "[reduce(lambda a, b: a*b, x)  for x in zip(*cd)]", "id": "33130958", "code_sizes": 1}, {"nl_num": [3, 69, 568, 1150, 3697, 1828, 2, 223, 3747, 1959, 4178, 1828, 2049, 1095, 4], "code_num": [2], "code": "import pandas as pd\\n\\nbegin_month = pd.Series([1, 19, 145, 32, 54])\\nend_month = pd.Series([19,45,32,54,99])\\n\\ndf = pd.DataFrame({\"begin_month\":begin_month, \"end_month\": end_month})\\n\\ndf['parity'] = df['begin_month'] == df['end_month'].shift()\\ndf.ix[0,'parity'] = True\\n\\nprint df", "id": "33580273", "code_sizes": 1}, {"nl_num": [3, 188, 3759, 694, 3560, 2473, 262, 4], "code_num": [2], "code": "import random\\n\\nx = int(raw_input(\"Number(1-6): \")) # note I made x an int\\n\\nwhile True:\\n    y = random.randint(1, 6)\\n    if x != y: break", "id": "29804599", "code_sizes": 1}, {"nl_num": [3, 40, 2524, 540, 2101, 1007, 451, 2723, 4], "code_num": [2], "code": "import pylab\\nimport time\\n\\npylab.ion() # animation on\\n\\n# Note the comma after line. This is placed here because \\n# plot returns a list of lines that are drawn.\\nline, = pylab.plot(0,1,'ro',markersize=6) \\npylab.axis([0,1,0,1])\\n\\nline.set_xdata([1,2,3])  # update the data\\nline.set_ydata([1,2,3])\\npylab.draw() # draw the points again\\ntime.sleep(6)\\n\\nline1, = pylab.plot([4],[5],'g*',markersize=8) \\npylab.draw() \\n\\nfor i in range(10):\\n    line.set_xdata([1,2,3])  # update the data\\n    line.set_ydata([1,2,3])\\n    pylab.draw() # draw the points again\\n    time.sleep(1)\\n\\nprint \"done up there\"\\nline2, = pylab.plot(3,2,'b^',markersize=6)     \\npylab.draw() \\n\\ntime.sleep(20)", "id": "8965055", "code_sizes": 1}, {"nl_num": [3, 1946, 2737, 1943, 568, 691, 2, 2024, 3293, 3083, 4179, 1817, 4], "code_num": [2], "code": "result = max(pairs, key=m)", "id": "27577522", "code_sizes": 1}, {"nl_num": [3, 2, 1828, 955, 1268, 3697, 568, 660, 339, 4], "code_num": [2], "code": "pid = os.fork()\\nif pid == 0:\\n     s = Popen('cat', stdin=PIPE, stdout=DEVNULL, stderr=DEVNULL)\\n     s.stdin.write(b'helloworld')\\n     s.stdin.close()\\n     s.wait()\\n     sys.exit()\\ntime.sleep(1000)", "id": "25650055", "code_sizes": 1}, {"nl_num": [3, 592, 1828, 1170, 568, 3703, 2868, 4179, 4498, 4179, 549, 4018, 4], "code_num": [2], "code": "import numpy\\nimport itertools as it\\narr=numpy.random.rand(4,400)\\ntransposed=arr.T\\nvalues=[numpy.dot(i,j) for i, j in it.combinations(transposed, 2)]\\nprint values", "id": "26612979", "code_sizes": 1}, {"nl_num": [3, 2551, 507, 4505, 2610, 188, 4], "code_num": [2], "code": "answer = ''\\n\\nwith open('yourFile.txt','r') as open_file, open('output_file','w') as output_file:\\n    for each_line in open_file:\\n        if each_line.find('[A>]'):\\n            start_position = each_line.find('[A>]')\\n            start_position = start_position + 3\\n            end_position = each_line[start_position:].find('[/W]')\\n\\n            answer = each_line[start_position:end_position] + '\\n'\\n            output_file.write(answer)", "id": "6790915", "code_sizes": 1}, {"nl_num": [3, 1016, 1828, 262, 3293, 4688, 568, 733, 4], "code_num": [2], "code": "def some_view(request):\\n    context = {\\n        'a': 5\\n    }\\n\\n    return render_to_response(\\n        'my_template.html',\\n        context,\\n        context_instance=RequestContext(request)\\n    )", "id": "16533244", "code_sizes": 1}, {"nl_num": [3, 3365, 177, 41, 540, 188, 1605, 2604, 2, 3090, 549, 1120, 1460, 4], "code_num": [2], "code": "headers = {\\n    \"User-Agent\": \"jpostma1's crawler\"\\n}\\n\\nurl = \"http://manybooks.net/_scripts/send.php?tid=lovecrafthother06At_the_Mountains_of_Madness&book=1:text:.txt:text\"\\nreq = urllib2.Request(url, headers=headers)\\ntestfile = urllib2.urlopen(req)\\nwith open(\"book 001.txt\",'w') as w:\\n    w.write(testfile.read())", "id": "32567831", "code_sizes": 1}, {"nl_num": [3, 3990, 2496, 2238, 188, 389, 177, 1861, 3528, 4178, 1828, 4171, 2733, 2, 4], "code_num": [2], "code": "msvcrXY.dll", "id": "5373558", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2103, 1659, 2746, 568, 2746, 4], "code_num": [2], "code": "import demjson\\n\\nfor data in datalist:\\n    dct = demjson.decode(data)\\n    print dct['gallery'] # etc...", "id": "17147900", "code_sizes": 1}, {"nl_num": [3, 188, 1331, 2963, 1569, 3096, 1563, 4], "code_num": [2], "code": "app.exec_()", "id": "33973721", "code_sizes": 1}, {"nl_num": [3, 550, 568, 11, 2, 1007, 451, 2, 2326, 4], "code_num": [2], "code": "class MyMemCacheProtocol(MemCacheProtocol):\\n\\n    MAX_KEY_LENGTH = 1000", "id": "14936438", "code_sizes": 1}, {"nl_num": [3, 188, 864, 1372, 338, 327, 3293, 1828, 2590, 4], "code_num": [2], "code": "html = '''\\n<input type=\"hidden\" name=\"SECRETCODE\" value=\"l53DLeOfj1\" />\\n<input type=\"hidden\" name=\"NotSoSecretCode\" value=\"Nr4MNjyK\" />\\n'''\\nsoup = BeautifulSoup(html)\\nprint soup.find(\"input\", {\"name\":\"SECRETCODE\"})\\nprint soup.find(\"input\", {\"name\":\"NotSoSecretCode\"})", "id": "22380703", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1652, 4691, 169, 4570, 1400, 835, 2610, 990, 4], "code_num": [2], "code": "from eight import mynum\\nobject = mynum()\\nobject.numf(3,40)", "id": "29970250", "code_sizes": 1}, {"nl_num": [3, 550, 568, 86, 3304, 1732, 1863, 2610, 3647, 4178, 4379, 2610, 990, 2326, 4], "code_num": [2], "code": "os.path.join()", "id": "10766483", "code_sizes": 1}, {"nl_num": [3, 4028, 1355, 2464, 4047, 3909, 2386, 864, 784, 3467, 169, 3209, 4], "code_num": [2], "code": "sql=('UPDATE results SET '\\n     + ', '.join(key+' = ?' for key in keys)\\n     + 'WHERE id = ?')\\nargs = [results[key] for key in keys] + [id]\\ncur.execute(sql,args)", "id": "3343565", "code_sizes": 1}, {"nl_num": [3, 211, 4179, 1400, 869, 2610, 1828, 3004, 2610, 188, 4021, 3518, 666, 551, 527, 177, 4179, 2992, 1227, 3971, 4], "code_num": [2], "code": "F = fileobj.readline().strip()", "id": "29236280", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1818, 1400, 1270, 4179, 1902, 881, 552, 1400, 3678, 1400, 2710, 4], "code_num": [2], "code": "print re.findall(r\"^(.+?)(?=\\(\\d{4}|\\d{4})\",Name)", "id": "27421758", "code_sizes": 1}, {"nl_num": [3, 188, 864, 3195, 1828, 4238, 4179, 2, 327, 4], "code_num": [2], "code": "index_list = []\\nfor n, item in enumerate(list):\\n    if len(item) == 0:\\n        index_list.append(n)", "id": "16236800", "code_sizes": 1}, {"nl_num": [3, 2711, 4119, 2412, 1519, 552, 1400, 3678, 4179, 955, 4], "code_num": [2], "code": "P.wait()", "id": "32948488", "code_sizes": 1}, {"nl_num": [3, 4133, 4190, 1828, 619, 2, 223, 949, 336, 785, 2326, 4], "code_num": [2], "code": "invoice_date = i.item_set.order_by('due_date')[0].due_date", "id": "17634462", "code_sizes": 1}, {"nl_num": [3, 3460, 3630, 2714, 4178, 1828, 2406, 869, 2610, 188, 4], "code_num": [2], "code": "print '\\n'.join([str(factorial(x)) for x in range(0, 6)])", "id": "25515556", "code_sizes": 1}, {"nl_num": [3, 2384, 2618, 2504, 1268, 67, 3466, 540, 3447, 3930, 4], "code_num": [2], "code": "from sklearn.svm import LinearSVC\\nfrom sklearn.datasets import load_iris\\nimport numpy as np\\n\\niris = load_iris()\\nX, y = iris.data, iris.target\\nprint X.shape\\n\\nlsvc = LinearSVC(C=0.01, penalty=\"l1\", dual=False)\\nX_new = lsvc.fit_transform(X, y)\\nprint X_new.shape\\n\\nprint lsvc.coef_\\n\\nnewData = np.random.rand(100,4)\\nnewData_X = lsvc.transform(newData)\\nprint newData_X.shape", "id": "30984231", "code_sizes": 1}, {"nl_num": [3, 550, 568, 162, 1031, 4179, 1237, 2610, 1828, 990, 4640, 2326, 4], "code_num": [2], "code": "from collections import OrderedDict\\n\\ndict=OrderedDict()\\ndict['first']=1\\ndict['second']=2\\ndict['third']=3\\ndict", "id": "31715344", "code_sizes": 1}, {"nl_num": [3, 4328, 1828, 3467, 3004, 4047, 3676, 2610, 2940, 2366, 169, 520, 1669, 2366, 2610, 2473, 2799, 1170, 2610, 990, 4], "code_num": [2], "code": "Opened_File.seek(0)", "id": "23810126", "code_sizes": 1}, {"nl_num": [3, 1132, 2, 1418, 3656, 1708, 821, 4], "code_num": [2], "code": "def get_db_info():\\n\\n    rds_conn = boto.connect_rds2(profile_name=AWS_PROFILE)\\n    if not rds_conn:\\n        print(_red('Cannot connect to AWS.RDS'))\\n        return\\n\\n    instances = rds_conn.describe_db_instances()\\n    if not instances:\\n        print(_red('No instances found'))\\n        return\\n\\n    inst = instances['DescribeDBInstancesResponse']['DescribeDBInstancesResult']['DBInstances'][0]\\n\\n    dbinfo = {}\\n    endpoint = inst['Endpoint']\\n    dbinfo['VPCSecurityGroupId'] = inst['VpcSecurityGroups'][0]['VpcSecurityGroupId']\\n    dbinfo['dbSecurityGroupName'] = inst['DBSecurityGroups'][0]['DBSecurityGroupName']\\n\\n    print('')\\n    print(_blue('db Info ===========>\\n'))\\n    for item in dbinfo:\\n        print(_green('%20s : %s' % (item, dbinfo[item])))", "id": "29410766", "code_sizes": 1}, {"nl_num": [3, 4137, 990, 2464, 69, 1151, 2473, 3800, 2002, 551, 2613, 1288, 2851, 2440, 2326, 4], "code_num": [2], "code": "import warnings\\n\\ndef fxn():\\n    warnings.warn(\"deprecated\", DeprecationWarning)\\n\\nwith warnings.catch_warnings(record=True) as w:\\n    # Cause all warnings to always be triggered.\\n    warnings.simplefilter(\"always\")\\n    # Trigger a warning.\\n    fxn()\\n    # Verify some things\\n    assert len(w) == 1\\n    assert issubclass(w[-1].category, DeprecationWarning)\\n    assert \"deprecated\" in str(w[-1].message)", "id": "5644836", "code_sizes": 1}, {"nl_num": [3, 4135, 864, 1199, 4370, 1400, 2714, 540, 4019, 2710, 4], "code_num": [2], "code": "item = ListCtrl_name.GetItem(instance_location_dictionary [item_name])\\nListCtrl_name.Select(item.GetId())", "id": "20417392", "code_sizes": 1}, {"nl_num": [3, 2385, 3747, 3154, 2317, 2610, 1400, 768, 2710, 4], "code_num": [13], "code": "settings.py", "id": "1577800", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2, 1422, 2770, 1828, 336, 540, 2049, 1422, 2587, 2326, 4], "code_num": [2], "code": "df = pd.DataFrame({\\n        'A':\\n            ['1980-01-01', '1980-02-02', '1980-03-02', '1980-01-21',\\n             '1981-01-21', '1991-02-21', '1991-03-23'] })\\ndf['A'] = pd.to_datetime(df['A']).astype('int64')\\nmax_a = df.A.max()\\nmin_a = df.A.min()\\nmin_norm = -1\\nmax_norm =1\\ndf['NORMA'] = (df.A- min_a) *(max_norm - min_norm) / (max_a-min_a) + min_norm", "id": "31036148", "code_sizes": 1}, {"nl_num": [3, 1783, 2, 1242, 2610, 3767, 4], "code_num": [2], "code": "#!/usr/bin/python\\nimport numpy as np\\nimport matplotlib.pyplot as plt\\nimport matplotlib.ticker as ticker\\n\\n#vectors to plot: 4D for this example\\ny1=[1,2.3,8.0,2.5]\\ny2=[1.5,1.7,2.2,2.9]\\n\\nx=[1,2,3,8] # spines\\n\\nfig,(ax,ax2,ax3) = plt.subplots(1, 3, sharey=False)\\n\\n# plot the same on all the subplots\\nax.plot(x,y1,'r-', x,y2,'b-')\\nax2.plot(x,y1,'r-', x,y2,'b-')\\nax3.plot(x,y1,'r-', x,y2,'b-')\\n\\n# now zoom in each of the subplots \\nax.set_xlim([ x[0],x[1]])\\nax2.set_xlim([ x[1],x[2]])\\nax3.set_xlim([ x[2],x[3]])\\n\\n# set the x axis ticks \\nfor axx,xx in zip([ax,ax2,ax3],x[:-1]):\\n  axx.xaxis.set_major_locator(ticker.FixedLocator([xx]))\\nax3.xaxis.set_major_locator(ticker.FixedLocator([x[-2],x[-1]]))  # the last one\\n\\n# EDIT: add the labels to the rightmost spine\\nfor tick in ax3.yaxis.get_major_ticks():\\n  tick.label2On=True\\n\\n# stack the subplots together\\nplt.subplots_adjust(wspace=0)\\n\\nplt.show()", "id": "8230638", "code_sizes": 1}, {"nl_num": [3, 3990, 262, 3518, 551, 4640, 1422, 3867, 3995, 2610, 188, 4], "code_num": [2], "code": "from collections import defaultdict\\ntest_classes = {\\n    'test1': test1,\\n    'test2': test2\\n}\\ntest_instances = defaultdict(list)\\ntest_instances[testvariable].append(test_classes[testvariable])", "id": "18398189", "code_sizes": 1}, {"nl_num": [3, 1317, 2, 3703, 4807, 4178, 1400, 2969, 2238, 4420, 1227, 1227, 540, 2, 169, 990, 3528, 4], "code_num": [2], "code": "omp_set_dynamic(1);", "id": "6289668", "code_sizes": 1}, {"nl_num": [3, 4405, 1828, 3958, 262, 2377, 3995, 2, 3293, 1976, 817, 4], "code_num": [2], "code": "lists = {\\n    \"list1\": [\"one\",\"Two\",\"three\"],\\n    \"list2\": [\"1\",\"2\",\"3\"],       \\n}\\n\\nwhile True:\\n    choice = raw_input(\"enter the list name: \")\\n    try:\\n        for item in lists[choice]:\\n            print item\\n    except KeyError:\\n        print \"I never heard of any list named '{}'! Try again.\".format(choice)\\n    else:\\n        break", "id": "27537230", "code_sizes": 1}, {"nl_num": [3, 483, 1007, 2534, 1747, 568, 3229, 69, 568, 2426, 1828, 1170, 3293, 1312, 1170, 2610, 1400, 2943, 3867, 4], "code_num": [2], "code": "self.do_search(linenumber)", "id": "5870788", "code_sizes": 1}, {"nl_num": [3, 1473, 549, 2728, 3004, 1708, 990, 2529, 452, 4], "code_num": [2], "code": "import re\\n\\nr = re.compile(r'(<my id=\"1\">.*)(</my>)')\\n\\nwith open(infilename, 'r') as infile, open(newfile, 'w+') as outfile:\\n    for line in infile:\\n        match = r.search(line)\\n        if match:\\n            f.write(match.group(1) + '(1)' + match.group(2))\\n        else:\\n            f.write(line)", "id": "13843196", "code_sizes": 1}, {"nl_num": [3, 1364, 568, 1427, 3004, 1227, 338, 1708, 990, 3747, 1374, 4], "code_num": [2], "code": "import requests\\nurl = 'http://10.1.1.161:8080/test-organization/test-app/photos/'\\nfiles = { 'file': ('13.jpg', open('/Users/dave/Downloads/13.jpg', 'rb'), 'image/jpeg')}\\ndata = dict(name='barca', country='spain')\\nresponse = requests.post(url, files=files, data=data)", "id": "33885094", "code_sizes": 1}, {"nl_num": [3, 1734, 619, 2765, 2536, 568, 338, 4], "code_num": [2], "code": "import numpy as np\\nimport scipy as sp\\nimport scipy.interpolate\\nimport matplotlib.pyplot as plt\\n\\n# Generate some random data\\ny = (np.random.random(10) - 0.5).cumsum()\\nx = np.arange(y.size)\\n\\n# Interpolate the data using a cubic spline to \"new_length\" samples\\nnew_length = 50\\nnew_x = np.linspace(x.min(), x.max(), new_length)\\nnew_y = sp.interpolate.interp1d(x, y, kind='cubic')(new_x)\\n\\n# Plot the results\\nplt.figure()\\nplt.subplot(2,1,1)\\nplt.plot(x, y, 'bo-')\\nplt.title('Using 1D Cubic Spline Interpolation')\\n\\nplt.subplot(2,1,2)\\nplt.plot(new_x, new_y, 'ro-')\\n\\nplt.show()", "id": "4072844", "code_sizes": 1}, {"nl_num": [3, 1810, 1593, 250, 1828, 1959, 4], "code_num": [2], "code": "lambdas_list.append(lambda obj=obj: obj.some_var)", "id": "7546285", "code_sizes": 1}, {"nl_num": [3, 55, 2237, 2, 1989, 2, 2, 990, 4], "code_num": [2], "code": "# Main Inventory\\nInventory = createInventory()\\n\\n# Populating given inventory aray with items to be used throughout the game.\\ndef createItems(inv):\\n    items = inv\\n    items[1] = \"Axe\"\\n    items[2] = \"Gas\"\\n    items[3] = \"keys\"\\n    items[4] = \"gun\"\\n    items[5] = \"note\"\\n    items[9] = \"full\"\\n\\n# Check if the item passed to it is still in the inventory array\\ndef checkItems(item):\\n    items = Inventory\\n    for i in range(len(items)):\\n        if items[i] == item:\\n            return \"yes\"\\n    return \"no\"\\n\\ndef createInventory():\\n    inv = range(11)\\n    inv[10] = \"made\"\\n    return inv\\n\\ndef stockInventory(item):\\n    inv = Inventory\\n    for i in range (11):\\n        if inv[i] == 0:\\n            inv[i] = item\\n            break\\n    return inv\\n\\ndef checkInventory(item):\\n    inv = Inventory\\n    for i in range(0, 11):\\n        if item == inv[i]:\\n            return \"yes\"\\n    return \"no\"", "id": "19759646", "code_sizes": 1}, {"nl_num": [3, 2, 889, 2610, 1828, 4238, 4], "code_num": [2], "code": "def iter_new_list(old_list):    \\n    for x in old_list:\\n       if needs_expanding(x):\\n           for y in expand(x):\\n               yield y\\n       else:\\n           yield x\\n\\nnew_list = list(iter_new_list(old_list))", "id": "2185822", "code_sizes": 1}, {"nl_num": [3, 3748, 2, 568, 2587, 4018, 2326, 4], "code_num": [2], "code": "vtkout.to_array().T", "id": "5497216", "code_sizes": 1}, {"nl_num": [3, 300, 1349, 4179, 1400, 2, 4179, 2, 2604, 2, 2326, 4], "code_num": [2], "code": "number_primes = 10\\nprime_list = [True]*number_primes\\n\\nfor i in range (2, number_primes):    #check from 2 upwards\\n  if prime_list[i]:                   #If not prime, don't need to bother about searching\\n    j = 2\\n    while j*i < number_primes:        # Filter out all factors of i (2...n * prime)\\n      prime_list[j*i] = False\\n      j+=1", "id": "13486885", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 1945, 1828, 2710, 4179, 3963, 2610, 990, 4], "code_num": [2], "code": "s = raw_input()\\nprint sum(int(c) for c in s.strip())", "id": "5781043", "code_sizes": 1}, {"nl_num": [3, 3461, 3041, 540, 188, 1530, 2376, 4], "code_num": [2, 2, 2], "code": "#!/usr/bin/python\\nimport re\\n\\npat = re.compile(r'''\\n    (?P<open> \\b [^\\W_]+ ) ,, |\\n    ,, (?P<close> [^\\W_]+ ) \\b |\\n    (?P<attrName> \\S+ ) [ ] (?P<attrValue> [^,\\n]+ ) [ ] ,, |\\n    (?P<textContent> [^,\\s] (?: [^,] | , (?!,) )*? ) \\s* (?=[^\\W_]*,,)''',\\n      re.X)\\n\\ntxt = '''html,, \\n    head,,        profile http://gmpg.org/xfn/11 ,,\\n                  lang en-US ,,\\n\\n        title,,   Some markright page.\\n        ,,title\\n    ,,head'''\\n\\nresult = ''\\nopened = False\\nfor m in pat.finditer(txt):\\n    if m.group('attrName'):\\n        result += ' ' + m.group('attrName') + '=\"' + m.group('attrValue') + '\"'\\n    else:\\n        if opened:\\n            opened = False\\n            result += '>'\\n        if m.group('open'):\\n            result += '<' + m.group('open')\\n            opened = True\\n        elif m.group('close'):\\n            result += '</' + m.group('close') + '>'\\n        else:\\n            result += m.group('textContent')\\nprint result", "id": "25327560", "code_sizes": 3}, {"nl_num": [3, 1810, 1594, 4633, 4179, 574, 3433, 338, 4], "code_num": [2], "code": "for line in open_f:\\n    if line[10]==SectionReq:\\n        SearchedBlock = '0'*SpacesReq\\n        strLine = ''.join(str(i) for i in line)\\n        if SearchBlock in strLine:\\n            # empty block found\\n            break", "id": "22326777", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3047, 1773, 540, 547, 694, 4179, 1270, 1708, 1115, 3954, 2326, 4], "code_num": [2], "code": "Str1 = '\"HHHHLLLHHHHHLLLLL\"'\\nif Str1.count(\"H\") >= 8 : print \"match\"", "id": "8143071", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1242, 1828, 338, 4682, 2610, 990, 4], "code_num": [2], "code": "import random\\nfrom matplotlib import pyplot\\nfrom mpl_toolkits.mplot3d import Axes3D\\n\\nmypoints = []\\nfor _ in range(100):\\n    mypoints.append([random.random(),    #x\\n                    random.random(),     #y\\n                    random.random(),     #z\\n                    random.randint(10,100)]) #scalar\\n\\ndata = zip(*mypoints)\\n\\nfig = pyplot.figure()\\nax = fig.add_subplot(111, projection='3d')\\n\\nax.scatter(data[0], data[1], data[2], c=data[3])\\npyplot.show()", "id": "6870922", "code_sizes": 1}, {"nl_num": [3, 454, 3055, 473, 199, 476, 540, 188, 2916, 4], "code_num": [2], "code": "self.assertCountEqual(given_result.columns._data, expected_result.columns._data)", "id": "24592344", "code_sizes": 1}, {"nl_num": [3, 1997, 3965, 169, 3320, 3293, 55, 1833, 3747, 188, 4], "code_num": [2], "code": "numbers = [float(line[67:71].rstrip()) for line in input_file]\\n\\nlargest_num = max(numbers)\\nsmallest_num = min(numbers)\\ntotal = sum(numbers)\\ncount = len(numbers)", "id": "28618342", "code_sizes": 1}, {"nl_num": [3, 1708, 177, 3178, 223, 4047, 1162, 2610, 1828, 2710, 4], "code_num": [2], "code": "if x in word and x!='':\\n\\n        count=word.count(x)\\n        loc=0\\n        while count==1 or count>1:\\n            loc=word.find(x,loc)\\n            list[loc]=x\\n            loc+=1\\n            count-=1  \\n        print 'Good choice!'", "id": "18276086", "code_sizes": 1}, {"nl_num": [3, 717, 2822, 1857, 3747, 2, 3035, 3747, 1625, 3942, 4196, 4], "code_num": [2], "code": "from test import test_handler", "id": "4458281", "code_sizes": 1}, {"nl_num": [3, 2471, 2610, 3747, 3946, 2610, 2, 3572, 4], "code_num": [2], "code": "sqlite3.connect(\"file::memory:?cache=shared\")", "id": "31542179", "code_sizes": 1}, {"nl_num": [3, 550, 3659, 483, 592, 1400, 990, 2776, 1170, 568, 549, 93, 4018, 4], "code_num": [2], "code": "lat_ = map(lambda i:radians(i[0]), l)\\nlon_ = map(lambda i:radians(i[1]), l)", "id": "24800628", "code_sizes": 1}, {"nl_num": [3, 1734, 2406, 3410, 552, 3703, 749, 4179, 1828, 549, 4045, 2610, 2101, 4], "code_num": [2], "code": "import numpy as np\\nimport matplotlib.pyplot as plt\\nfrom matplotlib import animation\\n\\nfig = plt.figure()\\n\\nax = plt.subplot(1,1,1)\\n\\nN = 10\\nM = 10\\n\\nplt.xlim(0,N+M)\\nplt.ylim(0,N+M)\\n\\nx = np.arange(N+M)\\ny = np.arange(N+M)\\n\\nbars = [b for b in plt.bar(x[:N],y[:N],1)]\\n\\ndef init():\\n    return bars\\n\\n# animation function.  This is called sequentially\\ndef animate(i):\\n    if i<M:\\n        bars.append(plt.bar(x[N+i],y[N+i],1)[0]) \\n    return bars\\n\\nanim = animation.FuncAnimation(fig, animate, init_func=init,\\n                               frames = 10, interval=200, blit=True)\\nplt.show()", "id": "22073156", "code_sizes": 1}, {"nl_num": [3, 4565, 188, 4338, 2237, 4178, 4278, 4], "code_num": [2], "code": "def run(self):\\n    if self.FLAG == True:\\n        pass\\n    else:\\n        print str(self.myName) + \" is running.\"", "id": "12678750", "code_sizes": 1}, {"nl_num": [3, 188, 4047, 687, 38, 2610, 41, 3004, 4], "code_num": [2], "code": "# Read the names\\nwith open('names.txt') as f_names:\\n    names = dict(line.strip().split(':') for line in f_names)\\n\\n# Read the numbers\\nwith open('numbers.txt') as f_numbers:\\n    numbers = list(line.strip() for line in f_numbers)\\n\\n# Replace numbers with names\\nwith open('numbers.txt', 'w') as f_output:\\n    for n in numbers:\\n        f_output.write(names[n] + '\\n')", "id": "30493287", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 69, 611, 1422, 1573, 889, 2610, 338, 3299, 1605, 3452, 4047, 2238, 389, 3528, 1218, 4], "code_num": [2], "code": "nonCash = test.drop(['CASH'])", "id": "34476579", "code_sizes": 1}, {"nl_num": [3, 3119, 990, 2, 551, 4147, 2710, 4], "code_num": [2], "code": "#convert to unicode\\nteststring = unicode(teststring, 'utf-8')\\n\\n#encode it with string escape\\nteststring = teststring.encode('unicode_escape');", "id": "25707222", "code_sizes": 1}, {"nl_num": [3, 188, 864, 2794, 1828, 4238, 2, 4178, 687, 4179, 1237, 4], "code_num": [2], "code": "import copy\\n\\ndef group_and_split(mydata, static_mapping):\\n    remainder = copy.deepcopy(mydata)\\n    couples = []\\n    for couple in static_mapping:\\n        if couple[0] in mydata and couple[1] in mydata:\\n            remainder.remove(couple[0])\\n            remainder.remove(couple[1])\\n            couples.append(couple)\\n    return [couples, remainder]", "id": "30321337", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 3990, 1374, 2, 1427, 1597, 4], "code_num": [2], "code": "payload = {\\n   'DropDownListCurrency': 'SGD'\\n}\\nr = requests.post(\"http://httpbin.org/post\", data=payload)", "id": "27458204", "code_sizes": 1}, {"nl_num": [3, 3083, 4179, 2104, 4179, 327, 223, 4220, 3247, 1605, 1957, 2610, 3055, 2315, 4], "code_num": [2], "code": "import numpy as np\\nimport itertools\\n\\na_dict = {'a': [1,2], 'b': [2,], 'c': [1,3]}\\nb_dict = {'a': [6], 'c': [4]}\\n\\nprint(list(itertools.chain.from_iterable(\\n    itertools.product(value, b_dict[key]) for key,value in a_dict.iteritems()\\n    if key in b_dict)))\\n# [(1, 6), (2, 6), (1, 4), (3, 4)]", "id": "7442902", "code_sizes": 1}, {"nl_num": [3, 2365, 1605, 4021, 1828, 2710, 4179, 3648, 1605, 3016, 1400, 1867, 3147, 3982, 4179, 3803, 2610, 990, 4], "code_num": [2], "code": "#convert base 10 to any base between 2 and 16\\ndef convBase(n, base):\\n    charSeq = '0123456789ABCDEF'\\n    if n < base:\\n        return charSeq[n]\\n    else:\\n        return convBase(n//base, base) + charSeq[n%base]\\n\\n#print convBase(10,16)", "id": "33293591", "code_sizes": 1}, {"nl_num": [3, 188, 2679, 1828, 3004, 711, 896, 1828, 3641, 868, 4178, 2855, 4], "code_num": [2], "code": "link = [l for l in br.links()][-1]\\nbr.click_link(link)\\nresponse = br.follow_link(link)\\nopen('asd.mp3', 'w').write(response.read())", "id": "16257444", "code_sizes": 1}, {"nl_num": [3, 1592, 777, 4179, 2940, 788, 1708, 188, 4], "code_num": [2], "code": "from lxml import etree\\nfrom cStringIO import StringIO\\n\\nxml = \"\"\"<foo><bar/> baz!</foo>\"\"\"\\n\\n# parse from string\\netree.fromstring(xml)\\n\\n# parse from file-like; in this case, StringIO\\ns = StringIO(xml)\\netree.parse(s)\\n\\n# parse from URL\\netree.parse(\"http://example.com/somefile.xml\")", "id": "8843395", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 2007, 3685, 443, 2610, 4758, 540, 2, 2326, 4], "code_num": [2], "code": "loop = asyncio.get_event_loop()\\n\\nasyncio.async(loop.run_in_executor(None, lambda: MyClass()))\\nasyncio.async(loop.run_in_executor(None, lambda: MyClass()))", "id": "25012574", "code_sizes": 1}, {"nl_num": [3, 4285, 3698, 413, 3157, 4178, 1400, 2047, 2610, 2385, 4], "code_num": [2], "code": "request.path", "id": "2312407", "code_sizes": 1}, {"nl_num": [3, 4133, 4190, 1828, 2, 1442, 568, 3161, 1828, 4640, 3293, 1773, 169, 1279, 2, 1400, 1773, 2326, 188, 4], "code_num": [2], "code": "from itertools import chain, count\\n\\ns1 = \"this is is a foo\"\\ns2 = \"this is a a bar\"\\ns3 = \"that 's a foobar\"\\n\\n# convert each sentence into a list of words, because the lists\\n# will be used twice, to build the dictionary and to vectorize\\nw1, w2, w3 = all_ws = [s.split() for s in [s1, s2, s3]]\\n\\n# chain the lists and turn into a set, and then a list, of unique words\\nindex_to_word = list(set(chain(*all_ws)))\\n\\n# build the inverse mapping of index_to_word, by pairing it with a counter\\nword_to_index = dict(zip(index_to_word, count()))\\n\\n# create the vectors of word indices and of word count for each sentence\\nv1 = [(word_to_index[word], w1.count(word)) for word in w1]\\nv2 = [(word_to_index[word], w2.count(word)) for word in w2]\\nv3 = [(word_to_index[word], w3.count(word)) for word in w3]\\n\\nprint v1\\nprint v2\\nprint v3", "id": "15398576", "code_sizes": 1}, {"nl_num": [3, 4764, 327, 2610, 1828, 4238, 568, 4649, 2138, 1561, 2238, 188, 3528, 4], "code_num": [2], "code": "from hashlib import md5\\n\\ninput_list = ['a','b','c','d','e']\\n\\nhashed_list = [int(md5(x).hexdigest(), base=16) for x in input_list]\\n\\n# Do whatever you wanted to do with the list of hashes....", "id": "14572180", "code_sizes": 1}, {"nl_num": [3, 66, 2710, 2610, 990, 540, 262, 1383, 4], "code_num": [2], "code": "for item, qty in cart.items():\\n    print \"{0:{1}} - {2}\".format(item, column_width, qty)", "id": "10498434", "code_sizes": 1}, {"nl_num": [3, 2, 2, 2466, 3703, 265, 2969, 631, 2464, 1491, 540, 2, 1977, 2610, 990, 2956, 169, 2471, 4], "code_num": [2], "code": "def new_user(name, password):\\n    salt = uuid.uuid4().hex\\n    hash = hashlib.sha512(password + salt).hexdigest()\\n    c.execute(\"INSERT INTO Credentials(usernameDB,passhashDB,salt) VALUES(?,?,?)\",\\n              (name, hash, salt))\\n\\ndef check_login(name, password):\\n    c.execute(\"SELECT salt, passhashDB FROM Credentials WHERE usernameDB = ?\",\\n              (name,))\\n    for row in c:\\n        salt = row[0]\\n        actual_hash = row[1]\\n        input_hash = hashlib.sha512(password + salt).hexdigest()\\n        if input_hash != actual_hash:\\n            raise Exception(\"invalid password\")\\n    else:\\n        raise Exception(\"invalid user name\")", "id": "24788709", "code_sizes": 1}, {"nl_num": [3, 2, 2229, 1708, 3782, 2610, 188, 1650, 4], "code_num": [2], "code": "u.geturl()", "id": "4946244", "code_sizes": 1}, {"nl_num": [3, 2615, 1239, 4334, 2, 2238, 2, 1239, 726, 4334, 3528, 4], "code_num": [2], "code": "expires_days=None", "id": "12383697", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1704, 3167, 805, 869, 3293, 339, 2610, 990, 4], "code_num": [2], "code": "import sys\\nimport threading\\n\\nlast_line = ''\\nnew_line_event = threading.Event()\\n\\n\\ndef keep_last_line():\\n    global last_line, new_line_event\\n    for line in sys.stdin:\\n        last_line = line\\n        new_line_event.set()\\n\\nkeep_last_line_thread = threading.Thread(target=keep_last_line)\\nkeep_last_line_thread.daemon = True\\nkeep_last_line_thread.start()", "id": "27174736", "code_sizes": 1}, {"nl_num": [3, 2332, 3227, 4139, 540, 3595, 2252, 1384, 4], "code_num": [2], "code": "def custom_to_dict(self):\\n    return {\\n      'propertyId': self.propertyID,\\n      'propertyParentKey': self.propertyParentKey.urlsafe(),\\n      'propertyItems': [key.urlsafe() for key in self.propertyItems]\\n    }", "id": "19438813", "code_sizes": 1}, {"nl_num": [3, 550, 568, 746, 3760, 223, 1782, 2610, 3176, 990, 2326, 4], "code_num": [2], "code": "G = nx.erdos_renyi_graph(20,0.1)\\ncolor_map = []\\nfor node in G:\\n    if node <10:\\n        color_map.append('blue')\\n    else: color_map.append('green')      \\nnx.draw(G,node_color = color_map,with_labels = True)\\nplt.show()", "id": "27030473", "code_sizes": 1}, {"nl_num": [3, 3195, 501, 1422, 777, 1678, 711, 2, 960, 1708, 188, 494, 4], "code_num": [2], "code": "etree.register_namespace(\"\",\"http://www.w3.org/2000/svg\")", "id": "3895951", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2831, 3881, 4238, 2326, 4], "code_num": [2], "code": "if any(len(x) != 3 for x in a):\\n    return False", "id": "33009416", "code_sizes": 1}, {"nl_num": [3, 1655, 338, 1297, 4047, 2910, 2610, 2049, 4], "code_num": [2], "code": "from pandas import *\\nfrom numpy.random import randn\\nrng = date_range('1/1/2011', periods=7200, freq='H')\\nts = Series(randn(len(rng)), index=rng)\\nfor key, data in ts.groupby([rng.year, rng.month]):\\n    print key, data.sum()", "id": "12416932", "code_sizes": 1}, {"nl_num": [3, 2513, 1439, 568, 2892, 2300, 2, 540, 3851, 223, 2101, 2610, 990, 4], "code_num": [2], "code": "seaborn.distplot(C77_diam, rug=True, hist=True, kde=True).set(xlim=(0, max_diam))", "id": "21809876", "code_sizes": 1}, {"nl_num": [3, 2049, 3747, 3707, 4047, 4585, 2610, 1828, 1095, 4], "code_num": [2], "code": "new_df = df.transpose()  \\nnew_df['Group'] = new_df.index / 4  \\nnew_df = new_df.groupby('Group').sum().transpose()", "id": "32722671", "code_sizes": 1}, {"nl_num": [3, 2737, 1943, 2039, 2480, 223, 71, 4632, 1296, 4], "code_num": [2], "code": "class CrossDock(object):\\n    def __init__(self):\\n        self.locations = []\\n\\n    def add_location(self, location):\\n        if isinstance(location, Location):\\n            self.locations.append(location)\\n        else:\\n            raise TypeError(\"location must be Location, got: \" +\\n                            repr(type(location)))", "id": "20673087", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2633, 769, 540, 2981, 2556, 1428, 2610, 3279, 4563, 4102, 4], "code_num": [2], "code": "from google.appengine.api import datastore_errors\\n\\nall_foo = Foo.all()\\nfor bar in all_foo:\\n    try:\\n        user_refProperty = bar.user\\n    except datastore_errors.Error, e:\\n        if e.args[0][0:40] == \"ReferenceProperty failed to be resolved:\":\\n            bar.delete()\\n            self.response.out.write('deleted due to bad reference property')\\n        else: raise", "id": "10910534", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3332, 338, 4498, 540, 2612, 2604, 2973, 1297, 1312, 3332, 540, 2385, 4660, 4], "code_num": [2], "code": "User.objects.filter(id__in=SomeModel.objects.filter(field=something).values_list('user_id', flat=True))", "id": "20836182", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1310, 4031, 853, 2, 540, 188, 169, 2, 1227, 4], "code_num": [2], "code": "surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, w, h)\\nctx = cairo.Context(surface)\\npage.render(ctx)\\nimg = Gdk.pixbuf_get_from_surface(ctx.get_target(), 0, 0,\\n        ctx.get_target().get_width(),\\n        ctx.get_target().get_height())", "id": "14569551", "code_sizes": 1}, {"nl_num": [3, 2, 1007, 942, 1007, 169, 1007, 2, 1007, 2126, 2610, 1828, 4663, 4238, 4], "code_num": [2], "code": "def convert(ls):\\n    last = None\\n    for x in ls:\\n        if x == 'prev': x = -1\\n        if x == 'next': x = +1\\n        if isinstance(x, int) and isinstance(last, int):\\n            x += last\\n        elif last:  # last is not None if you want zeroes\\n            yield last\\n        last = x\\n    yield last", "id": "15558763", "code_sizes": 1}, {"nl_num": [3, 4764, 3514, 3747, 869, 4476, 568, 1672, 2610, 188, 4], "code_num": [2], "code": "import os\\nimport csv\\nfrom StringIO import StringIO\\n\\nscsv = \"\"\"coupon,    months_to_maturity,    FACE_VALUE,\\n                0.3758,    12,    100,\\n                0.7287,    24,    100,\\n                1.0894,    36,    100,\\n                1.4019,    48,    100,\\n                1.6542,    60,    100,\\n                1.8512,    72,    100,\\n                2.0034,    84,    100,\\n                2.1213,    96,    100,\\n                2.2141,    108,    100,\\n                2.2891,    120,    100,\\n                2.3516,    132,    100,\\n             \"\"\"\\n\\nscsv = scsv.replace(' ','')  #remove white spaces\\nscsv = scsv.replace(',' + os.linesep, os.linesep) #remove commas at the end of the lines\\n\\nf = StringIO(scsv)\\nreader = csv.DictReader(f, delimiter=',')\\nrows = [row for row in reader]\\n\\nprint rows[0]\\n# {'coupon': '0.3758', 'months_to_maturity': '12', 'FACE_VALUE': '100'}", "id": "32124103", "code_sizes": 1}, {"nl_num": [3, 1747, 568, 2878, 549, 927, 4179, 549, 2714, 2610, 1828, 4238, 4], "code_num": [2], "code": "mylist = [3,5,7,8,4,6,3,8,7]\\nfor index in range(len(mylist)):\\n    print 'number '+str(mylist[index])+' has index '+str(index)", "id": "20007866", "code_sizes": 1}, {"nl_num": [3, 3324, 4768, 863, 4139, 1708, 655, 3747, 2818, 3747, 2, 4], "code_num": [2], "code": "AJAX_LOOKUP_CHANNELS = {\\n    'to' : dict(model='auth.User', search_field='username'),\\n}", "id": "5808933", "code_sizes": 1}, {"nl_num": [3, 2810, 2710, 540, 1910, 710, 2, 2, 4], "code_num": [2], "code": "data2 = data.replace('&', 'and')", "id": "10221704", "code_sizes": 1}, {"nl_num": [3, 4780, 4238, 2610, 1828, 593, 4179, 2049, 4], "code_num": [2], "code": "trans.to_csv('study10.csv' , encoding='utf-8', columns = [\"reg_no\", \"st_name\", \"c_six_to_ten\", \"values\"] )", "id": "25441954", "code_sizes": 1}, {"nl_num": [3, 71, 3514, 3747, 4131, 990, 4227, 540, 1828, 2284, 2, 864, 3528, 4], "code_num": [2], "code": "mechanize.Browser", "id": "18879888", "code_sizes": 1}, {"nl_num": [3, 836, 864, 2087, 2, 4220, 2610, 1400, 1074, 4], "code_num": [2], "code": "#!/usr/bin/python\\n# -*- coding: utf-8 -*-\\n\\nimport wx\\n\\nclass Example(wx.Frame):\\n\\n    def __init__(self):\\n        wx.Frame.__init__(self, None, wx.ID_ANY, 'wxButton', pos=(300, 150), size=(320, 250))\\n        self.panel = wx.Panel(self, -1)\\n        self.button1 = wx.Button(self.panel, id=-1, label='Button1', pos=(8, 8), size=(100, 20))\\n        self.button1.Bind(wx.EVT_BUTTON, self.button1Click)\\n        self.Centre()\\n        self.Show()\\n\\n    def button1Click(self,event):\\n        self.SetTitle(\"Button1 clicked\")\\n\\nif __name__ == '__main__':\\n\\n    app = wx.App()\\n    Example()\\n    app.MainLoop()", "id": "19785681", "code_sizes": 1}, {"nl_num": [3, 550, 568, 483, 2878, 2, 568, 4390, 549, 1666, 4350, 2326, 4], "code_num": [2], "code": "env.Command ('document.tex', '', 'python table_generator.py')\\nenv.PDF ('document.pdf', 'document.tex')", "id": "729759", "code_sizes": 1}, {"nl_num": [3, 4528, 4179, 889, 2610, 1828, 4238, 2, 1828, 575, 4], "code_num": [2], "code": "from itertools import groupby, accumulate\\nfrom collections import defaultdict\\n\\ndef sub_seq(li, n):\\n    d = defaultdict(list)\\n    rle = [(k, len(list(g))) for k, g in groupby(li)]\\n    endpoints = accumulate(size for k, size in rle)\\n    for end_index, (value, count) in zip(endpoints, rle):\\n        for index in range(end_index - count, end_index - n + 1):\\n            d[value].append(index)\\n    return dict(d)", "id": "16502788", "code_sizes": 1}, {"nl_num": [3, 1007, 2, 1480, 1007, 1828, 3891, 3332, 2237, 4178, 1828, 746, 4179, 1934, 4], "code_num": [2], "code": "def find_things(tags=None, user=None, published_since=None):\\n    # all queries begin with something common, which may\\n    # be an empty dict, but here's an example\\n    query = {\\n        'is_published': True\\n    }\\n    if tags:\\n        # assume that it is an array of strings\\n        query['tags'] = {'$in': tags}\\n    if user:\\n        # assume that it is a string\\n        query['user'] = user\\n    if published_since:\\n        # assume that it is a datetime.datetime\\n        query['date_published'] = {'$gte': published_since}\\n    # etc...\\n\\n    return db.collection.find(query)", "id": "8714704", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 1757, 275, 2430, 1400, 2, 4609, 568, 3687, 3151, 3572, 3886, 3133, 2326, 4], "code_num": [2], "code": "import os\\nos.environ[\"PYTHONINSPECT\"] = \"1\"", "id": "591520", "code_sizes": 1}, {"nl_num": [3, 188, 4350, 568, 3559, 2, 377, 4], "code_num": [2], "code": "import sys\\narg = sys.argv[1]                  # get first command line parameter\\nif arg.isdigit():                  # integer value\\n    value = int(sys.argv[1])   \\nelse:\\n    try:\\n        value = float(sys.argv[1]) # try float conversion\\n    except ValueError:             # if that fails\\n        value = None               # mark value as unusable\\nif value is not None:\\n    print \"{:,}\".format(value)     # print with thousands separator\\nelse:                              # or, if not a number\\n    print arg                      # print as-is.", "id": "23669438", "code_sizes": 1}, {"nl_num": [3, 188, 520, 2094, 540, 4780, 3995, 179, 2, 4], "code_num": [2], "code": "for row in rows:\\n    id = ''.join([getattr(row, col) for col in columns])", "id": "12053190", "code_sizes": 1}, {"nl_num": [3, 550, 568, 191, 1400, 4585, 2610, 990, 4350, 1297, 4301, 3821, 2326, 4], "code_num": [2, 2, 2, 2, 2, 2, 2, 2], "code": "data = np.fromregex('./Sample.txt',\\n    r'(\\d+\\.\\d+)\\s+(\\d+)\\.\\d+\\s+(\\d+)\\.\\d+\\s+(FAIL|PASS)\\s+(\\d+)\\s+\\[\\s*(.*?)\\s*\\]',\\n    dtype=[('col1', 'f8'), ('col2', 'i16'), ('col3', 'i16'),\\n           ('col4', 'S15'), ('col5', 'i16'), ('col6',  'S24')])", "id": "24804879", "code_sizes": 8}, {"nl_num": [3, 188, 4227, 864, 550, 568, 3202, 3055, 2206, 2223, 1605, 889, 4403, 2610, 3263, 1901, 2326, 4], "code_num": [2], "code": "c = []\\n\\nfor i in range(len(a)):\\n    c.append(a[i])\\n    c.append(b[i])", "id": "28395945", "code_sizes": 1}, {"nl_num": [3, 4154, 147, 3995, 3301, 4], "code_num": [2], "code": "__openerp__.py", "id": "20315057", "code_sizes": 1}, {"nl_num": [3, 1210, 1400, 1022, 4179, 640, 3407, 2610, 2101, 4], "code_num": [2], "code": "ax.spines['left'].set_bounds(20, 80)\\nax.spines['bottom'].set_bounds(20, 80)\\n\\nfor i in [0, -1]:\\n    ax.get_yticklabels()[i].set_visible(False)\\n    ax.get_xticklabels()[i].set_visible(False)\\n\\nfor i in [0, -2]:\\n    ax.get_yticklines()[i].set_visible(False)\\n    ax.get_xticklines()[i].set_visible(False)", "id": "29650451", "code_sizes": 1}, {"nl_num": [3, 3397, 3958, 4640, 223, 1170, 318, 1637, 2610, 188, 4], "code_num": [2], "code": "def my_view(request):\\n    context = {}\\n    context['items'] = Item.objects.all()\\n    context['anothervalue'] = context['items'][2].name\\n    return render_to_response('template.html', context)", "id": "855259", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1545, 1828, 1170, 568, 4625, 3744, 817, 2610, 549, 4018, 2326, 4], "code_num": [2], "code": "data = []\\nuser_input = int(raw_input('How many Subject do you wish to add? : ')) \\n\\nfor i in range (0, user_input): \\n    x = raw_input('Enter Subject: ') \\n    data.append(x) \\n\\nwhile True:\\n    print (\"would you like to add/remove any items in list\")\\n    print (\"1: yes\")\\n    print (\"2: remove\")\\n    print (\"3: exit\")\\n    edit_input = int(raw_input('choose?: '))\\n    if edit_input == 1:\\n        edit_data = raw_input('Enter a new Subject: ')\\n        data.append(edit_data)\\n    elif edit_input == 2:\\n        edit_data = raw_input('Enter a Subject you want to remove: ')\\n        if edit_data in data:\\n            data.remove(edit_data)\\n        else:\\n            print('Subject not found!')\\n    else:\\n        # breaking off the loop here\\n        break\\n\\nprint data", "id": "27183073", "code_sizes": 1}, {"nl_num": [3, 3397, 2473, 3518, 3293, 1828, 990, 3746, 4], "code_num": [2], "code": "i = 5 + Tup()[0]", "id": "3136059", "code_sizes": 1}, {"nl_num": [3, 1900, 2, 4179, 2, 1292, 2610, 3447, 3930, 4], "code_num": [2], "code": "verbose=1", "id": "24707836", "code_sizes": 1}, {"nl_num": [3, 4340, 2341, 3138, 568, 2385, 4139, 3332, 4], "code_num": [2], "code": "from django.db.models import Value\\nfrom django.db.models.functions import Coalesce\\n\\ncompanies = Company.objects.values('name', 'id', 'logo_image').annotate(\\n    recommendations_score=Coalesce(Avg('companyinternshipreview__recommendation'), Value(0.0))\\n).annotate(\\n    apply_skills_score=Coalesce(Avg('companyinternshipreview__apply_skills'), Value(0.0))\\n).annotate(\\n    learn_new_score=Coalesce(Avg('companyinternshipreview__learn_new'), Value(0.0))\\n).order_by('-recommendations_score', '-apply_skills_score', '-learn_new_score')", "id": "31951895", "code_sizes": 1}, {"nl_num": [3, 2587, 803, 1984, 975, 2718, 899, 4], "code_num": [2], "code": "x = np.arange(0, 50, 0.01)", "id": "31601865", "code_sizes": 1}, {"nl_num": [3, 550, 568, 592, 862, 4780, 1273, 568, 1898, 2326, 4], "code_num": [2], "code": "import numpy as np\\nimport pandas as pd\\nimport matplotlib.pyplot as plt\\n\\ndf = pd.DataFrame(np.random.rand(37,4), columns=list('ABCD'))\\ncolumns_my_order = ['C', 'A', 'D', 'B']\\nfig, ax = plt.subplots()\\nfor position, column in enumerate(columns_my_order):\\n    ax.boxplot(df[column], positions=[position])\\n\\nax.set_xticks(range(position+1))\\nax.set_xticklabels(columns_my_order)\\nax.set_xlim(xmin=-0.5)\\nplt.show()", "id": "15541440", "code_sizes": 1}, {"nl_num": [3, 2385, 864, 2473, 2957, 223, 2998, 4], "code_num": [2], "code": "import sys\\n\\nfor model in (Agent001, Agent002):\\n    form_name = model.__name__ + 'EditForm'\\n\\n    class AgentEditForm(forms.ModelForm):\\n        class Meta:\\n            model = model\\n            exclude = ()\\n\\n    AgentEditForm.__name__ = form_name\\n    setattr(sys.modules[__name__], form_name , AgentEditForm)\\n    del AgentEditForm", "id": "34346154", "code_sizes": 1}, {"nl_num": [3, 1734, 4715, 568, 4063, 540, 4180, 3747, 4428, 1708, 2, 3747, 95, 4], "code_num": [2], "code": "request_body = {\\n    \"settings\" : {\\n        \"number_of_shards\": 1,\\n        \"number_of_replicas\": 0\\n    },\\n    \"mappings\" : {\\n        \"_default_\":{\\n            \"_timestamp\":{\\n                 \"enabled\":\"true\",\\n                 \"store\":\"true\",\\n                 \"path\":\"plugins.time_stamp.string\",\\n                 \"format\":\"yyyy-MM-dd HH:m:ss\"\\n             }\\n         }\\n    }\\n}\\nprint(\"creating '%s' index...\" % (index_name))\\nres = es.indices.create(index = index_name, body = request_body)\\nprint(\" response: '%s'\" % (res))", "id": "31994187", "code_sizes": 1}, {"nl_num": [3, 188, 864, 1503, 1828, 2238, 2710, 3528, 2252, 2610, 1828, 4640, 1605, 1812, 1828, 1538, 4], "code_num": [2], "code": "[(k, v) for (k, v) in D.iteritems() if 'Light' in k]", "id": "3252590", "code_sizes": 1}, {"nl_num": [3, 1734, 4214, 3760, 223, 3055, 2238, 4182, 619, 3528, 3843, 327, 2610, 4092, 1242, 169, 4092, 2548, 4], "code_num": [2], "code": "import numpy as np\\nimport matplotlib as mpl\\nfrom matplotlib import pyplot as plt\\n\\nN = 10\\n\\nnp.random.seed(10)    \\na=np.random.randint(-1, N, size=(5, 5))\\nprint a\\n\\nfig, ax = plt.subplots()\\n\\ncolors = [(0.0,0.0,0.0),(1.0,1.0,1.0)]\\ncolors.extend(mpl.cm.jet(np.linspace(0, 1, N-1)))\\ncmap = mpl.colors.ListedColormap(colors)\\nmat=ax.matshow(a, cmap=cmap, vmin=-1, vmax=N-1)\\ncax = plt.colorbar(mat, ticks=np.linspace(-0.5, N-1-0.5, N+1))\\ncax.set_ticklabels(range(-1, N))\\nplt.show()", "id": "10466730", "code_sizes": 1}, {"nl_num": [3, 188, 3083, 4179, 3890, 249, 568, 4018, 4], "code_num": [2], "code": "np.vstack(dat_list)", "id": "7200878", "code_sizes": 1}, {"nl_num": [3, 2058, 2828, 2415, 3821, 2610, 1828, 2710, 4], "code_num": [2], "code": "print my_string[0:100]", "id": "3486384", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3178, 549, 777, 3004, 540, 1828, 3061, 3995, 4], "code_num": [2], "code": "regex = re.compile('^\\d{8}.NYP.xml$')", "id": "12363585", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 69, 568, 4320, 1400, 2192, 177, 1432, 568, 2878, 1400, 3547, 528, 1074, 3293, 2943, 664, 2326, 4], "code_num": [2], "code": "import pygtk\\npygtk.require('2.0')\\nimport gtk\\nimport urllib2\\n\\nclass MainWin:\\n    def my_timer(self):\\n        self.response=urllib2.urlopen(\\n            'http://192.168.1.11:7007/video/now.jpeg')\\n        self.loader=gtk.gdk.PixbufLoader()\\n        self.loader.write(self.response.read())\\n        self.loader.close()\\n        self.image.set_from_pixbuf(self.loader.get_pixbuf())\\n        return True# do ur work here, but not for long\\n\\n\\n    def destroy(self, widget, data=None):\\n        print \"destroy signal occurred\"\\n        gtk.main_quit()\\n\\n    def __init__(self):\\n        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)\\n        self.window.connect(\"destroy\", self.destroy)\\n        self.window.set_border_width(10)\\n        self.image=gtk.Image()\\n\\n\\n\\n        gtk.timeout_add(1000, self.my_timer) # call every min\\n\\n        self.window.add(self.image)\\n        self.image.show()\\n        self.window.show()\\n\\n    def main(self):\\n        gtk.main()\\n\\nif __name__ == \"__main__\":\\n    MainWin().main()", "id": "19241537", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 3881, 327, 2610, 1828, 4238, 4179, 3867, 2610, 990, 2326, 4], "code_num": [2], "code": "class Person(object):\\n    def __init__(self, name, city):\\n        self.name = name\\n        self.city = city\\nnames = ['Bob', 'Alex', 'John']\\ncities = ['New York', 'London', 'Rome']\\n\\npersons = {n: Person(n,c) for n,c in zip(names, cities)}\\n\\nprint(persons['Bob'].city)", "id": "33741567", "code_sizes": 1}, {"nl_num": [3, 188, 864, 550, 568, 3178, 1400, 2710, 540, 3167, 350, 2610, 1828, 4238, 4179, 1773, 4], "code_num": [2], "code": "texts = [ \"The lion (Panthera leo) ...\", \"Panthera ...\", \"...\" ]\\nkeywords  = ['cat', 'lion', 'panthera', 'family']\\n\\n# gives the count of `word in text`\\ndef matches(text):\\n    return sum(word in text.lower() for word in keywords)\\n\\n# or inline that helper function as a lambda:\\n# matches = lambda text:sum(word in text.lower() for word in keywords)\\n\\n# print the one with the highest count of matches\\nprint max(texts, key=matches)", "id": "9708374", "code_sizes": 1}, {"nl_num": [3, 2689, 2, 4179, 1326, 4179, 1828, 578, 3012, 2, 4], "code_num": [2], "code": "#!/usr/bin/env python\\nimport tarfile\\nimport sys\\nimport hashlib\\nfrom contextlib import closing\\nfrom functools import partial\\n\\ntry:\\n    from urllib.request import urlopen\\nexcept ImportError: # Python 2\\n    from urllib2 import urlopen\\n\\ndef md5sum(file, bufsize=1<<15):\\n    d = hashlib.md5()\\n    for buf in iter(partial(file.read, bufsize), b''):\\n        d.update(buf)\\n    return d.hexdigest()\\n\\nurl = sys.argv[1] # url to download\\nwith closing(urlopen(url)) as r, tarfile.open(fileobj=r, mode='r|*') as archive:\\n    for member in archive:\\n        if member.isreg(): # extract only regular files from the archive\\n            with closing(archive.extractfile(member)) as file:\\n                print(\"{name}\\t{sum}\".format(name=member.name, sum=md5sum(file)))", "id": "27604420", "code_sizes": 1}, {"nl_num": [3, 1997, 215, 2, 2, 2699, 3293, 188, 2326, 4], "code_num": [2], "code": "import os\\nprint os.getenv(\"SystemDrive\")", "id": "4006730", "code_sizes": 1}, {"nl_num": [3, 1997, 2366, 2, 879, 2610, 1828, 4691, 2238, 990, 3528, 4], "code_num": [2], "code": "import sys, inspect\\n\\ndef is_mod_function(mod, func):\\n    return inspect.isfunction(func) and inspect.getmodule(func) == mod\\n\\ndef list_functions(mod):\\n    return [func.__name__ for func in mod.__dict__.itervalues() \\n            if is_mod_function(mod, func)]\\n\\n\\nprint 'functions in current module:\\n', list_functions(sys.modules[__name__])\\nprint 'functions in inspect module:\\n', list_functions(inspect)", "id": "1106840", "code_sizes": 1}, {"nl_num": [3, 346, 2481, 540, 575, 4], "code_num": [2], "code": "import numpy as np\\n\\ndef avg_positive_speed(speed):\\n    s = np.array(speed)\\n    positives = s > 0\\n    if positives.any():\\n        return s[positives].mean()\\n    else:\\n        return 0.\\n\\n\\nspeed = [1., 2., 0., 3.]\\nprint avg_positive_speed(speed)\\n# prints 2.0\\n\\nprint avg_positive_speed([0., 0.])\\n# prints 0.0", "id": "11084710", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4139, 1828, 576, 2, 576, 3295, 2610, 1881, 2326, 4], "code_num": [2], "code": "proxied_association.py", "id": "14355499", "code_sizes": 1}, {"nl_num": [3, 188, 839, 2206, 853, 1828, 4238, 540, 4019, 1022, 4179, 1400, 4238, 4], "code_num": [2], "code": "L[0].append(47)", "id": "20254553", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 3222, 1828, 3102, 4238, 1422, 4018, 4179, 2013, 1605, 2, 568, 1828, 2, 2326, 4], "code_num": [2], "code": "board = [['bad' for i in range(n + 1)] for j in range(n + 1)]", "id": "29286595", "code_sizes": 1}, {"nl_num": [3, 2, 4179, 3958, 1594, 2610, 188, 4], "code_num": [2], "code": "global L", "id": "23855851", "code_sizes": 1}, {"nl_num": [3, 529, 655, 769, 540, 2, 4], "code_num": [2], "code": "ee = deepcopy(e)\\nee.id=None\\nee.save()\\nee.connexion.add(*e.connexion.all())", "id": "6346600", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 1757, 1176, 694, 4179, 3821, 3293, 3703, 3407, 1279, 1945, 1280, 4220, 873, 2326, 4], "code_num": [2], "code": "def character_count(filename):\\n    with open(filename) as f:\\n        return sum(len(line.rstrip(\"\\n\")) for line in f)", "id": "29909368", "code_sizes": 1}, {"nl_num": [3, 3504, 1828, 3206, 2, 864, 2, 2464, 3293, 2, 4], "code_num": [2], "code": "import numpy as np\\nfrom operator import mul\\n\\ndef apparatus(n, m, x, y):\\n    if not m:\\n        return np.math.factorial(n) % 1000003\\n    result = 1\\n    tmp = np.matrix([False] * x.shape[1])\\n\\n    for i in xrange(x.shape[1]):\\n        if tmp[0, i]:\\n            continue\\n        tmp0 = np.prod(x[:, i] == x, 0)\\n        tmp1 = np.prod(x[:, i] == y, 0)\\n        if np.sum(tmp1) != np.sum(tmp0):\\n            return 0\\n        result *= np.math.factorial(np.sum(tmp1))\\n        result %= 1000003\\n        tmp += tmp1\\n\\n    return result\\n\\nx = np.matrix([[True, True, False]])\\ny = np.matrix([[False, True, True]])\\nprint apparatus(3, 1, x, y)\\n\\nx = np.matrix([[True, False, False, False], [False, False, False, False]])\\ny = np.matrix([[True, False, False, False], [False, False, True, False]])\\nprint apparatus(4, 2, x, y)\\n\\nprint apparatus(1000, 0, [], [])", "id": "33850225", "code_sizes": 1}, {"nl_num": [3, 4624, 483, 151, 1828, 188, 2474, 2462, 2605, 2, 1828, 1170, 2326, 4], "code_num": [2], "code": "module.decorator = mymockdecorator", "id": "7667567", "code_sizes": 1}, {"nl_num": [3, 1727, 769, 540, 336, 3418, 1608, 4515, 4182, 1948, 336, 4], "code_num": [2], "code": "from django.db.models import Q\\n\\n@login_required\\ndef event_new(request, person_uuid=None):\\n    today = datetime.datetime.today()\\n    #valid_until may be empty\\n    profile = Profile.objects.filter(company=request.user.company).filter(Q(valid_until__gte=today)|Q(valid_until=None))", "id": "17568044", "code_sizes": 1}, {"nl_num": [3, 3141, 2047, 3747, 438, 568, 2, 338, 1605, 2604, 1279, 2243, 1297, 4807, 2200, 2326, 4], "code_num": [2], "code": "class MainWindow(QtGui.QMainWindow):\\n\\n    def __init__(self):\\n        super(MainWindow, self).__init__()\\n        self.build_ui()\\n        self.imported_data = {}\\n        timer = QTimer()\\n        timer.timeout.connect(check_for_files)\\n        timer.start(10000)  # periodically check for new files\\n\\n    def build_ui(self):\\n        self.ui = Ui_MainWindow()\\n        self.ui.setupUi(self)\\n\\n    def check_for_files(self):\\n        # check for new files here\\n        if new_file:\\n            self.import_data(file_name)\\n            self.ui.filename_list.addItem(file_name)  # add file name widget\\n            self.plot_data(file_name)             \\n\\n    def import_data(self, file_name):\\n        # open file and read data to file_data\\n        self.ui.imported_data[file_name] = file_data\\n\\n    def plot_data(self, file_name):\\n        self.ui.graph.add_plot(self.imported_data[file_name])", "id": "27809440", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1065, 1828, 2473, 869, 223, 1959, 711, 3338, 2605, 2610, 1828, 3083, 2326, 4], "code_num": [2], "code": "[legname for cow in listofcows for legname in cow.legnames]", "id": "3524339", "code_sizes": 1}, {"nl_num": [3, 2, 3293, 4041, 2047, 4740, 1513, 2610, 1614, 4597, 4179, 4583, 1555, 4], "code_num": [2], "code": "urls = ('(.*)', 'hello')", "id": "9000803", "code_sizes": 1}, {"nl_num": [3, 2, 2155, 1647, 327, 540, 2571, 4], "code_num": [2], "code": "from PIL import Image\\nimg = Image.open(\"filename.png\")\\npixels = img.load()\\n\\n#get the B value of the pixel at x=23, y=42\\nprint pixels[23, 42][2]", "id": "33531851", "code_sizes": 1}, {"nl_num": [3, 1881, 2, 1828, 3295, 2237, 4178, 1828, 4640, 4], "code_num": [2], "code": "colors = { 'Lion' : ['gold', 'orange'],\\n           'Tiger' : ['blackorange', 'whiteblue']\\n         }\\nclass Sample(Base):\\n    __tablename__ = 'sample'\\n    id = Column(Integer, primary_key=True)\\n    type = Column(Enum(u'Lion', u'Tiger', name='type'))\\n    color = Column(Enum('gold', 'orange', 'blackorange', 'whiteblue', name='color'))\\n\\nfrom sqlalchemy import event\\n\\ndef my_check_sample_listener(mapper, connection, target):\\n    assert target.color in colors[target.type]\\n\\nevent.listen(Sample, 'before_insert', my_check_sample_listener)\\nevent.listen(Sample, 'before_update', my_check_sample_listener)\\n\\nsample = Sample(type='Tiger', color='orange')\\nsession.add(sample)\\nsession.commit() # Fails\\n\\nsample = Sample(type='Lion', color='orange')\\nsession.add(sample)\\nsession.commit() # OK\\n\\nsample.type = 'Tiger'\\nsample.color = 'whiteblue'\\nsession.commit() # OK\\n\\nsample.color = 'orange'\\nsession.commit() # Fails", "id": "16110776", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1637, 611, 169, 4625, 746, 3046, 4179, 327, 4], "code_num": [2], "code": "for i in range(len(data)):\\n  if i >= 2148 and i <= 3505:\\n    if data[i][0] == 146: # assuming each data element is a 3 element tuple\\n     data[i][0] += 1", "id": "26160194", "code_sizes": 1}, {"nl_num": [3, 3889, 2, 2, 223, 3891, 3191, 4341, 2591, 4], "code_num": [2], "code": "ufo.users.remove({'emails.address': 'foo@bar.com'}, safe=True)", "id": "23334743", "code_sizes": 1}, {"nl_num": [3, 1158, 4220, 4658, 4179, 2473, 1250, 2610, 2710, 2610, 990, 4], "code_num": [2], "code": "s = \"Tag: tie, Tag: ball, Tag: honey\"\\nprint s.replace(\"Tag: \", \"\")", "id": "26297768", "code_sizes": 1}, {"nl_num": [3, 483, 2217, 568, 1242, 1828, 3215, 1958, 4602, 2394, 2610, 1650, 774, 1584, 4], "code_num": [2], "code": "from visual import *\\nimport math\\n\\ndef make_grid(unit, n):\\n    nunit = unit * n\\n    f = frame()\\n    for i in xrange(n+1):\\n        if i%5==0: \\n            color = (1,1,1)\\n        else:\\n            color = (0.5, 0.5, 0.5)\\n\\n        curve(pos=[(0,i*unit,0), (nunit, i*unit, 0)],color=color,frame=f)\\n        curve(pos=[(i*unit,0,0), (i*unit, nunit, 0)],color=color,frame=f)\\n    return f\\n\\narrow(pos=(0,0,0), axis=(5,0,0), color=(1,0,0), shaftwidth=0.1)    \\narrow(pos=(0,0,0), axis=(0,5,0), color=(0,1,0), shaftwidth=0.1)    \\narrow(pos=(0,0,0), axis=(0,0,5), color=(0,0,1), shaftwidth=0.1)    \\ngrid_xy = make_grid(0.5, 10)\\ngrid_xz = make_grid(0.5, 10)\\ngrid_xz.rotate(angle=pi/2, axis=(1,0,0), origin=(0,0,0))\\ngrid_yz = make_grid(0.5, 10)\\ngrid_yz.rotate(angle=-pi/2, axis=(0,1,0), origin=(0,0,0))\\nsphere(radius=0.3)\\n\\nobj = arrow(pos=(0,0,0), axis=(1,2,3), shaftwidth=0.3)\\nth = 0\\nwhile True:\\n    rate(20)\\n    obj.axis = (3*math.cos(th), 3*math.sin(th), 2)\\n    th += 0.04", "id": "9280885", "code_sizes": 1}, {"nl_num": [3, 188, 3793, 2, 2, 4], "code_num": [2], "code": "re.compile(r\"M[A-Z]+\\*\")", "id": "20566669", "code_sizes": 1}, {"nl_num": [3, 4135, 3082, 2096, 1311, 888, 2, 4], "code_num": [2], "code": "self.myGrid.ForceRefresh()", "id": "14148132", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2360, 1828, 177, 4428, 4178, 1259, 540, 1637, 990, 4350, 2326, 4], "code_num": [2], "code": "import time\\nimport os\\n\\nlocaltime = time.asctime(time.localtime(time.time()))\\n\\nx = 1\\n\\nprint(\"Cobra Language 3.3.3 (v3.3.3:h3js89sj9fs, February 18 2014, 20:33:34) [MSC v.1600 32/64 bit (Intel) Raihaanium Code] on win32/64\")\\nprint(\"\\nA Replica of Python programming, but with an all new editor! The Cobra Editor Version 3.3.3!\")\\n\\nwhile x == 1:\\n\\n    code = input(\"\\n\\nEnter your Cobra Code below:\\n\\n\")\\n\\n    f = open(\"C:\\\\Cobra Code Temp. File.py\", \"w+\")\\n\\n    m = code\\n\\n    f.write(m)\\n\\n    f.write(\"\\n\\n\")\\n\\n    f.write(\"input(\\\"Press ENTER to Re-launch: \\\")\")\\n\\n    f.write(\"\\n\\n\\n\")\\n\\n    f.write(\"#Cobra Code 3.3.3 \\n\\\\n#Code Generated on: \")\\n\\n    f.write(localtime)\\n\\n    f.close()\\n\\n    os.system(\"python C:\\\\Cobra Code Temp. File.py\")\\n\\n    print(\"\\n**********RELAUNCHING...**********\")", "id": "18990431", "code_sizes": 1}, {"nl_num": [3, 188, 864, 550, 3659, 483, 3068, 3055, 1773, 1708, 1828, 1170, 540, 1637, 2473, 4179, 1400, 1773, 551, 549, 399, 2326, 4], "code_num": [2], "code": "def myFunction(self, cdate):\\n     return self.y == cdate.y and self.z == cdate.z", "id": "29950310", "code_sizes": 1}, {"nl_num": [3, 2, 2464, 188, 864, 2652, 4190, 4042, 841, 2, 835, 568, 2878, 382, 2746, 1422, 4238, 2991, 3293, 1828, 1486, 1828, 3747, 2, 2583, 3747, 2, 2326, 4], "code_num": [2], "code": "jsonld.frame(doc, frame)", "id": "30137663", "code_sizes": 1}, {"nl_num": [3, 1592, 1828, 3004, 540, 4347, 177, 338, 4347, 4778, 2610, 188, 2326, 4], "code_num": [2], "code": "print os.stat(\"filename.data\") #ensure that st_size > 0\\n\\nwith open(\"filename.data\",\"rb\") as f:\\n    print repr(f.read())", "id": "31257446", "code_sizes": 1}, {"nl_num": [3, 3925, 694, 4179, 889, 2610, 188, 1007, 451, 576, 2568, 576, 4], "code_num": [2], "code": "sum(counter.itervalues())", "id": "5506359", "code_sizes": 1}, {"nl_num": [3, 2385, 864, 550, 568, 1273, 3906, 4179, 1828, 1427, 1596, 3627, 3703, 3618, 1427, 841, 2326, 4], "code_num": [2], "code": "for post in username.newpost_set.all():\\n    comments = postcomment.objects.filter(commenttag=post).order_by('-postcommentdate')\\n    # your code here", "id": "25721591", "code_sizes": 1}, {"nl_num": [3, 990, 864, 2007, 1828, 955, 540, 96, 169, 2281, 1670, 2464, 3032, 169, 517, 4119, 4], "code_num": [2], "code": "import subprocess\\nimport time\\nimport sys\\n\\nclass Timeout(Exception):\\n    pass\\n\\ndef run(command, timeout=10):\\n    proc = subprocess.Popen(command, bufsize=0, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\\n    poll_seconds = .250\\n    deadline = time.time()+timeout\\n    while time.time() < deadline and proc.poll() == None:\\n        time.sleep(poll_seconds)\\n\\n    if proc.poll() == None:\\n        if float(sys.version[:3]) >= 2.6:\\n            proc.terminate()\\n        raise Timeout()\\n\\n    stdout, stderr = proc.communicate()\\n    return stdout, stderr, proc.returncode\\n\\nif __name__==\"__main__\":\\n    print run([\"ls\", \"-l\"])\\n    print run([\"find\", \"/\"], timeout=3) #should timeout", "id": "1556348", "code_sizes": 1}, {"nl_num": [3, 4386, 1426, 4179, 2513, 2, 1006, 177, 550, 2326, 4], "code_num": [2], "code": "def solve(m, y):\\n    v = [0 for i in xrange(len(m))]\\n    for i in xrange(len(m)):\\n        v[i] = (y[i] - v.dotProduct(m[i]))/float(m[i][i])\\n\\n    return v", "id": "16157088", "code_sizes": 1}, {"nl_num": [3, 1585, 338, 3690, 1828, 990, 3580, 4], "code_num": [2], "code": "while 1:\\n    data = conn.recv(1024)\\n    if not data: break\\n    conn.send(data)\\nconn.close()", "id": "289035", "code_sizes": 1}, {"nl_num": [3, 188, 2429, 551, 1828, 2710, 4], "code_num": [2], "code": "'This is a ' + type(somevariable).__name__", "id": "10014160", "code_sizes": 1}, {"nl_num": [3, 2385, 3747, 4438, 2121, 540, 3674, 4688, 4], "code_num": [2], "code": "queryresults = serializers.serialize(\"python\", queryset, fields=('jobmst_id', 'jobmst_prntid', 'jobmst_name', 'jobdtl_cmd'))\\n#                                                                                                                    here--^", "id": "20895510", "code_sizes": 1}, {"nl_num": [3, 2, 4572, 2, 2610, 1828, 4595, 4], "code_num": [2], "code": "os.environ['GI_TYPELIB_PATH'] = os.path.join(os.path.dirname(sys.executable),'bin\\\\lib\\girepository-1.0')", "id": "21842403", "code_sizes": 1}, {"nl_num": [3, 188, 864, 3195, 1828, 2406, 4238, 3293, 1828, 4238, 3886, 1828, 547, 575, 2604, 2413, 4], "code_num": [2], "code": "newlist = [word for word in words if len(word) == 9]", "id": "7406448", "code_sizes": 1}, {"nl_num": [3, 69, 568, 1545, 1530, 223, 4800, 822, 1708, 990, 4], "code_num": [2], "code": "r'(Start \\d+.*?group=.*?name=.*?number=.*?end=\\d+)*'", "id": "1685558", "code_sizes": 1}, {"nl_num": [3, 2539, 2, 540, 1249, 1170, 4], "code_num": [2], "code": "from twisted.enterprise import adbapi\\n\\n\\ndbpool = adbapi.ConnectionPool('psycopg2', 'mydb', 'andrew', 'password') # replace psycopg2 with your db client name.\\n\\ndef getAge(user):\\n    return dbpool.runQuery('SELECT age FROM users WHERE name = ?', user)\\n\\ndef printResult(l):\\n    if l:\\n        print l[0][0], \"years old\"\\n    else:\\n        print \"No such user\"\\n\\ngetAge(\"joe\").addCallback(printResult)", "id": "26791543", "code_sizes": 1}, {"nl_num": [3, 2385, 1273, 1297, 1835, 1007, 451, 2382, 336, 4], "code_num": [2], "code": "baslik.updated = entry.updated \\nbaslik.save()", "id": "24760138", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 2, 1828, 2, 1959, 4], "code_num": [2], "code": "suitcounter = [0, 0, 0, 0]\\nsuits = {'C': 0, 'D': 1, 'S': 2, 'H': 3}\\n\\nfor card in hand:\\n    suitcounter[suits[card[1]]] += 1", "id": "30411661", "code_sizes": 1}, {"nl_num": [3, 4527, 549, 528, 4319, 1268, 4414, 2605, 4], "code_num": [2], "code": "img.save(\"a.jpg\",\"JPEG\")\\n\\nimg2 = img.resize( (800, 800))\\nimg2.save(\"b.jpg\",\"JPEG\")", "id": "14833877", "code_sizes": 1}, {"nl_num": [3, 550, 568, 104, 3747, 4226, 3421, 2, 4], "code_num": [2], "code": "bus = dbus.bus.BusConnection(os.environ['DBUS_SESSION_BUS_ADDRESS'])", "id": "27825986", "code_sizes": 1}, {"nl_num": [3, 990, 217, 1571, 3559, 853, 1355, 4], "code_num": [2], "code": "commit()", "id": "14445090", "code_sizes": 1}, {"nl_num": [3, 2, 1828, 4238, 2610, 990, 4], "code_num": [2], "code": "itertools.chain.from_iterable", "id": "10126983", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3222, 3506, 3004, 896, 4018, 2610, 188, 4], "code_num": [2], "code": "import json\\n\\ntables = [\"a\", \"b\", \"c\", \"d\"]\\ndata = {}\\n\\nfor t in tables:\\n    results = sf.query(\"select id from %s\" % t)[\"records\"]\\n    data[t] = [r[\"id\"] for r in results]\\n\\nwith open(\"Dataset.json\", \"w\") as f:\\n    json.dump(data, f)", "id": "34039590", "code_sizes": 1}, {"nl_num": [3, 2631, 549, 2, 812, 1897, 652, 4], "code_num": [2], "code": "bad = set(['bad','terrible', 'dumb'])\\ngood = set(['good','happy','awesome'])\\ntalk = raw_input(\"type:\")\\nif bad & set(talk.lower().split()):\\n     print \"I'm sorry to hear that :(\"\\nelif good & set(talk.lower().split()):\\n     print \"That's good!\"", "id": "4190841", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2878, 1400, 3995, 4179, 1828, 262, 4], "code_num": [2], "code": "class GolfClub:\\n    def __init__(self, name, size, distance):\\n        self.name = name\\n        self.size = size\\n        self.distance = distance\\n\\n    def hits_further(self, other):\\n        if self.distance > other.distance:\\n            return \"%s hits further\" % self.name\\n        else:\\n            return \"%s hits further\" % other.name\\n\\nclub1 = GolfClub('Driver', 5, 200)\\nclub2 = GolfClub('9Iron', 6, 300)\\nclub1.hits_further(club2)", "id": "25110373", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2, 1828, 2783, 568, 938, 1708, 2049, 4], "code_num": [2], "code": "ser.groupby(lambda i: i[0]).apply(lambda x: x.rename({i: i[1] for i in x.index})).unstack()", "id": "33538637", "code_sizes": 1}, {"nl_num": [3, 1233, 1828, 862, 3422, 2610, 3148, 4], "code_num": [2], "code": "self.list_widget = QListWidget()\\nfiles = glob.glob('YourDirectory/*.jpg') #Get all jpegs in your directory\\nfor i in files:\\n    self.list_widget.addItem(QListWidgetItem(QIcon(i),'your text here'))\\nself.list_widget.setIconSize(QSize(400,300)) #Set your image size", "id": "6194659", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 1158, 4238, 4179, 1773, 2610, 1828, 3004, 3467, 4], "code_num": [2], "code": "fichier_write.write(\"%.4s\\n\" %a[i])", "id": "34482047", "code_sizes": 1}, {"nl_num": [3, 3527, 3467, 3293, 3867, 711, 1708, 4042, 3040, 2238, 990, 3528, 4], "code_num": [2], "code": "class mcs(type):\\n    def __repr__(self):\\n        return \"test - from metaclass\"\\n\\nclass a(object):\\n    __metaclass__ = mcs\\n    def __repr__(self):\\n        return \"test\"\\n\\nprint a    # test - from metaclass\\nprint a()  # test", "id": "27344087", "code_sizes": 1}, {"nl_num": [3, 69, 568, 933, 2689, 338, 1708, 1485, 2610, 990, 4227, 4], "code_num": [2], "code": "from contextlib import closing\\nimport requests\\nwith closing(requests.get('http://httpbin.org/get', stream=True)) as r:\\n    while r.iter_content:\\n        # Do something with the stream.. \\n        pass", "id": "28380146", "code_sizes": 1}, {"nl_num": [3, 3990, 3241, 540, 2, 726, 2033, 2610, 790, 4], "code_num": [2], "code": "def test_session(anon_user):\\n    anon_user.get(\"/\")  # get any url to call the app to create a session.\\n    from gaesessions import get_current_session\\n    assert get_current_session()", "id": "23487629", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3006, 1021, 1651, 4047, 2536, 2610, 1828, 1486, 4], "code_num": [2], "code": "import numpy as np\\nfrom scipy.spatial import ConvexHull\\nimport matplotlib.pyplot as plt\\n\\npts1 = [[0.0, 10.0], [0.0, 20.0], [10.0, 0.0], [20.0, 0.0]]\\npts = np.array(pts1)\\n\\nhull = ConvexHull(pts)\\n\\nplt.fill(pts[hull.vertices,0], pts[hull.vertices,1],'red',alpha=0.5)\\nplt.show()", "id": "30420723", "code_sizes": 1}, {"nl_num": [3, 1727, 1269, 2, 223, 1828, 2, 3886, 1637, 2, 2, 2604, 4279, 3293, 549, 4807, 3214, 4], "code_num": [2], "code": "def melat(lat):\\n    return  degrees( log ( tan ( radians( lat / 2 + 45 ) ) ))\\n\\ndef latit(mlt):\\n    return ( degrees(atan ( exp ( radians(mlt) ) )) - 45 ) * 2\\n\\ndef XY2LatLong(x, y):\\n    EQUATOR_MINUTE_LENGTH = 1851.8518519\\n    GeoPoint = namedtuple('GeoPoint', ('lat', 'lon'))\\n    Point = namedtuple('Point', ('x', 'y'))\\n    base = GeoPoint(55.98619572, 11.62113936)\\n    factor = cos( radians(base.lat) ) * EQUATOR_MINUTE_LENGTH * 60.\\n    return GeoPoint(\\n        latit(melat(base.lat) + y / factor),\\n        base.lon + x / factor)", "id": "32080084", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 2291, 2616, 1828, 1989, 2, 2610, 990, 2326, 4], "code_num": [2], "code": "import os\\nprint('What game do you want to play?')\\nprint('1.  Hangman')\\nprint('2.  Dragon Realm')\\nprint('3.  Crafting Challenge')\\n\\ngamechoice = input()\\nprint('Ok, sending you there...')\\n\\nif gamechoice == 1:\\n    os.startfile('hangman.py')\\nelif gamechoice == 2:\\n    os.startfile('Dragon Realm.py')\\nelif gamechoice == 3:\\n    os.startfile('crafting challenge.py')", "id": "28249924", "code_sizes": 1}, {"nl_num": [3, 1115, 452, 2610, 188, 3787, 4], "code_num": [2, 2], "code": "astr = '''(ROOT\\n(S\\n(INTJ (UH Hello))\\n(, ,)\\n(NP (PRP$ My) (NN name))\\n(VP (VBZ is) (ADJP (JJ Melroy)))\\n(. .)))\\n(ROOT\\n(SBARQ\\n(WHNP (WP What))\\n(SQ (VBZ is) (NP (PRP$ your) (NN name)))\\n(. ?)))'''\\n\\n\\ndef get_tree(astr):\\n    import re\\n    out = []\\n    lines = astr.splitlines()\\n\\n    for line in lines:\\n        pat = '\\(([^\\(\\)]+?)( \\(([^\\)\\(]+?) [^\\(\\)]+?\\)).*?\\)'\\n        res = re.search(pat, line)\\n        while res:\\n            out.append((res.group(1), res.group(3)))\\n            line = line.replace(res.group(2),'')\\n            # line = re.sub('(\\([^\\s\\(\\)]*\\))', '', line)\\n            res = re.search(pat, line)\\n\\n    return out\\n\\nget_tree(aster) # returns [('INTJ', 'UH'), ('NP', 'PRP$'), ('NP', 'NN'), ('VP', 'VBZ'), ('ADJP', 'JJ'), ('WHNP', 'WP'), ('SQ', 'VBZ'), ('NP', 'PRP$'), ('NP', 'NN')]", "id": "29217206", "code_sizes": 2}, {"nl_num": [3, 550, 1352, 483, 2616, 2548, 2011, 2675, 3824, 2906, 2940, 3760, 2326, 4], "code_num": [2], "code": "#!/usr/bin/python \\nfrom matplotlib import cm\\nimport matplotlib.pyplot as plt\\n\\n#data\\nx=[1,2,4]\\ny=[11,12,8]\\n\\nfor i in range(0,len(x)):\\n  plt.bar(x[i],y[i],color=cm.jet(1.*i/len(x)))\\n\\nplt.show()", "id": "3593578", "code_sizes": 1}, {"nl_num": [3, 1016, 1828, 262, 3293, 3565, 568, 188, 540, 2, 4], "code_num": [2], "code": "RunPython (\"import Test; Test.sayhi('\" &  name & \"')\")", "id": "34167920", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4570, 2, 2610, 2, 2326, 4], "code_num": [2], "code": "analyzer = StandardAnalyzer(Version.LUCENE_CURRENT)\\n\\n# Constructs a query parser.\\nqueryParser = QueryParser(Version.LUCENE_CURRENT, FIELD_CONTENTS, analyzer)\\n\\n# Create a query\\nquery = queryParser.parse(QUERY_STRING)\\n\\ntopDocs = searcher.search(query, 50)\\n\\n# Get top hits\\nscoreDocs = topDocs.scoreDocs\\nprint \"%s total matching documents.\" % len(scoreDocs)\\n\\nHighlightFormatter = SimpleHTMLFormatter();\\nhighlighter = Highlighter(HighlightFormatter, QueryScorer (query))\\n\\nfor scoreDoc in scoreDocs:\\n    doc = searcher.doc(scoreDoc.doc)\\n    text = doc.get(FIELD_CONTENTS)\\n    ts = analyzer.tokenStream(FIELD_CONTENTS, StringReader(text))\\n    print doc.get(FIELD_PATH)\\n    print highlighter.getBestFragments(ts, text, 3, \"...\")\\n    print \"\"", "id": "11436180", "code_sizes": 1}, {"nl_num": [3, 3486, 862, 2, 2, 717, 2822, 1857, 4474, 4], "code_num": [2], "code": "application/msword", "id": "15776136", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1569, 191, 1515, 853, 4214, 1162, 2610, 1400, 2, 2, 2669, 4], "code_num": [2], "code": "import re\\npat = re.compile(\"[A-Za-z]+\")\\nfor sentence in text:\\n    sent_tokens = []\\n    prev_end = 0\\n    for match in re.finditer(pat, sentence):\\n        print match.start(0), match.end(0), match.group(0)\\n        chinese_part = sentence[prev_end:match.start(0)]\\n        sent_tokens += tokenize(chinese_part)\\n        sent_tokens.append(match.group(0))\\n        prev_end = match.end(0)\\n    last_chinese_part = sentence[prev_end:]\\n    sent_tokens += tokenize(last_chinese_part)\\n    print sent_tokens", "id": "30425877", "code_sizes": 1}, {"nl_num": [3, 990, 976, 3821, 2237, 4178, 2710, 1901, 4], "code_num": [2], "code": "x= \"th i s. i s. a. n i^ c e. s s t. s t r i ng.\"\\nfor i in range(len(x)):\\n    if x[i] == '^':\\n        j = i + 1\\n        if x[j] == ' ':\\n            j = j + 1\\n            while j < len(x) and x[j] != ' ':\\n                j = j + 1\\n                print x\\n            x= x[0:i] + x[i+1:]\\n            x= x[0:j-1] + \"^\" + x[j-1:]\\n            print x\\n            exit()", "id": "19845745", "code_sizes": 1}, {"nl_num": [3, 3658, 2, 4238, 2610, 990, 4], "code_num": [2], "code": "dummy.next is dummy", "id": "16796964", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 3178, 4633, 1400, 1598, 4179, 1828, 365, 2714, 2610, 188, 1422, 2817, 2326, 4], "code_num": [2], "code": "bounds = self.canvas.bbox(myText)  # returns a tuple like (x1, y1, x2, y2)\\nwidth = bounds[2] - bounds[0]\\nheight = bounds[3] - bounds[1]", "id": "111934", "code_sizes": 1}, {"nl_num": [3, 746, 1976, 726, 2610, 655, 4], "code_num": [2], "code": "def login(request):\\n    m = Member.objects.get(username=request.POST['username'])\\n    if m.password == request.POST['password']:\\n        request.session['member_id'] = m.id\\n        return HttpResponse(\"You're logged in.\")\\n    else:\\n        return HttpResponse(\"Your username and password didn't match.\")", "id": "3099850", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 3191, 943, 4684, 3293, 1828, 4238, 2610, 990, 711, 1708, 3544, 2326, 4], "code_num": [2], "code": "fname = \"stuff.txt\"\\nfhand = open(fname)\\nAllWords = list()      #create new list\\nResultList = list()    #create new results list I want to append words to\\n\\nfor line in fhand:\\n    line.rstrip()   #strip white space\\n    words = line.split()    #split lines of words and make list\\n    AllWords.extend(words)   #make the list from 4 lists to 1 list\\n\\nAllWords.sort()  #sort list\\n\\nfor word in AllWords:   #for each word in line.split()\\n    if word not in ResultList:    #if a word isn't in line.split            \\n        ResultList.append(word)   #append it.\\n\\n\\nprint(ResultList)", "id": "29312508", "code_sizes": 1}, {"nl_num": [3, 3704, 262, 568, 1828, 1749, 2684, 4], "code_num": [2], "code": "location = Location.objects.get(pk=location_id)\\nform.location = location", "id": "25910672", "code_sizes": 1}, {"nl_num": [3, 1339, 1833, 2468, 2610, 2385, 169, 1937, 4], "code_num": [2], "code": "class Model(models.Model):\\n  def save(self, *args, **kwargs):\\n    instance = super(Model, self).save(*args, **kwargs)\\n    # your logic here to change the file location\\n    return instance", "id": "17756761", "code_sizes": 1}, {"nl_num": [3, 69, 568, 1470, 655, 124, 4], "code_num": [2], "code": "DATABASES = {\\n    'default': {\\n        'ENGINE': 'django.db.backends.sqlite3',\\n        'NAME': 'mydatabase',\\n        'TEST_NAME': 'mytestdatabase'\\n    }\\n}", "id": "13155796", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4314, 1007, 1243, 1007, 4179, 1828, 3518, 2610, 2049, 1095, 2326, 4], "code_num": [2], "code": "-df[\"A\"]", "id": "25562570", "code_sizes": 1}, {"nl_num": [3, 3255, 464, 4572, 3276, 1268, 3767, 2, 4], "code_num": [2], "code": "from matplotlib import pyplot as plt\\nimport numpy\\n\\nfig = plt.figure()\\nax = fig.add_subplot(111)\\nax.plot(numpy.random.rand(10))\\n\\ndef ondraw(event):\\n    # print 'ondraw', event\\n    # these ax.limits can be stored and reused as-is for set_xlim/set_ylim later\\n    print ax.get_xlim(), ax.get_ylim()\\n\\ncid = fig.canvas.mpl_connect('draw_event', ondraw)\\n\\nplt.show()", "id": "25351359", "code_sizes": 1}, {"nl_num": [3, 3550, 864, 104, 3747, 4603, 540, 1400, 2943, 1198, 4], "code_num": [2], "code": "Rule(SgmlLinkExtractor(allow=(\"ShowUserReviews-g.*\",), restrict_xpaths=('//*[@id=\"REVIEWS\"]/div[4]/div/div[2]/div/div/div[1]/a[text() = \"Next\"]',), unique=True), callback='parse_item', follow= True)", "id": "31181033", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4570, 2, 2, 1007, 451, 1678, 4688, 26, 2610, 1828, 188, 1331, 4563, 2326, 4], "code_num": [2], "code": "import sys\\nfrom PyKDE4.kdecore import ki18n, KAboutData, KCmdLineArgs\\nfrom PyKDE4.kdecore import KLibLoader as ll\\nfrom PyKDE4.kdeui import KApplication\\nimport PyKDE4.kparts as kp\\n\\n\\nappName     = \"KApplication\"\\ncatalog     = \"\"\\nprogramName = ki18n (\"KApplication\")\\nversion     = \"1.0\"\\ndescription = ki18n (\"KApplication\")\\nlicense     = KAboutData.License_GPL\\ncopyright   = ki18n (\"(c) 2007 John Doe\")\\ntext        = ki18n (\"none\")\\nhomePage    = \"www.johndoe.com\"\\nbugEmail    = \"johndoe@nowhere.com \"\\n\\naboutData   = KAboutData(\\n    appName, catalog, programName, version, description,\\n    license, copyright, text, homePage, bugEmail\\n)\\n\\nKCmdLineArgs.init( sys.argv, aboutData)\\n\\napp = KApplication()\\nwin= kp.KParts.MainWindow()\\nokupart= ll.self().factory( 'okularpart').create()\\nwin.setCentralWidget( okupart.widget())\\nwin.show()\\n\\napp.exec_()", "id": "32974374", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 4335, 1828, 3759, 2710, 2238, 4179, 1022, 148, 2464, 1828, 3747, 4516, 1637, 3528, 2610, 188, 2326, 4], "code_num": [2], "code": "''.join(random.choice(string.lowercase) for x in range(X))", "id": "1957273", "code_sizes": 1}, {"nl_num": [3, 3397, 1828, 694, 4179, 3648, 4], "code_num": [2], "code": "\"%.3f\" % math.pi", "id": "6212220", "code_sizes": 1}, {"nl_num": [3, 2076, 1594, 169, 1956, 292, 1959, 4], "code_num": [2], "code": "def function1():\\n    var1 = raw_input(\"Please enter a number\")\\n    var2 = raw_input(\"Please enter another number\")\\n    return var1,var2\\n\\ndef function2():\\n    var1,var2 = function1()\\n    print var1,var2\\n\\nwhile True:\\n    function2()", "id": "22117602", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2092, 1828, 3004, 604, 1400, 1614, 3293, 4104, 1805, 1708, 188, 2238, 169, 1940, 3528, 552, 717, 2822, 1857, 2326, 4], "code_num": [2], "code": "generate_url(expires_in, method='GET', headers=None, query_auth=True, force_http=False)", "id": "2113777", "code_sizes": 1}, {"nl_num": [3, 4786, 3518, 2629, 4531, 568, 3004, 2610, 223, 1959, 4], "code_num": [2], "code": "from operator import itemgetter\\nfrom itertools import groupby\\n\\n\\n#input file\\nf=open('mytxt','rb')\\n#output file\\nf_out=open('out','w')\\n\\n#skip the first line\\nheader=f.readline()\\n\\n# read every line\\nlines=f.readlines()\\nlines=[i.split(';')  for i in lines if i != '\\n']\\n\\n#grouping\\ngroups=[]\\nfor k,g in groupby(lines,itemgetter(1)):\\n    groups.append(list(g))\\n\\n\\n#iterate and write to a file\\nfor j in range(len(groups)):\\n    headers=[[i[0],i[2]]  for i in groups[j]]\\n    final_headers=[\"PLZ\"+'\\t'] + [i[0]+'\\t' for i in headers]\\n    final_values=[str(j+1)+'\\t']+[i[1].strip()+'\\t' for i in headers]\\n    f_out.write(\"\".join(final_headers))\\n    f_out.write(\"\\n\")\\n    f_out.write(\"\".join(final_values))\\n    f_out.write(\"\\n\")", "id": "30298635", "code_sizes": 1}, {"nl_num": [3, 2385, 864, 527, 4179, 2, 4179, 1828, 4293, 2814, 4], "code_num": [2], "code": "def num_of_choices(question):\\n    return question.choice_set.count()", "id": "28695330", "code_sizes": 1}, {"nl_num": [3, 3311, 694, 4179, 3843, 889, 2610, 1651, 4807, 889, 2610, 4238, 4], "code_num": [2], "code": "cur = 0\\nres = []\\nwith open(\"file.txt\") as f:\\n    for line in f:\\n        if line.strip() == '0':\\n            cur += 1\\n        else:\\n            res.append(cur)\\n            cur = 0", "id": "34401733", "code_sizes": 1}, {"nl_num": [3, 3990, 3550, 568, 120, 1828, 4238, 4179, 2577, 2610, 1828, 590, 4179, 1400, 1742, 2229, 4], "code_num": [2], "code": "rules = (Rule(LinkExtractor(restrict_xpaths=(\".//*[@id='mw-content- text']/ul[19]\"), ), callback='parse_items', follow=True), \\n Rule(LinkExtractor(deny_domains='...start url...'), callback='parse_items',follow= True),)", "id": "29778903", "code_sizes": 1}, {"nl_num": [3, 2393, 1422, 4694, 69, 568, 2092, 594, 1597, 2238, 4220, 4311, 3528, 1956, 1569, 2, 1704, 4], "code_num": [2], "code": "# get uids of unseen messages\\nresult, uids = conn.uid('search', None, '(UNSEEN)')\\n\\n# convert these uids to a comma separated list\\nfetch_ids = ','.join(uids[0].split())\\n\\n# first fetch the headers, this will mark them read (SEEN)\\nstatus, headers = conn.uid('fetch', fetch_ids, '(RFC822.HEADER)')\\n\\n# now mark each message unread (UNSEEN)\\nstatus1, flags = conn.uid('store', fetch_ids,'-FLAGS','\\\\Seen')", "id": "10991533", "code_sizes": 1}, {"nl_num": [3, 2, 3055, 4409, 3407, 2610, 1828, 3004, 4], "code_num": [2], "code": "dd = {}\\nreferrer = None\\n\\nfor line in open('hosts.txt'):\\n    if line.startswith('Host'):\\n        host = line.split(': ')[1].strip('\\n')\\n    elif line.startswith('Referer'):\\n        referrer = line.split(': ')[1].strip('\\n')\\n\\n    if referrer is not None:\\n        dd.setdefault(referrer, set()).add(host)\\n        referrer = None\\n\\nfor k, v in dd.iteritems():\\n    print k, len(v)", "id": "3941378", "code_sizes": 1}, {"nl_num": [3, 3083, 4179, 3083, 568, 1196, 4], "code_num": [2], "code": "data = [[1,2,3,4],[4,5,6,7,8]]\\ndata_arr = np.array(data)\\n\\ndata_arr\\narray([[1,2,3,4],\\n       [5,6,7,8]])", "id": "17448875", "code_sizes": 1}, {"nl_num": [3, 4624, 1007, 1711, 1704, 3293, 2, 1268, 492, 2249, 4], "code_num": [2], "code": "file.seek(0)\\nlogging.debug(file.readlines())", "id": "22657914", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2103, 4238, 4179, 2587, 249, 853, 3316, 2587, 4018, 2326, 4], "code_num": [2], "code": "numpy.concatenate( LIST, axis=0 )", "id": "27516849", "code_sizes": 1}, {"nl_num": [3, 1881, 1254, 4043, 568, 2049, 938, 4], "code_num": [2], "code": "df = pd.read_sql(query.statement, query.session.bind)", "id": "29525808", "code_sizes": 1}, {"nl_num": [3, 188, 977, 2, 1828, 3467, 3004, 4], "code_num": [2], "code": "with open('infile.txt') as infile, open('outfile.txt', 'w') as outfile:\\n    outfile.write(', '.join(infile.read().split('\\n')) + '\\n')", "id": "11287815", "code_sizes": 1}, {"nl_num": [3, 1447, 3222, 1828, 3212, 2252, 2326, 4], "code_num": [2], "code": "id | var            \\n1  |  10            \\n1  |  11          \\n2  |  10", "id": "1350121", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3161, 2, 4178, 3321, 833, 148, 540, 4758, 2326, 4], "code_num": [2], "code": "gcc-4.2", "id": "8546038", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2103, 3843, 3433, 822, 568, 2583, 1708, 188, 4], "code_num": [2], "code": "import json\\nfrom collections import defaultdict\\n\\nfh = open(\"yourfile.csv\")\\nresult = defaultdict(dict) #dictionary holding the data\\ncurrent_key = \"\" #current category\\nignore_next = False #flag to skip header\\n\\nfor line in fh:\\n    line = line.strip() #throw away newline\\n    if line == \"\": #line is empty\\n        current_key = \"\"\\n        continue\\n    if current_key == \"\": #current_key is empty\\n        current_key = line #so the current line is the header for the following data\\n        ignore_next = True\\n        continue\\n    if ignore_next: #we're in a line that can be ignored\\n        ignore_next = False\\n        continue\\n    (a,b) = line.split(\",\")\\n    result[current_key][a] = b\\nfh.close()\\n\\n#pretty-print data\\nprint json.dumps(result, sort_keys=True, indent=4)", "id": "27933914", "code_sizes": 1}, {"nl_num": [3, 2367, 3630, 1250, 4179, 1268, 1828, 1340, 169, 3344, 2, 4684, 568, 188, 4238, 4], "code_num": [2], "code": "import re\\ns = \"[AA BB, CC, DD, EE] [PP QQ, RR] [WW XX, YY, ZZ]\"\\nresponse = re.findall('(?<![[\\w])\\w+', s)", "id": "25170791", "code_sizes": 1}, {"nl_num": [3, 3748, 1828, 3316, 324, 4640, 568, 2, 4640, 2610, 990, 4], "code_num": [2], "code": "from random import choice\\nfor key in total_values:\\n    total_values[key] = (total_values[key], choice((True, False)))", "id": "11491432", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 3222, 1828, 425, 2610, 188, 3293, 2114, 2326, 4], "code_num": [2], "code": "datetime.datetime.fromtimestamp(ms/1000.0)", "id": "748491", "code_sizes": 1}, {"nl_num": [3, 3083, 568, 4640, 1273, 4128, 4], "code_num": [37], "code": "collections.OrderedDict", "id": "19234923", "code_sizes": 1}, {"nl_num": [3, 2103, 2710, 3963, 2693, 1297, 977, 568, 2013, 4182, 3209, 2610, 990, 4], "code_num": [2], "code": "total = 0\\nfor i in s.split(','):\\n    i = float(i) #using float because you don't only have integers\\n    total += i", "id": "28241339", "code_sizes": 1}, {"nl_num": [3, 4322, 2, 2, 2, 1828, 1976, 3087, 3293, 1828, 633, 2326, 4], "code_num": [2], "code": "local(\"php root/protected/yiic.php migrate --interactive=0\")", "id": "31903173", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 3178, 1828, 3004, 2610, 1828, 4219, 4], "code_num": [2], "code": "import os    #bring in the necessary library to access your specific os\\n\\nfilename = raw_input(\"Enter file: \")   #get user input\\n\\ndirList = os.listdir('.')    #get the current directory listing\\nif filename in dirList:      #if the filename sought was in that dirlist....\\n    print \"file found: \" + filename   #display it\\nelse:                            #otherwise...\\n    print \"That file does not exist.\"", "id": "26763170", "code_sizes": 1}, {"nl_num": [3, 3486, 685, 2570, 568, 2, 2610, 990, 4], "code_num": [2], "code": "import time,os,win32api\\nfrom msvcrt import getch\\n\\ndef addToClipBoard(text):\\n    command = 'echo ' + text.strip() + '| clip'\\n    os.system(command)\\n\\n\\ndef testpress(key):\\n    return (win32api.GetKeyState(key) & (1 << 7)) != 0\\n\\nkey = 17 #ctrl key\\nkey2= ord('V')\\ncopy=1\\n\\nwhile True:\\n    keydown = testpress(key)\\n    key2down = testpress(key2)\\n    if keydown and key2down:\\n        print 'CtrlV pressed!'\\n        if copy==1:\\n          addToClipBoard('Foo')\\n        elif copy==2:\\n            addToClipBoard('Shoo')\\n        elif copy==3:\\n            addToClipBoard('THA END')\\n        if copy>3:\\n            exit(1)\\n        copy+=1\\n    time.sleep(0.10)", "id": "19467290", "code_sizes": 1}, {"nl_num": [3, 2293, 188, 2315, 2610, 2586, 4767, 4], "code_num": [37], "code": "collections.OrderedDict", "id": "7456300", "code_sizes": 1}, {"nl_num": [3, 4135, 177, 550, 1352, 483, 3540, 1828, 1005, 1598, 2113, 2326, 4], "code_num": [2], "code": "import wx\\n\\n\\nclass Main(wx.Frame):\\n\\n    def __init__(self, parent, id):\\n        wx.Frame.__init__(self, parent, id, 'Main', size=(700, 500))\\n\\n        self.SetBackgroundColour('white')\\n\\n        panel = wx.Panel(self, wx.ID_ANY, size=(50, 50))\\n        panel.SetBackgroundColour('blue')\\n\\n        sizer = wx.BoxSizer()\\n        sizer.AddStretchSpacer(1)\\n        sizer.Add(panel, 0, wx.ALIGN_CENTER)\\n        sizer.AddStretchSpacer(1)\\n\\n        self.SetSizer(sizer)\\n\\n\\nif __name__ == '__main__':\\n    app = wx.App()\\n    frame = Main(parent=None, id=-1)\\n    frame.Show()\\n    app.MainLoop()", "id": "20737965", "code_sizes": 1}, {"nl_num": [3, 2, 1060, 28, 540, 746, 3319, 451, 4], "code_num": [2], "code": "sql2 = \"\"\"UPDATE student\\n          SET f_name = %s\\n          WHERE id_user = %s\"\"\"\\ncursor.execute(sql2, (se, the))", "id": "9742846", "code_sizes": 1}, {"nl_num": [3, 2593, 3758, 2610, 3833, 4], "code_num": [2], "code": "'pydevd' in sys.modules", "id": "27747226", "code_sizes": 1}, {"nl_num": [3, 3991, 2723, 4198, 1608, 2, 4], "code_num": [2], "code": "import numpy as np\\nimport matplotlib.pyplot as plt\\n\\nimport textwrap\\nfname='/tmp/tmp.dat'\\nwith open(fname,'w') as f:\\n    f.write(textwrap.dedent('''\\\\n        id col1 col2 col3\\n        2010 1 2 3 4\\n        # Foo\\n\\n        2011 5 6 7 8\\n        # Bar        \\n        # Baz\\n        2012 8 7 6 5\\n        '''))\\n\\ndata = np.genfromtxt(fname, \\n                     comments='#',    # skip comment lines\\n                     dtype = None,    # guess dtype of each column\\n                     names=True)      # use first line as column names\\nprint(data)\\nplt.plot(data['id'],data['col2'])\\nplt.show()", "id": "7608099", "code_sizes": 1}, {"nl_num": [3, 1777, 1976, 817, 169, 1869, 2605, 853, 1828, 3004, 2610, 188, 2326, 4], "code_num": [2], "code": "filename = input (\"filename: \");\\nwith open (filename, \"w\") as f:\\n  f.write (input ());", "id": "3011680", "code_sizes": 1}, {"nl_num": [3, 3384, 3055, 2206, 4179, 1773, 1480, 4531, 2610, 188, 1650, 177, 2963, 177, 1650, 4], "code_num": [2], "code": "for name, surname in zip(firstname, surname):\\n   print(name, surname)", "id": "32728103", "code_sizes": 1}, {"nl_num": [3, 2, 4178, 1828, 3430, 568, 1828, 4019, 2778, 2, 4211, 4], "code_num": [2], "code": "simplify()", "id": "14087545", "code_sizes": 1}, {"nl_num": [3, 483, 62, 568, 2484, 338, 3293, 1828, 41, 3004, 540, 990, 4], "code_num": [2], "code": "import re\\nimport sys\\n\\nfile = open(\"fixVel.txt\")\\ntextfile = file.readlines()\\ncount = -1\\nmatrix = []\\nfor row in textfile:\\n    if row.find(\"Time\") == 0:\\n        count = count + 1\\n        matrix.append([])\\n    if row.find(\"DICPCG\") == 0:\\n        index = row.find(\"Initial residual\")\\n        index1 = row[index:].find(\",\")\\n        matrix[count].append(row[index+19:index+index1])\\n#print matrix\\nfor i in matrix:\\n    for j in i:\\n        sys.stdout.write(j + \" \")\\n    print", "id": "30278012", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 3397, 4220, 2974, 3293, 549, 4115, 3004, 4], "code_num": [2], "code": "import urllib2\\nfrom BeautifulSoup import BeautifulSoup\\npage = BeautifulSoup(urllib2.urlopen(\"http://www.url.com\"))\\npage.findAll('img')", "id": "4295139", "code_sizes": 1}, {"nl_num": [3, 3329, 2613, 1828, 2794, 2019, 1828, 1530, 1957, 2604, 1828, 694, 4], "code_num": [2], "code": "m.group(WHICHEVER_YOU_WANT).isdigit()", "id": "7797004", "code_sizes": 1}, {"nl_num": [3, 819, 4022, 4092, 1708, 990, 1407, 4], "code_num": [2], "code": "import cv2\\nimport numpy as np\\n\\ncap = cv2.VideoCapture(0)\\n\\nwhile(1):\\n\\n    _, frame = cap.read()\\n    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)\\n\\n    # define range of white color in HSV\\n    # change it according to your need !\\n    lower_white = np.array([0,0,0], dtype=np.uint8)\\n    upper_white = np.array([0,0,255], dtype=np.uint8)\\n\\n    # Threshold the HSV image to get only white colors\\n    mask = cv2.inRange(hsv, lower_white, upper_white)\\n    # Bitwise-AND mask and original image\\n    res = cv2.bitwise_and(frame,frame, mask= mask)\\n\\n    cv2.imshow('frame',frame)\\n    cv2.imshow('mask',mask)\\n    cv2.imshow('res',res)\\n\\n    k = cv2.waitKey(5) & 0xFF\\n    if k == 27:\\n        break\\n\\ncv2.destroyAllWindows()", "id": "22588146", "code_sizes": 1}, {"nl_num": [3, 4340, 1400, 3518, 4179, 1828, 262, 568, 1828, 1170, 2610, 3351, 4], "code_num": [2], "code": "def any_func(former_id):\\n    pass\\n\\ndef get_id_from_file():\\n    file = open(r'C:/Users/my.name/Documents/test.txt', 'r')\\n    farmer_id = file.readline()\\n    return farmer_id\\n\\nfarmerid = get_id_from_file()\\nany_func(farmerid)", "id": "26386696", "code_sizes": 1}, {"nl_num": [3, 2364, 1828, 4640, 540, 1828, 1784, 578, 1391, 4179, 4585, 4], "code_num": [2], "code": "dict(zip(col_names, p))", "id": "28465164", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3191, 2000, 2227, 4136, 2610, 990, 2326, 4], "code_num": [2], "code": "def CC(Map):\\n    label_img, cc_num = ndimage.label(Map)\\n    CC = ndimage.find_objects(label_img)\\n    cc_areas = ndimage.sum(Map, label_img, range(cc_num+1))\\n    area_mask = (cc_areas < 1500)\\n    label_img[area_mask[label_img]] = 0\\nreturn label_img, CC", "id": "23967084", "code_sizes": 1}, {"nl_num": [3, 550, 568, 104, 3747, 1273, 1095, 2549, 2326, 4], "code_num": [2], "code": "df = df.loc[:,['timestamp', 'user_id', 'val1', 'val2', 'val3']]", "id": "22817438", "code_sizes": 1}, {"nl_num": [3, 4298, 1828, 3467, 1678, 853, 549, 2697, 1600, 2807, 4], "code_num": [2, 2], "code": "import re\\n\\n# Strip all spaces and dump all data into an array\\nlines = [mo for mo in re.findall('(?s)(?<=\\|)([<\\w].+?)\\s+?\\|', open('py.txt').read())]\\n# Create an array to hold the transformation\\ncombined = ['' for x in range(len(lines) / lines.count(\"<DOg>|\"))]\\n# Append by rows\\nfor idx in range(len(lines)):\\n  combined[idx % len(combined)] += lines[idx] + ','\\n\\n# Write array to file\\noutput = open('numbersConverted.csv','w')\\nfor comb in combined:\\n  output.write(comb + \"\\n\")\\noutput.close", "id": "32972232", "code_sizes": 2}, {"nl_num": [3, 437, 1828, 3079, 540, 1828, 1825, 4238, 4179, 2577, 568, 188, 2610, 1273, 568, 3178, 3698, 21, 4], "code_num": [2], "code": "def get_url_status(url):\\n    try:\\n        r = requests.head(url)\\n        return url, r.status_code\\n    except requests.ConnectionError:\\n        print \"failed to connect\"\\n        return url, 'error'\\n\\nresults = {}\\nwith open('url.csv', 'rb') as infile:\\n    for url in infile:\\n        url_status = get_url_status(url)\\n        results[url_status[0]] = url_status[1]", "id": "25924454", "code_sizes": 1}, {"nl_num": [3, 93, 2587, 4018, 2, 4], "code_num": [2], "code": "x = np.array([[1,2], [4,5], [4,6], [5,4], [4,5]])\\n(x == [4,5]).all(1)\\n\\n#out: array([False,  True, False, False,  True], dtype=bool)", "id": "10698640", "code_sizes": 1}, {"nl_num": [3, 1959, 3690, 4238, 4179, 3645, 841, 1428, 2610, 990, 568, 3222, 1828, 123, 4688, 4], "code_num": [2], "code": "class Restaurant:\\n    def __init__(self, name, location, phone, parent = None):\\n        self.staff = []\\n        self.tables = []\\n        self.menu = []\\n        self.name = name\\n        self.location = location\\n        self.phone = phone\\n\\n        self.rest_dict = {\"Staff\": self.staff, \"Tables\": self.tables, \"Menu\": self.menu}\\n\\n    def addStaff(self, staff_object):\\n        self.staff.append(staff_object)\\n\\n    def addTables(self, table_object):\\n        self.tables.append(table_object)\\n\\n    def addMenu(self, menu_object):\\n        self.menu.append(menu_object)\\nr = Restaurant(\"foo\",\"bar\",911) # instantiate \\nr.addStaff(\"Foo\")\\nr.addStaff(\"Bar\") # append using method\\nr.staff.append(\"Foo1\") # you can also  access attributes directly\\nr.addMenu(\"Lunch\")\\nr.addMenu(\"Dinner\")\\nr.menu.append(\"Lunch\")\\nr.addTables(1)\\nr.addTables(2)\\nr.tables.append(3)\\nprint r.rest_dict\\n\\n{'Menu': ['Lunch', 'Dinner', 'Lunch'], 'Tables': [1, 2, 3], 'Staff': ['Foo', 'Bar', 'Foo1']}", "id": "24479916", "code_sizes": 1}, {"nl_num": [3, 554, 4238, 2249, 2610, 2940, 417, 3293, 3004, 4], "code_num": [2], "code": "import re\\nlines=[]\\nfor l in f_dat:\\n    if l and l[0]!='#':\\n        lines.append([float(i) for i in re.findall('[0-9.]+',l)])\\nprint lines", "id": "27402626", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1704, 3703, 869, 3293, 1828, 3004, 853, 4238, 1250, 1297, 1250, 2610, 188, 4], "code_num": [2], "code": "list_words = [i.split(',') for i in f]", "id": "27722068", "code_sizes": 1}, {"nl_num": [3, 4133, 4190, 2235, 568, 2878, 1400, 3372, 4179, 4355, 2947, 568, 1828, 1170, 2610, 990, 2326, 4], "code_num": [2], "code": "arguments = ('a', 1, 10)\\nsomefunction(*(arguments[:2] + [10]))", "id": "13827543", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3881, 2613, 1828, 382, 4238, 209, 1828, 3518, 4], "code_num": [2], "code": "try:\\n    item = list[2][2]\\nexcept IndexError:\\n    print 'There is no value at list[2][2]'\\nelse:\\n    print '{} is at list[2][2]'.format(item)", "id": "32831543", "code_sizes": 1}, {"nl_num": [3, 3869, 540, 2, 2610, 990, 540, 4429, 4], "code_num": [2], "code": "print( [e.encode('utf-8', 'ignore') for e in stuff] )", "id": "8688274", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1945, 1828, 3518, 568, 1828, 3843, 869, 2610, 1828, 3004, 2610, 990, 2326, 4], "code_num": [2], "code": "def replace_score(file_name, line_num, text):\\n  f = open(file_name, 'r')\\n  contents = f.readlines()\\n  f.close()\\n\\n  contents[line_num] = text+\"\\n\"\\n\\n  f = open(file_name, \"w\")\\n  contents = \"\".join(contents)\\n  f.write(contents)\\n  f.close()\\n\\nreplace_score(\"file_path\", 10, \"replacing_text\")", "id": "28793104", "code_sizes": 1}, {"nl_num": [3, 69, 568, 3178, 1406, 1237, 2610, 1828, 1240, 338, 746, 4], "code_num": [2], "code": "from collections import Counter\\n\\nitems = Counter()\\nwith open('data_file.txt', 'r') as f:\\n    for line in f:\\n        items.update(line.split())\\n\\nprint(\"Total Unique Items: {0}\".format(len(items)))\\n\\nfor item, count in items.most_common(5):\\n    print(\"Item {0} was purchased {1} times\".format(item, count))", "id": "32065995", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3796, 4575, 2746, 2238, 3528, 540, 1828, 642, 694, 4179, 3247, 2326, 4], "code_num": [2], "code": "keys = mydict.keys(); keys.sort()", "id": "5320497", "code_sizes": 1}, {"nl_num": [3, 2523, 540, 3737, 2, 4], "code_num": [2], "code": "CELERY_RESULT_BACKEND = 'mongodb'\\nBROKER_HOST = \"subdomain.mongolab.com\"\\nBROKER_PORT = 123456\\nBROKER_TRANSPORT = 'mongodb'\\nBROKER_VHOST = 'testdb'\\nCELERY_IMPORTS = ('tasks',)\\nCELERY_MONGODB_BACKEND_SETTINGS = { \\n       'host': 'subdomain.mongolab.com',\\n       'port': 123456,\\n       'database': 'testdb',\\n       'user': user,\\n       'password': password,\\n       'taskmeta_collection': 'teskmeta'\\n       }", "id": "9570637", "code_sizes": 1}, {"nl_num": [3, 4137, 188, 2464, 69, 568, 3166, 2, 133, 3690, 265, 2238, 750, 1748, 528, 223, 59, 3528, 4], "code_num": [2], "code": "import pandas as pd\\nimport matplotlib.pyplot as plt\\nimport datetime as dt\\n\\ndf = pd.DataFrame({\\n    'customer_id': ['00001', '00002', '00002', '00003', '00003'],\\n    'transaction_date': ['1997-01-01 00:00:00', \\n                         '1997-01-12 00:00:00', \\n                         '1997-01-12 00:00:00', \\n                         '1997-01-02 00:00:00', \\n                         '1997-03-30 00:00:00']\\n                  })\\n\\nmarkers = ['x', 'o', '+'] \\n\\nfor index, row in df.iterrows():\\n    t = dt.datetime.strptime( row['transaction_date'], '%Y-%m-%d %H:%M:%S')\\n    x = (t - dt.datetime(1970,1,1) ).total_seconds()\\n    y = int(row['customer_id']) \\n    plt.scatter(x,y, marker= markers[y-1],s=200)\\n\\nplt.yticks( range(1,4) ) \\nplt.show()", "id": "32570077", "code_sizes": 1}, {"nl_num": [3, 2148, 1005, 835, 3293, 3867, 262, 4], "code_num": [2], "code": "class Foo:\\n    # static method\\n    @staticmethod\\n    def test():\\n        pass\\n\\n    # class variable\\n    c = {'name' : test }", "id": "2194185", "code_sizes": 1}, {"nl_num": [3, 1741, 3297, 2610, 2450, 4], "code_num": [2], "code": "import os.path, shutil\\n\\ndef remove_ext(arg, dirname, fnames):\\n    argfiles = (os.path.join(dirname, f) for f in fnames if f.endswith(arg))\\n    for f in argfiles:\\n        shutil.move(f, f[:-len(arg)])\\n\\nos.path.walk('/some/path', remove_ext, '.tex')", "id": "1204617", "code_sizes": 1}, {"nl_num": [3, 807, 1364, 568, 361, 343, 1708, 868, 3293, 3004, 4], "code_num": [2], "code": "url = urljoin(BASE_URL, line[i].strip())", "id": "25028105", "code_sizes": 1}, {"nl_num": [3, 2156, 4611, 4690, 3293, 990, 540, 2947, 4], "code_num": [2], "code": "from subprocess import Popen, STDOUT, PIPE\\nprint('Executing: /root/bin/xen-limit ' + str(dom) + ' ' + str(result) + ' --nosave')\\nhandle = Popen('/root/bin/xen-limit ' + str(dom) + ' ' + str(result) + ' --nosave', shell=True, stdout=PIPE, stderr=STDOUT, stdin=PIPE)\\nprint(handle.stdout.read())", "id": "19359369", "code_sizes": 1}, {"nl_num": [3, 2385, 864, 1113, 841, 1297, 2710, 1537, 1566, 3747, 4700, 4], "code_num": [2], "code": "type_buy_order_list = []\\nfor order in volume_buy_order_list:\\n    if order[3] == \"limit\":\\n        type_buy_order_list.append(order)\\n    if order[3] == \"liquid\":\\n        type_buy_order_list.append(order)\\n    if order[3] == \"conditional\":\\n        type_buy_order_list.append(order)", "id": "26029421", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3190, 1828, 1274, 864, 1482, 3995, 1007, 2, 1007, 2604, 1569, 879, 4], "code_num": [2], "code": "from flask.ext.wtf import Form\\n\\nfrom wtforms import TextField, TextAreaField, SubmitField, validators\\n\\n\\nclass ContactForm(Form):\\n    name = TextField(\"Name\", [validators.Required()])\\n    email = TextField(\"Email\", [validators.Required(), validators.email()])\\n    subject = TextField(\"Subject\", [validators.Required()])\\n    message = TextAreaField(\"Message\", [validators.Required()])\\n    submit = SubmitField(\"Send\")", "id": "19354141", "code_sizes": 1}, {"nl_num": [3, 2385, 864, 2, 4179, 4352, 2084, 2610, 4238, 4179, 2639, 1971, 568, 3509, 276, 2549, 2326, 4], "code_num": [2], "code": "from django.utils.translation import ugettext_lazy as _", "id": "2964244", "code_sizes": 1}, {"nl_num": [3, 2177, 3843, 2697, 4498, 223, 4451, 2610, 2049, 1422, 3208, 2326, 4], "code_num": [2], "code": "df.iloc[[4,9,20,26]].sum()", "id": "33057075", "code_sizes": 1}, {"nl_num": [3, 188, 1650, 864, 550, 568, 2103, 1828, 2, 568, 549, 581, 2710, 4], "code_num": [2], "code": "3>> bytearray(b'S\\x00t\\x00a\\x00n\\x00d\\x00a\\x00r\\x00d\\x00F\\x00i\\x00r\\x00m\\x00a\\x00t\\x00a\\x00.\\x00i\\x00n\\x00o\\x00').decode('utf-16le')\\n'StandardFirmata.ino'", "id": "26375004", "code_sizes": 1}, {"nl_num": [3, 3832, 2610, 4238, 4167, 2610, 188, 4], "code_num": [2], "code": "[1] * 2", "id": "25778257", "code_sizes": 1}, {"nl_num": [3, 2, 2610, 848, 2, 4], "code_num": [2], "code": "import time\\n\\nwhile True:\\n    time.sleep(1200) #1200 sec = 20 min\\n    #your code", "id": "33761098", "code_sizes": 1}, {"nl_num": [3, 4137, 188, 2464, 483, 1535, 3119, 733, 568, 1400, 1614, 2464, 69, 1535, 483, 3972, 1605, 1400, 3434, 1605, 2, 568, 2605, 710, 2878, 4347, 411, 4347, 4], "code_num": [2], "code": "print file('/path/to/your/file/styles.css').read()", "id": "22828355", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1652, 1828, 1170, 483, 2, 2610, 990, 4], "code_num": [2], "code": "import imp\\n\\nfoo = imp.load_source('module.name', '/home/morbo/document/python/python_script/morbo_function_lib.py')", "id": "32214408", "code_sizes": 1}, {"nl_num": [3, 1113, 1828, 4238, 4179, 188, 2315, 3157, 4178, 1828, 2036, 4506, 4], "code_num": [2], "code": "list.index()", "id": "10274868", "code_sizes": 1}, {"nl_num": [3, 2385, 1548, 841, 1999, 4], "code_num": [2], "code": "from django.contrib.auth.models import User as DjangoUser\\nfrom django.db import models\\n\\nclass ClientDetails(models.Model):\\n   user = models.OneToOneField(DjangoUser)\\n   address = models.ForeignKey(Address, blank=True, null=True)", "id": "5647669", "code_sizes": 1}, {"nl_num": [3, 3839, 4050, 2610, 990, 4350, 4], "code_num": [2], "code": "import base64\\nimport os\\nfrom Tkinter import *\\n##The Base64 icon version as a string\\nicon = \\\\n\"\"\" REPLACE THIS WITH YOUR BASE64 VERSION OF THE ICON\\n\"\"\"\\nicondata= base64.b64decode(icon)\\n## The temp file is icon.ico\\ntempFile= \"icon.ico\"\\niconfile= open(tempFile,\"wb\")\\n## Extract the icon\\niconfile.write(icondata)\\niconfile.close()\\nroot = Tk()\\nroot.wm_iconbitmap(tempFile)\\n## Delete the tempfile\\nos.remove(tempFile)", "id": "9929479", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2, 1828, 1005, 593, 2326, 4], "code_num": [2], "code": "A.b = staticmethod(B.b)", "id": "18701102", "code_sizes": 1}, {"nl_num": [3, 2, 2610, 3550, 4], "code_num": [2], "code": "allowed_domains = [\"go-on.fi\"]\\nstart_urls = [\"http://www.go-on.fi/tyopaikat\"]\\n\\ndef parse(self, response):\\n    pages = response.xpath('//ul[@class=\"pagination\"][last()-1]/a/text()').extract()\\n    page = 1\\n    start = 0\\n    while page <= pages:\\n        url = \"http://www.go-on.fi/tyopaikat?start=\"+str(start)\\n        start += 20\\n        page += 1\\n        yield Request(url, callback=self.parse_page)\\n\\ndef parse_page(self,response):\\n    hxs = HtmlXPathSelector(response)\\n    items = []\\n    titles = hxs.select(\"//tr\")\\n\\n    for row in titles:\\n        item = JobData()\\n        item['header'] = row.select(\"./td[1]/a/text()\").extract()\\n        item['link'] = row.select(\"./td[1]/a/@href\").extract()\\n        items.append(item)", "id": "28410071", "code_sizes": 1}, {"nl_num": [3, 4044, 1828, 4491, 4179, 327, 568, 1312, 4], "code_num": [2], "code": "def translate(value, leftMin, leftMax, rightMin, rightMax):\\n    # Figure out how 'wide' each range is\\n    leftSpan = leftMax - leftMin\\n    rightSpan = rightMax - rightMin\\n\\n    # Convert the left range into a 0-1 range (float)\\n    valueScaled = float(value - leftMin) / float(leftSpan)\\n\\n    # Convert the 0-1 range into a value in the right range.\\n    return rightMin + (valueScaled * rightSpan)", "id": "1969240", "code_sizes": 1}, {"nl_num": [3, 71, 2, 2, 540, 188, 169, 483, 1007, 2534, 2406, 4], "code_num": [2], "code": "x = input(\"Number: \")\\nx = int(x)\\ny = 0\\nz = 0\\nwhile y < x + 1:\\n    z = z + y \\n    y += 1\\n\\nprint (z)", "id": "26262201", "code_sizes": 1}, {"nl_num": [3, 2, 4179, 562, 4179, 1828, 2587, 4018, 2464, 69, 568, 2616, 1130, 606, 2326, 4], "code_num": [2], "code": "R -= R.sum(0) / len(R)", "id": "8917478", "code_sizes": 1}, {"nl_num": [3, 4137, 188, 2464, 69, 1352, 483, 967, 3881, 2613, 1828, 2710, 209, 3795, 667, 2610, 1828, 3004, 2636, 2326, 4], "code_num": [2], "code": "found = False\\nnewlines = []\\n\\nfor line in f:\\n    if oldstring in line:\\n        found = True\\n        newlines.append(line.replace(oldstring, newstring))\\n    else:\\n        newlines.append(line)", "id": "24532152", "code_sizes": 1}, {"nl_num": [3, 2, 4065, 3747, 2764, 2501, 2610, 188, 4], "code_num": [2], "code": "from paramiko import Message\\nfrom paramiko.rsakey import RSAKey\\nfrom sshkey import load_rsa_pub_key\\nwith open('.ssh/testssh.pub') as fh:\\n  ketype, b64key, _ = fh.next().strip().split(None, 2)\\ndecoded_key = base64.b64decode(b64key)\\npkey = RSAKey(data=decoded_key)\\npsig = Message(agentsig)\\nprint pkey.verify_ssh_sig(plaintext, psig)\\n# True\\nprint pkey.verify_ssh_sig(\"bogus\", psig)\\n# False", "id": "16756199", "code_sizes": 1}, {"nl_num": [3, 1727, 1400, 2344, 733, 4179, 1828, 1039, 2610, 1544, 4], "code_num": [2], "code": "from lxml import etree\\nprint(etree.tostring(root, pretty_print=True))", "id": "14896302", "code_sizes": 1}, {"nl_num": [3, 188, 4625, 3004, 540, 549, 2, 1825, 869, 4], "code_num": [2], "code": "def replace(self, search_str, replace_str):\\n    f = open(self.path,'r+')\\n    new_path = self.path.split('.')[0]+'.TEMP'\\n    new_f = open(new_path,'w')\\n    new_lines = [x.replace(search_str, replace_str) for x in f]\\n    new_f.writelines(new_lines)\\n    f.close()\\n    new_f.close()\\n    os.remove(self.path)\\n    os.rename(new_path, self.path)", "id": "24044844", "code_sizes": 1}, {"nl_num": [3, 453, 1400, 1614, 1635, 1824, 3293, 1844, 4], "code_num": [2], "code": "from selenium import webdriver\\nfrom selenium.common.exceptions import NoSuchElementException\\nfrom selenium.webdriver.common.keys import Keys\\nimport time\\n\\nbrowser = webdriver.Firefox() # Get local session of firefox\\n\\n# 0 wait until the pages are loaded\\nbrowser.implicitly_wait(3) # 3 secs should be enough. if not, increase it\\n\\nbrowser.get(\"http://www.google.com\") # Load page\\n\\n# 1 & 2 \\ntitle = browser.title\\nprint title, len(title)\\n\\n# 3 & 4\\ncurre = browser.current_url\\nprint curre, len(curre)\\n\\n#5\\nbrowser.refresh()\\n\\n#6\\npage_source = browser.page_source\\nprint page_source, len(page_source)", "id": "31266036", "code_sizes": 1}, {"nl_num": [3, 1997, 1828, 3004, 2610, 1828, 4219, 1708, 990, 1297, 898, 3995, 4], "code_num": [2], "code": "file_ids = [line.strip() for line in text_file if not line.isspace()]", "id": "25984107", "code_sizes": 1}, {"nl_num": [3, 2878, 2, 604, 2, 4], "code_num": [2], "code": "from pyVim.connect import SmartConnect\\nfrom pyVmomi import vim\\nsi = SmartConnect(host='10.12.254.137', user='administrator@vsphere.local', pwd='password')\\ncontent = si.RetrieveContent()\\nchildren = content.rootFolder.childEntity\\nfor child in children:\\n    print child\\n\\n'vim.Datacenter:datacenter-33'\\n'vim.Datacenter:datacenter-2'\\nchildren[0].name\\n'1000110'\\ndc = vim.Datacenter('datacenter-33')\\ndc._stub = si._stub\\ndc.name\\n'1000110'", "id": "33717752", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4246, 1828, 4227, 540, 449, 1083, 4268, 2326, 4], "code_num": [2], "code": "def f(x,y,opt_a=None, opt_b=None):\\n    if opt_a is None: opt_a = rcParams['group1.opt_a']", "id": "7329371", "code_sizes": 1}, {"nl_num": [3, 2385, 4583, 2, 841, 1708, 1920, 2610, 3211, 700, 449, 3747, 568, 3747, 2473, 4], "code_num": [2], "code": "from django.db.models import Q\\n\\nChat.objects.filter(Q(chatsubscription__profile__in=[profileA,profileB]) & Q(community=communty))", "id": "30075462", "code_sizes": 1}, {"nl_num": [3, 4446, 2423, 2610, 188, 4], "code_num": [2], "code": "slice(None, None, None)", "id": "9289427", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2616, 2539, 4570, 188, 2497, 2326, 4], "code_num": [2], "code": "from twisted.python import log\\nobserver = log.PythonLoggingObserver(loggerName='logname')\\nobserver.start()", "id": "2493644", "code_sizes": 1}, {"nl_num": [3, 2, 1007, 1711, 3191, 4014, 3214, 2610, 2101, 2, 4], "code_num": [2], "code": "poly = PolyCollection(verts, facecolors = [cc('r'), cc('g'), cc('b'),\\n                                           cc('y')], closed=False)", "id": "16305256", "code_sizes": 1}, {"nl_num": [3, 188, 1997, 3977, 2610, 2163, 848, 4], "code_num": [2], "code": "sums = [0] * N\\n\\nfor x in range (N2):\\n    I = 1 #resets the variables\\n    Q = 0\\n    U = 0\\n    for x in range (N):\\n        theta = 90 + randint(-dtheta, dtheta) #random component \\n        #you don't need to copy these variables, they're redundant\\n        #Q0=Q\\n        #U0=U\\n        #I0=I\\n\\n        #reuse the P-value from previous iteration\\n        I = (I * cosh(dTp) + S * sinh(dTp)) * exp(-dT)\\n        Q = (Ip * cos(2 * theta) + Q) * exp(-dT)\\n        U = (Ip * sin(2 * theta) + U) * exp(-dT)\\n        P = 100 * sqrt(Q**2 + U**2) / I\\n        print P\\n\\n        #add the value of P to the corresponding index at x in sums[]\\n        sums[x] += P\\n\\n#this is called a list comprehension\\n#it is a nicer way of looping over an iterable object (like a list)\\navgs = [n / float(N2) for n in sums]", "id": "23328708", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3150, 4018, 4179, 2510, 2610, 990, 2238, 4182, 549, 4018, 4179, 1828, 547, 1598, 3528, 4], "code_num": [2], "code": "buckets = [0] * 100", "id": "4056768", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1945, 1407, 1563, 2610, 1235, 2326, 4], "code_num": [2], "code": "image = gtk.Image()\\nimg_pixbuf = gtk.gdk.pixbuf_new_from_data(img.tostring(),\\n                                          gtk.gdk.COLORSPACE_RGB,\\n                                          False,\\n                                          img.depth,\\n                                          img.width,\\n                                          img.height,\\n                                          img.width*img.nChannels)  \\n\\nimage = gtk.gdk.set_image_from_pixbuf(img_pixbbuf)", "id": "9811178", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 2616, 1828, 4238, 2610, 188, 681, 2238, 2707, 2464, 616, 2464, 2847, 2464, 177, 177, 2, 3528, 2326, 4], "code_num": [2], "code": "for i in range(0,150,6):\\n     print i", "id": "454566", "code_sizes": 1}, {"nl_num": [3, 1727, 1828, 3004, 1007, 451, 4219, 2610, 1828, 2710, 3645, 1297, 2, 4], "code_num": [2], "code": "import tkinter\\nimport tkinter.filedialog\\nimport getpass\\n# Need this for the `os.path.split` function\\nimport os\\ngui = tkinter.Tk()\\nuser = getpass.getuser()\\ndef click():\\n    # Get the file\\n    file = tkinter.filedialog.askopenfilename(initialdir='C:/Users/%s' % user)\\n    # Split the filepath to get the directory\\n    directory = os.path.split(file)[0]\\n    print(directory)\\nbutton = tkinter.Button(gui, command=click)\\nbutton.grid()\\ngui.mainloop()", "id": "20725056", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3222, 1828, 752, 4350, 540, 2, 75, 2238, 2, 3528, 2610, 1881, 3747, 2, 2326, 4], "code_num": [2], "code": "from sqlalchemy.dialects.postgresql import HSTORE", "id": "26060372", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 2007, 1828, 3004, 1708, 188, 2326, 4], "code_num": [2], "code": "os.system(\"myfile.py\")", "id": "33466146", "code_sizes": 1}, {"nl_num": [3, 326, 179, 2710, 2610, 2473, 869, 2610, 990, 4], "code_num": [2], "code": "import sys\\nimport time\\n\\nsys.stdout.write('name=')\\nlast_lenght = 0\\nwith open('names.txt') as names:\\n    for name in names:\\n        sys.stdout.write('\\b' * last_lenght)    # go back\\n        sys.stdout.write(' ' * last_lenght)     # clear last name\\n        sys.stdout.write('\\b' * last_lenght)    # reposition\\n        sys.stdout.write(name.strip())\\n        sys.stdout.flush()\\n        last_lenght = len(name.strip())\\n        time.sleep(0.5)", "id": "11064185", "code_sizes": 1}, {"nl_num": [3, 2385, 3191, 4147, 2610, 2, 4], "code_num": [2], "code": "definitions_list = [definition.encode(\"utf8\") for definition in definitions.objects.values_list('title', flat=True)]", "id": "14895981", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4570, 3317, 1125, 604, 990, 4], "code_num": [2], "code": "subprocess.call('curl \"https://api.keen.io/3.0/projects/PROJECT_ID/events/EVENT_COLLECTION?api_key=WRITE_KEY\" -H \"Content-Type: application/json\" -d @purchase1.json', shell=true)", "id": "33033776", "code_sizes": 1}, {"nl_num": [3, 3195, 1828, 3708, 4023, 1867, 1708, 990, 4], "code_num": [2], "code": "import psycopg2\\nfrom psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT # <-- ADD THIS LINE\\n\\ncon = psql.connect(dbname='postgres',\\n      user=self.user_name, host='',\\n      password=self.password)\\n\\ncon.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT) # <-- ADD THIS LINE\\n\\ncur = con.cursor()\\ncur.execute(\"CREATE DATABASE %s  ;\" % self.db_name)", "id": "34484066", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3881, 2613, 4220, 1479, 4252, 1297, 1828, 188, 4350, 4403, 658, 711, 2951, 1400, 4350, 2326, 4], "code_num": [2], "code": "from modulefinder import ModuleFinder\\nfinder = ModuleFinder()\\nfinder.run_script('bacon.py')\\n\\nprint 'Loaded modules:'\\nfor name, mod in finder.modules.iteritems():\\n    print '%s: ' % name,\\n    print ','.join(mod.globalnames.keys()[:3])\\n\\nprint '-'*50\\nprint 'Modules not imported:'\\nprint '\\n'.join(finder.badmodules.iterkeys())", "id": "15200543", "code_sizes": 1}, {"nl_num": [3, 188, 864, 1149, 2, 4179, 3586, 2039, 2, 4], "code_num": [2], "code": "def power_of_two(target):\\n    if target > 1:\\n        for i in range(1, int(target)):\\n            if (2 ** i >= target):\\n                return 2 ** i\\n    else:\\n        return 1", "id": "32419967", "code_sizes": 1}, {"nl_num": [3, 1727, 3518, 250, 4018, 2326, 4], "code_num": [2], "code": "components = \"Set(['LPE', 'CLK'])\"\\nx = components.lstrip(\"Set([\").rstrip(\"])\")\\nfor i in x.split(\", \"):\\n    z = i.lstrip(\"'\").rstrip(\"'\")\\n    print z", "id": "22033140", "code_sizes": 1}, {"nl_num": [3, 3499, 1828, 262, 540, 4213, 2610, 1170, 990, 4], "code_num": [2], "code": "g.vertices.index.lookup(**{\"bad:identifier\":\"value\"})", "id": "21587675", "code_sizes": 1}, {"nl_num": [3, 1592, 2, 2583, 2610, 188, 4], "code_num": [2], "code": "print [abstract['value'] for abstract in json_data[\"http://dbpedia.org/resource/Ceramic_art\"][\"http://dbpedia.org/ontology/abstract\"] if abstract['lang'] == 'en'][0]", "id": "2823214", "code_sizes": 1}, {"nl_num": [3, 3492, 2233, 2610, 2753, 4], "code_num": [2], "code": "engine= create_engine('postgresql://user:pswd@localhost/db1')\\nDBSession = scoped_session(sessionmaker(extension=ZopeTransactionExtension()))\\nDBSession.configure(bind=engine)\\n\\nengine2= create_engine('postgresql://user:pswd@localhost/db2')\\nDBSession2 = scoped_session(sessionmaker(extension=ZopeTransactionExtension()))\\nDBSession2.configure(bind=engine2)", "id": "21188187", "code_sizes": 1}, {"nl_num": [3, 990, 2529, 452, 2878, 4220, 1400, 3467, 1268, 1828, 2710, 4], "code_num": [2, 2], "code": "r'Email:\\s*(.*)'", "id": "22490833", "code_sizes": 2}, {"nl_num": [3, 188, 4327, 3090, 3433, 2464, 3594, 730, 1942, 3909, 3774, 4], "code_num": [2], "code": "with open('file.csv', 'r') as src, open('file2.csv', 'w') as dst:\\n    dst.write(next(src).replace(\" \", \"\"))     # delete whitespaces from header\\n    dst.writelines(line for line in src)", "id": "18050016", "code_sizes": 1}, {"nl_num": [3, 2803, 1956, 1959, 47, 1285, 2610, 990, 4], "code_num": [2], "code": "#!/usr/bin/python\\nfriends = {'John' : {'phone' : '0401',\\n        'birthday' : '31 July',\\n        'address' : 'UK',\\n        'interests' : ['a', 'b', 'c']},\\n    'Harry' : {'phone' : '0402',\\n        'birthday' : '2 August',\\n        'address' : 'Hungary',\\n        'interests' : ['d', 'e', 'f']}}\\n\\nresponse = ['']\\nerror_message = \"Sorry, I don't know about that. Please try again, or type 'exit' to leave the program: \"\\n\\nwhile response[0] != 'exit':\\n    response = raw_input(\"Please enter search criteria, or type 'exit' to exit the program: \").split()\\n    try:\\n        print \"%s's %s is %s\" % (response[0], response[1], friends[response[0]][response[1]])\\n    except KeyError:\\n        print error_message\\n    except IndexError:\\n        print error_message\\n\\nprint ('Thank you, good bye!')", "id": "10458049", "code_sizes": 1}, {"nl_num": [3, 1727, 1400, 1313, 1546, 4179, 1828, 101, 4179, 2206, 2610, 188, 4], "code_num": [2], "code": "import itertools\\nfor element in itertools.product(*somelists):\\n    print element", "id": "533905", "code_sizes": 1}, {"nl_num": [3, 2, 1095, 4780, 853, 1828, 3316, 2710, 4], "code_num": [2], "code": "import pandas as pd \\nimport numpy as np\\ndf = pd.DataFrame(np.array([['abc', 11], ['xyz', 21],['pqr',31]]),columns=['member','value'])\\n\\nsql_string = \"select * from table1 where member in \"\\nmembers = tuple(df.member.tolist())\\nquery = sql_string + str(members)", "id": "33537402", "code_sizes": 1}, {"nl_num": [3, 188, 2, 2, 2610, 1838, 2, 3293, 4251, 3608, 2604, 4370, 4], "code_num": [2], "code": "sys.path.append('/usr/lib/python2.7/dist-packages')\\nhelp('modules')", "id": "31438567", "code_sizes": 1}, {"nl_num": [3, 3083, 2019, 1828, 4349, 3786, 4], "code_num": [2], "code": "label, number = irTable[\"al\"]\\nprint(\"It's the {}\".format(label))", "id": "27549842", "code_sizes": 1}, {"nl_num": [3, 2, 3731, 4179, 528, 1708, 188, 1227, 2571, 3747, 4382, 3041, 4], "code_num": [2], "code": "import numpy as np\\nfrom PIL import Image\\n\\ndef normalize(arr):\\n    \"\"\"\\n    Linear normalization\\n    http://en.wikipedia.org/wiki/Normalization_%28image_processing%29\\n    \"\"\"\\n    arr = arr.astype('float')\\n    # Do not touch the alpha channel\\n    for i in range(3):\\n        minval = arr[...,i].min()\\n        maxval = arr[...,i].max()\\n        if minval != maxval:\\n            arr[...,i] -= minval\\n            arr[...,i] *= (255.0/(maxval-minval))\\n    return arr\\n\\ndef demo_normalize():\\n    img = Image.open(FILENAME).convert('RGBA')\\n    arr = np.array(img)\\n    new_img = Image.fromarray(normalize(arr).astype('uint8'),'RGBA')\\n    new_img.save('/tmp/normalized.png')", "id": "7422204", "code_sizes": 1}, {"nl_num": [3, 4624, 1007, 1711, 2990, 1712, 3293, 4429, 2610, 188, 4], "code_num": [2], "code": "from BeautifulSoup import BeautifulSoup as bs\\nimport urllib as ul\\n\\nbase_url = 'http://www.yellowpages.ca'\\ndata_file = open('yellow_file.txt', 'a')\\n\\nbt = bs(ul.urlopen(base_url + '/locations/Quebec/Montreal/90014002.html'))\\n\\nfor div in bt.findAll('div', 'ypgCategory'):\\n    for a in div.findAll('a'):\\n        link = base_url + a['href']\\n\\n        bt = bs(ul.urlopen(link), convertEntities=bs.HTML_ENTITIES)\\n\\n        titles = bt.findAll('span', 'listingTitle')\\n        phones = bt.findAll('a', 'phoneNumber')\\n\\n        for title, phone in zip(titles, phones):\\n            line = '%s   %s\\n' % (title.text, phone.text)\\n            data_file.write(line.encode('utf-8'))\\n            print line.rstrip()\\n\\ndata_file.close()", "id": "8364672", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3644, 2047, 4050, 3293, 3321, 833, 148, 2, 4], "code_num": [2], "code": "LSUIElement=1", "id": "4345102", "code_sizes": 1}, {"nl_num": [3, 2616, 2828, 327, 315, 2610, 1828, 4238, 4179, 2639, 4], "code_num": [2], "code": "list_of_tuples = [(0, 0), (0, -1), (1, -1), (1, -2), (1, -3), (1, -4), (0, -4), (0, -3), (-1, -3), (-2, -3), (-2, -2), (-2, -1), (-1, -1), (-1, -2), (0, -2)]\\nto_add = min(list_of_tuples)[0]\\nif to_add < 0:\\n    list_of_tuples = [(a[0]-to_add, a[1]) for a in list_of_tuples]\\n\\n# [(2, 0), (2, -1), (3, -1), (3, -2), (3, -3), (3, -4), (2, -4), (2, -3), (1, -3), (0, -3), (0, -2), (0, -1), (1, -1), (1, -2), (2, -2)]", "id": "13693313", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3191, 4047, 889, 3293, 1828, 4238, 1101, 4], "code_num": [2], "code": "x = [e for i, e in enumerate(x) if i not in [5, 12, 23]]", "id": "19894222", "code_sizes": 1}, {"nl_num": [3, 3148, 2284, 4436, 4178, 1068, 1237, 4], "code_num": [2], "code": "def handleItemClicked(self, account):\\n    try:\\n        accountsSelected = set()\\n\\n        for account in range(self.mainAccountTable.rowCount()):\\n            if self.mainAccountTable.cellWidget(account, 0).findChild(type(QCheckBox())).isChecked():\\n                accountsSelected.add(self.mainAccountTable.item(account, 1).text())                    \\n                print (\"selected:\",accountsSelected)\\n        for account in range(self.mainAccountTable.rowCount()):\\n            if not self.mainAccountTable.cellWidget(account, 0).findChild(type(QCheckBox())).isChecked():\\n                accountsSelected.remove(self.mainAccountTable.item(account, 1).text())\\n                print (\"not selected:\",accountsSelected)  \\n\\n        print (\"main:\", accountsSelected)\\n        return accountsSelected\\n    except Exception as e:\\n        print (\"error:\",e)", "id": "32476167", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3366, 528, 1217, 1956, 4414, 1828, 1976, 4219, 2613, 2, 2038, 1007, 1711, 3452, 2473, 2610, 655, 2326, 4], "code_num": [2], "code": "FileField.storage", "id": "6251645", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3016, 1828, 338, 2991, 681, 949, 2610, 990, 2049, 2326, 4], "code_num": [2], "code": "df = pd.DataFrame(np.arange(27).reshape(3,9) , \\ncolumns = [\\n     ['x' , 'y' , 'z' , 'Group1' , 'Group1' , 'Group1' , 'Group2' , 'Group2' , 'Group2'] , \\n     [ 'x' , 'y' , 'z' , 'prop1' , 'prop2' , 'prop3' , 'prop1' , 'prop2' , 'prop3']\\n          ]\\n)\\n\\ndf['Group1']['prop1']\\n\\n# 0     3\\n# 1    12\\n# 2    21", "id": "32245035", "code_sizes": 1}, {"nl_num": [3, 1737, 1976, 1007, 451, 3995, 4178, 717, 2822, 1857, 2464, 711, 3474, 2, 3630, 265, 2326, 4], "code_num": [2], "code": "class BaseHandler(webapp.RequestHandler):\\n    def __init__(self):\\n        pass\\n\\n    def render(self, template_filename, template_args):\\n        nick = users.get_current_user().nickname()\\n        template_args['nick'] = nick\\n\\n        self.response.out.write(\\n            template.render(\\n                self.template_path(template_filename), template_args))", "id": "4129475", "code_sizes": 1}, {"nl_num": [3, 2385, 3747, 4351, 864, 2591, 864, 2, 568, 1659, 864, 2217, 2710, 4182, 407, 2464, 863, 667, 4], "code_num": [2], "code": "def __unicode__(self):\\n     return '%s' % (self.user)", "id": "19600882", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1519, 1400, 3218, 1597, 223, 4171, 1708, 990, 2326, 4], "code_num": [2], "code": "import subprocess\\nsubprocess.call([\"shutdown\", \"-f\", \"-r\", \"-t\", \"10\", \"-c\", '\"MESSAGE HERE\"'])", "id": "14764294", "code_sizes": 1}, {"nl_num": [3, 2975, 3407, 1422, 2, 4011, 853, 4059, 2610, 4526, 1678, 4], "code_num": [2], "code": "document.add_paragraph('Simple paragraph')\\np = document.add_paragraph()\\np.add_run('Name:\\t\\t').bold = True\\np.add_run(name)\\ndocument.add_paragraph()\\np = document.add_paragraph()\\np.add_run('Surname:\\t\\t').bold = True\\np.add_run(surname)", "id": "23048468", "code_sizes": 1}, {"nl_num": [3, 1016, 1594, 1651, 1479, 4], "code_num": [2], "code": "def setHost(host):\\n    global _host\\n    _host = host", "id": "3868928", "code_sizes": 1}, {"nl_num": [3, 2, 3690, 4018, 889, 4179, 547, 75, 4], "code_num": [2], "code": "for i in list:\\n    try:\\n        myVal.append(float(i))\\n    except:\\n        pass", "id": "24296035", "code_sizes": 1}, {"nl_num": [3, 188, 389, 177, 4209, 2710, 2464, 3959, 4238, 2464, 853, 3959, 3746, 4], "code_num": [2], "code": "s1=\"hello world\"\\nL1=s1.split(\" \")\\nt1=tuple(L1)\\nprint type(t1)\\ntuple\\n\\n\\nprint(t1)\\n('hello', 'world')", "id": "10297180", "code_sizes": 1}, {"nl_num": [3, 188, 897, 2, 2326, 970, 869, 2464, 1945, 4220, 2610, 4238, 4], "code_num": [2], "code": "sum(int(n) for n in str(2**1000))", "id": "3145379", "code_sizes": 1}, {"nl_num": [3, 990, 864, 2878, 1400, 3119, 1712, 2610, 549, 4374, 3138, 4], "code_num": [2], "code": "import sys\\nimport StringIO\\nimport contextlib\\n\\n@contextlib.contextmanager\\ndef stdoutIO(stdout=None):\\n    old = sys.stdout\\n    if stdout is None:\\n        stdout = StringIO.StringIO()\\n    sys.stdout = stdout\\n    yield stdout\\n    sys.stdout = old\\n\\ncode = \"\"\"\\ni = [0,1,2]\\nfor j in i :\\n    print j\\n\"\"\"\\nwith stdoutIO() as s:\\n    exec code\\n\\nprint \"out:\", s.getvalue()", "id": "3906232", "code_sizes": 1}, {"nl_num": [3, 1003, 864, 550, 568, 53, 1415, 4], "code_num": [2], "code": "vbox.remove(self.hbox)", "id": "28903206", "code_sizes": 1}, {"nl_num": [3, 1592, 4633, 1828, 533, 2018, 4491, 3293, 1828, 533, 4401, 2610, 188, 4], "code_num": [2], "code": "block_per_line = 36\\nline_no = 1\\nstart_block = block_per_line * (line_no - 1) + 18\\nselected = all_data[start_block: start_block + 17]  # is this what you want?", "id": "31459978", "code_sizes": 1}, {"nl_num": [3, 3178, 1828, 2, 2610, 1828, 2710, 177, 527, 4327, 177, 3035, 2613, 237, 169, 2710, 835, 990, 4], "code_num": [2], "code": "has_capital = lambda s:s[0].isupper() or has_capital(s[1:]) if s else False", "id": "13003975", "code_sizes": 1}, {"nl_num": [3, 4340, 4491, 4179, 4505, 568, 339, 2610, 188, 4], "code_num": [2], "code": "files = sys.stdin.splitlines()\\nfor n in range(start,end):\\n  fname = 'test%02d.ext' % (n,)\\n  if fname in files:\\n    some_loop(fname)", "id": "10826594", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2531, 3090, 3630, 2, 2639, 2610, 1828, 4238, 2610, 990, 4], "code_num": [2], "code": "from itertools import izip_longest\\ngroups_of_six = izip_longest(*[iter(my_list_of_tuples)]*6)\\nfor a_group in groups_of_six:\\n    do_some_processing_on(a_group)", "id": "22796666", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1704, 1828, 999, 4179, 351, 3293, 1828, 2, 3004, 4], "code_num": [2], "code": "import warc\\nfrom itertools import islice\\n\\nN = 10\\nwarc_file = warc.open('/path/to/file.warc')\\nfor record in islice(warc_file, N):\\n    do_stuff_with(record)", "id": "30343181", "code_sizes": 1}, {"nl_num": [3, 236, 1594, 3293, 831, 2610, 1828, 4350, 4], "code_num": [2], "code": "import IPython.ipapi\\nip = IPython.ipapi.get()\\n\\ndef run_this_plot(self, arg_s=''):\\n    \"\"\" Run\\n    Examples\\n    In [1]: import demo\\n    In [2]: rtp x y <z> \\n    Where x, y, and z are numbers of any type\\n    \"\"\"\\n    args = []\\n    for arg in arg_s.split():\\n        try:\\n            args.append(self.shell.user_ns[arg])\\n        except KeyError:\\n            raise ValueError(\"Invalid argument: %r\" % arg)\\n    print \"args: \", args\\n    # Do something here with args, such as plot them\\n\\n# Activate the extension\\nip.expose_magic(\"rtp\", run_this_plot)", "id": "6928102", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2692, 4220, 1400, 1237, 4179, 1828, 3843, 2252, 2610, 1828, 4238, 4179, 3048, 2326, 4], "code_num": [2], "code": "d1 = {'a': 1, 'b': 2}\\nd2 = {'a': 1}\\nl = [d1, d2, d1, d2, d1, d2]\\nfor d in l:\\n    d.pop('b',None)\\nprint l", "id": "1059924", "code_sizes": 1}, {"nl_num": [3, 2753, 2, 3654, 3995, 4], "code_num": [2], "code": "response.content_disposition = 'attachment; filename=\"my_filename.txt\"'", "id": "23825536", "code_sizes": 1}, {"nl_num": [3, 3397, 4220, 4498, 3090, 3542, 2237, 4178, 3212, 2252, 4], "code_num": [2], "code": "User.select().join(Game).where(Game.id == game_id)", "id": "22441402", "code_sizes": 1}, {"nl_num": [3, 2, 764, 338, 3214, 2610, 2049, 1242, 4], "code_num": [2], "code": "Y.tail(1).plot(style='rx')", "id": "16795076", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3222, 1828, 3867, 2474, 1605, 1535, 1945, 4047, 835, 568, 1828, 3867, 2326, 4], "code_num": [2], "code": "def decorator(*args):\\n    def wrapper(cls):\\n        if not issubclass(cls, Screen):\\n            raise ValueError(\"You can't apply this decorator \"\\n                             \"on this class.\")\\n\\n        for arg in args:\\n            def clicker(self, marg=arg):\\n                return \"Hey !\" + marg\\n            setattr(cls, arg, clicker)\\n        return cls\\n    return wrapper", "id": "21232162", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2, 3921, 2944, 540, 4110, 990, 3747, 794, 2062, 4], "code_num": [2], "code": "from selenium import webdriver\\n\\nprofile = webdriver.FirefoxProfile()\\nprofile.set_preference('network.http.phishy-userpass-length', 255)\\ndriver = webdriver.Firefox(firefox_profile=profile)\\ndriver.get(\"https://username:password@somewebsite.com/\")", "id": "7022116", "code_sizes": 1}, {"nl_num": [3, 2, 1863, 540, 862, 4139, 3008, 4], "code_num": [2], "code": "def deconstruct(self):\\n    # Use ImageField as path, as the deconstruc() will return ImageWithThumbnailsField\\n    field_class = \"django.db.models.fields.files.ImageField\"\\n    name, path, args, kwargs = super(BaseThumbnailField, self).deconstruct()\\n    return name, field_class, args, kwargs", "id": "27316447", "code_sizes": 1}, {"nl_num": [3, 2, 1637, 3634, 4459, 4179, 2441, 769, 1605, 2, 3293, 2, 28, 2326, 4], "code_num": [2], "code": "class Main(QObject):\\n    def __init__(self,parent=None):\\n        super().__init__(parent)\\n        self.engine = QQmlApplicationEngine(self)\\n        self.engine.load(QUrl.fromLocalFile('main.qml'))\\n        self.window = self.engine.rootObjects()[0]\\n\\n    def show(self):\\n        self.window.show()", "id": "25931508", "code_sizes": 1}, {"nl_num": [3, 4656, 1828, 3047, 2238, 990, 3528, 4], "code_num": [2], "code": "for exploit in results['matches'][:5]:\\n        print '%s:' % (exploit['description'])", "id": "5631891", "code_sizes": 1}, {"nl_num": [3, 3704, 332, 327, 568, 1828, 2229, 2610, 1485, 990, 4], "code_num": [2], "code": "from flask import request\\n\\n@app.route('/summary',methods = ['GET'])\\ndef api_summary_2():\\n    filename = request.args.get('file', None)\\n    if filename is None:\\n        abort(404)\\n    else:\\n        return api_summary(filename)", "id": "13133197", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 3068, 1828, 4799, 2610, 1828, 3079, 2238, 41, 3528, 3004, 568, 1828, 4799, 2610, 1312, 3079, 2238, 41, 3528, 3004, 169, 2378, 1828, 694, 2237, 4178, 4649, 1726, 2326, 4], "code_num": [2], "code": "import numpy as np\\n\\n# Load the files:\\nanswers = np.loadtxt(open(\"Answer.txt\"), dtype='str', delimiter=\",\")\\ntest = np.loadtxt(open(\"Text.txt\"), dtype='str', delimiter=\",\")\\n\\n# Compare\\nscores = 2 * np.sum(answers == test, axis=0)\\n\\n# save\\nnp.savetxt(\"Score.csv\", scores, delimiter=\",\")", "id": "22744556", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3222, 1828, 740, 4182, 2, 4179, 4019, 1022, 2727, 540, 2510, 2610, 188, 2326, 4], "code_num": [2], "code": "bytearray(100)", "id": "9184489", "code_sizes": 1}, {"nl_num": [3, 2, 552, 1400, 224, 4179, 1828, 2, 4], "code_num": [2], "code": "self.helper.layout = Layout(\\n        *(self.Meta.fields + (StrictButton('Send', css_class='btn-default', type='submit'),))\\n    )", "id": "26930074", "code_sizes": 1}, {"nl_num": [3, 1210, 1750, 2319, 3836, 2610, 2807, 3747, 3004, 604, 188, 4691, 2127, 4], "code_num": [2], "code": "import xlsxwriter\\nimport random\\nwb = xlsxwriter.Workbook('page_breaks.xlsx')\\nws = wb.add_worksheet('Sample page')\\n\\nheaders = ['header1', 'header2']\\n# set headers\\nfor col, header in enumerate(headers):\\n    ws.write(0+1, col+1, 'header'+str(col))\\n\\n# let it be 300 rows of data\\nfor row in xrange(2,302):\\n    ws.write(row, 1, row)\\n\\n# fill table with some random data\\nfor _ in xrange(3000):\\n    row = random.randrange(2, 302)\\n    col = random.randrange(2, 16)\\n    ws.write(row, col, 'X')\\n\\n# print_area(), set_paper() and fit_to_pages() do the trick\\nws.print_area(1, 1, 301, 15)\\nws.set_paper(9)  # set A4 as page format\\npages_horz = 1\\npages_vert = 4\\nws.fit_to_pages(pages_horz, pages_vert)\\n\\nwb.close()", "id": "23236957", "code_sizes": 1}, {"nl_num": [3, 1595, 2035, 4498, 568, 2473, 3909, 2610, 990, 1095, 4], "code_num": [2], "code": "import pandas as pd\\ndf = pd.read_csv('df.csv',index_col=0)\\ndf_combined = df.groupby(['yyyymmdd','hr']).max()\\ndf_combined", "id": "34567798", "code_sizes": 1}, {"nl_num": [3, 2043, 1066, 4179, 327, 223, 2, 4179, 3247, 2610, 990, 4640, 4], "code_num": [2], "code": "cq={'A1_B2M_01':2.4, 'A2_B2M_01':5, 'A3_B2M_01':4, 'B1_B2M_02':3, 'B2_B2M_02':7, 'B3_B2M_02':6}\\n\\nsums = dict()\\nfor k, v in cq.iteritems():\\n    _, p2 = k.split('_', 1)\\n    if p2 not in sums:\\n        sums[p2] = [0, 0]\\n    sums[p2][0] += v\\n    sums[p2][1] += 1\\n\\n\\nres = {}\\nfor k, v in sums.iteritems():\\n    res[k] = v[0]/float(v[1])\\n\\nprint res", "id": "26888134", "code_sizes": 1}, {"nl_num": [3, 4527, 2473, 2710, 2610, 990, 4], "code_num": [2], "code": "def lower_case(a):\\n    x=str(a).lower()\\n    y = \"This is now Lowercase:\" + x;\\n    return y;", "id": "12103570", "code_sizes": 1}, {"nl_num": [3, 2153, 4801, 2610, 2910, 540, 188, 169, 2385, 4], "code_num": [2], "code": "days = set( Post.objects.filter(user=TARGET).values_list(\"log_date\", flat=True) )\\ncurr = min(days)\\nwhile curr <= date.today():\\n    print curr,\\n    if curr not in days:\\n        print \"NO ENTRY\",\\n    print\\n    curr += timedelta(days=1)", "id": "1814664", "code_sizes": 1}, {"nl_num": [3, 2, 1956, 3825, 198, 604, 2287, 684, 4], "code_num": [2], "code": "\"Content-Length\"", "id": "19997708", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1176, 1400, 694, 4179, 1394, 2146, 568, 3006, 549, 2, 4179, 3784, 1415, 169, 2, 3412, 4], "code_num": [2], "code": "def combinations(S,K):\\n    return S**K;", "id": "24213367", "code_sizes": 1}, {"nl_num": [3, 3829, 817, 1569, 2, 2250, 540, 990, 4350, 3156, 853, 549, 4507, 540, 2, 4], "code_num": [2], "code": "x = input(\"Continue? \").strip()", "id": "10696239", "code_sizes": 1}, {"nl_num": [3, 3005, 4691, 2610, 990, 169, 1569, 2219, 568, 4570, 2366, 3293, 4691, 4], "code_num": [2], "code": "filename = 'actions.email'\\nmod = __import__(filename)\\nVAR = getattr(mod, 'email')\\nVAR.OpenEmail()", "id": "11815018", "code_sizes": 1}, {"nl_num": [3, 4489, 661, 2610, 990, 4], "code_num": [2], "code": "def my_sqrt(x):\\n    root1 = math.sqrt(x)\\n    root2 = -root1\\n    return root1,root2", "id": "15391748", "code_sizes": 1}, {"nl_num": [3, 1468, 2, 2969, 2610, 2956, 4316, 4], "code_num": [2], "code": "run(server='eventlet',host='localhost', port=8080, reloader=True)", "id": "5717825", "code_sizes": 1}, {"nl_num": [3, 2814, 3594, 1569, 2611, 1856, 1373, 2610, 1822, 2360, 1748, 2610, 4359, 1227, 26, 4], "code_num": [2], "code": "self.drawingarea_game.set_events(gtk.gdk.BUTTON_PRESS_MASK)", "id": "28036758", "code_sizes": 1}, {"nl_num": [3, 867, 990, 262, 250, 1828, 4359, 603, 2, 4], "code_num": [2], "code": "def on_checkbutton1_toggled(self, widget, data=None):\\n    global test\\n    chkbtn1 = self.builder.get_object(\"checkbutton1\")\\n    print \"BUTTON CHECKED -\",chkbtn1.get_active()\\n    if chkbtn1.get_active() == 0:\\n        test = 0\\n    if chkbtn1.get_active() == 1:\\n        test = 1\\n    print test\\n\\ndef __init__(self):\\n\\n    global test", "id": "28193813", "code_sizes": 1}, {"nl_num": [3, 2293, 3090, 1828, 4219, 4179, 4505, 2610, 188, 4], "code_num": [2], "code": "import fnmatch\\nimport os\\n\\npath = os.path.expanduser('~/documents')\\ntree = ET.parse(\"sync_list.xml\")\\nroot = tree.getroot()\\nsynced = [elt.text for elt in root.findall('synced/sfile')]\\nfor filename in os.listdir(path):\\n    if fnmatch.fnmatch(filename, '*.blah') and filename not in synced:\\n        filename = os.path.join(path, filename)", "id": "13480316", "code_sizes": 1}, {"nl_num": [3, 188, 864, 550, 568, 4747, 549, 2220, 1007, 451, 3995, 552, 3858, 2326, 4], "code_num": [2], "code": "for name, obj in self.__dict__.iteritems():\\n    if isinstance(obj, QtCore.QObject) and not obj.objectName(): # QObject without a name\\n        obj.setObjectName(name)", "id": "4575275", "code_sizes": 1}, {"nl_num": [3, 2, 4179, 2, 4178, 990, 2, 4], "code_num": [2], "code": "# Not a data descriptor because it doesn't define __set__\\nclass NonDataDescriptor(object):\\n    def __get__(self, obj, objtype):\\n        return 3\\n\\nclass Namespace(object):\\n\\n    # Data descriptor - defines both __get__ and __set__\\n    @property\\n    def foo(self):\\n        return 3\\n\\n    bar = NonDataDescriptor()\\n\\nx = Namespace()\\nx.__dict__['foo'] = 4  # We bypass the foo descriptor's __set__ here,\\nx.bar = 4              # but there's no bar setter, so this one goes to the dict\\n\\n# x now has foo and bar descriptors and __dict__ entries\\n\\nprint x.foo  # prints 3 - data descriptor wins over instance __dict__ entry\\nprint x.bar  # prints 4 - instance __dict__ entry wins over non-data descriptor", "id": "18368019", "code_sizes": 1}, {"nl_num": [3, 1007, 2878, 1007, 3028, 4345, 3518, 990, 4], "code_num": [2], "code": "def initUI(self):\\n    self.parent.title(\"HOME SCREEN\")\\n\\n\\n    frame = Frame(self)\\n\\n    self.pack(fill=BOTH, expand=1)\\n    label1=Label(frame,text=\"USERNAME\",)\\n    label2=Label(frame,text=\"PASSWORD\")\\n    text1=Entry(frame, show=\"*\", width=15,)\\n    text2=Entry(frame,width=15)\\n    login=Button(self,text=\"Login\",command=self.load)\\n    register=Button(self,text='Register',command=self.dump)\\n    Quit=Button(self,text='Quit',command=self.quit)\\n    delete=Button(self,text='Delete Account',command=self.delete)\\n    showb=Button(self,text='Show Accounts',command=self.show)\\n\\n\\n    label1.pack(side=LEFT)\\n    text2.pack(side=LEFT, padx=5, pady=5)\\n    label2.pack(side=LEFT )\\n    text1.pack(side=LEFT, padx=5, pady=5)\\n    frame.pack(fill=BOTH, expand=1)\\n\\n    Quit.pack(side=RIGHT ,padx=5, pady=5)\\n    register.pack(side=RIGHT)\\n    login.pack(side=RIGHT)\\n    delete.pack(side=RIGHT)\\n    showb.pack(side=RIGHT)\\n    global text1\\n    global text2\\ndef dump(self):\\n\\n    z=(text1.get())\\n    a=(text2.get())", "id": "31218118", "code_sizes": 1}, {"nl_num": [3, 188, 2523, 3747, 3663, 2, 1349, 4], "code_num": [2], "code": "app._tasks=MyCustomTaskRegistry()", "id": "26889979", "code_sizes": 1}, {"nl_num": [3, 69, 568, 3641, 990, 2304, 568, 2, 1007, 451, 2852, 2326, 4], "code_num": [2], "code": "from logging import Handler, getLogger\\n\\nclass ListboxHandler(Handler):\\n    def __init__(self, box):\\n        self._box = box\\n        Handler.__init__(self)\\n\\n    def emit(self, record):\\n        r = self.format(record)\\n        self._box.insert(0, r)\\n\\n# quick test:\\ntarget = [] # supports insert like Listbox :)\\nrootLogger = getLogger()\\n# add handler to the root logger here\\n# should be done in the config...\\nrootLogger.addHandler(ListboxHandler(target))\\nrootLogger.warn('test')\\nprint(target)", "id": "10311755", "code_sizes": 1}, {"nl_num": [3, 4137, 188, 69, 1352, 1757, 191, 1828, 4238, 853, 2071, 2316, 1808, 3616, 540, 1400, 764, 1039, 3293, 1400, 205, 2170, 2326, 4], "code_num": [2], "code": "splitlists = [mylist[i:i+n] for i in range(0, len(mylist), n-1)]\\nsplitlists[-1].append(splitlists[0][0])", "id": "12285115", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1545, 1828, 3079, 540, 1404, 2326, 4], "code_num": [2], "code": "writer=csv.writer(m,delimiter=',',quotechar=('\\n\"'),quoting=csv.QUOTE_ALL)", "id": "30906544", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4011, 1828, 977, 3747, 3934, 4238, 4179, 336, 3498, 853, 1828, 727, 336, 3518, 2326, 4], "code_num": [2], "code": "f=open(filename,\"r\")\\nlistOfLines=f.readlines()\\nfor line in listOfLines:\\n    splitLine=line.split(\",\")\\n    print \"Day of Month: \"+splitLine[4]#this is an example of one piece of info.\\n    print \"Month: \"+splitLine[5]#this is an example of one piece of info.", "id": "10107980", "code_sizes": 1}, {"nl_num": [3, 4773, 568, 1957, 389, 2206, 540, 3861, 4], "code_num": [2], "code": "def matcher (l1, l2):\\n    if (l1 == []):\\n        return (l2 == [] or l2 == ['*'])\\n    if (l2 == [] or l2[0] == '*'):\\n        return matcher(l2, l1)\\n    if (l1[0] == '*'):\\n        return (matcher(l1, l2[1:]) or matcher(l1[1:], l2))\\n    if (l1[0] == l2[0]):\\n        return matcher(l1[1:], l2[1:])\\n    else:\\n        return False", "id": "8847257", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 1757, 2267, 3097, 540, 1400, 188, 4691, 2, 2326, 4], "code_num": [2], "code": "from dragonfly.all import Grammar, CompoundRule\\n\\n# Voice command rule combining spoken form and recognition processing.\\nclass ExampleRule(CompoundRule):\\n    spec = \"do something computer\"                  # Spoken form of command.\\n    def _process_recognition(self, node, extras):   # Callback when command is spoken.\\n         print \"Voice command spoken.\"\\n\\n# Create a grammar which contains and loads the command rule.\\ngrammar = Grammar(\"example grammar\")                # Create a grammar to contain the command    rule.\\ngrammar.add_rule(ExampleRule())                     # Add the command rule to the grammar.\\ngrammar.load()                                      # Load the grammar.\\n\\nwhile True:\\n    pythoncom.PumpWaitingMessages()\\n    sleep(.1)", "id": "3644129", "code_sizes": 1}, {"nl_num": [3, 1685, 389, 338, 3299, 540, 1171, 338, 4], "code_num": [2], "code": "df = df.reindex(columns=df2.columns.union(df.columns),\\n                index=df2.index.union(df.index))", "id": "22891523", "code_sizes": 1}, {"nl_num": [3, 188, 3559, 1935, 889, 2610, 4018, 4], "code_num": [2], "code": "existing = set(x[0] for x in setup)\\nfor expected in ('iapsetting', 'mmssetting', 'iap-mms'):\\n    if expected not in existing:\\n        setup.append((expected, 0))", "id": "29717910", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2878, 2, 816, 1708, 188, 4], "code_num": [2], "code": "shutil.copy(txtName, os.path.join(os.environ[\"HOMEPATH\"], \"Desktop\"))", "id": "34275782", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 2291, 4107, 881, 568, 4465, 1956, 1925, 2610, 655, 1254, 2326, 4], "code_num": [2], "code": "students.objects.filter(student_id__contains=\"97318\") \\\\n                .extra({'stident_id_uint': \"CAST(student_id as UNSIGNED)\"}) \\\\n                .order_by('-student_id_uint')", "id": "28101580", "code_sizes": 1}, {"nl_num": [3, 647, 2, 1170, 864, 1007, 645, 1007, 1268, 1747, 568, 3161, 117, 2714, 540, 2924, 4], "code_num": [2], "code": "background = ObjectProperty()", "id": "22713285", "code_sizes": 1}, {"nl_num": [3, 2402, 1442, 568, 4575, 1828, 2, 4], "code_num": [2], "code": "sorted_dict.keyOrder = [key[1] for key in sorted((v['priority'],k) for k,v in sorted_dict.items())]", "id": "21623726", "code_sizes": 1}, {"nl_num": [3, 188, 864, 3397, 1005, 1428, 604, 1828, 1384, 3995, 4], "code_num": [2], "code": "getattr(My,name)", "id": "5513896", "code_sizes": 1}, {"nl_num": [3, 701, 1442, 568, 3191, 1828, 4573, 1237, 3293, 1828, 4238, 1422, 303, 4], "code_num": [2], "code": "somelist = [x for x in somelist if not determine(x)]", "id": "5745881", "code_sizes": 1}, {"nl_num": [3, 3240, 2849, 3747, 3277, 2013, 2610, 188, 4], "code_num": [2], "code": "import struct\\n# read 2 bytes from hardware as a string\\ns = hardware.readbytes(2)\\n# h means signed short\\n# < means \"little-endian, standard size (16 bit)\"\\n# > means \"big-endian, standard size (16 bit)\"\\nvalue = struct.unpack(\"<h\", s) # hardware returns little-endian\\nvalue = struct.unpack(\">h\", s) # hardware returns big-endian", "id": "875046", "code_sizes": 1}, {"nl_num": [3, 69, 568, 2378, 1400, 4299, 4179, 1828, 2, 2610, 990, 4], "code_num": [2], "code": "def height(bst):\\n    if isempty(bst):\\n        return 0\\n    else:\\n        return 1 + max(height(bst.left), height(bst.right))", "id": "21011423", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2, 1828, 1176, 2610, 3309, 1486, 2610, 188, 4], "code_num": [2], "code": "# x = root node\\ndef acyc(graph,x=0):\\n    node = graph[x]\\n\\n    if len(node) == 0:\\n        return {x:1}\\n\\n    # call self on children\\n    count_map = {}\\n    for i in node:\\n        count_map.update(acyc(graph,i))\\n    count_map[x] = sum([node[i]*count_map[i] for i in node])\\n\\n    return count_map", "id": "21372261", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2640, 1331, 2, 2, 1237, 2610, 3004, 169, 383, 2605, 3007, 2326, 4], "code_num": [2], "code": "scene = QGraphicsScene();\\nscene.addEllipse( 100, 100, 50, 50 )\\nscene.addRect( 200, 12, 120, 50 )\\nscene.addLine( 50, 70, 100, 400 )\\n\\nfor item in scene.items():\\n    if item.type() == QGraphicsEllipseItem().type():\\n        print \"Ellipse\",  item.rect()\\n    elif item.type() == QGraphicsRectItem().type():\\n        print \"Rectangle\",  item.rect()\\n    elif item.type() == QGraphicsLineItem().type():\\n        print \"Line\", item.line().p1(), item.line().p2()", "id": "15156465", "code_sizes": 1}, {"nl_num": [3, 4405, 769, 540, 2, 700, 568, 1828, 4139, 2610, 2385, 4], "code_num": [2], "code": "User.objects.exclude(teacher=None)", "id": "21993183", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 887, 120, 619, 2577, 2326, 4], "code_num": [2], "code": "sites = hxs.select('//ul/li')\\nitems = []\\n\\nfor site in sites:\\n    item = Website()\\n    # this extracts a list, so i guess .extract()[0] is expected\\n    item['name'] = site.select('a/text()').extract() \\n    # '//a[...]' maybe you expect that this gets the links within the `site`, but it actually get the links from the entire page; you should use './/a[...]'.\\n    # And, again, this returns a list, not a single url.\\n    item['url'] = site.select('//a[contains(@href, \"http\")]/@href').extract()", "id": "11184942", "code_sizes": 1}, {"nl_num": [3, 2749, 4139, 568, 2583, 4], "code_num": [2], "code": "class MyModel(peewee.Model):\\n\\n  def __str__(self):\\n    r = {}\\n    for k in self._data.keys():\\n      try:\\n         r[k] = str(getattr(self, k))\\n      except:\\n         r[k] = json.dumps(getattr(self, k))\\n    return str(r)\\n\\n\\nclass User(MyModel):\\n    email = CharField()\\n    status = CharField(default=\"enabled\")\\n    firstname = CharField()\\n    lastname = CharField()\\n    class Meta:\\n        database = db", "id": "21975920", "code_sizes": 1}, {"nl_num": [3, 2, 1828, 188, 794, 4178, 4302, 4], "code_num": [2], "code": "python-dev", "id": "2526632", "code_sizes": 1}, {"nl_num": [3, 188, 2, 2, 540, 389, 3747, 13, 1580, 4], "code_num": [2], "code": "dt = datetime.datetime.strptime(dateVariable, \"%b-%y\")\\nif dt > datetime.now():\\n    dt = dt - datetime.timedelta(years=100)", "id": "11465078", "code_sizes": 1}, {"nl_num": [3, 4110, 1227, 188, 3747, 69, 568, 2878, 1400, 3087, 3293, 1400, 1110, 1268, 3825, 549, 528, 4], "code_num": [2], "code": "ages = driver.execute_script(\"function get_ages() { arr=[]; $('#faces .tooltip-inner div').each(function () { arr.push($(this).text()); }); return arr;}; return get_ages()\")", "id": "30547901", "code_sizes": 1}, {"nl_num": [3, 545, 1400, 3527, 4392, 4179, 1828, 2, 188, 2, 2, 2365, 2326, 4], "code_num": [2], "code": "def RunFunctionAndGetResult(chan, func, *args, **kwargs):\\n      chan.send(func(*args, **kwargs))", "id": "3092614", "code_sizes": 1}, {"nl_num": [3, 3195, 2, 1242, 4179, 2346, 338, 2610, 2, 4307, 3747, 990, 2101, 4], "code_num": [2], "code": "x = sorted( degree_frequencies.keys( ) )\\ny = [ degree_frequencies[ k ] for k in x ]\\nplt.loglog( x, y )", "id": "20444880", "code_sizes": 1}, {"nl_num": [3, 550, 568, 746, 1400, 2, 265, 223, 2406, 2498, 2610, 689, 2326, 4], "code_num": [2], "code": "msg.__setitem__('Date',\\n                time.strftime(\"%a, %d %b %Y %H:%M:%S %z\",\\n                              entry_time))", "id": "31102904", "code_sizes": 1}, {"nl_num": [3, 1574, 1005, 733, 3004, 540, 188, 4], "code_num": [2], "code": "url = \"C:\\Program Files\\Whatever Folder\\Whatever.html\"\\nwith open(url, 'r') as f:\\n    data = f.read()", "id": "23901754", "code_sizes": 1}, {"nl_num": [3, 1315, 1750, 223, 1255, 2, 4], "code_num": [2], "code": "rcParams['savefig.transparent']", "id": "18528341", "code_sizes": 1}, {"nl_num": [3, 990, 4147, 864, 550, 1535, 483, 2, 2613, 1828, 2710, 3075, 568, 840, 1446, 853, 2881, 3747, 3183, 2326, 4], "code_num": [2], "code": "if not isinstance(data, unicode):\\n    # It's not Unicode!\\n    data = data.decode('UTF8')", "id": "4461183", "code_sizes": 1}, {"nl_num": [3, 1803, 1546, 4179, 619, 1608, 3055, 3429, 1605, 2244, 943, 1218, 4], "code_num": [2], "code": "import pandas as pd\\nfrom StringIO import StringIO\\n\\ndata = \\\\n'user,time,event\\n\\\\na,1,x\\n\\\\na,2,y\\n\\\\na,3,z\\n\\\\nb,1,x\\n\\\\nb,2,x\\n\\\\nb,3,z\\n\\\\nb,4,z\\n\\\\nc,1,y\\n\\\\nc,2,y\\n\\\\nc,3,z\\n\\\\nd,1,z\\n'\\n\\ndf = pd.read_csv(StringIO(data), index_col='user')\\ndfs = [d[['time']].rename(columns={'time': k}) for k, d in df.groupby('event')]\\ndfm = dfs[0]\\nfor d in dfs[1:]:\\n    dfm = pd.merge(dfm, d, left_index=True, right_index=True, how='outer')", "id": "20423974", "code_sizes": 1}, {"nl_num": [3, 4624, 1828, 990, 4238, 2, 1828, 3514, 3747, 2, 4018, 551, 660, 1039, 2326, 4], "code_num": [2], "code": "def Minimum_Close(shade_corrected_image, size):\\n\\n    uint32_shade_corrected_image = pymorph.to_int32(shade_corrected_image)\\n\\n    angles = np.arange(12) * 15\\n\\n    def pymorph_op(angle):\\n        struct_element = pymorph.seline(size, angle)\\n        return pymorph.close(uint32_shade_corrected_image, struct_element)\\n\\n    image_close = np.dstack(pymorph_op(a) for a in angles)\\n\\n    min_close_image = np.min(image_close, axis=-1) - shade_corrected_image\\n\\n    return min_close_image", "id": "18355808", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2869, 4047, 4379, 1232, 2610, 2, 1268, 357, 528, 2610, 7, 2379, 4], "code_num": [2], "code": "from SimpleCV import *\\ncrops = ((0,0,320,240),(320,0,320,240),(0,240,320,240),(320,240,320,240))\\ncam=VirtualCamera('vd.mpg','video')\\nwhile True:\\n    imgs=[]\\n    img=cam.getImage()\\n    for crop in crops:\\n        imgs.append(img.crop(crop[0],crop[1],crop[2],crop[3]))\\n    row1=imgs[0].sideBySide(imgs[1])\\n    row2=imgs[2].sideBySide(imgs[3])\\n    outputimg=row1.sideBySide(row2, 'top')\\n    outputimg.show()", "id": "24133556", "code_sizes": 1}, {"nl_num": [3, 188, 864, 3991, 2406, 3746, 1297, 2, 2030, 3293, 900, 4238, 4], "code_num": [2], "code": "result = tuple(itertools.izip_longest(l, (x[1] for x in f for y in range(x[0])), fillvalue='None'))", "id": "8576975", "code_sizes": 1}, {"nl_num": [3, 1592, 2583, 2710, 1422, 841, 2610, 188, 4], "code_num": [2], "code": "for key, value in jdata.iteritems():\\n    print key, value", "id": "5294927", "code_sizes": 1}, {"nl_num": [3, 3990, 273, 568, 1519, 4220, 2, 2610, 549, 4115, 2319, 4], "code_num": [2], "code": "document.getElementsByTagName(\"textarea\")", "id": "2311718", "code_sizes": 1}, {"nl_num": [3, 4133, 4190, 1828, 1442, 568, 4011, 472, 853, 1828, 2, 897, 275, 2326, 4], "code_num": [2], "code": "from PIL import Image, ImageDraw\\nim = Image.new('1', (width, height), color=1) # Background white\\ndraw = ImageDraw.Draw(im)\\ndraw.point((x, y), 0) # Draw black", "id": "31196508", "code_sizes": 1}, {"nl_num": [3, 4133, 4190, 1828, 1442, 568, 1945, 1828, 511, 2710, 2610, 188, 1007, 451, 2, 2710, 1383, 4347, 2, 935, 3465, 4347, 177, 822, 2238, 2548, 3528, 2326, 4], "code_num": [2], "code": "print \"You can {} that step!\".format('check' if checked else 'uncheck')", "id": "10135080", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4575, 1828, 2587, 4018, 2237, 4178, 1400, 327, 2610, 1828, 3843, 3909, 2326, 4], "code_num": [2], "code": "import numpy as np\\n\\nc = np.array([5,2,8,2,4])    \\na = np.array([[ 0,  1,  2,  3,  4],\\n              [ 5,  6,  7,  8,  9],\\n              [10, 11, 12, 13, 14],\\n              [15, 16, 17, 18, 19],\\n              [20, 21, 22, 23, 24]])\\n\\ni = np.argsort(c)\\na = a[:,i]", "id": "24331551", "code_sizes": 1}, {"nl_num": [3, 4502, 3248, 2610, 1170, 4], "code_num": [2], "code": "import random\\nhealth = 20\\nenemy_health = 20\\n\\ndef punch():\\n    global enemy_health\\n    x = random.randint(1,3)\\n    enemy_health -= x\\n    if x == 3:\\n        print\"your hit was very effective enemy lost 3 hp\"\\n    if x == 2:\\n        print \"Your punch was effective enemy lost 2 hp\"\\n    if x == 1:\\n        print \"enemy lost 1 point\"\\n    print \"Enemy Health is\", enemy_health\\n\\ndef kick():\\n    global enemy_health\\n    x = random.randint(1,5)\\n    enemy_health -= x\\n    if x > 3:\\n        print \"your kick was very effective enemy lost %d hp\" % x\\n    if x > 1 < 3:\\n        print \"Your kick was effective enemy lost %d hp\" % x\\n    if x == 1:\\n        print \"enemy lost 1 point\"\\n    print \"Enemy Health is\", enemy_health\\n\\ndef attackChoice(c):\\n    if c == \"punch\":\\n        punch()\\n    if c == \"kick\":\\n        kick()\\n\\nwhile True:\\n    c = raw_input(\"Choice Attack\\nKick Or Punch: \")\\n    attackChoice(c)", "id": "16114242", "code_sizes": 1}, {"nl_num": [3, 3474, 1828, 1170, 3293, 1312, 3867, 3004, 4], "code_num": [2], "code": "from logisticRegression import LogisticRegression\\n\\nmy_instance = LogisticRegression()\\nmy_instance.negative_log_likelihood()", "id": "34292007", "code_sizes": 1}, {"nl_num": [3, 2101, 2464, 2147, 619, 1608, 2473, 879, 262, 4178, 598, 2901, 4], "code_num": [2], "code": "plt.plot(x, y, label='y = %.2f x + %.2f' %(A, B))", "id": "33796771", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2, 2473, 568, 2473, 648, 1651, 889, 2629, 681, 2315, 3594, 2, 3018, 710, 2326, 4], "code_num": [2], "code": "from xlrd import open_workbook\\n\\n\\ndata = []\\n\\ndef get_data():\\n    filename = \"Demo.xlsx\"\\n    exl_file = open_workbook(filename)\\n    sheet = exl_file.sheet_by_index(0)\\n    for row_index in range(1,4):\\n            col_a_data = sheet.cell(row_index,0).value\\n            col_b_data = sheet.cell(row_index,1).value\\n            data.append({col_a_data:col_b_data});\\n\\nget_data()\\n\\nprint data", "id": "31369073", "code_sizes": 1}, {"nl_num": [3, 188, 864, 550, 568, 3222, 1828, 2406, 4238, 2237, 4178, 900, 4238, 711, 547, 769, 4], "code_num": [2], "code": "a = ['house', 'bikeCT', 'car', 'bike', 'houseCT']\\nb = [x for x in a if 'CT' not in x]", "id": "15147696", "code_sizes": 1}, {"nl_num": [3, 2739, 4179, 4018, 1999, 2610, 2587, 4], "code_num": [2], "code": "import numpy as np\\nA = np.ndarray(shape=(2,2), dtype=float, order='F')\\nB = np.ndarray(shape=(2,2), dtype=float, order='F')\\nC = np.ndarray(shape=(2,2), dtype=float, order='F')\\nD = np.ndarray(shape=(2,2), dtype=float, order='F')\\n\\nT = np.array([[A,B],[C,D]])", "id": "26160243", "code_sizes": 1}, {"nl_num": [3, 3914, 2622, 568, 652, 3293, 3083, 2610, 188, 389, 177, 1861, 4], "code_num": [2], "code": "header_row = 0\\n\\n# build list of lists that represents row values in worksheet,\\n# including column names from header row\\nrows = [worksheet.row_values(row) for row in range(worksheet.nrows)]\\n\\n# extract list of column names to use for insert statement, values to be inserted remain\\ncolumns = rows.pop(header_row)\\n\\ncnxn = pyodbc.connect(r\"DRIVER={SQL Server};SERVER=XXXXXXXXXX\\DEV_CON1;DATABASE=GGG;UID=AAA_dbo;PWD=XXXXXXXXX;\")\\ncursor = cnxn.cursor()\\n\\n# list of column names used to build SQL statement, including parameter placeholders (?)\\npopulate_db = \"insert into tblSnap_TEST ({}) values ({})\".format(', '.join(columns),\\n                                                                 ', '.join('?' * len(columns)))\\n\\n# insert is executed once for each sequence of parameter values\\ncursor.executemany(populate_db, rows)\\ncnxn.commit()\\ncnxn.close()", "id": "27713919", "code_sizes": 1}, {"nl_num": [3, 4636, 319, 2, 4], "code_num": [2], "code": "button.setDefault(True)", "id": "33839175", "code_sizes": 1}, {"nl_num": [3, 4438, 4718, 223, 1182, 2238, 3528, 2610, 2385, 4139, 4], "code_num": [2], "code": "user_playlists = Everything.objects.filter(profile__username=friend).values('playlist').distinct()", "id": "13897088", "code_sizes": 1}, {"nl_num": [3, 624, 4179, 3467, 3004, 551, 1828, 817, 568, 990, 4350, 4], "code_num": [2], "code": "with open (\"data.txt\", \"r\") as myfile:\\n    data=myfile.read().replace('\\n', '')", "id": "22686109", "code_sizes": 1}, {"nl_num": [3, 188, 2464, 785, 2613, 1828, 4691, 209, 1828, 547, 1170, 4], "code_num": [2], "code": "try:\\n    from mymodule import myfunction\\nexcept ImportError:\\n    def myfunction():\\n        print(\"broken\")", "id": "31754649", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3057, 2, 2610, 188, 1708, 3393, 1896, 2238, 2, 2, 3528, 2464, 1708, 374, 3932, 1623, 551, 817, 169, 1569, 533, 2710, 4], "code_num": [2], "code": "import hashlib\\n\\n# hash 1 time...\\ndigest = hashlib.sha256(raw).digest()\\n\\n# then hash 64k-1 times\\nfor x in range(0, 64000-1):\\n  digest = hashlib.sha256(digest).digest()\\nprint digest.encode(\"hex\")", "id": "10235161", "code_sizes": 1}, {"nl_num": [3, 3242, 1828, 2, 528, 853, 1828, 2, 4018, 4179, 2510, 4], "code_num": [2], "code": "blank_image = np.zeros((28,28,3), uint8)", "id": "30643436", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3222, 1828, 1782, 3630, 265, 2291, 2073, 3090, 1400, 1959, 2610, 990, 4], "code_num": [2], "code": "import xml.etree.ElementTree as ET\\n\\ndoc    = ET.parse(\"users.xml\")\\nroot = doc.getroot() #Returns the root element for this tree.\\nroot_new  = ET.Element(\"person\") \\nfor child in root:\\n    name                = child.attrib['name']\\n    password             = child.attrib['password']\\n\\n    user  = ET.SubElement(root_new, \"user\") # create subelement in cycle! \\n    user.set(\"username\",name)               # username variable is not declared\\n    user.set(\"password\",password)\\n\\ntree = ET.ElementTree(root_new)\\ntree.write(\"new.xml\")\\n\\nimport sys\\ntree.write(sys.stdout)", "id": "13172815", "code_sizes": 1}, {"nl_num": [3, 4613, 3273, 101, 4179, 1438, 327, 853, 2346, 2610, 188, 2326, 4], "code_num": [2], "code": "#!/usr/bin/env python\\nimport numpy as np\\n\\na = np.fromfile(open('file', 'r'), sep='\\n')\\n# [ 0.     0.005  0.124  0.     0.004  0.     0.111  0.112]\\n\\n# You can set arbitrary bin edges:\\nbins = [0, 0.150]\\nhist, bin_edges = np.histogram(a, bins=bins)\\n# hist: [8]\\n# bin_edges: [ 0.    0.15]\\n\\n# Or, if bin is an integer, you can set the number of bins:\\nbins = 4\\nhist, bin_edges = np.histogram(a, bins=bins)\\n# hist: [5 0 0 3]\\n# bin_edges: [ 0.     0.031  0.062  0.093  0.124]", "id": "1721273", "code_sizes": 1}, {"nl_num": [3, 1132, 923, 338, 711, 2, 1828, 2711, 2610, 990, 4], "code_num": [32], "code": "WSGIApplicationGroup %{GLOBAL}", "id": "9179012", "code_sizes": 1}, {"nl_num": [3, 1405, 1828, 4790, 4790, 2607, 568, 1828, 3867, 4], "code_num": [2], "code": "if kwargs.has_key('bases_queryset'):\\n    bases_queryset = kwargs['bases_queryset']\\n    del kwargs['bases_queryset']", "id": "987237", "code_sizes": 1}, {"nl_num": [3, 550, 568, 885, 3843, 3467, 3293, 1828, 343, 2610, 188, 1708, 4429, 2326, 4], "code_num": [2], "code": "import requests\\nfrom bs4 import BeautifulSoup\\n\\nr = requests.get('https://www.xoom.com/india/send-money')\\ndata = r.text\\nsoup = BeautifulSoup(data)\\n\\nfor rate in soup.find_all('em'):\\n    print rate.text", "id": "25865811", "code_sizes": 1}, {"nl_num": [3, 2385, 864, 69, 568, 3644, 1422, 103, 1750, 2901, 540, 2957, 2326, 4], "code_num": [2], "code": "# I prefer to importing django.forms\\n# but import the fields etc individually\\n# if you prefer \\nfrom django import forms\\n\\nclass BooklogForm(forms.ModelForm):\\n    book_comment = forms.CharField(widget=forms.Textarea, label='')\\n\\n    class Meta: \\n        model = Booklog\\n        exclude = ('Author',)", "id": "9332638", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4570, 4314, 3518, 4179, 1828, 1170, 551, 575, 4179, 1956, 1605, 4021, 3746, 2610, 990, 4], "code_num": [2], "code": "s = True\\nwhile s:\\n    s, i = capture.read()\\n    if s:\\n        do_some_stuff(i)", "id": "15542329", "code_sizes": 1}, {"nl_num": [3, 2737, 2, 4179, 1956, 1959, 4], "code_num": [2], "code": "x = 0\\nfor c in itertools.takewhile(lambda c: x < 10, itertools.count()):\\n    x = int(raw_input())\\n    print x, c", "id": "17137490", "code_sizes": 1}, {"nl_num": [3, 3611, 1122, 2, 2, 2610, 3585, 4], "code_num": [2], "code": "from rpy2.robjects.lib.ggplot2 import ggplot, \\\\n                               aes_string, \\\\n                               geom_histogram, \\\\n                               element_blank, \\\\n                               theme_bw, \\\\n                               theme\\nfrom rpy2.robjects import r\\n\\nnogrid_x_theme = theme(**{'panel.grid.major.x': element_blank(),\\n                         'panel.grid.minor.x': element_blank()})\\niris = r('iris')\\np = ggplot(iris) + geom_histogram(aes_string(x = 'Sepal.Width'))\\np += theme_bw() + nogrid_x_theme\\np.plot()", "id": "14918830", "code_sizes": 1}, {"nl_num": [3, 188, 1945, 2714, 568, 1400, 3746, 4], "code_num": [2], "code": "a = ('2',)\\nb = 'z'\\nnew = a + (b,)", "id": "16730339", "code_sizes": 1}, {"nl_num": [3, 3427, 338, 2610, 1828, 4640, 382, 2610, 1828, 4640, 2464, 2610, 1828, 4523, 1442, 2326, 4], "code_num": [2], "code": "from pprint import pprint\\npprint(dict(dictionary))", "id": "28999988", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3191, 3018, 2610, 1828, 990, 4238, 4], "code_num": [2], "code": "set(lis)", "id": "19439718", "code_sizes": 1}, {"nl_num": [3, 2052, 123, 1768, 2238, 540, 549, 926, 694, 4179, 3023, 3528, 4], "code_num": [2], "code": "def proclevel(levels):\\n    if levels > 0:\\n        generator = proclevel(levels - 1)\\n        temp = None\\n        for firsthash, secondhash in generator:\\n            if not temp: temp = hashofthem(firsthash, secondhash)\\n            else: yield temp, hashofthem(firsthash, secondhash); temp = None\\n        #If odd number of packets\\n        if temp: yield temp, None\\n    else:\\n        temp = None\\n        for chunk in chunks:\\n            if not temp: temp = hash(chunk)\\n            else: yield temp, hash(chunk); temp = None\\n        if temp: yield temp, None", "id": "12058011", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2103, 2587, 265, 101, 2, 338, 540, 3420, 3015, 568, 1213, 4182, 668, 3015, 4], "code_num": [2], "code": "import numpy as np\\nshare_prices  = np.array([100,102,104,106,104, 109, 110])\\nmedian_price = np.median(share_prices)\\n104.0\\naverage_price = np.average(share_prices)\\n105.0\\nmin_price = np.min(share_prices)\\n100\\nmax_price = np.max(share_prices)\\n110", "id": "27552041", "code_sizes": 1}, {"nl_num": [3, 3099, 4616, 540, 4681, 711, 2, 4], "code_num": [2], "code": "import matplotlib.pyplot as plt\\n\\ndata_dic={1:'1:Text 1',2:'2:Text 2',3:'3:Text 3',4:'4:Text 4'}\\nax1 = plt.subplot(111)\\nxval = [1,2,3,4]\\nyval = [ 22.,  13.,  21.,   6.]\\nfor j in range(len(xval)):\\n    ax1.bar(xval[j], yval[j], width=0.8, bottom=0.0, align='center', color='k')\\n    ax1.plot(1,1,label = data_dic[xval[j]],marker = '',ls ='') #plot with not marker or line\\nax1.set_xticks(xval)\\nax1.legend(frameon = False)\\nplt.show()", "id": "24277770", "code_sizes": 1}, {"nl_num": [3, 69, 568, 191, 1828, 2710, 2610, 3931, 4179, 4047, 1594, 4], "code_num": [2], "code": "s = 'abcdefgh12345678abcdefgh'\\nimport re\\n\\na, b, c = re.findall(\"\\w{8}\", s)\\nprint(a, b, c)\\n\\na, b, c = (s[i:i + 8] for i in range(0, len(s), 8))\\nprint(a, b, c)", "id": "31903206", "code_sizes": 1}, {"nl_num": [3, 1846, 1597, 853, 2, 303, 4], "code_num": [2], "code": "from azure.storage import QueueService\\nimport base64\\nqueue_service = QueueService(account_name, account_key)\\nqueue_service.put_message('taskqueue', base64.b64encode('Hello world!'))", "id": "24524266", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3119, 1326, 4179, 4064, 1007, 451, 1920, 4], "code_num": [2], "code": "qs = qs.filter(reduce(operator.or_, or_queries)).as_pymongo()\\nprint qs", "id": "23827034", "code_sizes": 1}, {"nl_num": [3, 1315, 1750, 4086, 2610, 1940, 2449, 4], "code_num": [2], "code": "[DynamoDB]\\nregion = us-west-2\\nvalidate_checksums = True", "id": "21012647", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 1945, 2013, 1882, 2610, 188, 2326, 4], "code_num": [2], "code": "def sumD(num):\\n    if num == 0: return 0\\n    return (num % 10) + sumD(num // 10)", "id": "15674037", "code_sizes": 1}, {"nl_num": [3, 69, 568, 2616, 4781, 4139, 2, 1273, 3705, 4], "code_num": [2], "code": "class A(ndb.Model):\\n   some_property = ndb.KeyProperty('B' , required=True)\\n\\nclass B(ndb.Model):\\n   some_other_property = ndb.KeyProperty(A , required=True)", "id": "28441604", "code_sizes": 1}, {"nl_num": [3, 3990, 4104, 1007, 451, 95, 568, 3178, 1828, 1546, 1007, 451, 2, 2238, 188, 3528, 4], "code_num": [2], "code": "node = api.item_lookup('B001OXUIIG', ResponseGroup='Medium')", "id": "6103772", "code_sizes": 1}, {"nl_num": [3, 188, 1977, 3126, 1708, 2385, 2238, 223, 1295, 3528, 4], "code_num": [2], "code": "from pymongo import Connection\\nconnection = Connection()\\n\\n# Get your DB\\ndb = connection.my_database\\n\\n# Get your collection\\ncars = db.cars\\n\\n# Create some objects\\nimport datetime\\ncar = {\"brand\": \"Ford\",\\n       \"model\": \"Mustang\",\\n       \"date\": datetime.datetime.utcnow()}\\n\\n# Insert it\\ncars.insert(car)", "id": "10640532", "code_sizes": 1}, {"nl_num": [3, 2, 2, 990, 4618, 4018, 2610, 4338, 653, 2610, 2, 4], "code_num": [2], "code": "numba.cuda.local.array(shape, type)", "id": "27186403", "code_sizes": 1}, {"nl_num": [3, 4504, 4179, 2, 3814, 2610, 188, 4], "code_num": [2], "code": "ans = 0\\ncount = 0\\nfor item in raw_input():\\n    temp = (ans * 10 + (count + 1)*(int(item)))%1000000007\\n    ans = (ans + temp)%1000000007\\n    count = (count*2 + 1)%1000000007\\n\\nprint ans", "id": "23879353", "code_sizes": 1}, {"nl_num": [3, 1567, 3703, 1039, 2610, 1828, 3746, 2610, 990, 4], "code_num": [2], "code": "x =  (((-300, 49.3878), (-300, 400), (-220.045, 400), (-169.193, 204.22), (-300, 49.3878)))\\n\\ny = tuple(tuple(i / 100.0 for i in inner) for inner in x)\\n\\n# You can remove the tuple and instead use [] if you don't mind it being a list.\\ny_list = [[i / 100.0 for i in inner] for inner in x]", "id": "25281564", "code_sizes": 1}, {"nl_num": [3, 2, 1828, 2710, 552, 4059, 990, 4], "code_num": [2], "code": "\"hello world my name is\".split(' ')", "id": "32452041", "code_sizes": 1}, {"nl_num": [3, 2, 1422, 2, 3747, 188, 3747, 2480, 4788, 4119, 4], "code_num": [2], "code": "acc_cfg.ka_interval =30;", "id": "34207266", "code_sizes": 1}, {"nl_num": [3, 3184, 1803, 1546, 4179, 3703, 1250, 3293, 2, 1927, 2, 4], "code_num": [2], "code": "with open('list1.txt', 'r') as l1, open('list2.txt', 'r') as l2, open('list3.txt', 'w') as l3:\\n    for left_part in l1:\\n        for right_part in l2:\\n            l3.write('%s%s\\n' % (left_part.replace(\"\\n\",\"\"), right_part.replace(\"\\n\",\"\")))\\n        l2.seek(0)", "id": "28966833", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 4314, 1400, 2, 135, 2610, 1400, 4114, 3293, 1828, 276, 4179, 1162, 2326, 4], "code_num": [2], "code": "def mostWantedLetter(text):\\n    # count how many times each letter occurs\\n    mwl = {}\\n    for ch in text.lower():\\n        if ch.isalpha():\\n            mwl[ch] = mwl.get(ch, 0) + 1\\n\\n    # ordered descending by count (highest first) then ascending by letter\\n    least = min(mwl.items(), key=lambda x:(-x[1], x[0]))\\n\\n    # return the letter from the least item\\n    return least[0]", "id": "22310292", "code_sizes": 1}, {"nl_num": [3, 550, 568, 104, 177, 3047, 4115, 3270, 540, 1530, 2610, 990, 4], "code_num": [2], "code": "link = 'https://graph.facebook.com/123'\\nresult = browser.open(link)\\ndata = json.load(result)\\nprint data['id']", "id": "4513525", "code_sizes": 1}, {"nl_num": [3, 4237, 4047, 3021, 540, 1828, 3316, 1470, 686, 2610, 4110, 4], "code_num": [2], "code": "class TestFirefox:\\n    browser = '*firefox'\\n\\n    def pytest_funcarg__selenium(self, request):\\n        sel = selenium('10.3.10.154', 5555, self.browser, 'http://10.3.10.180:8000')\\n        sel.start()\\n        return sel \\n\\nclass TestChrome(TestFirefox):\\n    browser = '*opera'", "id": "8264791", "code_sizes": 1}, {"nl_num": [3, 3419, 1828, 4238, 540, 2529, 452, 899, 990, 4], "code_num": [2, 2], "code": "line = '\"RUn.exe O\" \"\" \"   2ne, \" two! . \" \"'\\nimport re\\nregex = re.compile(r'\"[^\"]*\"|[^\\s]+')\\nmatches = [el.strip('\"') for el in regex.findall(line)]\\n\\nprint '\\n'.join(matches)", "id": "16416574", "code_sizes": 2}, {"nl_num": [3, 4583, 771, 3004, 2610, 3087, 4597, 4179, 3579, 3087, 4], "code_num": [2], "code": "ScriptAlias /cgi-bin/ \"/path/to/cgi-bin/folder\"", "id": "25191336", "code_sizes": 1}, {"nl_num": [3, 4110, 2062, 990, 2464, 1642, 3178, 1297, 3518, 2326, 4], "code_num": [2], "code": "browser.find_element_by_xpath(\"//input[@value='1']\")", "id": "28610407", "code_sizes": 1}, {"nl_num": [3, 2, 2, 169, 2, 2610, 1828, 2, 3816, 2676, 452, 1708, 990, 4], "code_num": [2], "code": "py2tex.Interpret", "id": "4942657", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 1757, 2878, 1400, 3467, 3293, 549, 733, 1007, 2, 1007, 1708, 4429, 4], "code_num": [2], "code": "headerRows[0][10].contents[0].find('b').string", "id": "223328", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4356, 694, 3293, 2710, 2610, 990, 4], "code_num": [2], "code": "m = re.search(\"\\d+\", string)\\nprint m.group(0)", "id": "8519542", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1945, 862, 2549, 568, 2, 2326, 4], "code_num": [2], "code": "model = models.Progress", "id": "526795", "code_sizes": 1}, {"nl_num": [3, 3311, 3400, 2610, 1828, 2710, 4], "code_num": [2], "code": "def numVowels(a):\\n    vowels = \"aeuioAEUIO\"\\n    result = 0\\n    for char in a:\\n        if char in vowels:\\n            result = result + 1\\n    return result\\n\\nnumVowels(\"ajdgejfifhou\")", "id": "30967257", "code_sizes": 1}, {"nl_num": [3, 69, 568, 4335, 3963, 4019, 4649, 433, 2, 2464, 3594, 540, 2, 699, 2326, 4], "code_num": [2], "code": "# http://www.cs.utexas.edu/users/EWD/ewd07xx/EWD792.PDF\\n\\nn = 15\\nbases = [2, 3, 5]\\n\\nnums = [1] * n\\ncandidates_indexes = [0 for _ in bases]\\ncandidates = [base for base in bases]\\n\\nfor i in range(1, n):\\n    nextn = min(candidates)\\n    nums[i] = nextn\\n\\n    for index, val in enumerate(candidates):\\n        if val == nextn:\\n            candidates_indexes[index] += 1\\n            candidates[index] = bases[index] * nums[candidates_indexes[index]]\\n\\nprint(nums)", "id": "7333657", "code_sizes": 1}, {"nl_num": [3, 4137, 990, 3747, 1997, 1400, 1452, 336, 2610, 1828, 382, 4640, 4], "code_num": [2], "code": "max(my_dict.items(), key=lambda x: x[1]['last_event'])[0]", "id": "10296251", "code_sizes": 1}, {"nl_num": [3, 644, 2611, 2093, 1422, 3331, 4092, 3627, 4729, 2610, 188, 4], "code_num": [2], "code": "def grab_main_color(self, rect, max_colors=256):\\n    \"\"\"returns a tuple with the RGB value of the most present color in the given rect\"\"\"\\n    img=ImageGrab.grab(rect)\\n    colors = img.getcolors(max_colors)\\n    max_occurence, most_present = 0, 0\\n    try:\\n        for c in colors:\\n            if c[0] > max_occurence:\\n                (max_occurence, most_present) = c\\n        return most_present\\n    except TypeError:\\n        raise Exception(\"Too many colors in the given rect\")", "id": "1967096", "code_sizes": 1}, {"nl_num": [3, 550, 2604, 2, 1338, 2610, 54, 4], "code_num": [2], "code": "for i in xrange(countMat.toarray().__len__()):\\n    row = countMat.toarray()[i]\\n    row / np.sqrt(np.sum(row**2))", "id": "34078917", "code_sizes": 1}, {"nl_num": [3, 2, 262, 2462, 1422, 1924, 1652, 4], "code_num": [2], "code": "__import__('blah', dict(jim=1, **globals()))", "id": "12944806", "code_sizes": 1}, {"nl_num": [3, 3704, 4585, 3293, 577, 4714, 4], "code_num": [2], "code": "models.Detail.query.join(details_usages).add_columns(details_usages.c.is_required).all()", "id": "27990715", "code_sizes": 1}, {"nl_num": [3, 188, 864, 2482, 549, 675, 4178, 3703, 4640, 3518, 4], "code_num": [2], "code": "# A nice one liner (edited to remove square brackets)   \\nmy_dict.update((x, y*2) for x, y in my_dict.items())", "id": "5010536", "code_sizes": 1}, {"nl_num": [3, 2166, 2, 2610, 2, 540, 1828, 223, 812, 1708, 3494, 2464, 1535, 2605, 840, 3133, 2326, 4], "code_num": [2], "code": "pics = [None, None, None, None]   #  This will be the list that will hold a reference to each of your PhotoImages.\\n\\ndef randp(*args):\\n    w = ['wb.gif', 'wc.gif', 'wd.gif', 'we.gif']\\n    random.shuffle(w)\\n    am = 1\\n\\n    for k, i in enumerate(w):    # Enumerate provides an index for the pics list.\\n        pic = PhotoImage(file=i)\\n        pics[k] = pic      # Keep a reference to the PhotoImage in the list, so your PhotoImage does not get garbage-collected.\\n        ttk.Label(mainframe, image=pic).grid(column=am, row=0, sticky=(W, E))\\n        am+=1", "id": "19480741", "code_sizes": 1}, {"nl_num": [3, 1236, 2, 2, 3747, 990, 4], "code_num": [2], "code": "def formData(dataset):\\n\\n    listOfTransaction = list()\\n    listOfTransaction = dataset.values.tolist()\\n    cleanedList = []\\n    for transaction in listOfTransaction:\\n        itemList = []\\n        for item in transaction:\\n            if False ==  pd.isnull(item):\\n                itemList.append(item)\\n        cleanedList.append(itemList)\\n\\n    return cleanedList\\n\\ndef formToPandas(result):\\n    return pd.DataFrame(result)", "id": "33410028", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 3178, 1400, 2310, 4179, 3055, 2385, 3463, 2326, 4], "code_num": [2], "code": "class FeatureManager(models.Manager):\\n\\n    @staticmethod\\n    def _test_cases_eq_0( qs ):\\n       return qs.annotate( num_test_cases=models.Count('testcase_set') ).filter(num_test_cases=0)\\n\\n    @staticmethod\\n    def _standardized_gt_0( qs ):\\n        return qs.annotate( standardised=Count('documentation_set__standard') ).filter(standardised__gt=0)\\n\\n    def without_test_cases(self):\\n        return self._test_cases_eq_0( self.get_query_set() )\\n\\n    def standardised(self):\\n        return self._standardized_gt_0( self.get_query_set() )\\n\\n    def intersection( self ):\\n        return self._test_cases_eq_0( self._standardized_gt_0( self.get_query_set() ) )", "id": "4411213", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2, 3467, 3886, 1002, 3812, 1708, 217, 4], "code_num": [2], "code": "cursor.execute (\\n    \"INSERT INTO text (text_key, language_id, text) VALUES (%s, %s, %s)\",\\n    (key, language_id, text))", "id": "3311417", "code_sizes": 1}, {"nl_num": [3, 3148, 2464, 4425, 540, 2, 2179, 2, 864, 864, 2, 864, 2, 1535, 1637, 840, 1971, 540, 3791, 2115, 540, 2, 4], "code_num": [2], "code": "combo.setModel(QStringListModel(string_list, combo))", "id": "30549477", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 1352, 549, 2, 2, 2610, 2049, 1708, 425, 1218, 2326, 4], "code_num": [2], "code": "from pandas import Series\\nimport datetime\\n\\ndatetime_index = [datetime.datetime(2010, 1, 5), datetime.datetime(2010, 1, 10)]\\ns1 = Series([5, 15], [datetime.datetime(2010, 1, 5), datetime.datetime(2010, 1, 15)])\\ns2 = Series(None, datetime_index)\\ns3 = s1.combine_first(s2)\\ns3.interpolate()", "id": "23772510", "code_sizes": 1}, {"nl_num": [3, 1810, 3313, 3293, 4575, 2610, 2, 188, 95, 4], "code_num": [2], "code": "A = DeclareSort('A')\\na = Const('a', A)", "id": "26347314", "code_sizes": 1}, {"nl_num": [3, 2480, 2473, 2710, 540, 4640, 3747, 3247, 990, 2326, 4], "code_num": [2], "code": "import re\\n\\ndef check_system(ope_sys):\\n    system_keywords = {\\n        \"macos\": [\"macos\"],\\n        \"linux\": [\"linux\", \"with\"],\\n        \"windows\": [\"windows\"],\\n    }\\n    for system, keywords in system_keywords.items():\\n        if all(re.search(kw, ope_sys) for kw in keywords):\\n            return system\\n    return None\\n\\ncheck_system(\"linux-2.6.32-312-ec2-x86_64-with-debian-6.0.8\")", "id": "22436678", "code_sizes": 1}, {"nl_num": [3, 1953, 1400, 3332, 155, 2610, 1828, 4238, 262, 2610, 2, 1170, 4], "code_num": [2], "code": "sum([x['laius'] for x in Xarray])", "id": "20432295", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2, 389, 4585, 4179, 2, 338, 540, 188, 1422, 4189, 2326, 4], "code_num": [2], "code": "import pandas as pd\\nimport pylab as pl\\n\\ndf1 = pd.DataFrame([[0.0,0.0],[1.0,1.0],[2.0,2.0],[4.0,3.0]],columns=['x','y1'])\\ndf2 = pd.DataFrame([[0.0,0.0],[0.5,1.9],[1.5,2.0],[3.0,3.0],[4.0,4.0]],columns=['x','y2'])\\nx = np.union1d(df1.x, df2.x)\\ny1 = np.interp(x, df1.x, df1.y1)\\ny2 = np.interp(x, df2.x, df2.y2)\\npl.plot(x, y1, \"-o\")\\npl.plot(x, y2, \"-o\")", "id": "15327831", "code_sizes": 1}, {"nl_num": [3, 970, 568, 449, 169, 449, 568, 2473, 3348, 2610, 2385, 4], "code_num": [2], "code": "m1.model2_set.all()", "id": "30271827", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 2190, 4047, 1146, 855, 1553, 2, 2326, 4], "code_num": [2], "code": "from gevent import monkey\\ndef main():\\n    monkey.patch_thread()\\n# etc, etc\\nt = threading.Thread(target=bcastserver.serve_forever)\\nt.setDaemon(True)\\nt.start()\\ntradeserver.serve_forever()", "id": "18455467", "code_sizes": 1}, {"nl_num": [3, 2385, 864, 2480, 2613, 1828, 1976, 2604, 2303, 2610, 2462, 2, 1280, 568, 653, 2326, 4], "code_num": [2], "code": "def get(self, request):\\n    if request.user.is_authenticated():\\n        # If a user is logged in, redirect them to a page informing them of such\\n        return render(request, 'users/already_logged_in.html')\\n    else:\\n        return super(RegisterView, self).get(request)", "id": "28327473", "code_sizes": 1}, {"nl_num": [3, 188, 864, 1708, 2, 2658, 223, 4692, 1422, 2684, 3747, 338, 4], "code_num": [2], "code": "from requests.packages.urllib3.filepost import encode_multipart_formdata\\n\\n(content, header) = encode_multipart_formdata([('key', 'value')])\\nr = requests.post(url, data=content, headers={'Content-Type': header})", "id": "17982741", "code_sizes": 1}, {"nl_num": [3, 3397, 2, 3293, 1828, 2, 2253, 1708, 990, 4], "code_num": [2], "code": "from scipy.stats import beta\\nimport numpy as np\\na, b = 2.31, 0.627\\nx = np.linspace(beta.ppf(0.01, a, b), beta.ppf(0.99, a, b), 100)\\ndistribution=beta.pdf(x, a, b)\\ndef quantile(x,quantiles):\\n    xsorted = sorted(x)\\n    qvalues = [xsorted[int(q * len(xsorted))] for q in quantiles]\\n    return zip(quantiles,qvalues)\\nquantiles = quantile(distribution,[0.05,0.16,.5,.84, 0.95])", "id": "33337235", "code_sizes": 1}, {"nl_num": [3, 188, 69, 568, 2878, 1400, 1576, 4179, 1828, 4334, 4], "code_num": [2], "code": "cookie['Cycle']['domain']    # lowercase domain !", "id": "7665888", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 1028, 801, 540, 2, 2610, 3767, 4], "code_num": [2], "code": "plot_data(x,y,'b-')", "id": "21241383", "code_sizes": 1}, {"nl_num": [3, 2, 528, 2905, 4572, 2360, 4], "code_num": [2], "code": "filename_queue = tf.train.string_input_producer(['/Users/HANEL/Desktop/tf.png']) #  list of files to read\\n\\nreader = tf.WholeFileReader()\\nkey, value = reader.read(filename_queue)\\n\\nmy_img = tf.image.decode_png(value) # use png or jpg decoder based on your files.\\n\\ninit_op = tf.initialize_all_variables()\\nwith tf.Session() as sess:\\n  sess.run(init_op)\\n\\n# Start populating the filename queue.\\n\\ncoord = tf.train.Coordinator()\\nthreads = tf.train.start_queue_runners(coord=coord)\\n\\nfor i in range(1): #length of your filename list\\n  image = my_img.eval() #here is your image Tensor :) \\n\\nprint(image.shape)\\nImage.show(Image.fromarray(np.asarray(image)))\\n\\ncoord.request_stop()\\ncoord.join(threads)", "id": "33648322", "code_sizes": 1}, {"nl_num": [3, 4133, 4190, 1828, 2358, 568, 1400, 694, 4179, 327, 1605, 1828, 990, 746, 1535, 2244, 2326, 4], "code_num": [2], "code": "s = set(xrange(10000000))", "id": "14577790", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2, 1828, 3100, 2610, 188, 4], "code_num": [2], "code": "#!/usr/bin/env python\\n\\nfrom datetime import datetime\\n\\nwith open(\"stuff.txt\", \"r\") as f:\\n    for line in f:\\n        # Remove initial or ending whitespace (like line endings)\\n        line = line.strip()\\n\\n        # Split the timestamp and value\\n        raw_timestamp, value = line.split(\",\")\\n\\n        # Make the timestamp an actual datetime object\\n        timestamp = datetime.strptime(raw_timestamp, \"%Y%m%d\")\\n\\n        # Print the timestamp separated by -'s. Replace - with / or whatever.\\n        print(\"%s,%s\" % (timestamp.strftime(\"%Y-%m-%d\"), value))", "id": "7411037", "code_sizes": 1}, {"nl_num": [3, 188, 69, 568, 3715, 2710, 2237, 4178, 1538, 4], "code_num": [2], "code": "import csv\\n\\ndef loadCSVfile (path):\\n    exclusions = ['@', '%', '\\n', '[@' , '[%']\\n    csvData = open(path, 'r')\\n    spamreader = csv.reader(csvData, delimiter=',', quotechar='|')      \\n\\n    lines = [line for line in spamreader if ( line and line[0][0:1] not in exclusions and line[0][0:2] not in exclusions )]\\n\\n    for line in lines:\\n        print(line)\\n\\n\\nloadCSVfile('C:/Users/anaim/Desktop/Data Mining/OneR/iris.arff')", "id": "17542930", "code_sizes": 1}, {"nl_num": [3, 3083, 4179, 769, 540, 1828, 1406, 1537, 4], "code_num": [2], "code": "d = {}\\nfor obj in object_list:\\n    d[obj.thing] = obj\\ndesired_list = d.values()", "id": "17347678", "code_sizes": 1}, {"nl_num": [3, 188, 1704, 3293, 1125, 869, 2947, 4182, 339, 4], "code_num": [2], "code": "import fileinput\\nfor line in fileinput.input():\\n  process(line)", "id": "5675938", "code_sizes": 1}, {"nl_num": [3, 990, 3609, 2103, 2271, 568, 3079, 4], "code_num": [2], "code": "for rownum in xrange(sheet.nrows):\\n      wr.writerow([unicode(val).encode('utf8') for val in sheet.row_values(rownum)])", "id": "18113547", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4347, 997, 4347, 3055, 188, 2509, 335, 2326, 4], "code_num": [2], "code": "from twisted.internet import protocol, reactor\\n\\nclass Echo(protocol.Protocol):\\n    def dataReceived(self, data):\\n        self.transport.write(data)\\n\\nclass EchoFactory(protocol.Factory):\\n    def buildProtocol(self, addr):\\n        return Echo()\\n\\nclass Echo2(protocol.Protocol):\\n    def dataReceived(self, data):\\n        self.transport.write(data+\" From 2\")\\n\\nclass EchoFactory2(protocol.Factory):\\n    def buildProtocol(self, addr):\\n        return Echo2()\\n\\nreactor.listenTCP(1234, EchoFactory())\\n\\nreactor.listenTCP(1235, EchoFactory2())\\nreactor.run()", "id": "20403921", "code_sizes": 1}, {"nl_num": [3, 2, 549, 900, 4563, 604, 2, 4], "code_num": [2], "code": "class ToDo(models.Model):\\n\\n    title = models.CharField(null=True, blank=True, max_length=200)\\n    status = models.IntegerField(choices=TASK_STATUS, null=True, blank=True)\\n    assigned_to = models.ManyToManyField(OrgStaff, null=True, blank=True, related_name='assigned_to')\\n    assigned_by = models.ManyToManyField(OrgStaff, null=True, blank=True, related_name='assigned_by')\\n    assigned_time = models.DateTimeField(auto_now_add=True)\\n    completed_time = models.DateTimeField(null=True, blank=True)", "id": "18320225", "code_sizes": 1}, {"nl_num": [3, 2, 1268, 2, 1828, 2, 3893, 4], "code_num": [2], "code": "payload = {'ejectedNodes': 'ns_1@10.90.150.21', 'knownNodes': 'ns_1@10.90.150.21,ns_1@10.90.150.22,ns_1@10.90.150.23'}\\nrequests.post(url, data=payload, auth=(un, pwd))", "id": "22936872", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 2028, 4344, 549, 2, 3138, 1605, 2985, 549, 2690, 1977, 4714, 2326, 4], "code_num": [2], "code": "c.execute('''UPDATE table_b SET number = 1 WHERE table_b.word IN (SELECT string FROM table_a)''')", "id": "23119810", "code_sizes": 1}, {"nl_num": [3, 990, 3609, 2710, 1957, 4], "code_num": [2], "code": "for i in range(sheet.nrows):\\n     row = sheet.row_values(i)\\n     for j in range(len(row)):\\n          if row[j] == search_value:\\n                return i,j\\nreturn None", "id": "10935518", "code_sizes": 1}, {"nl_num": [3, 2, 1828, 226, 2319, 4], "code_num": [2], "code": "#!/usr/bin/python\\n# -*- coding: utf-8 -*-\\n\\nfrom time import strftime, gmtime\\nimport csv\\nfrom urllib2 import urlopen\\nfrom simplejson import loads\\nc = csv.writer(open('FB_Monitoring.csv', \"a\"), delimiter=';')\\nFirst = ['Name', 'Likes', 'Talking About']\\nc.writerow(First)\\n\\nsource = open(\"FBPAGES.txt\", \"r\")\\nFacebookPages = source.readlines()\\n\\n\\nfor Page in FacebookPages:\\n    Page = Page.replace('facebook.com','graph.facebook.com')\\n    content = loads(urlopen(Page).read())\\n    liste = [content['name'],content['likes'],content['talking_about_count']]\\n    c.writerow(liste)", "id": "10792409", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4570, 2255, 177, 2, 2610, 1828, 2957, 4], "code_num": [2], "code": "class CombinedFormSet(BaseInlineFormSet):\\n    # Validate formset data here\\n    def clean(self):\\n        super(CombinedFormSet, self).clean()\\n        for form in self.forms:\\n            if not hasattr(form, 'cleaned_data'):\\n                continue\\n\\n            data = self.cleaned_data\\n            valid = False\\n            for i in data:\\n                if i != {}:\\n                    if i['is_correct']:\\n                        valid = True\\n\\n            if not valid:\\n                #TODO: translate admin?\\n                raise forms.ValidationError(\"A Question must have an answer.\")\\n\\n            # Always return the cleaned data, whether you have changed it or\\n            # not.\\n            return data\\n\\n\\nclass ChoiceInline(admin.TabularInline):\\n    model = Choice\\n    extra = 4\\n    formset = CombinedFormSet", "id": "16739387", "code_sizes": 1}, {"nl_num": [3, 4110, 906, 3247, 568, 1738, 2610, 2733, 1569, 314, 4], "code_num": [2], "code": "#Click Sign In Button\\ndriver.find_element_by_xpath(\".//*[@id='bs-example-navbar-collapse-1']/ul/li[3]/a\").click()\\n#Type Username\\ndriver.find_element_by_xpath(\"(//*[@id='Username'])[3]\").send_keys(\"Username\")\\n#Type Password\\ndriver.find_element_by_xpath(\"(//*[@id='Password'])[2]\").send_keys(\"Password\")\\n#Click Submit button\\ndriver.find_element_by_xpath(\"(//div[@class='login_section']//a[@class='dk-btn dk-btn-success'])[2]\").click()", "id": "33819300", "code_sizes": 1}, {"nl_num": [3, 188, 4429, 3747, 2878, 2, 2, 4], "code_num": [2], "code": "tag['onmouseover']", "id": "11606091", "code_sizes": 1}, {"nl_num": [3, 2166, 2, 95, 2583, 338, 1708, 3758, 4], "code_num": [2], "code": "from flask import Flask,jsonify\\nimport requests\\nimport simplejson \\nimport json\\n\\napp = Flask(__name__)\\n\\n@app.route(\"/\")\\ndef home():\\n    uri = \"https://api.stackexchange.com/2.0/users?   order=desc&sort=reputation&inname=fuchida&site=stackoverflow\"\\n    try:\\n        uResponse = requests.get(uri)\\n    except requests.ConnectionError:\\n       return \"Connection Error\"  \\n    Jresponse = uResponse.text\\n    data = json.loads(Jresponse)\\n\\n    displayName = data['items'][0]['display_name']# <-- The display name\\n    reputation = data['items'][0]['reputation']# <-- The reputation\\n\\n    return Jresponse\\n\\nif __name__ == \"__main__\":\\n    app.run(debug = True)", "id": "9900887", "code_sizes": 1}, {"nl_num": [3, 2, 3963, 2610, 188, 4], "code_num": [2], "code": "range(0, 10, 2)", "id": "2184745", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 4356, 4047, 1773, 853, 1828, 4238, 3293, 1530, 2326, 4], "code_num": [2], "code": "re.finditer", "id": "10556215", "code_sizes": 1}, {"nl_num": [3, 188, 864, 550, 1535, 1757, 2531, 3690, 1828, 4238, 1605, 2604, 382, 250, 1828, 1956, 3747, 1959, 2326, 4], "code_num": [2], "code": "shape = input(\"Please enter your choice of shape? \")    \\n\\nnthTime = [\"second\",\"third\",\"fourth\",\"fifth\",\"sixth\"]\\nundesired_shapes = [\"octagon\",\"heptagon\",\"hexagon\"]\\n\\nindx = 0\\n\\nwhile shape.lower() not in undesired_shapes:\\n    print(\"Please select a shape from the list!\")\\n    shape = input(\"Pick a shape, for the \" + nthTime[indx] + \" time! \")\\n    indx += 1\\n    if indx >= len(nthTime):\\n        print 'Giving up !!'\\n        break", "id": "34569081", "code_sizes": 1}, {"nl_num": [3, 2364, 1828, 746, 4179, 3759, 3963, 4], "code_num": [2], "code": "mu = MatrixSymbol('mu', n, 1)\\nSigma = MatrixSymbol('Sigma', n, n)\\n\\nX = Normal('X', mu, sigma)  # A multivariate normal distribution", "id": "22837600", "code_sizes": 1}, {"nl_num": [3, 2, 1828, 3518, 568, 2, 3008, 4], "code_num": [2], "code": "self.glb_data_list = {'disp_type': 2}\\n\\ndisp_type = fields.SelectField(u'Preset Mapping',\\n                                      choices=[(0, u'Custom'),\\n                                      (1, u'Loopback'),\\n                                      (2, u'All_East'),\\n                                      (3, u'All_Wast'),\\n                                      (4, u'16_East_16_West'),\\n                                      (5, u'8_East_8_West'),\\n                                      (6, u'STM1_East')],\\n                                    coerce=int, default=0) \\n\\ndisp_type.data = self.glb_data_list['dist_type']", "id": "25528406", "code_sizes": 1}, {"nl_num": [3, 550, 568, 38, 177, 177, 2610, 1828, 2710, 2610, 990, 4], "code_num": [2], "code": "import re \\n\\ns = \"haha..hehe.hoho\"\\n#pattern = '\\.\\.' #If you want to remove when there's 2 dots\\npattern = '\\.{2,}' #If you want to remove when there's at least 2 dots\\ns = re.sub(pattern, ' ', s)", "id": "29486447", "code_sizes": 1}, {"nl_num": [3, 4624, 4042, 2473, 2, 69, 1535, 2291, 586, 4404, 4182, 2924, 3293, 1057, 568, 1312, 4688, 2326, 4], "code_num": [2], "code": "# before redirect\\nrequest.session['users_list'] = users_list\\n\\n# in sent view\\nusers_list = request.session.get('users_list', None)", "id": "6581351", "code_sizes": 1}, {"nl_num": [3, 1897, 990, 864, 4454, 552, 1927, 864, 2560, 1192, 4], "code_num": [2], "code": "time.time", "id": "3553340", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2204, 2955, 2, 4263, 540, 578, 4465, 2, 2238, 3690, 2013, 3528, 2326, 4], "code_num": [2], "code": "a, b, c = 2, 616872928410303123, -1850618785230909388\\nx = Symbol('x')\\nint(max(solve(a*x**2 + b*x + c, x)))", "id": "16252574", "code_sizes": 1}, {"nl_num": [3, 4214, 3467, 169, 3963, 169, 2103, 568, 1095, 2610, 990, 4], "code_num": [2], "code": "from collections import defaultdict\\n# Use a default dict to make our life easier (we already know we are working with lists)\\ndata = defaultdict(list)\\n# Get each item from each list, the below list-comprehension is efficient.\\nfor item in [item for sublist in biglist for item in sublist if '=' in item]:\\n    key, value = item.split('=', 1)  # split the items on '=' but only once.\\n    data[key].append(value)  # add our new value to our dictionary. \\n\\npd.DataFrame(data)  # tada!", "id": "28562338", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2878, 3004, 325, 223, 1400, 3923, 4178, 4667, 2, 1397, 209, 3795, 1439, 2610, 2509, 4], "code_num": [2], "code": "class MyProtocol(protocol.Protocol):\\n\\n    def connectionMade(self):\\n         print 'file descriptor is: ', self.transport.file.fileno()", "id": "13904015", "code_sizes": 1}, {"nl_num": [3, 550, 1151, 1828, 2666, 593, 1251, 2610, 990, 2610, 4105, 4179, 4047, 3970, 2326, 4], "code_num": [2], "code": "class B(A):\\n    def test(self):\\n        return 'B->'+super(C, self).test()", "id": "22879433", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 550, 568, 3221, 1828, 3518, 28, 4179, 4047, 1237, 2610, 4238, 4], "code_num": [2], "code": "if len(l1) != 8 or len([n for n in l1 if n not in (1, 0)]) != 0:\\n  raise ValueError('Invalid entries or incorrect length')", "id": "7096578", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3644, 1400, 539, 4178, 1822, 4], "code_num": [2], "code": "screen = pygame.display.set_mode((640, 320), pygame.NOFRAME)", "id": "12865549", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 3191, 943, 1162, 2610, 1773, 2326, 4], "code_num": [2], "code": "re.sub(r'(\\w)\\1+', r'\\1', 'yeeeesssss')  // yes", "id": "10982240", "code_sizes": 1}, {"nl_num": [3, 2, 2610, 990, 540, 2940, 2, 2464, 2, 1422, 648, 1828, 1170, 568, 549, 4018, 4], "code_num": [2], "code": "import numpy as np\\n\\ndef solve_gaussian(val,data_array,sigma_array):\\n    return sigma_array * np.exp(- (val - data_array) * (val - data_array) / (2 * sigma_array * sigma_array))\\n\\ndef solve_kde(xlist,data_array,sigma_array):\\n    kde_array = np.array([])\\n    for xx in xlist:\\n        single_kde = solve_gaussian(xx,data_array,sigma_array)\\n        if np.ndim(kde_array) == 3:\\n            kde_array = np.concatenate((kde_array,single_kde[np.newaxis,:,:]),axis=0)\\n        else:\\n            kde_array = np.dstack(single_kde)\\n    return kde_array\\n\\nxlist = np.linspace(0,1,101) #Adjust as needed\\nkde_array = solve_kde(xlist,data_array,sigma_array)\\nkde_vector = np.sum(np.sum(kde_array,axis=2),axis=1)\\nmode_guess = xlist[np.argmax(kde_vector)]", "id": "28160012", "code_sizes": 1}, {"nl_num": [3, 1922, 1747, 568, 746, 873, 2385, 4178, 4171, 864, 1343, 864, 1007, 2, 1007, 841, 209, 3884, 1537, 1007, 2, 1007, 4], "code_num": [2], "code": "DATABASES = {\\n    'default': {\\n        'ENGINE': 'django.db.backends.sqlite3',\\n        'NAME': 'mydatabase'\\n    }\\n}", "id": "2717704", "code_sizes": 1}, {"nl_num": [3, 474, 1828, 2, 3143, 4179, 549, 528, 540, 2605, 1007, 451, 2, 3143, 4], "code_num": [2], "code": "import cv2\\n\\n# Load in your original image\\noriginalImg = cv2.imread('Inu8B.jpg',0)\\n\\n# Load in your mask\\nmask = cv2.imread('2XAwj.jpg', 0)\\n\\n# Get rid of quantization artifacts\\nmask[mask < 128] = 0\\nmask[mask > 128] = 1\\n\\n# Create output image\\noutputImg = originalImg * (mask == 0)\\noutputImg[mask == 1] = 255\\n\\n# Display image\\ncv2.imshow('Output Image', outputImg)\\ncv2.waitKey(0)\\ncv2.destroyAllWindows()", "id": "24844231", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1869, 1828, 2817, 1563, 4178, 3729, 4179, 1400, 3358, 4], "code_num": [2], "code": "from Tkinter import *\\n\\nroot = Tk() \\nroot.title(\"app\")\\nscreen_width = root.winfo_screenwidth()\\nscreen_height = root.winfo_screenheight()\\nroot.geometry(\"550x250+%d+%d\" % (screen_width/2-275, screen_height/2-125))\\nroot.configure(background='gold')\\nroot.lift ()\\n\\nmainloop()", "id": "8691655", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2878, 568, 1400, 2252, 3995, 4179, 1828, 2984, 2790, 1384, 3293, 549, 2790, 2220, 711, 1828, 1674, 1704, 2610, 3279, 4563, 4102, 2326, 4], "code_num": [2], "code": "Player.team.get_value_for_datastore(player)", "id": "9980652", "code_sizes": 1}, {"nl_num": [3, 717, 2822, 1857, 540, 3958, 2385, 3971, 177, 3971, 4740, 2, 2, 4], "code_num": [2], "code": "#setup django environment\\nfrom django.core.management import setup_environ\\nimport settings\\nsetup_envion(settings)", "id": "2986258", "code_sizes": 1}, {"nl_num": [3, 4251, 1007, 451, 74, 540, 949, 528, 4178, 1828, 3508, 177, 2, 4], "code_num": [2], "code": "self.hFooterImagePanel = wx.Panel(self.hPanel, wx.ID_ANY)\\nself.hFooterImage = wx.StaticBitmap(self.hFooterImagePanel)\\nself.hFooterImage.SetBitmap(wx.Bitmap(\"img/tick.png\"))\\nself.hFooterStatusLabel = wx.StaticText(self.hPanel, label = 'Ready')\\nself.hFooterBox = wx.BoxSizer(wx.HORIZONTAL)\\nself.hFooterBox.Add(self.hFooterImagePanel, 0, wx.ALL | wx.ALIGN_LEFT, 5)\\nself.hFooterBox.Add(self.hFooterStatusLabel, 0, wx.ALL | wx.ALIGN_LEFT, 5)", "id": "14206062", "code_sizes": 1}, {"nl_num": [3, 2480, 1400, 3498, 223, 1828, 1881, 246, 2326, 4], "code_num": [2], "code": "col.type", "id": "10592816", "code_sizes": 1}, {"nl_num": [3, 672, 327, 2610, 4521, 338, 1074, 2610, 2049, 4], "code_num": [2], "code": "test.loc[g_test.get_group((1, 5, 13, 8)).index, 'monthly_sales'] = \\\\n           g_train.get_group((1, 5, 13, 8)).monthly_sales.mean()", "id": "30175931", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 2291, 586, 1083, 262, 327, 853, 1400, 3037, 4202, 1125, 2326, 4], "code_num": [2], "code": "self.db = pyodbc.connect('driver={%s};server=%s;database=%s;uid=%s;pwd=%s' % ( driver, server, db, user, password ) )", "id": "10084969", "code_sizes": 1}, {"nl_num": [3, 3490, 4047, 2315, 2610, 990, 4], "code_num": [2], "code": "dico_list=[{\"item1\": {\"item2\": \"300\"}}, {\"item1\": {\"item3\": {\"item4\": \"400\"}}}, {\"item1\": {\"item3\": {\"item6\": \"16\"}}}, {\"item1\": {\"item7\": \"aaa\"}}, {\"item1\": {\"item8\": \"bbb\"}}, {\"item1\": {\"item9\": {\"item10\" : \"2.2\"}}}, {\"item1\": {\"item9\": {\"item11\" : \"xxx\"}}}]\\n\\ndef merge(merge_dico,dico_list):\\n    for dico in dico_list:\\n        for key,value in dico.items():\\n            if type(value)==type(dict()):\\n                merge_dico.setdefault(key,dict())\\n                merge(merge_dico[key],[value])\\n            else:\\n                merge_dico[key]=value\\n    return merge_dico\\n\\nprint(merge(dict(),dico_list))\\n#{'item1': {'item7': 'aaa', 'item9': {'item11': 'xxx', 'item10': '2.2'}, 'item8': 'bbb', 'item3': {'item4': '400', 'item6': '16'}, 'item2': '300'}}", "id": "28838291", "code_sizes": 1}, {"nl_num": [3, 100, 1828, 2, 4505, 2, 2, 4137, 188, 4], "code_num": [2], "code": "wave_file = wave.open('mono.wav', 'r')\\ndata_size = wave_file.getnframes()\\nsample_rate = wave_file.getframerate()\\n\\n\\nwhile True:\\n\\n    waveData = wave_file.readframes(10000)\\n    signal = np.fromstring(waveData , 'Int16')\\n    Time=np.linspace(0, len(signal), num=len(signal))\\n\\n    plt.figure()\\n    fig = plt.figure(figsize=(xinch,yinch) , frameon=False)\\n    #fig = plt.figure(frameon=False)\\n    ax = fig.add_axes([0, 0, 1, 1])\\n    #ax.axis('off')\\n\\n    plt.axis('off')\\n    line = plt.plot(Time,signal , 'w')\\n    plt.setp(line, linewidth=10)\\n\\n    plt.savefig('signal' + str(x) + '.png')\\n    plt.close\\n\\n    x+= 1\\n    if  wave_file.tell() == data_size:\\n            break", "id": "34097795", "code_sizes": 1}, {"nl_num": [3, 3704, 3963, 3293, 1828, 3004, 3747, 188, 4], "code_num": [2], "code": "import re\\nfile1 = open('so.txt')\\n\\nnumlist = list()\\nfor line in file1:\\n    line_list = re.findall(r'[0-9.]+',line)\\n    if len(line_list) > 0:\\n        numlist.extend(line_list)\\n\\nprint numlist\\ntotal = 0\\nfor sum in numlist:\\n    total += int(sum)\\nprint (total)", "id": "34260750", "code_sizes": 1}, {"nl_num": [3, 3716, 1400, 694, 4179, 3407, 1605, 2176, 3821, 4378, 2610, 1828, 41, 3004, 3293, 1976, 817, 2238, 188, 389, 177, 1861, 3528, 4], "code_num": [2], "code": "x = re.findall(yo, line)\\nif x:\\n    count += 1 # multiple non-overlapping occurences on one line\\n\\nprint \"what.txt had {0} lines that matched {1}\".format(count, yo)", "id": "29589281", "code_sizes": 1}, {"nl_num": [3, 4196, 540, 2, 2, 2610, 1822, 4], "code_num": [2], "code": "pygame.K_LEFT", "id": "19612209", "code_sizes": 1}, {"nl_num": [3, 2, 188, 3554, 1956, 2, 3293, 1298, 2326, 4], "code_num": [2], "code": "import time\\nimport errno\\n\\nretry_this = [errno.ETIMEOUT,]\\n\\ncurrtokenurl = \"http://www.example.com/heady\"\\n\\nwhile True:\\n    try:\\n        f = urllib.urlopen(currtokenurl)\\n        break\\n    except IOError, e:\\n        if e.errno in retry_this:\\n            time.sleep(10)\\n        else:\\n            raise\\ncurrtoken = f.read()", "id": "27537125", "code_sizes": 1}, {"nl_num": [3, 69, 568, 746, 4648, 2610, 990, 4], "code_num": [2], "code": "os.nice()", "id": "3814387", "code_sizes": 1}, {"nl_num": [3, 550, 568, 897, 2714, 3436, 2610, 3467, 2, 4], "code_num": [2], "code": "lamp = 0\\nrooms = [\"hallEnt\", \"hallMid\", \"snowRoom\", \"giantNature\", \"strangeWall\", \"riverBank\"]\\nroom = rooms[0]\\n\\nif lamp == 1:\\n        connected_room = [\"hallMid\", \"snowRoom\"]\\n        print \"You are currently inside the \" + room + \".\"\\n        print \"You can see \" + connected_room[0] + \" and \" + connected_room[1] + \" in the distance.\"\\nelse:\\n        connected_room = [\"snowRoom\"]\\n        print \"You are currently inside the \" + room + \".\"\\n        print \"You can see the \" + connected_room[0] +  \" in the distance.\"", "id": "26987400", "code_sizes": 1}, {"nl_num": [3, 2454, 4457, 2610, 2, 4572, 4765, 3747, 2, 4], "code_num": [2], "code": "import os\\n\\nsearchdir = r'C:\\root_dir' # traversal starts in this directory (the root) \\n\\nfor root, dirs, files in os.walk(searchdir):\\n    for name in files:\\n        (base, ext) = os.path.splitext(name) # split base and extension\\n        print base, ext", "id": "11939408", "code_sizes": 1}, {"nl_num": [3, 2741, 4714, 3995, 3719, 251, 483, 62, 568, 2869, 1828, 1597, 3594, 710, 2187, 3007, 223, 1828, 2406, 4714, 3995, 4], "code_num": [2], "code": "def createTable():\\n    ok = False\\n    while not ok:\\n        try:\\n            verifyTable = test.get_table(raw_input(\"Please enter the name for table: \"))\\n            ok = True\\n        except BotoServerError:\\n            print \"Table already exist\"", "id": "30417348", "code_sizes": 1}, {"nl_num": [3, 892, 3055, 990, 2049, 338, 3299, 4179, 2940, 1022, 3594, 2190, 4220, 4498, 2610, 1712, 338, 1074, 4], "code_num": [2], "code": "df1.merge(df2,how='left', left_on='Column1', right_on='ColumnA')", "id": "33086881", "code_sizes": 1}, {"nl_num": [3, 2, 4023, 1651, 2, 169, 2, 2610, 2385, 4], "code_num": [2], "code": "created_on = models.DateTimeField('Created On', auto_now_add=True)\\nlast_modified = models.DateTimeField('Last Modified', auto_now=True)", "id": "15084088", "code_sizes": 1}, {"nl_num": [3, 1704, 2610, 3843, 327, 3293, 1828, 3004, 169, 4356, 1280, 2610, 1828, 4238, 990, 4], "code_num": [2], "code": "with open(filename) as f:\\n    lines = [l.split() for l in f.readlines()]\\nlines = [map(float, l[:3]) for l in lines if len(l)>=3]", "id": "19606362", "code_sizes": 1}, {"nl_num": [3, 33, 1237, 3293, 1828, 4238, 4178, 1828, 4806, 2580, 4], "code_num": [2], "code": "from itertools import accumulate\\nfrom random import uniform\\n\\nclass ProbItem(object):\\n    def __init__(self, value, prob):\\n        self.value = value\\n        self.prob = prob\\n\\ndef pick(items):\\n    accum = list(accumulate(item.prob for item in items))\\n    rand = uniform(0, accum[-1])\\n    for i, prob in enumerate(accum):\\n        if rand < prob:\\n            return items.pop(i).value\\n\\ndrivers = [\\n    ProbItem(\"John Doe\", 23.7),\\n    ProbItem(\"Bill Smith\", 17),\\n    ProbItem(\"Trent Baxter\", 12.43),\\n    ProbItem(\"Ray Olson\", 9.99),\\n]\\n\\nwhile (drivers):\\n    print(pick(drivers))", "id": "26409965", "code_sizes": 1}, {"nl_num": [3, 990, 1976, 3993, 4], "code_num": [2], "code": "os.fchown()", "id": "6840746", "code_sizes": 1}, {"nl_num": [3, 4133, 4190, 1828, 3682, 4179, 69, 2, 3561, 223, 2746, 769, 2610, 188, 389, 2326, 4], "code_num": [2], "code": "def smallest_diff_key(A, B):\\n    \"\"\"return the smallest key adiff in A such that A[adiff] != B[bdiff]\"\"\"\\n    diff_keys = [k for k in A if A.get(k) != B.get(k)]\\n    return min(diff_keys)\\n\\ndef dict_cmp(A, B):\\n    if len(A) != len(B):\\n        return cmp(len(A), len(B))\\n    adiff = smallest_diff_key(A, B)\\n    bdiff = smallest_diff_key(B, A)\\n    if adiff != bdiff:\\n        return cmp(adiff, bdiff)\\n    return cmp(A[adiff], b[bdiff])", "id": "3484293", "code_sizes": 1}, {"nl_num": [3, 990, 284, 2464, 2706, 2, 955, 2602, 1959, 4], "code_num": [2], "code": "import multiprocessing\\nimport logging\\n\\ndef g1(results, x):\\n    y = x*x\\n    print \"processing: y = %s\" % y\\n    results.append(y)\\n\\ndef f1():\\n    logger = multiprocessing.log_to_stderr()\\n    logger.setLevel(multiprocessing.SUBDEBUG)\\n    manager = multiprocessing.Manager()\\n    results = manager.list()\\n    pool = multiprocessing.Pool(processes=4)\\n    for (i) in range(0,15):\\n        pool.apply_async(g1, [results, i])\\n    pool.close()\\n    pool.join()\\n\\n\\ndef main():\\n    f1()\\n\\nif __name__ == \"__main__\":\\n    main()", "id": "11937895", "code_sizes": 1}, {"nl_num": [3, 3492, 4498, 3293, 727, 3332, 1205, 2610, 549, 4018, 2991, 4], "code_num": [2], "code": "self.lock_tables(\"read\", ['nets_permissions as n', 'devices_permissions as d'])\\nusrs = self.db.query(\"SELECT n.user_id FROM nets_permissions as n \\\\n                    left join devices_permissions as d \\\\n                    on n.user_id = d.user_id \\\\n                    where d.user_id is null \\\\n                    and n.network_id=%s and n.perm<>3\", netid)\\nself.unlock_tables()\\n\\nfor usr in usrs:\\n    self.lock_tables(\"write\", ['devices_permissions'])\\n    self.db.execute(\"INSERT devices_permissions SET \\\\n                     user_id=%s, network_id=%s, device_id=%s, perm=%s\",\\\\n                     usr['user_id'], netid, sensid, perm)\\n    self.unlock_tables();", "id": "15523300", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1652, 1828, 2406, 2, 2, 2238, 4550, 3528, 2610, 1400, 647, 2, 2326, 4], "code_num": [2], "code": "from kivy.factory import Factory\\nFactory.register('Line', module='myfile')", "id": "28927181", "code_sizes": 1}, {"nl_num": [3, 3195, 1007, 2, 3669, 1007, 67, 2610, 2, 655, 167, 4688, 4], "code_num": [2], "code": "url(r'^login/$',\\n        auth_views.login,\\n        {'template_name': 'your/login/template.html', 'form':YourExtendedForm},\\n        name='auth_login'),", "id": "21594823", "code_sizes": 1}, {"nl_num": [3, 4128, 1598, 4179, 1828, 1242, 2610, 1828, 2839, 4571, 4], "code_num": [2], "code": "import matplotlib.pyplot as plt\\nimport numpy as np\\n\\nx,y = np.random.rand(2,10)\\nimg = np.random.rand(10,10)\\n\\nfig = plt.figure()\\nax1 = fig.add_subplot(221)\\nim = ax1.imshow(img,extent=[0,1,0,1])\\n\\nplt.colorbar(im)\\nax2 = fig.add_subplot(222)\\nim = ax2.imshow(img,extent=[0,1,0,1])\\nplt.colorbar(im)\\n\\nax3 = fig.add_subplot(223)\\nax3.plot(x,y)\\nax3.axis([0,1,0,1])\\n\\nax4 = fig.add_subplot(224)\\nim = ax4.imshow(img,extent=[0,1,0,1])\\nplt.colorbar(im)\\n\\npos4 = ax4.get_position().bounds\\npos1 = ax1.get_position().bounds\\n# set the x limits (left and right) to first axes limits\\n# set the y limits (bottom and top) to the last axes limits\\nnewpos = [pos1[0],pos4[1],pos1[2],pos4[3]]\\n\\nax3.set_position(newpos)\\n\\nplt.show()", "id": "7147210", "code_sizes": 1}, {"nl_num": [3, 4382, 873, 1999, 4179, 3759, 338, 4], "code_num": [2], "code": "import numpy\\nimport numpy.random\\n\\nf = open('2014-07-17-1M_testdata_1Mx500.csv', 'w', 50000000)\\n\\nfor i in range(1000):\\n    m = numpy.random.random_integers(0, 1000000, (1000, 500))\\n    numpy.savetxt(f, m, delimiter=',')\\n\\nf.close()", "id": "24813233", "code_sizes": 1}, {"nl_num": [3, 2168, 3047, 3028, 2639, 4179, 249, 223, 2665, 249, 2326, 4], "code_num": [2], "code": "import numpy as np\\nmy_array = np.random.randint(1,10, (4, 5))\\npos = np.where(my_array > 5)\\nmy_array[pos]", "id": "15442943", "code_sizes": 1}, {"nl_num": [3, 4023, 1074, 4780, 540, 511, 338, 3747, 188, 4], "code_num": [2], "code": "df[\"group\"][df[\"pc\"] < 0.66] = 2\\ndf[\"group\"][df[\"pc\"] < 0.33] = 1", "id": "13326887", "code_sizes": 1}, {"nl_num": [3, 1926, 276, 540, 1243, 4529, 4], "code_num": [2], "code": "weights = [10, -2, 7]\\noffset = min(weights)\\npositiveweights = [z - offset + 1 for z in weights]", "id": "26273011", "code_sizes": 1}, {"nl_num": [3, 2140, 1976, 568, 1704, 1637, 2828, 262, 4179, 1400, 4314, 4179, 1170, 2610, 990, 4], "code_num": [2], "code": "import inspect, dis\\n\\ndef expecting():\\n    \"\"\"Return how many values the caller is expecting\"\"\"\\n    f = inspect.currentframe()\\n    f = f.f_back.f_back\\n    c = f.f_code\\n    i = f.f_lasti\\n    bytecode = c.co_code\\n    instruction = ord(bytecode[i + 3])\\n    if instruction == dis.opmap['UNPACK_SEQUENCE']:\\n        howmany = ord(bytecode[i + 4])\\n        return howmany\\n    elif instruction == dis.opmap['POP_TOP']:\\n        return 0\\n    return 1\\n\\n\\ndef f(n):\\n    howmany = expecting()\\n    a = n * n\\n    b = a + 1\\n    if howmany == 1:\\n        return b\\n    else:\\n        return b, a\\n\\na = f(1)\\nprint a # this prints 2\\n\\na, b = f(1)\\nprint a # this prints 2 \\nprint b # this prints 1", "id": "20269641", "code_sizes": 1}, {"nl_num": [3, 2385, 864, 1519, 4744, 3004, 3995, 1708, 2, 2812, 4], "code_num": [2], "code": "if not pdf.err:\\n    response = HttpResponse(result.getvalue(), mimetype='application/pdf')\\n    response['Content-Disposition'] = 'attachment; filename=Client_Summary.pdf'\\n    return response", "id": "5619239", "code_sizes": 1}, {"nl_num": [3, 1704, 3143, 3467, 3293, 1828, 578, 3004, 551, 1828, 2319, 1297, 990, 4], "code_num": [2], "code": "import os\\ndef getpage(fname, pageindex, pagesize=100, ahead=20):\\n    \"\"\"read page roughly by byte size\"\"\"\\n    size = os.path.getsize(fname)\\n    pagenum = size/pagesize\\n    f=open(fname,'r')\\n    pos=pageindex * pagesize\\n    #ahead some line\\n    pos -= ahead\\n    if pos <0: \\n        pos = 0\\n    f.seek(pos)\\n    f.readline()\\n    txt = f.read(pagesize)\\n    txt += f.readline()    \\n    return txt", "id": "12028398", "code_sizes": 1}, {"nl_num": [3, 3397, 2000, 3087, 3293, 1828, 990, 3580, 2969, 4], "code_num": [2], "code": "# Server code\\nimport xmlrpclib\\nfrom SimpleXMLRPCServer import SimpleXMLRPCServer\\n\\ndef is_even(n):\\n    return n%2 == 0\\n\\nserver = SimpleXMLRPCServer((\"localhost\", 8000))\\nprint \"Listening on port 8000...\"\\nserver.register_function(is_even, \"is_even\")\\nserver.serve_forever()\\n\\n\\n# Client code\\nimport xmlrpclib\\n\\nproxy = xmlrpclib.ServerProxy(\"http://localhost:8000/\")\\nprint \"3 is even: %s\" % str(proxy.is_even(3))\\nprint \"100 is even: %s\" % str(proxy.is_even(100))", "id": "12534227", "code_sizes": 1}, {"nl_num": [3, 188, 2168, 556, 1027, 4], "code_num": [2], "code": "sum(x.isupper() for x in password)", "id": "26186511", "code_sizes": 1}, {"nl_num": [3, 100, 2513, 2133, 2610, 1828, 3851, 2, 4], "code_num": [2], "code": "import numpy as np\\nimport seaborn as sns\\niris = sns.load_dataset(\"iris\")\\ng = sns.pairplot(iris)\\nfor i, j in zip(*np.triu_indices_from(g.axes, 1)):\\n    g.axes[i, j].set_visible(False)", "id": "34087126", "code_sizes": 1}, {"nl_num": [3, 188, 4047, 2613, 237, 2610, 1828, 3316, 2613, 3138, 4], "code_num": [2], "code": "if x != 5 and y < 4:\\n  statement", "id": "6809190", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1065, 1133, 169, 2, 1374, 2610, 655, 4688, 4], "code_num": [2], "code": "class YourView(generics.TypOfView):\\n    renderer_classes = (TemplateHTMLRenderer, JSONRenderer,)\\n    template_name = 'path_to_template.html'", "id": "27751148", "code_sizes": 1}, {"nl_num": [3, 3748, 863, 4567, 853, 1828, 3083, 3995, 4], "code_num": [2], "code": "d = {}\\n\\nfor _ in range(TotalLists):   # The same loop you have now\\n    ListName = input(\"whatever...\")\\n    d[ListName] = []", "id": "30338452", "code_sizes": 1}, {"nl_num": [3, 188, 4335, 3485, 540, 2, 169, 3475, 244, 4], "code_num": [2], "code": "#!/usr/bin/python\\n\\nfrom PIL import Image\\n\\nmargin=20\\nX=150\\nY=150\\nin_path=\"flower.jpg\"\\nout_path=\"thumbnail.png\"\\n\\n#creates a transparent background, RGBA mode, and size 150 by 150.\\nbackground = Image.new('RGBA', (X,Y))\\n\\n\\n# opening an image and converting to RGBA:\\nimg = Image.open(in_path).convert('RGBA')\\n\\n# Resizing the image\\n\\nimg = img.resize((X, Y-margin*2), Image.ANTIALIAS)\\n\\n# Putting thumbnail on background\\n\\nbackground.paste(img, (0, margin), img)\\nbackground.save(out_path)", "id": "31029984", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1742, 2, 4178, 549, 2414, 768, 2610, 990, 2326, 4], "code_num": [2], "code": "import ssl\\nimport base64\\nfrom socket import *\\n\\n\\ncc = socket(AF_INET, SOCK_STREAM)\\ncc.connect((\"smtp.gmail.com\", 587))\\n# cc.read(..)\\n\\ncc.send('helo tester.com\\r\\n')\\ncc.send('starttls\\r\\n')\\n# cc.read(..) If the server responds ok to starttls\\n#             tls negotiation needs to happen and all\\n#             communication is then over the SSL socket \\n\\nscc = ssl.wrap_socket(cc, ssl_version=ssl.PROTOCOL_SSLv23)\\nscc.send('auth login\\r\\n')\\n# scc.read(..)\\n\\nscc.send(base64.b64encode('username')+'\\r\\n')\\nscc.send(base64.b64encode('password')+'\\r\\n')\\n\\n# css.send(\\n#  mail from:\\n#  rcpt to:\\n#  data\\n#  etc", "id": "12593944", "code_sizes": 1}, {"nl_num": [3, 2, 2, 2, 2, 2610, 2, 4], "code_num": [2], "code": "ANSI.SYS", "id": "10020303", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 2103, 1828, 990, 2, 568, 1828, 2710, 2326, 4], "code_num": [2], "code": "from base64 import b64encode\\nfrom os import urandom\\n\\nrandom_bytes = urandom(64)\\ntoken = b64encode(random_bytes).decode('utf-8')", "id": "17958347", "code_sizes": 1}, {"nl_num": [3, 3755, 568, 2360, 1400, 3547, 2, 3257, 1637, 2610, 2385, 4], "code_num": [2], "code": "try:\\n    last_note = client.note_set.latest(\"datetime\")\\nexcept DoesNotExist:\\n    last_note = None", "id": "6494350", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 2, 4220, 4117, 3293, 3316, 841, 4], "code_num": [2], "code": "def callback(event):\\n    print(event.char, event.keysym, event.keycode)\\n\\nroot = Tk()\\nroot.bind('<Key>', callback)\\nroot.mainloop()", "id": "22916982", "code_sizes": 1}, {"nl_num": [3, 2, 2252, 28, 540, 2, 2610, 188, 1650, 4], "code_num": [2], "code": "sc.parallelize([(\"a\", 10), (\"c\", 5), (\"b\", 7)]).takeOrdered(3, key=lambda kv: -kv[1])", "id": "31634034", "code_sizes": 1}, {"nl_num": [3, 188, 2561, 3586, 2, 2, 2, 4], "code_num": [2], "code": "pid = os.fork()\\nif pid == 0:\\n    print(\"I am the child!\")\\nelse:\\n    print(\"I am the parent!\")", "id": "13538767", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4575, 1828, 2710, 4179, 1081, 2107, 568, 1828, 4238, 4], "code_num": [2], "code": "sorted_list = sorted(unsorted.split(), key=lambda x: x.split('@')[1])\\n\\nprint(sorted_list)\\n#['sge@grg.lt', 'ggrge@yahoo.com']", "id": "21402309", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3881, 2613, 2544, 251, 250, 1828, 4219, 2613, 1569, 3222, 2605, 1708, 990, 4], "code_num": [2], "code": "from ftplib import FTP \\n\\nftp = FTP('ftp.hostname.com')\\nftp.login('login', 'passwrd')\\nftp.cwd('www') # change into 'www' directory\\n\\nif 'foo' in ftp.nlst() : #check if 'foo' exist inside 'www'\\n    print 'YES'\\n    ftp.cwd('foo')  # change into \"foo\" directory\\n    ftp.retrlines('LIST') #list directory contents\\n\\nelse : \\n    print 'NO'\\n    ftp.mkd('foo') #Create a new directory called foo on the server.\\n    ftp.cwd('foo') # change into 'foo' directory\\n    ftp.retrlines('LIST') #list subdirectory contents\\n\\nftp.close() #close connection", "id": "21125674", "code_sizes": 1}, {"nl_num": [3, 2, 169, 380, 2, 2610, 3685, 540, 188, 4], "code_num": [2], "code": "from __future__ import with_statement\\nimport sys\\nimport gevent\\nfrom gevent import socket\\nfrom gevent.pool import Pool\\n\\nN = 1000\\n# limit ourselves to max 10 simultaneous outstanding requests\\npool = Pool(10)\\nfinished = 0\\n\\n\\ndef job(url):\\n    global finished\\n    try:\\n        try:\\n            ip = socket.gethostbyname(url)\\n            print ('%s = %s' % (url, ip))\\n        except socket.gaierror:\\n            ex = sys.exc_info()[1]\\n            print ('%s failed with %s' % (url, ex))\\n    finally:\\n        finished += 1\\n\\nwith gevent.Timeout(2, False):\\n    for x in xrange(10, 10 + N):\\n        pool.spawn(job, '%s.com' % x)\\n    pool.join()\\n\\nprint ('finished within 2 seconds: %s/%s' % (finished, N))", "id": "12803206", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3119, 1400, 694, 4179, 4585, 169, 3407, 2610, 1828, 3079, 3004, 2326, 4], "code_num": [2], "code": "for row in rd:\\n    list = []\\n    list.append(row)\\n    print list\\n    for items in row:\\n        pass # or whatever other logic you want, if you do not want to do anything remove this loop\\n    print len(row)", "id": "31169968", "code_sizes": 1}, {"nl_num": [3, 2677, 642, 3079, 3004, 853, 813, 3932, 990, 1623, 4], "code_num": [2], "code": "# faster lookup on users\\ncur.execute (\"select ref from users\")\\nusers = set(row[0] for row in cur.fetchall())\\n\\nwith open(\"your/file.CSV\") as f:\\n    r = reader(f)\\n    for row in r:\\n        if row[0] in users:\\n            do_something_with(row)", "id": "20561157", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 2633, 3055, 2940, 4070, 568, 3443, 1708, 990, 2326, 4], "code_num": [2], "code": "import select\\n\\nconnections = []\\n\\nwhile True:\\n    rlist,wlist,xlist = select.select(connections + [s],[],[])\\n    for i in rlist:\\n        if i == s:\\n            conn,addr = s.accept()\\n            connections.append(conn)\\n            continue\\n        data = i.recv(1024)\\n        for q in connections:\\n            if q != i and q != s:\\n                q.send(data)", "id": "15220264", "code_sizes": 1}, {"nl_num": [3, 188, 4140, 3747, 4605, 3138, 4], "code_num": [2], "code": "options = {\\n16: '[{A:16} [{B:9} [{*G:25}]] [{C:12} [{*H:28}]] [{D:-14} [{*I:2}]] [{E:-9} [{*J:7}]] [{F:9} [{*K:6}]] ]',\\n9: '[{A:9} [{B:16} [{*G:25}]] [{C:12} [{*H:21}]] [{D:-14} [{*I:-5}]] [{E:-9} [{*J:0}]] [{F:-10} [{*K:-1}]] ]',\\n12: '[{A:12} [{B:16} [{*G:28}]] [{C:9} [{*H:21}]] [{D:-14} [{*I:-2}]] [{E:-9} [{*J:3}]] [{F:-10} [{*K:2}]] ]',\\n-14: '[{A:-14} [{B:16} [{*G:2}]] [{C:9} [{*H:-5}]] [{D:12} [{*I:-2}]] [{E:-9} [{*J:-23}]] [{F:-10} [{*K:-24}]] ]',\\n9: '[{A:-9} [{B:16} [{*G:7}]] [{C:9} [{*H:0}]] [{D:12} [{*I:3}]] [{E:-14} [{*J:-23}]] [{F:-10} [{*K:-19}]] ]',\\n-10: '[{A:-10} [{B:16} [{*G:6}]] [{C:9} [{*H:1}]] [{D:12} [{*I:2}]] [{E:-14} [{*J:-24}]] [{F:-9} [{*K:-19}]] ]'\\n}\\n\\n\\nhumanint = int(input(\"What number will you place your piece on?\"))\\nmmtree = options.get(humanint)", "id": "31901933", "code_sizes": 1}, {"nl_num": [3, 3311, 4179, 1828, 4019, 2714, 2610, 1828, 3061, 1901, 2906, 3129, 2610, 1828, 4238, 4], "code_num": [2], "code": "a = [[(1, 2), (2, 1)], [(1, 2), (1, 2)], [(2, 3), (2, 2)]]\\nitem = (1,2)\\ncount = [sublist[0] for sublist in a].count(item)", "id": "17758648", "code_sizes": 1}, {"nl_num": [3, 2, 1652, 4179, 2, 4], "code_num": [2], "code": "from ..http import client", "id": "8893209", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3881, 2613, 425, 2604, 2519, 1608, 3094, 2979, 4], "code_num": [2], "code": "import datetime\\nlastplus = q.get()\\nif lastplus.date < datetime.datetime.now()-datetime.timedelta(seconds=20):\\n    print \"Go\"", "id": "2398205", "code_sizes": 1}, {"nl_num": [3, 1661, 1268, 3011, 2464, 4780, 1935, 2610, 1400, 2794, 2481, 4], "code_num": [2], "code": "df.d1 = df.d1.astype(np.float64) \\n# do the same for d2..etc..", "id": "22526237", "code_sizes": 1}, {"nl_num": [3, 3586, 3747, 774, 1970, 1422, 2, 4179, 2165, 2, 2, 327, 4], "code_num": [2], "code": "x, y = np.random.uniform(-1, 1, size=(2, 1000))\\nz = np.arctan2(y, x) % (2*np.pi)\\n\\n# convert from polar --> cartesian\\nu, v = np.cos(z), np.sin(z)\\n\\n# interpolate x and y components separately\\nrbf_u = interpolate.Rbf(x, y, u, function='linear', smooth=0.1)\\nrbf_v = interpolate.Rbf(x, y, v, function='linear', smooth=0.1)\\nxi, yi = np.mgrid[-1:1:100j, -1:1:100j].reshape(2, -1)\\nui = rbf_u(xi, yi)\\nvi = rbf_v(xi, yi)\\n\\n# convert from cartesian --> polar\\nzi = np.arctan2(ui, vi) % (2*np.pi)", "id": "27218016", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4747, 1400, 1703, 694, 4179, 3004, 2, 1971, 1297, 949, 955, 540, 2, 2326, 4], "code_num": [2], "code": "open_files()", "id": "29064417", "code_sizes": 1}, {"nl_num": [3, 3089, 2604, 1400, 3167, 2858, 1442, 568, 3191, 1828, 2794, 4179, 1218, 3293, 1828, 4238, 4179, 3963, 2610, 188, 389, 177, 1861, 2326, 4], "code_num": [2], "code": "def remove_indices(numbers, indices):\\n    result = []\\n    i=0\\n    for j in sorted(indices):\\n        result += numbers[i:j]\\n        i = j+1\\n    result += numbers[i:]\\n    return result", "id": "13575562", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 1814, 1442, 568, 822, 1828, 2710, 568, 549, 2229, 4], "code_num": [2], "code": "import re\\nre.sub(r'!|\\?|,', '', text)", "id": "23141853", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3222, 4521, 294, 4238, 2610, 655, 2255, 2326, 4], "code_num": [2], "code": "items=(\\n    (\"Animals\", ((\"1\",\"Monkey\"), (\"2\",\"Turtle\"))),\\n    (\"Aliens\", ((\"3\",\"Zim\"), (\"4\",\"Tak\"))),\\n)\\n\\nselect=forms.ChoiceField(label=\"Selection\", choices=items)", "id": "21401501", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 3492, 3299, 540, 2096, 2706, 4], "code_num": [2], "code": "from tkinter import *\\n\\nclass Application(Frame):\\n    def __init__(self, master=None):\\n        Frame.__init__(self, master)\\n        self.grid()\\n        self.master.title(\"Grid Manager\")\\n\\n        for r in range(6):\\n            self.master.rowconfigure(r, weight=1)    \\n        for c in range(5):\\n            self.master.columnconfigure(c, weight=1)\\n            Button(master, text=\"Button {0}\".format(c)).grid(row=6,column=c,sticky=E+W)\\n\\n        Frame1 = Frame(master, bg=\"red\")\\n        Frame1.grid(row = 0, column = 0, rowspan = 3, columnspan = 2, sticky = W+E+N+S) \\n        Frame2 = Frame(master, bg=\"blue\")\\n        Frame2.grid(row = 3, column = 0, rowspan = 3, columnspan = 2, sticky = W+E+N+S)\\n        Frame3 = Frame(master, bg=\"green\")\\n        Frame3.grid(row = 0, column = 2, rowspan = 6, columnspan = 3, sticky = W+E+N+S)\\n\\nroot = Tk()\\napp = Application(master=root)\\napp.mainloop()", "id": "6129899", "code_sizes": 1}, {"nl_num": [3, 2, 199, 223, 2, 2, 4179, 2, 4], "code_num": [2], "code": "self.unused_cards.append({'face': face, 'suit': suit, 'rank': self.values[face]})", "id": "23937992", "code_sizes": 1}, {"nl_num": [3, 550, 3659, 483, 2616, 949, 3332, 2610, 2385, 2326, 4], "code_num": [2], "code": "Comments.objects.filter(content__author=request.user)", "id": "4696619", "code_sizes": 1}, {"nl_num": [3, 4133, 4190, 1828, 1442, 2610, 2385, 568, 2616, 2605, 2223, 1605, 3886, 1828, 2684, 540, 2680, 3467, 2604, 1068, 1400, 3467, 2, 2326, 4], "code_num": [2], "code": "Username =forms.CharField(max_length=35,\\n                          required=True, \\n                          widget=forms.TextInput(attrs={'placeholder': 'Username'}))", "id": "17308194", "code_sizes": 1}, {"nl_num": [3, 4764, 1828, 472, 4767, 1704, 3293, 1828, 3004, 853, 1828, 3475, 3214, 694, 4], "code_num": [2], "code": "struct.unpack()", "id": "9934859", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 494, 952, 3747, 3733, 3090, 123, 1297, 1537, 3518, 4], "code_num": [2], "code": "tree.find( './/*[@cookie_diameter=\"12\"]' )", "id": "8021228", "code_sizes": 1}, {"nl_num": [3, 2, 2610, 990, 4], "code_num": [2], "code": "def main():\\n\\n    a = float(input('Enter the length of the first side: '))\\n    b = float(input('Enter the length of the second side: '))\\n    c = float(input('Enter the length of the third side: '))\\n\\n\\n\\n    print('The perimeter of the triangle is: ', format(per(a, b, c),',.1f'))\\n\\n    print('The area of the triangle is: ', format(area_per(a, b, c),',.1f'))\\n\\ndef area_per(a, b, c):\\n\\n    p = per(a,b,c)\\n    s = p / 2\\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\\n    return area\\n\\ndef per(a,b,c):\\n    return a+b+c  \\n\\nmain()", "id": "28596727", "code_sizes": 1}, {"nl_num": [3, 2074, 3747, 1550, 1066, 4179, 326, 1828, 4238, 2610, 188, 4], "code_num": [2], "code": "stack = [(my_list, -1)]\\nwhile stack:\\n    item, level = stack.pop()\\n\\n    if isinstance(item, list):\\n        for i in reversed(item):\\n            stack.append((i, level+1))\\n    else:\\n        print \"\\t\" * level, item", "id": "1163429", "code_sizes": 1}, {"nl_num": [3, 4291, 2990, 4182, 1704, 2590, 664, 223, 3968, 1828, 2710, 4], "code_num": [2], "code": "relevantcompile = re.compile(\"MAIN FISHERMAN(.*)SECONDARY FISHERMAN\", re.DOTALL)\\nrelevantsearch = re.search(relevantcompile, html)\\nrelevantgrouped = relevantsearch.group()\\nrelevantcount = relevantgrouped.count(\"SEA BASS\")\\nprint(relevantcount)", "id": "17264644", "code_sizes": 1}, {"nl_num": [3, 4764, 2807, 3004, 853, 3079, 1422, 41, 3004, 2610, 188, 4], "code_num": [2], "code": "import xlrd\\nimport csv\\n\\ndef xls_to_csv():\\n\\n    x =  xlrd.open_workbook('data.xls')\\n    x1 = x.sheet_by_name('Sheet1')\\n    csvfile = open('data.csv', 'wb')\\n    writecsv = csv.writer(csvfile, quoting=csv.QUOTE_ALL)\\n\\n    for rownum in xrange(sh.nrows):\\n        writecsv.writerow(x1.row_values(rownum))\\n\\n    csvfile.close()", "id": "24969274", "code_sizes": 1}, {"nl_num": [3, 836, 586, 262, 568, 4300, 1856, 177, 3381, 2, 4], "code_num": [2], "code": "import wx\\n\\nclass ClassName(wx.Frame):\\n    def __init__(self, parent, title):\\n        wx.Frame.__init__(self, parent, title=title)\\n        self.panel = wx.Panel(self)\\n        self.PhotoMaxSize = 240\\n        self.createWidgets()\\n        self.Show()\\n\\n    def createWidgets(self):\\n        self.palletNumberText = wx.TextCtrl(self.panel, size=(80,-1))\\n\\n        self.palletNumberText.Bind(wx.EVT_TEXT, self.onPalletNumberText)\\n\\n\\n    def onPalletNumberText(self, event):\\n        '''\\n        save palletNumbertTxt Value when text is entered\\n        '''\\n        print self.palletNumberText.GetValue()\\n        print \"This is a test\"\\n        # Store Value\\n\\n        return\\n\\n#----------------------------------------------------------------------\\nif __name__ == \"__main__\":\\n    app = wx.App(False)\\n    frame = ClassName(None, \"Test\")\\n    app.MainLoop()", "id": "22872197", "code_sizes": 1}, {"nl_num": [3, 4189, 938, 3293, 104, 177, 2376, 4238, 4], "code_num": [2], "code": "import os\\nimport pandas as pd\\nimport re\\n\\ndirectory = \"/Folder/on/Drive/\"\\n\\ndocs = os.listdir(directory)\\nmatch=[]\\nfor filename in docs:\\n    if filename.lower().endswith(\".pdf\"):\\n        match.extend(re.findall(\"\\D{2}\\d{10}\", filename))\\ndf = pd.DataFrame(match, columns=[\"Match\"])\\ndf.to_csv(directory + \"match.csv\", index=False, delimiter=\",\")", "id": "31223772", "code_sizes": 1}, {"nl_num": [3, 4786, 4749, 1712, 2238, 1584, 4627, 3467, 3528, 568, 2643, 4585, 4179, 2697, 1600, 1708, 188, 4], "code_num": [2], "code": "#!/usr/bin/env python\\nimport subprocess\\nimport xlwt\\nprocess=subprocess.Popen('Test_Project.exe',stdout=subprocess.PIPE)\\nout,err = process.communicate()\\nwb=xlwt.Workbook()\\nsheet=wb.add_sheet('python')\\nrow = 0\\nfor line in out.split('\\n'): \\n    for i,wrd in enumerate(line.split()):    \\n        sheet.write(row,i,wrd)\\n    row=row+1 \\nwb.save('stdoutput.xls')", "id": "16169551", "code_sizes": 1}, {"nl_num": [3, 188, 1867, 2, 1843, 4], "code_num": [2], "code": "def base36encode(number, alphabet='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'):\\n    \"\"\"Converts an integer to a base36 string.\"\"\"\\n    if not isinstance(number, (int, long)):\\n        raise TypeError('number must be an integer')\\n\\n    base36 = ''\\n    sign = ''\\n\\n    if number < 0:\\n        sign = '-'\\n        number = -number\\n\\n    if 0 <= number < len(alphabet):\\n        return sign + alphabet[number]\\n\\n    while number != 0:\\n        number, i = divmod(number, len(alphabet))\\n        base36 = alphabet[i] + base36\\n\\n    return sign + base36\\n\\ndef base36decode(number):\\n    return int(number, 36)\\n\\nprint base36encode(1412823931503067241)\\nprint base36decode('AQF8AA0006EH')", "id": "1181919", "code_sizes": 1}, {"nl_num": [3, 3991, 1828, 1563, 1135, 1708, 2994, 2326, 4], "code_num": [2], "code": "import win32gui\\nimport win32con\\nimport winxpgui\\nimport win32api\\nimport subprocess\\nimport time\\n\\nsubprocess.Popen(\"notepad.exe\", shell=True)\\ntime.sleep(1)\\nhwnd = win32gui.FindWindow(None, \"New file - metapad\")  ## The caption of my empty notepad (MetaPad)\\n\\nwin32gui.SetWindowLong (hwnd, win32con.GWL_EXSTYLE, win32gui.GetWindowLong (hwnd, win32con.GWL_EXSTYLE ) | win32con.WS_EX_LAYERED )\\nwinxpgui.SetLayeredWindowAttributes(hwnd, win32api.RGB(0,0,0), 180, win32con.LWA_ALPHA)", "id": "4549213", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 2616, 949, 2, 2326, 4], "code_num": [2], "code": "import random\\ndef init_maze():\\n    maze = [[]] * 9\\n    for counter in range(0, 9):\\n        maze[counter] = [-1] * 4\\n    return maze\\n\\ndef print_maze(maze):\\n\\n    for column in range(0, 9):\\n        for row in range(0, 4):\\n            print maze[column][row],\\n        print ''\\n\\ndef set_cells(maze):\\n    for column in range(0, 9):\\n        for row in range(0, 4):\\n            maze[column][row] = random.randint(1,5)\\n    return maze\\n\\ndef change_room(room, direction):\\n    newRoom = 0\\n    if maze[room][direction] == -1:\\n        print \"you have hit a wall\"\\n    else:\\n        newRoom = maze[room][direction]\\n        print \"You are now in room {0}\".format(newRoom)\\n    room = newRoom\\n\\nmaze = init_maze()\\nprint_maze(maze)\\nprint 'Randomizing...'\\nmaze = set_cells(maze)\\nprint 'Done'\\nprint_maze(maze)", "id": "30895907", "code_sizes": 1}, {"nl_num": [3, 2378, 549, 854, 2610, 990, 4], "code_num": [2], "code": "import sympy as sym\\n\\n\\nx, a, z = sym.symbols('x a z')\\ng = sym.integrate(x**(a-1) * sym.exp(-x), (x, z, sym.oo))", "id": "22560342", "code_sizes": 1}, {"nl_num": [3, 1028, 3055, 2536, 2610, 1828, 3345, 954, 1242, 2610, 188, 169, 2101, 4], "code_num": [2], "code": "import matplotlib.pyplot\\nfrom mpl_toolkits.mplot3d import Axes3D\\n\\ndates       = [20020514, 20020515, 20020516, 20020517, 20020520]\\nhighs       = [1135, 1158, 1152, 1158, 1163]\\nlows        = [1257, 1253, 1259, 1264, 1252]\\nupperLimits = [1125.0, 1125.0, 1093.75, 1125.0, 1125.0]\\nlowerLimits = [1250.0, 1250.0, 1156.25, 1250.0, 1250.0]\\n\\nzaxisvalues0= [0, 0, 0, 0, 0]\\nzaxisvalues1= [1, 1, 1, 1, 1]\\nzaxisvalues2= [2, 2, 2, 2, 2]\\n\\nfig = matplotlib.pyplot.figure()\\nax  = fig.add_subplot(111, projection = '3d')\\n\\nax.plot(dates, zaxisvalues1, lowerLimits, color = 'b')\\nax.plot(dates, zaxisvalues2, upperLimits, color = 'r')\\n\\nfor i,j,k,h in zip(dates,zaxisvalues0,lows,highs):\\n    ax.plot([i,i],[j,j],[k,h],color = 'g')\\n\\nax.scatter(dates, zaxisvalues0, highs, color = 'g', marker = \"o\")\\nax.scatter(dates, zaxisvalues0, lows, color = 'y', marker = \"^\")\\n\\nmatplotlib.pyplot.show()", "id": "10572939", "code_sizes": 1}, {"nl_num": [3, 554, 169, 3119, 1828, 1976, 3645, 3004, 1007, 451, 1326, 4], "code_num": [2], "code": "import os\\n\\ndef print_file_contents(file_path):\\n    assert os.path.exists(file_path), \"File does not exist: {}\".format(file_path)\\n    with open(file_path) as f:\\n        print (f.read())\\n\\nuser_input = raw_input(\"Enter a file path: \") # just input(...) in Python 3+\\nprint_file_contents(user_input)", "id": "19560089", "code_sizes": 1}, {"nl_num": [3, 188, 2905, 389, 1773, 3293, 1400, 2943, 869, 4], "code_num": [2], "code": "# out is your file\\nout.readline().split() # result is ['francesco', '10']", "id": "5185444", "code_sizes": 1}, {"nl_num": [3, 188, 864, 550, 568, 1519, 1400, 1901, 2610, 1400, 3004, 3293, 291, 3004, 1901, 2326, 4], "code_num": [2], "code": "fileobj = open(\"intro.txt\",\"rb\");", "id": "31979311", "code_sizes": 1}, {"nl_num": [3, 17, 1442, 568, 2103, 336, 4], "code_num": [2], "code": "form.cleaned_data['start_date']", "id": "15414068", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 3512, 2, 1594, 568, 2898, 318, 4], "code_num": [2], "code": "globals().update(__import__(sys.argv[1]).__dict__)", "id": "15768136", "code_sizes": 1}, {"nl_num": [3, 892, 3817, 2206, 540, 2940, 1022, 853, 1828, 1006, 4], "code_num": [2], "code": "class Matrix:\\n    def __init__ (self, columns):\\n        self.columns = columns\\n        self.rows = []\\n\\n    def push (self, row):\\n        nRow = []\\n        row = dict (row)\\n        for key in self.columns:\\n            nRow.append (row [key] if key in row else 0)\\n        self.rows.append (nRow)\\n\\n    def result (self): return self.rows\\n\\n    def colNames (self): return self.columns\\n\\nword_list = [\"a\", \"b\",\"c\",\"d\", \"e\"]\\ninput1 = [(\"b\",20),(\"a\",10)]\\ninput2 = [(\"c\",9)]\\ninput3 = [(\"d\",70)]\\n\\nm = Matrix (word_list)\\nm.push (input1)\\nm.push (input2)\\nm.push (input3)\\nprint (m.result () )\\nprint (m.colNames () )", "id": "13775722", "code_sizes": 1}, {"nl_num": [3, 1727, 1218, 4179, 4018, 552, 547, 3518, 990, 4], "code_num": [2], "code": "for y, row in enumerate(array):\\n    for x, val in enumerate(row):\\n        if val == 1:\\n            print x, y", "id": "21534017", "code_sizes": 1}, {"nl_num": [3, 2029, 4238, 4179, 4640, 889, 853, 2049, 338, 1074, 4], "code_num": [2], "code": "import xml.etree.ElementTree as ET\\nimport pandas as pd\\nroot=ET.fromstring('<dict><key>Track ID</key><integer>3636</integer></dict>')\\n#parsing into a dictionary\\nd={}\\nk=''\\nfor t in root:\\n  if t.tag=='key':\\n    k=t.text\\n    continue\\n  d[k]=t.text\\n#transforming to a DataFrame\\ndf=pd.DataFrame(d.items(),columns=['key','value'])\\nprint (df)", "id": "32167327", "code_sizes": 1}, {"nl_num": [3, 3049, 1828, 2710, 2610, 188, 4], "code_num": [2], "code": "initial = \"aSuffixbSuffixcSuffix\"\\n\\nfinal = initial.replace(\"Suffix\", \"Suffix \")\\nprint(final)", "id": "5641586", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4401, 1828, 188, 4640, 568, 2583, 3886, 3247, 4403, 1566, 3747, 2, 769, 2326, 4], "code_num": [2], "code": "import datetime, json\\n\\nD = {datetime.datetime.now(): 'foo',\\n     datetime.datetime.now(): 'bar'}\\n\\nnew_D = {}\\n\\nfor k,v in D.iteritems():\\n  new_D[k.isoformat()] = v\\n\\njson.dumps(new_D)", "id": "3721357", "code_sizes": 1}, {"nl_num": [3, 3311, 1270, 2, 2610, 4047, 129, 3004, 4], "code_num": [2], "code": "from Bio import SeqIO\\nfnames = [\"file.fastq\", \"file1.fastq\", \"file2.fastq\"]\\nfor fname in fnames:\\n    adaptor = (rec for rec in \\\\n                    SeqIO.parse(fname, \"fastq\") \\\\n                    if rec.seq.startswith(\"TGA\"))\\n    count = SeqIO.write(adaptor, \"adaptor.fastq\", \"fastq\")\\n    print(\"Saved %i adaptor in file %s\" %(count, fname))", "id": "33274682", "code_sizes": 1}, {"nl_num": [3, 1903, 159, 1442, 568, 383, 3055, 4505, 4], "code_num": [2], "code": "import android\\nimport hashlib\\nimport time\\nname = 0\\ndroid = android.Android()\\n\\nf_in = open('input.txt', 'r',) \\nf_out = open('output.txt', 'w',) \\nfor line in f_in.readlines():\\n    hash_object = hashlib.md5 (line)\\n    f_out.write(hash_object.hexdigest())\\n\\nf_in.close()\\nf_out.close()", "id": "24706370", "code_sizes": 1}, {"nl_num": [3, 4527, 2375, 4238, 4179, 4358, 2, 540, 2, 262, 4], "code_num": [2], "code": "from Tkinter import *\\n\\nlist1 = ['001 aaa', '002 bbb', '003 ccc']\\nstatus = [\"On\", \"Off\", \"Unknown\"]\\nmaster = Tk()\\n\\ndef create_option(r, x):\\n    x = x.split(\" \", 2)\\n    variable = StringVar(master)\\n    Label(master, text=x[0], relief=RIDGE, anchor=W).grid(row=r, column=0, sticky=W+E)\\n    Label(master, text=x[1], relief=RIDGE, anchor=W).grid(row=r, column=1, sticky=W+E)\\n    OptionMenu(master, variable, *status).grid(row=r, column=2, sticky=W+E)\\n    return variable\\n\\nvariables = [create_option(r,x) for r, x in enumerate(list1)]\\nroot.mainloop()", "id": "16886710", "code_sizes": 1}, {"nl_num": [3, 71, 3098, 338, 4139, 223, 4370, 1828, 1976, 1007, 451, 2, 2, 4], "code_num": [2], "code": "UserFavorite.get_by_name(user_id, parent=a_story)", "id": "1562131", "code_sizes": 1}, {"nl_num": [3, 1139, 4227, 540, 990, 4178, 1828, 3843, 3854, 4], "code_num": [2], "code": "import win32api, win32con, win32process\\n\\ndef setaffinity():\\n    pid  = win32api.GetCurrentProcessId()\\n    mask = 128 # core 7\\n    handle = win32api.OpenProcess(win32con.PROCESS_ALL_ACCESS, True, pid)\\n    win32process.SetProcessAffinityMask(handle, mask)", "id": "33432204", "code_sizes": 1}, {"nl_num": [3, 2, 1605, 1828, 3992, 1007, 4174, 1007, 3332, 2, 2610, 990, 4], "code_num": [2], "code": "import sqlite3\\n\\ndef main():\\n    try:\\n        conn=sqlite3.connect(\":memory:\")\\n        cur = conn.cursor()\\n        cur.execute(\"create table master(id text, sub text)\")\\n        cur.execute(\"insert into master(id, sub) values ('1', 'abc')\")\\n        cur.execute(\"insert into master(id, sub) values ('2', 'def')\")\\n        cur.execute(\"insert into master(id, sub) values ('3', 'ghi')\")\\n        conn.commit()\\n    except:\\n        print(\"I am unable to connect to the database.\")\\n        sys.exit()\\n\\n    cur.execute(\"select id, sub from master where sub='abc'\")\\n    print(cur.fetchall())\\n    cur.execute(\"UPDATE master SET sub = ('xyz') WHERE sub = 'abc'\")\\n    conn.commit()\\n    cur.execute(\"select id, sub from master where sub='abc'\")\\n    print(cur.fetchall())\\n    cur.execute(\"select id, sub from master where sub='xyz'\")\\n    print(cur.fetchall())\\n\\nif __name__==\"__main__\":\\n    main()", "id": "21277636", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1251, 540, 4147, 2610, 188, 4], "code_num": [2], "code": "s=unicodestring.replace(u'\\xa0',u'')", "id": "752998", "code_sizes": 1}, {"nl_num": [3, 4429, 777, 188, 2522, 3498, 3293, 3843, 4260, 4], "code_num": [2], "code": "import os\\nimport sys\\n\\n# Import Custom libraries\\nfrom BeautifulSoup import BeautifulStoneSoup\\n\\nxml_str = \\\\n'''\\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n    <first-tag>\\n      <second-tag>\\n        <events-data>\\n           <event-date>\\n                <date>20040913</date>\\n           </event-date>\\n        </events-data>\\n\\n      <events-data>\\n         <event-date>\\n           <date>20040913</date>\\n         </event-date>\\n      </events-data> \\n     </second-tag>\\n   </first-tag>\\n'''\\nsoup = BeautifulStoneSoup(xml_str)\\n\\nevent_data_location = lambda x: x.name == \"events-data\"\\n\\nevents = soup.findAll(event_data_location)\\nif(events):\\n    # The last event-data\\n    print events[-1].text", "id": "17459836", "code_sizes": 1}, {"nl_num": [3, 4329, 17, 3907, 4179, 2, 4179, 4780, 3872, 2610, 4189, 4], "code_num": [2], "code": "df = pd.DataFrame(random_integers(0,100,(3,3)),columns=list('ABC'),index=list('abc'))\\n\\n\\ndiffer = reshape([sum(df[col2]-df[col]) for col2 in df for col in df], (3,3))\\ndiffer = pd.DataFrame(differ, columns=list('ABC'),index=list('ABC'))\\n\\ndiffer", "id": "28922119", "code_sizes": 1}, {"nl_num": [3, 2, 1442, 2238, 223, 591, 3528, 568, 2732, 223, 1828, 3711, 956, 2610, 188, 4], "code_num": [2], "code": "with myLock:\\n    doSomething()", "id": "4091565", "code_sizes": 1}, {"nl_num": [3, 4764, 3293, 2024, 568, 3083, 568, 1792, 2610, 188, 4], "code_num": [2], "code": "for currentrow in data : \\n     description= currentrow[1].read()\\n     tupled_data= tuple([currentrow[0],description])\\n\\n\\nprint tupled_data", "id": "25418744", "code_sizes": 1}, {"nl_num": [3, 3071, 250, 1828, 2, 4], "code_num": [2], "code": "# touch chroot/dev/random\\n# mount --bind /dev/random chroot/dev/random", "id": "8591394", "code_sizes": 1}, {"nl_num": [3, 973, 2, 2610, 2229, 3481, 4], "code_num": [2], "code": "django.views.defaults.page_not_found", "id": "8513341", "code_sizes": 1}, {"nl_num": [3, 990, 586, 262, 568, 1170, 332, 4], "code_num": [2], "code": "def foo(idx):\\n    return lambda t: make_frame(t, idx)\\n\\nfor idx, path in enumerate(paths):\\n    clip2 = VideoClip(foo(idx), False, 10)", "id": "30406112", "code_sizes": 1}, {"nl_num": [3, 2, 655, 568, 906, 1081, 604, 1400, 2, 1532, 60, 2969, 4], "code_num": [2], "code": "# import settings\\nimport os\\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"settings\")\\n\\n# send an email\\nfrom django.core.mail import EmailMessage\\nmessage = EmailMessage(subject=\"Peter Maffay\", body=\"test\", from_email=\"it@maffay.com\",  to=[\"peter.maffay@gmail.com\"])\\nmessage.send(fail_silently=False)", "id": "22044216", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4375, 3203, 2, 4092, 2238, 169, 1569, 2, 3528, 4], "code_num": [2], "code": "self.setStyleSheet( \"\"\"QListWidget{\\n                    background: yellow;\\n                }\\n                \"\"\"\\n)", "id": "25045483", "code_sizes": 1}, {"nl_num": [3, 1881, 864, 2, 4179, 2, 841, 4], "code_num": [2], "code": "inst = session.query(Model).first()\\nsession.expunge(inst)\\n\\nmake_transient(inst)\\ninst.id = None\\nsession.add(inst)\\nsession.flush()\\nprint inst.id #New ID", "id": "14636192", "code_sizes": 1}, {"nl_num": [3, 4583, 338, 3293, 382, 859, 4260, 4], "code_num": [2], "code": "import json\\nimport urllib\\n\\nurl = 'http://api.openweathermap.org/data/2.5/weather?units=metric&q=' + str(b)\\nrequest = urllib.urlopen(url)\\ntext = request.read()\\n\\ndata = json.loads(text)\\n\\nprint u\"{}\\xb0C from {} to {}\\xb0C, wind {}m/s, clouds {}%, {} hpa\".format(\\n    data['main']['temp'], data['main']['temp_min'], data['main']['temp_max'],\\n    data['wind']['speed'], data['clouds']['all'], data['main']['pressure'])", "id": "34444039", "code_sizes": 1}, {"nl_num": [3, 545, 4018, 889, 540, 549, 4018, 4179, 4292, 2610, 2479, 4], "code_num": [2], "code": "np.arange(5).repeat([1,0,3,2,0])", "id": "13308131", "code_sizes": 1}, {"nl_num": [3, 3527, 3293, 3970, 4], "code_num": [2], "code": "class A(object):\\n    test = []\\n\\n    def coolThings(self):\\n        # do cool things here and print the new self.test\\n        print self.test", "id": "5029401", "code_sizes": 1}, {"nl_num": [3, 2103, 1828, 3467, 3004, 853, 1828, 4238, 4179, 1594, 4], "code_num": [2], "code": "with open(input_path, 'r') as infile, open(output_path, 'w') as outfile:\\n  for line in infile:\\n    line_name, line_id = line.split(':')\\n    line_name = line_name.strip().replace(' ', '_')\\n    print('{} = [\"{}\"]'.format(line_name, line_id.strip()))", "id": "17518433", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2103, 4534, 2710, 568, 528, 2326, 4], "code_num": [2], "code": "import base64\\nimgdata = base64.b64decode(imgstring)\\nfilename = 'some_image.jpg'  # I assume you have a way of picking unique filenames\\nwith open(filename, 'wb') as f:\\n    f.write(imgdata)\\n# f gets closed when you exit the with statement\\n# Now save the value of filename to your database", "id": "16214190", "code_sizes": 1}, {"nl_num": [3, 2452, 1237, 4179, 2639, 4], "code_num": [2], "code": "my_dict = {}\\nfor line in myfile_text.splitlines():\\n    my_dict[line.split()[0]] = line.split()[1]\\nresult_list = []\\nlist_tuples = ast.literal_eval(myfile_tuples)\\nfor tup in list_tuples:\\n    temp_list = []\\n    for term in tup:\\n        temp_list.append(my_dict[term])\\n    result_list.append(tuple(temp_list))\\nprint(result_list)", "id": "33369793", "code_sizes": 1}, {"nl_num": [3, 4405, 1828, 664, 2610, 4171, 68, 3293, 2, 2, 4], "code_num": [2], "code": "netstat -a -n -o", "id": "22713749", "code_sizes": 1}, {"nl_num": [3, 3990, 2, 4178, 188, 1650, 4], "code_num": [2], "code": "import psycopg2\\nconn = psycopg2.connect(database='postgis', user='postgres')\\ncurs = conn.cursor()\\n\\n# Find the distance within 1 km of point-of-interest\\npoi = (-124.3, 53.2)  # longitude, latitude\\n\\n# Table 'my_points' has a geography column 'geog'\\ncurs.execute(\"\"\"\\\\nSELECT gid, ST_AsGeoJSON(geog), ST_Distance(geog, poi)\\nFROM my_points, (SELECT ST_MakePoint(%s, %s)::geography AS poi) AS f\\nWHERE ST_DWithin(geog, poi, 1000);\"\"\", poi)\\n\\nfor row in curs.fetchall():\\n    print(row)", "id": "14940285", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 2203, 1400, 2603, 297, 540, 791, 2326, 4], "code_num": [2], "code": "cherrypy.server.socket_host = 'www.machinename.com'\\ncherrypy.engine.start()\\ncherrypy.engine.block()", "id": "115773", "code_sizes": 1}, {"nl_num": [3, 4137, 188, 389, 177, 1927, 2464, 2604, 4190, 2235, 568, 3881, 2613, 1828, 2710, 1535, 840, 2357, 568, 549, 4465, 2326, 4], "code_num": [2], "code": "try:\\n    your_list.append(int(user_input))\\nexcept ValueError:\\n    pass", "id": "23771286", "code_sizes": 1}, {"nl_num": [3, 1958, 4394, 4616, 2610, 2, 864, 2644, 4092, 4], "code_num": [2], "code": "import matplotlib\\nmatplotlib.use('TkAgg')\\nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\\nimport matplotlib.pyplot as plt\\nimport Tkinter as Tk\\nimport networkx as nx\\nfrom tkMessageBox import showinfo\\n\\nroot = Tk.Tk()\\nroot.wm_title(\"Animated Graph embedded in TK\")\\nroot.wm_protocol('WM_DELETE_WINDOW', root.quit())\\n\\nf = plt.figure(figsize=(5,4))\\na = f.add_subplot(111)\\nplt.axis('off')\\n\\n# the networkx part\\nG=nx.complete_graph(5)\\npos=nx.circular_layout(G)\\nnx.draw_networkx(G,pos=pos,ax=a)\\nxlim=a.get_xlim()\\nylim=a.get_ylim()\\n\\n\\n\\n# a tk.DrawingArea\\ncanvas = FigureCanvasTkAgg(f, master=root)\\ncanvas.show()\\ncanvas.get_tk_widget().pack(side=Tk.TOP, fill=Tk.BOTH, expand=1)\\n\\ndef next_graph():\\n    if G.order():\\n        a.cla()\\n        G.remove_node(G.nodes()[-1])\\n        nx.draw_networkx(G, pos, ax=a)\\n        a.set_xlim(xlim)\\n        a.set_ylim(ylim)\\n        plt.axis('off')\\n        canvas.draw()\\n\\nb = Tk.Button(root, text=\"next\",command=next_graph)\\nb.pack()\\n\\nTk.mainloop()", "id": "14305337", "code_sizes": 1}, {"nl_num": [3, 2551, 223, 2473, 4179, 3055, 2, 1530, 1124, 2610, 188, 711, 4414, 2, 4], "code_num": [2], "code": "re.findall(\"((?<=^\\[)[^[\\]]+(?=\\]$)|^[INTEXT]{3}\\. .+?$)\", text)", "id": "15587033", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3881, 568, 750, 2613, 1828, 2544, 1812, 4505, 1708, 990, 1650, 4], "code_num": [2], "code": "for dirpath, dirnames, files in os.walk('.'):\\n    if files:\\n        print dirpath, 'has files'\\n    if not files:\\n        print dirpath, 'is empty'", "id": "25675352", "code_sizes": 1}, {"nl_num": [3, 3047, 1828, 3004, 1708, 990, 4], "code_num": [2], "code": "data = \"this this this %this %this\"\\n\\ndata = ' '.join(data.split('%')[::2])\\n\\ndata # => \"this this this  this\"", "id": "23017389", "code_sizes": 1}, {"nl_num": [3, 4044, 1039, 3747, 3603, 1828, 2479, 4018, 853, 549, 4018, 4179, 619, 515, 4], "code_num": [2], "code": "def complex_array_to_rgb(X, theme='dark', rmax=None):\\n    '''Takes an array of complex number and converts it to an array of [r, g, b],\\n    where phase gives hue and saturaton/value are given by the absolute value.\\n    Especially for use with imshow for complex plots.'''\\n    absmax = rmax or np.abs(X).max()\\n    Y = np.zeros(X.shape + (3,), dtype='float')\\n    Y[..., 0] = np.angle(X) / (2 * pi) % 1\\n    if theme == 'light':\\n        Y[..., 1] = np.clip(np.abs(X) / absmax, 0, 1)\\n        Y[..., 2] = 1\\n    elif theme == 'dark':\\n        Y[..., 1] = 1\\n        Y[..., 2] = np.clip(np.abs(X) / absmax, 0, 1)\\n    Y = matplotlib.colors.hsv_to_rgb(Y)\\n    return Y", "id": "17123350", "code_sizes": 1}, {"nl_num": [3, 2, 1405, 568, 4640, 711, 2209, 3746, 3518, 4], "code_num": [2], "code": "key, value = item\\n\\nif value[0] != \"'\" and value[-1] != \"'\":\\n    value = \"'{0}'\".format(value)\\n\\nself.keyvalues[key] = value", "id": "26783875", "code_sizes": 1}, {"nl_num": [3, 69, 1352, 1757, 2, 2, 4179, 1828, 4238, 4], "code_num": [2], "code": "slopes=filter(None,slopes)", "id": "28905972", "code_sizes": 1}, {"nl_num": [3, 2, 1901, 3653, 2610, 2, 4], "code_num": [2], "code": "from gi.repository import Gtk\\n\\nclass CursorSample(Gtk.Application):\\n    def __init__(self):\\n        Gtk.Application.__init__(self, application_id=\"org.app.CursorSample\")\\n\\n        self.buffer = Gtk.TextBuffer()\\n        self.buffer.connect(\"notify::cursor-position\",\\n                            self.on_cursor_position_changed)\\n\\n        self.tw = Gtk.TextView()\\n        self.tw.set_buffer(self.buffer)\\n        self.tw.props.wrap_mode = Gtk.WrapMode.CHAR\\n\\n    def do_activate(self):\\n        main_window = Gtk.Window(Gtk.WindowType.TOPLEVEL)\\n        main_window.add(self.tw)\\n        self.add_window(main_window)\\n        main_window.set_position(Gtk.WindowPosition.CENTER)\\n        main_window.show_all()\\n\\n    def on_cursor_position_changed(self, buffer, data=None):\\n        print buffer.props.cursor_position\\n\\nif __name__ == \"__main__\":\\n    cursorsample = CursorSample()\\n    cursorsample.run(None)", "id": "19063941", "code_sizes": 1}, {"nl_num": [3, 3748, 549, 1182, 3518, 568, 4147, 4], "code_num": [2], "code": "chr(somenumber)", "id": "17627834", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3559, 1400, 2, 4179, 1828, 1976, 568, 1007, 2, 1007, 4714, 4], "code_num": [2], "code": "user = User.objects.get(id=1)\\ngroup = Group.objects.get(id=5)\\n\\nuser.groups.add(group)", "id": "8428871", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 2, 2947, 1708, 262, 551, 2252, 3747, 2, 2238, 709, 177, 2252, 4669, 4347, 3518, 3528, 2326, 4], "code_num": [2], "code": "calculate_fun(**{self.key1: \"some_value\", self.key2: \"another_value\"})", "id": "24541241", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2794, 2049, 938, 1490, 1297, 336, 2610, 1828, 1566, 3747, 1406, 4780, 4], "code_num": [2], "code": "data.groupby(data['date'].map(lambda x: x.year))", "id": "11391969", "code_sizes": 1}, {"nl_num": [3, 550, 2039, 3881, 2613, 2586, 1162, 4403, 2610, 1828, 4238, 2326, 4], "code_num": [2], "code": "letters = set([\"a\",\"b\",\"c\",\"d\"])\\ninpt = raw_input()\\nif set(inpt).issubset(letters):\\n    print \"letters are in list\"\\nelse:\\n    print \"letters are not in list\"", "id": "28237231", "code_sizes": 1}, {"nl_num": [3, 188, 4651, 864, 408, 2454, 1037, 4666, 231, 2, 4179, 246, 4392, 4], "code_num": [2], "code": "import pandas as pd\\n#create dataframe\\ndf = pd.DataFrame({\\n'Rank' : [5, 1, 10 ,6, 9],   \\n'Status' : ['Closed', 'Closed', 'Open', 'Closed', 'Open']\\n})\\n\\n# sort and reindex\\ndf = df.sort('Rank').reset_index()\\n\\n#slice to first occurrence of your value\\ndf.loc[: df[(df['Status'] == 'Open')].index[0], :]", "id": "34163431", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4111, 1125, 869, 2947, 540, 2, 169, 711, 4], "code_num": [2], "code": "parser.add_argument('action')", "id": "33111085", "code_sizes": 1}, {"nl_num": [3, 371, 1828, 3897, 1486, 2610, 990, 1708, 2101, 3293, 1828, 3079, 3004, 4], "code_num": [2], "code": "import pandas as pd\\na=pd.read_csv('yourfile.txt',delim_whitespace=True)\\nfor x in a.iterrows():\\n    x[1][4:].plot(label=str(x[1][0])+str(x[1][1])+str(x[1][2])+str(x[1][3]))\\n\\nplt.ylim(-1,10)\\nplt.legend()", "id": "33681911", "code_sizes": 1}, {"nl_num": [3, 3178, 169, 38, 771, 869, 990, 4], "code_num": [2], "code": "f1 = open('fileInput', 'r')\\nf2 = open('fileInput+\".tmp\"', 'w')\\nfor line in f1:\\n    if line[:-1].endswith(\"invalid\"):\\n        f2.write(\"\\t\".join(line.split(\"\\t\")[:2] + [\"reviewed\", \"rd\"]) + \"\\n\")\\n    else:\\n        f2.write(line)\\nf1.close()\\nf2.close()", "id": "11727583", "code_sizes": 1}, {"nl_num": [3, 1926, 4254, 3747, 990, 4], "code_num": [2], "code": "import random\\nno1 =(random.randint(1,20))\\nfunction =(random.choice(\"+-*\"))\\nno2 =(random.randint(1,20))\\nanswer =str(no1) + function + str(no2)\\nprint(str(no1) + function + str(no2) + '=' + str(eval(answer)))", "id": "28816133", "code_sizes": 1}, {"nl_num": [3, 188, 2817, 864, 550, 568, 4747, 4220, 757, 1766, 327, 4], "code_num": [2], "code": "from Tkinter import *\\n\\nclass App(object):\\n\\n    def __init__(self, top):\\n        self.top = top\\n        self.ok_button = Button(self.top, text='OK', command=self.ok)\\n        self.make_entries()\\n\\n    def make_entries(self): \\n        self.entries = []\\n        for d in extra:\\n            e2 = Entry(self.top, bd = 5)\\n            e2.grid(column = 1, row = row)\\n            self.entries.append(e2)\\n            row += 1\\n\\n    def ok(self):\\n        values = [e.get().strip() for e in self.entries]\\n\\nroot = Tk()\\napp = App(root)\\nroot.mainloop()", "id": "25777821", "code_sizes": 1}, {"nl_num": [3, 2480, 2613, 717, 2822, 1857, 1674, 2790, 209, 1828, 3061, 1384, 4], "code_num": [2], "code": "if hasattr(entity, 'list'):\\n    a = entity.list[0] # or whatever operation you want", "id": "11511070", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2990, 4147, 3744, 2, 568, 3376, 2710, 2326, 4], "code_num": [2], "code": "s.decode('unicode_escape')", "id": "6504200", "code_sizes": 1}, {"nl_num": [3, 188, 864, 3167, 2, 1442, 568, 2987, 869, 3293, 3467, 3004, 4], "code_num": [2], "code": "glines = (line.strip() for line in lines)", "id": "10843566", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2878, 619, 1608, 2473, 3008, 540, 655, 3715, 2, 4], "code_num": [2], "code": "from django.db.models import Q\\nexpense.objects.filter(\\n    Q(name__icontains=q) | Q(amount__icontains=q) | Q(category__icontains=q)\\n)", "id": "15045101", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2732, 223, 1709, 2610, 4807, 1563, 2610, 990, 4], "code_num": [2], "code": "EntryResult = dataentry.py.Ui_DataEntry() #considering that the UI class in dataentry.py is Ui_DataEntry", "id": "16030166", "code_sizes": 1}, {"nl_num": [3, 3529, 923, 380, 2610, 990, 4], "code_num": [2], "code": "import numpy as np\\nimport cv2\\n\\ncap = cv2.VideoCapture(0)\\n\\n# Define the codec and create VideoWriter object\\n#fourcc = cv2.cv.CV_FOURCC(*'DIVX')\\n#out = cv2.VideoWriter('output.avi',fourcc, 20.0, (640,480))\\nout = cv2.VideoWriter('output.avi', -1, 20.0, (640,480))\\n\\nwhile(cap.isOpened()):\\n    ret, frame = cap.read()\\n    if ret==True:\\n        frame = cv2.flip(frame,0)\\n\\n        # write the flipped frame\\n        out.write(frame)\\n\\n        cv2.imshow('frame',frame)\\n        if cv2.waitKey(1) & 0xFF == ord('q'):\\n            break\\n    else:\\n        break\\n\\n# Release everything if job is finished\\ncap.release()\\nout.release()\\ncv2.destroyAllWindows()", "id": "29317262", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4314, 4729, 2610, 188, 2238, 3390, 3528, 2326, 4], "code_num": [2], "code": "executemany()", "id": "12027939", "code_sizes": 1}, {"nl_num": [3, 2604, 4190, 4042, 1442, 568, 1519, 1400, 1750, 3467, 2681, 223, 2, 655, 2610, 2255, 2113, 2326, 4], "code_num": [2], "code": "from ckeditor.fields import RichTextField\\nclass Heading(models.Model):\\n    content = models.RichTextField()", "id": "34149541", "code_sizes": 1}, {"nl_num": [3, 2, 3747, 188, 4691, 568, 3222, 2697, 4505, 4], "code_num": [2], "code": "import xlsxwriter\\n\\nworkbook = xlsxwriter.Workbook('chart_line.xlsx')\\nworksheet = workbook.add_worksheet()\\nworksheet1 = workbook.add_worksheet()\\n# Add the worksheet data to be plotted.\\ndata = [10, 40, 50, 20, 10, 50]\\nworksheet1.write_column('A1', data)\\n\\n# Create a new chart object.\\nchart = workbook.add_chart({'type': 'line'})\\n\\n# Add a series to the chart.\\nchart.add_series({'values': '=Sheet2!$A$1:$A$6'})\\n\\n# Insert the chart into the worksheet.\\nworksheet.insert_chart('C1', chart)\\n\\nworkbook.close()", "id": "20488443", "code_sizes": 1}, {"nl_num": [3, 4504, 2610, 4238, 540, 1400, 2943, 3995, 4], "code_num": [2], "code": "from collections import defaultdict\\n\\nmy_dict = defaultdict(int)\\n\\nfor k,v in mylist:\\n    my_dict[k] += v\\n\\nprint(my_dict)   \\n# defaultdict(<class 'int'>, {'USD': 4500, 'THB': 25})", "id": "28846907", "code_sizes": 1}, {"nl_num": [3, 188, 864, 2103, 389, 856, 568, 3361, 1438, 4], "code_num": [2], "code": "from struct import *\\n# Two integers to a floating point\\ni1 = 0xC3F5\\ni2 = 0x4840\\nf = unpack('f',pack('>HH',i1,i2))[0]\\n\\n# Floating point to two integers\\ni1, i2 = unpack('>HH',pack('f',3.14))", "id": "3063078", "code_sizes": 1}, {"nl_num": [3, 3706, 864, 4171, 1624, 3747, 681, 3597, 4], "code_num": [2], "code": "def populate( self, tree ):\\n    tree.setEditTriggers(tree.SelectedClicked)\\n    for i in range(10):\\n        item = QTreeWidgetItem(['Testing %02i' % i])\\n        item.setFlags(item.flags() | item.ItemIsEditable)", "id": "12238299", "code_sizes": 1}, {"nl_num": [3, 2385, 520, 1675, 4139, 769, 4], "code_num": [2], "code": "employee.license_set.all()", "id": "9622047", "code_sizes": 1}, {"nl_num": [3, 69, 568, 1217, 528, 568, 1400, 2111, 1755, 604, 4563, 4102, 2326, 4], "code_num": [2], "code": "enctype=\"multipart/form-data\"", "id": "27019626", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1652, 4691, 3293, 2544, 4], "code_num": [2], "code": "from app.models import *", "id": "22512677", "code_sizes": 1}, {"nl_num": [3, 288, 3995, 223, 1687, 2610, 2385, 4], "code_num": [2], "code": "class EditedAddress(models.Model):\\n    class Meta:\\n        verbose_name = 'Edited Address'\\n        verbose_name_plural = 'Edited Addresses'", "id": "15419617", "code_sizes": 1}, {"nl_num": [3, 2, 2, 2610, 2753, 4], "code_num": [2], "code": "add_route()", "id": "5274813", "code_sizes": 1}, {"nl_num": [3, 2, 2, 568, 1730, 4], "code_num": [2, 2, 2, 2], "code": "def getsanityresults(xmlfile):\\n    testresult=[]\\n    dom = minidom.parse(xmlfile)\\n    data=dom.getElementsByTagName('Sanity_Results')\\n    textnode = data[0].childNodes[0]\\n    testresults=textnode.data\\n    for line in testresults.splitlines():\\n        line = line.strip('\\r,\\n')\\n        line = re.sub(r'(http://[^\\s]+|//[^\\s]+|\\\\\\\\[^\\s]+)', r'<a href=\"\\1\">\\1</a>', line)\\n        testresult.append(line) \\n    return '<br>'.join(testresult)", "id": "13483361", "code_sizes": 4}, {"nl_num": [3, 2365, 223, 2123, 4179, 2639, 2610, 1828, 4640, 4], "code_num": [2], "code": "def score(s, d):\\n    included = [d[word][0] for word in d if word in s]\\n    return sum(included) / float(len(included))", "id": "12993305", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3191, 2101, 640, 3293, 4047, 2011, 2326, 4], "code_num": [2], "code": "import numpy as np\\nimport matplotlib.pyplot as plt\\n\\narray_list = [np.random.random_integers(0, i, (5,5)).astype(bool) for i in range(10)]\\n\\ncount = 0    \\nfig, axes = plt.subplots(nrows=2, ncols=5)\\nfor i in range(2):\\n    for j in range(5):\\n        axes[i, j].imshow(array_list[count], interpolation='nearest')\\n        count += 1\\n        axes[i, j].axis('off')\\nplt.show()", "id": "29397763", "code_sizes": 1}, {"nl_num": [3, 655, 2473, 568, 449, 1863, 552, 1400, 2255, 2113, 4], "code_num": [2], "code": "class Province(models.Model):\\n    numberPlate = models.IntegerField(primary_key=True)\\n    name = models.CharField(max_length=20)\\n    content = models.TextField()\\n    office = models.ManyToManyField(Office)\\n    def __unicode__(self):\\n        return self.name", "id": "1198589", "code_sizes": 1}, {"nl_num": [3, 3148, 864, 69, 568, 933, 2460, 4117, 2610, 1828, 2, 3709, 2326, 4], "code_num": [2], "code": "class PostDialog(QtGui.QDialog):\\n    def __init__(self, parent=None):\\n        QtGui.QDialog.__init__(self, parent)\\n        self.ui = Ui_Dialog() #code from designer!!\\n        self.ui.setupUi(self)\\n\\n        self.ui.plainTextEdit.installEventFilter(self)\\n\\n    def eventFilter(self, event):\\n        if event.type() == QtCore.QEvent.KeyPress:\\n            # do some stuff ...\\n            return True # means stop event propagation\\n        else:\\n            return QtGui.QDialog.eventFilter(self, event)", "id": "6113352", "code_sizes": 1}, {"nl_num": [3, 333, 1535, 483, 1637, 4390, 3249, 177, 339, 540, 1828, 223, 1959, 4], "code_num": [2], "code": "help(sys.stdin)", "id": "27470271", "code_sizes": 1}, {"nl_num": [3, 2103, 2710, 568, 1438, 711, 2, 2617, 1422, 2, 4043, 4], "code_num": [2], "code": "def is_finite(x):\\n    return not math.isnan(x) and not math.isinf(x)\\n\\ndef get_floats(source):\\n    for x in source.split():\\n        try:\\n            yield float(x)\\n        except ValueError:\\n            pass\\n\\ndef get_finite_floats(source):\\n    return (x for x in get_floats(source) if is_finite(x))", "id": "2980883", "code_sizes": 1}, {"nl_num": [3, 2810, 2710, 4684, 2610, 687, 223, 4220, 524, 1297, 524, 4684, 4], "code_num": [2], "code": "from itertools import izip\\n[' '.join(pair) for pair in izip(words[:-1], words[1:])]", "id": "16126122", "code_sizes": 1}, {"nl_num": [3, 69, 568, 38, 535, 2610, 1828, 2710, 990, 2326, 4], "code_num": [2], "code": "import string\\nreplace_punctuation = string.maketrans(string.punctuation, ' '*len(string.punctuation))\\ntext = text.translate(replace_punctuation)", "id": "12437667", "code_sizes": 1}, {"nl_num": [3, 1727, 188, 3758, 568, 4314, 2047, 1422, 3506, 1708, 3506, 177, 94, 4], "code_num": [2], "code": "from flask import Response\\n\\n@app.route(\"/<arg1>\")\\ndef route1(arg1):\\n    dict1 = {\"prop1\": \"p1\", \"prop2\": \"p2\"}\\n    return Response(json.dumps(dict1), mimetype='application/json')", "id": "25666805", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1945, 389, 4238, 3293, 1828, 1170, 711, 1708, 1482, 1594, 2326, 4], "code_num": [2], "code": "def inscription():\\n    list_1 = [150, 250, 190, 230]\\n    list_2 = [110, 200, 125, 130]\\n    return list_1, list_2\\n\\ndef add_lists(first_list, second_list):\\n    #results = sum(first_list+second_list)\\n\\n    results = []\\n    for a, b in zip(first_list, second_list):\\n        results.append(a+b)\\n\\n    return results\\n\\nlisteJudo, listePatinage = inscription()\\n\\nsum_lists = add_lists(listeJudo, listePatinage)", "id": "33974052", "code_sizes": 1}, {"nl_num": [3, 2869, 3055, 1242, 1480, 2610, 3767, 681, 2869, 2238, 2, 2464, 2, 3528, 4], "code_num": [2], "code": "from beeswarm import beeswarm\\nfig = plt.figure(figsize=(5,7))\\nax1 = fig.add_subplot(111)\\n# Here you may want to use ax1.set_ylim(0,11) instead fig.ylim=(0,11)\\nax1.set_ylim(0,11)\\nd2 = np.random.random_integers(10,size=100)\\nbeeswarm(d2,col=\"red\",method=\"swarm\",ax=ax1,ylim=(0,11))\\nboxplot(d2,positions=[0])", "id": "22583483", "code_sizes": 1}, {"nl_num": [3, 645, 864, 696, 4718, 223, 1182, 2238, 3528, 540, 1867, 2845, 550, 568, 86, 28, 4], "code_num": [2], "code": "print (str(num1) + ops + str(num2))", "id": "28431277", "code_sizes": 1}, {"nl_num": [3, 3733, 1605, 4021, 4018, 4179, 2, 2610, 4135, 2326, 4], "code_num": [2], "code": "import re\\n\\nfull_text = my_stc.GetText()\\nsearch_string = 'a string to find'\\n\\nmatches = [i.start() for i in re.finditer(search_string, full_text)]", "id": "4747849", "code_sizes": 1}, {"nl_num": [3, 188, 4238, 2540, 1838, 4], "code_num": [2], "code": "results=[key for key, value in adictionary.items() if str(key).startswith('target') \\n             and value > 0 ]", "id": "5162494", "code_sizes": 1}, {"nl_num": [3, 2, 3747, 1247, 425, 101, 2, 479, 3747, 2237, 177, 336, 2238, 3528, 1712, 2610, 2049, 101, 592, 2238, 1593, 3528, 675, 4], "code_num": [2], "code": "print local_dates.dt.date\\n\\n# 0    2014-04-04\\n# 1    2014-07-18\\n# 2    2015-11-22\\n# dtype: object", "id": "34078316", "code_sizes": 1}, {"nl_num": [3, 3083, 4179, 2206, 4179, 769, 568, 2583, 540, 188, 4], "code_num": [2], "code": "json.dumps([[ob.__dict__ for ob in lst] for lst in list_dep])", "id": "26033908", "code_sizes": 1}, {"nl_num": [3, 990, 284, 1767, 1054, 4], "code_num": [2], "code": "for process in pool:\\n    processId = process.pid\\n    print \"attempting to terminate \"+str(processId)\\n    command = \" ps -o pid,ppid -ax | grep \"+str(processId)+\" | cut -f 1 -d \\\" \\\" | tail -1\"\\n    ps_command = Popen(command, shell=True, stdout=PIPE)\\n    ps_output = ps_command.stdout.read()\\n    retcode = ps_command.wait()\\n    assert retcode == 0, \"ps command returned %d\" % retcode\\n    print \"child process pid: \"+ str(ps_output)\\n    os.kill(int(ps_output), signal.SIGTERM)\\n    os.kill(int(processId), signal.SIGTERM)", "id": "16401031", "code_sizes": 1}, {"nl_num": [3, 69, 568, 1875, 1828, 990, 262, 2377, 3995, 2604, 4526, 4178, 3747, 1400, 3747, 2752, 2326, 4], "code_num": [2], "code": "globals()['yourvariables'] = variable", "id": "10519623", "code_sizes": 1}, {"nl_num": [3, 188, 864, 3943, 4220, 4503, 1651, 3417, 4115, 1101, 169, 3417, 1422, 4115, 1101, 3293, 1828, 41, 3004, 4], "code_num": [2], "code": "writing = False\\nhtml_file = open('my_file.html', 'a')\\nwith open(origpath) as f:    \\n    for line in f:\\n        # find start indicator\\n        if line == start:\\n            writing = True\\n        if writing:\\n            html_file.write(line + '\\n')\\n        # yield lines until stop indicator found\\n        if line == stop:\\n            writing = False\\n\\nhtml_file.close()", "id": "27005805", "code_sizes": 1}, {"nl_num": [3, 2149, 655, 1675, 568, 1828, 1411, 4219, 3995, 4], "code_num": [2], "code": "def material_path(instance, filename):\\n    return 'documents/%d' % instance.id_presentations.id\\n\\nclass Materials(models.Model):\\n    id_presentations = models.ForeignKey(Presentations)\\n    document = models.FileField(upload_to=material_path)\\n    docname = models.CharField(max_length=40)", "id": "1290202", "code_sizes": 1}, {"nl_num": [3, 1158, 2841, 286, 4179, 4347, 353, 3803, 4347, 540, 1828, 3316, 4347, 353, 3803, 4347, 2610, 990, 4], "code_num": [2], "code": "import re\\ntxt = re.sub('\\n+','\\n',txt)", "id": "26618832", "code_sizes": 1}, {"nl_num": [3, 2, 1828, 4640, 250, 1828, 4238, 4179, 2315, 1297, 2252, 4], "code_num": [2], "code": "first_with_id_or_none = \\\\n    next((value for value in dictionary['items'] if value['id'] == 1), None)", "id": "17346434", "code_sizes": 1}, {"nl_num": [3, 188, 1723, 4179, 2207, 1007, 451, 2, 568, 1712, 3151, 899, 2326, 4], "code_num": [2], "code": "to_html()", "id": "16362436", "code_sizes": 1}, {"nl_num": [3, 892, 3055, 2206, 4179, 2206, 3747, 188, 4], "code_num": [2], "code": "dict_a = dict(list_a)\\ndict_x = dict(list_x)\\n\\nshared_keys = set(dict_a).intersection(set(dict_x))\\n\\nresult = dict((k, (dict_a[k], dict_x[k])) for k in shared_keys)", "id": "803526", "code_sizes": 1}, {"nl_num": [3, 3704, 4016, 390, 540, 533, 327, 568, 188, 4778, 4691, 4], "code_num": [2], "code": "PyModule_AddIntMacro(m, SYM);", "id": "23788140", "code_sizes": 1}, {"nl_num": [3, 40, 1838, 115, 2610, 1501, 4], "code_num": [2], "code": "from PyQt4 import QtGui\\nimport sys\\n\\nclass SubWindow(QtGui.QDialog):\\n    def __init__(self):\\n        super(SubWindow , self).__init__()     \\n        label = QtGui.QLabel(\"Hey, subwindow here!\",self);\\n\\nclass MainWindow(QtGui.QMainWindow):\\n    def __init__(self):\\n        super(MainWindow , self).__init__()     \\n        self.window()\\n\\n    def window(self):\\n        Action = QtGui.QAction(QtGui.QIcon('action.png') , 'action' , self)          \\n        Action.triggered.connect(self.a)\\n\\n        mb = self.menuBar()\\n        option = mb.addMenu('File')\\n        option.addAction(Action)\\n\\n        self.show()\\n\\n    def a(self):\\n\\n        s = SubWindow()\\n        s.exec_()\\n\\nif __name__ == '__main__':\\n    app = QtGui.QApplication(sys.argv)\\n    mw = MainWindow()\\n    sys.exit(app.exec_())", "id": "13309255", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2103, 2938, 4238, 853, 1828, 4238, 4179, 1182, 2610, 990, 4], "code_num": [2], "code": "import ast\\nprint ast.literal_eval([y for x in list_ for y in x][0])", "id": "21944588", "code_sizes": 1}, {"nl_num": [3, 2689, 338, 853, 1125, 540, 2711, 177, 2100, 4], "code_num": [2], "code": "#!/usr/bin/env python2\\nimport fileinput\\nimport subprocess\\n\\nprocess = subprocess.Popen(['sort'], stdin=subprocess.PIPE)\\nwith process.stdin as pipe, fileinput.FileInput() as file:\\n    for line in file:\\n        if file.isfirstline(): # print header\\n            print line,\\n        else: # pipe tails\\n            pipe.write(line)\\nprocess.wait()", "id": "32662375", "code_sizes": 1}, {"nl_num": [3, 2385, 2464, 69, 568, 750, 726, 338, 2610, 1400, 2255, 762, 4], "code_num": [2], "code": "from django.contrib.sessions.models import Session\\nclass SessionAdmin(ModelAdmin):\\n    def _session_data(self, obj):\\n        return obj.get_decoded()\\n    list_display = ['session_key', '_session_data', 'expire_date']\\nadmin.site.register(Session, SessionAdmin)", "id": "4976015", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 2405, 2406, 869, 853, 3004, 552, 4739, 3437, 4], "code_num": [2], "code": "start = 1\\nlines = ['Step' + str(start) + ':\\n']\\nwith open('file.txt','r') as inF:\\n    prevspace = -1\\n    for line in inF:\\n        lspaces = len(line) - len(line.lstrip())\\n        if lspaces > prevspace and prevspace != -1:\\n            lines.append('Step' + str(start+1) + ':\\n')\\n            start = start + 1\\n            lines.append(line)\\n            prevspace = lspaces\\n        else:\\n            lines.append(line)\\n            prevspace = lspaces\\n    ifF.close()\\n\\nwith open('newfile.txt','w') as outF:\\n    for line in lines:\\n        outF.write(line)\\n    outF.flush()\\n    outF.close()", "id": "30889068", "code_sizes": 1}, {"nl_num": [3, 4133, 4190, 1828, 1442, 568, 3366, 2765, 4529, 2610, 990, 2, 3524, 2326, 4], "code_num": [2], "code": "import statsmodels.api as sm\\nlogmodel=sm.GLM(trainingdata[['Successes', 'Failures']], trainingdata[['const', 'A', 'B', 'C', 'D']], family=sm.families.Binomial(sm.families.links.logit)).fit()", "id": "23339416", "code_sizes": 1}, {"nl_num": [3, 1810, 1828, 2, 841, 2610, 2, 2326, 4], "code_num": [2], "code": "mdb.models[name].SubstructureGenerateStep(modeRange=((1, 60, 1), ), name=\\n    name, previous=previousName, retainedEigenmodesMethod=MODE_RANGE, \\n    substructureIdentifier=1)", "id": "31316237", "code_sizes": 1}, {"nl_num": [3, 4133, 4190, 1828, 3214, 568, 1708, 382, 2, 2326, 4], "code_num": [2], "code": "first_items = itertools.imap(lambda x: x[0], list_of_tuples)\\nrepeated_tuple = itertools.repeat(some_tuple, len(list_of_tuples))\\nitems = itertools.izip(repeated_tuple, first_items)\\nresult = itertools.starmap(lambda x,y: x + (y,), items)", "id": "26965747", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4570, 4554, 2, 568, 3013, 2678, 4], "code_num": [2], "code": "android___id_list.uiScrollable.flingToEnd()", "id": "29882854", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4187, 2963, 2760, 3680, 2536, 2610, 2964, 1977, 500, 4019, 3416, 169, 3960, 1708, 990, 4], "code_num": [2], "code": "def find_adjacent_coords(db, lat, lon, step=0.041667):\\n    \"\"\"Find coords that are in a +/- step range of lat, lon.\"\"\"\\n    #XXX disregard values near +/- 90 latitude, +/- 180 longitude\\n    coords_range = lat-step, lat+step, lon-step, lon+step\\n    return db.execute(\"\"\"select lat, lon from coords where \\nlat > ? and lat < ? and\\nlon > ? and lon < ?\"\"\", coords_range).fetchall()", "id": "7784216", "code_sizes": 1}, {"nl_num": [3, 2184, 1828, 3466, 1021, 540, 2611, 2610, 2817, 4], "code_num": [2], "code": "class Annotate(object):\\n    def __init__(self):\\n        print \"Annotate is runing\"\\n        # rest of your code\\n\\nroot = Tk()\\nmy_object = Annotate()\\n\\nroot.mainloop()", "id": "24743407", "code_sizes": 1}, {"nl_num": [3, 3222, 1428, 540, 1959, 4], "code_num": [2], "code": "fget = lambda x, f=func: f(x.z)", "id": "9551082", "code_sizes": 1}, {"nl_num": [3, 2, 4047, 2423, 4179, 3606, 1480, 2610, 2101, 4], "code_num": [2], "code": "# original part (left)\\nimport numpy as np\\nimport matplotlib.pyplot as plt\\nf,ax = plt.subplots(1,2) \\nax[0].set_aspect('equal')\\ndata=np.abs(np.random.randn(7))\\nwedges, texts = ax[0].pie(data)\\n\\n# redraw plot using patches (right)\\nimport matplotlib.patches as mpatches\\nfrom matplotlib.collections import PatchCollection\\nax[1].set_aspect('equal')\\nax[1].axis('off')\\n\\ngroups=[[0,1,2],[3,4],[5,6]]\\nradfraction = 0.1\\npatches = []\\nfor i in groups:\\n  ang = np.deg2rad((wedges[i[-1]].theta2 + wedges[i[0]].theta1)/2,)\\n  for j in i:\\n    we = wedges[j]\\n    center = (radfraction*we.r*np.cos(ang), radfraction*we.r*np.sin(ang))\\n    patches.append(mpatches.Wedge(center, we.r, we.theta1, we.theta2))\\n\\ncolors = np.linspace(0, 1, len(patches))\\ncollection = PatchCollection(patches, cmap=plt.cm.hsv)\\ncollection.set_array(np.array(colors))\\nax[1].add_collection(collection)\\nax[1].autoscale(True)", "id": "20549016", "code_sizes": 1}, {"nl_num": [3, 2809, 2, 540, 575, 4], "code_num": [2], "code": "class EmployeeDeleteView(DeleteView):\\n    success_url = reverse_lazy('index')\\n\\n    def delete(self, request, *args, **kwargs):\\n        self.object = self.get_object()\\n        can_delete = self.object.can_delete()\\n\\n        if can_delete:\\n            return super(EmployeeDeleteView, self).delete(\\n                request, *args, **kwargs)\\n        else:\\n            raise Http404(\"Object you are looking for doesn't exist\")", "id": "32056582", "code_sizes": 1}, {"nl_num": [3, 3427, 4633, 1828, 547, 590, 4179, 1828, 3004, 4], "code_num": [2], "code": "def search_entries():\\n    found = 0\\n    search = raw_input(\"Please enter the person's name: \")\\n    for line in open('addbook.txt', 'r').readlines():\\n        if search in line:\\n            found = 1\\n        if found >= 1:\\n            print line\\n            found = found + 1\\n            if found == 4: break", "id": "13551004", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 3191, 943, 1490, 2610, 3674, 1712, 3004, 2610, 188, 2326, 4], "code_num": [2], "code": "#!/usr/local/cpython-3.3/bin/python\\n\\nwith open('/etc/crontab', 'r') as infile, open('output.txt', 'w') as outfile:\\n    seen = set()\\n    for line in infile:\\n        for word in line.split():\\n            if word not in seen:\\n                seen.add(word)\\n                outfile.write('{}\\n'.format(word))", "id": "19759918", "code_sizes": 1}, {"nl_num": [3, 23, 1550, 1170, 568, 3178, 694, 4179, 1394, 378, 4], "code_num": [2], "code": "def _find_path(self, point_a, end_point, current_stops, routes, maxstops):\\n        current_stops += 1\\n\\n        if current_stops > maxstops:\\n            return routes\\n\\n        if end_point in self.digraph[point_a]:\\n            return 1\\n        else:\\n            for x in self.digraph[point_a]:\\n                routes += self._find_path(x, end_point, current_stops, routes, maxstops)\\n\\n        return routes", "id": "29786125", "code_sizes": 1}, {"nl_num": [3, 1772, 2951, 4047, 4379, 4], "code_num": [2], "code": "import pyglet\\n\\nclass Test(object):\\n    def setUp(self):\\n        self.window = pyglet.window.Window()\\n\\n    def tearDown(self):\\n        self.window.close()\\n        del self.window\\n\\n    def wtf(self):\\n        self.setUp()\\n        self.tearDown()\\n        self.setUp()\\n        pyglet.app.run()\\n\\ntest = Test()\\ntest.wtf()", "id": "28745427", "code_sizes": 1}, {"nl_num": [3, 550, 568, 976, 4505, 2237, 4178, 4649, 3372, 568, 3843, 2804, 2610, 990, 2326, 4], "code_num": [2], "code": "srcDir = '/user/local'\\ntargetDir = '/user/data'\\nfor fname in os.listdir(srcDir):\\n    if not os.path.isdir(os.path.join(srcDir, fname)):\\n        for prefix in ['jenjar.dat', 'jenmis.dat']:\\n            if fname.startswith(prefix):\\n                if not os.path.isdir(os.path.join(targetDir, prefix)):\\n                    os.mkdir(os.path.join(targetDir, prefix))\\n                shutil.move(os.path.join(srcDir, fnmae), targetDir)", "id": "12890812", "code_sizes": 1}, {"nl_num": [3, 4624, 1637, 1545, 3266, 568, 3004, 4], "code_num": [2], "code": "f = open(filename, \"a\")", "id": "16759873", "code_sizes": 1}, {"nl_num": [3, 2785, 2, 1828, 3746, 746, 169, 1279, 1741, 3239, 3293, 1400, 2, 3746, 4238, 4], "code_num": [2], "code": "listpack_list = ([\"data\", \"data\", \"data\"], [\"test\", \"test\", \"test\"], [\"sof\", \"sof\", \"sof\"])\\nimport random\\nrem = random.randrange(3)\\nvarToBePrinted, Main1, Main2 = listpack_list[rem]\\nlistpack_list = tuple(item for index, item in enumerate(listpack_list) if index != rem)\\nprint varToBePrinted", "id": "20696487", "code_sizes": 1}, {"nl_num": [3, 545, 4220, 4347, 2, 2, 4347, 2, 1605, 2244, 1828, 547, 1250, 177, 2769, 540, 4245, 4656, 4], "code_num": [2], "code": "first_50 = app.questionSearch({'query':'tornado', 'start' : 0, 'results' : 50})\\nnext_50 = app.questionSearch({'query':'tornado', 'start' : 50, 'results' : 50})", "id": "15278428", "code_sizes": 1}, {"nl_num": [3, 2402, 1442, 568, 2776, 746, 4179, 1773, 568, 2013, 4], "code_num": [2], "code": "g_proptypes = dict((string, i) for i, string in enumerate(string_list))", "id": "5243537", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2878, 2714, 3995, 2610, 2049, 2113, 177, 592, 1170, 4], "code_num": [2], "code": "mypanel = pd.Panel(np.random.randn(2, 5, 4), items=['Item1', 'Item2'],\\n                  major_axis=pd.date_range('1/1/2000', periods=5),\\n                  minor_axis=['A', 'B', 'C', 'D'])\\n\\ndef func1(k, x):\\n    print(k)\\n    return x.apply(np.log)\\n\\nmypanel.apply(lambda x: func1('the wrong name', x))  # 1000 loops, best of 3: 1.01 ms per loop\\npd.Panel({k: func1(k, v) for k, v in mypanel.iteritems()})  # 1000 loops, best of 3: 800 ??s per loop", "id": "34136755", "code_sizes": 1}, {"nl_num": [3, 4196, 3886, 2209, 2317, 4714, 540, 2, 3293, 338, 3159, 3293, 3565, 1556, 4], "code_num": [2], "code": "min_bid_off     = float(sheet.cell(row_index,2).value)", "id": "19496963", "code_sizes": 1}, {"nl_num": [3, 3427, 4633, 1400, 927, 4179, 1828, 2776, 1170, 4], "code_num": [2], "code": "for i,s in map(lambda n: (n,(n*(n+1))/2), range(1,101)):\\n    print \"sum of the first %d integers: %d\" % (i,s)", "id": "20694338", "code_sizes": 1}, {"nl_num": [3, 2, 568, 1432, 540, 2571, 4], "code_num": [2], "code": "from PIL import Image\\nimport cStringIO\\n\\ndef ThumbFromBuffer(buf,size):\\n    im = Image.open(cStringIO.StringIO(buf))\\n    im.thumbnail(size, Image.ANTIALIAS)\\n    return im", "id": "22879991", "code_sizes": 1}, {"nl_num": [3, 125, 371, 2610, 990, 4], "code_num": [2], "code": "import matplotlib.pyplot as plt\\n\\nx = [1,2,3,4,5]\\ny = [10,40,30,10,3]\\n\\nplt.bar(x,y)\\n\\nplt.show()", "id": "33021809", "code_sizes": 1}, {"nl_num": [3, 188, 3733, 1400, 3843, 1250, 4767, 3293, 1400, 2, 4767, 169, 1626, 2605, 4], "code_num": [2, 2], "code": "import re\\nre.sub(r'((?:He|well.*?made|Italian.*?American).*?)(\\s)', r'[\\1]\\2', string)", "id": "29162456", "code_sizes": 2}, {"nl_num": [3, 2, 2019, 2049, 3252, 4], "code_num": [2], "code": "data = data.groupby(['type', 'name']).agg({'min':np.min, 'max':np.max, 'calculation': calculation})", "id": "30513632", "code_sizes": 1}, {"nl_num": [3, 4402, 1589, 338, 3293, 2206, 4], "code_num": [2], "code": "for i in range(0,100):\\n    n.append(i)\\n    if len(n)>10: n[:] = n[1:]\\n    print len(n) # will never go above 10", "id": "12846492", "code_sizes": 1}, {"nl_num": [3, 554, 4652, 1712, 3293, 990, 869, 3747, 1297, 3747, 869, 4], "code_num": [2], "code": "import subprocess\\ncmd = [\"ls\", \"-la\"]\\nproc = subprocess.Popen(cmd, stdout=subprocess.PIPE)\\nfor line in proc.stdout.readlines():\\n    print line", "id": "28993712", "code_sizes": 1}, {"nl_num": [3, 2385, 3332, 864, 3755, 568, 1176, 1828, 746, 2610, 2725, 4], "code_num": [2], "code": "count = models.StorageItem.objects.filter(client=client_id, itemstatushistory__isnull=False).count()", "id": "5539801", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1545, 1828, 4347, 4572, 4347, 2610, 2087, 3467, 2610, 836, 4], "code_num": [2], "code": "import wx\\n\\nclass MainWindow(wx.Frame):\\n  def __init__(self,parent,title):\\n    wx.Frame.__init__(self,parent,title=title,size=(200,-1))\\n    self.sizer = wx.BoxSizer(wx.HORIZONTAL)\\n    self.buttons = [\\n      wx.Button(self,-1,\"Button &One\"),\\n      wx.Button(self,-1,\"Button &&Two\"),\\n    ]\\n    for btn in self.buttons:\\n      self.sizer.Add(btn,1,wx.EXPAND)\\n    self.SetSizer(self.sizer)\\n    self.SetAutoLayout(1)\\n    self.sizer.Fit(self)\\n    self.Show()\\n\\napp = wx.App(False)\\nframe = MainWindow(None,\"Hello Ampersand\")\\napp.MainLoop()", "id": "4667881", "code_sizes": 1}, {"nl_num": [3, 990, 1704, 2238, 2963, 3528, 3028, 1828, 2710, 4179, 1022, 3971, 1569, 2963, 4], "code_num": [2], "code": "array.fromfile()", "id": "6297380", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2103, 2, 568, 2, 2610, 3148, 4], "code_num": [2], "code": "from PyQt4 import QtGui, QtCore\\npoint = QtCore.QPointF(100.2, 144.23)\\nQtGui.QCursor.pos(), QtGui.QCursor.setPos(point.toPoint()), QtGui.QCursor.pos()\\n# (PyQt4.QtCore.QPoint(1335, 691), None, PyQt4.QtCore.QPoint(100, 144))", "id": "16138040", "code_sizes": 1}, {"nl_num": [3, 188, 864, 2495, 1828, 4238, 4179, 2206, 4], "code_num": [2], "code": "for l in x:\\n    print ', '.join(map(str, l))", "id": "3224295", "code_sizes": 1}, {"nl_num": [3, 2880, 2, 1122, 540, 990, 4], "code_num": [2], "code": "import win32com.shell.shell as win32shell   \\n\\ndef disable_UAC():\\n    command1 = 'reg delete HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v EnableLUA'\\n    win32shell.ShellExecuteEx(lpVerb='runas', lpFile='cmd.exe', lpParameters='/c ' + command1)\\n    command2 = 'reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v EnableLUA /t REG_DWORD /d 0 /f'\\n    win32shell.ShellExecuteEx(lpVerb='runas', lpFile='cmd.exe', lpParameters='/c ' + command2)", "id": "27586052", "code_sizes": 1}, {"nl_num": [3, 3527, 4220, 327, 3886, 1828, 575, 3518, 2604, 1185, 4], "code_num": [2], "code": "query = 'SELECT * FROM table1 WHERE id = COALESCE(%s,id)'", "id": "18705207", "code_sizes": 1}, {"nl_num": [3, 3990, 1828, 990, 2517, 551, 549, 4358, 2610, 651, 4], "code_num": [2], "code": "parser = argparse.ArgumentParser()\\n\\ngroup = parser.add_mutually_exclusive_group()\\ngroup.add_argument(\"--export\", help=\"Export source(s)\", action=\"store_true\")\\ngroup.add_argument(\"--import\", dest=\"imp\", help=\"Import source(s)\", action=\"store_true\")\\ngroup.add_argument(\"--diff\", help=\"Diff sources\", action=\"store_true\")\\n\\nparser.add_argument(\"filename\", help=\"XML Filename used for exporting to, importing from or comparing while doing diff.\")\\n\\nargs = parser.parse_args()\\n\\nif args.export:\\n    export_sources(args.filename)\\nelif args.imp:\\n    import_sources(args.filename)\\nelif args.diff:\\n    diff_sources(args.filename)", "id": "15714597", "code_sizes": 1}, {"nl_num": [3, 2583, 2677, 2610, 990, 4025, 28, 4], "code_num": [2], "code": "json.load()", "id": "21823368", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 28, 2, 2, 3719, 2610, 4570, 2464, 69, 568, 2616, 2605, 4198, 2326, 2, 1605, 4178, 4146, 169, 2, 3189, 2605, 1151, 1569, 156, 2326, 4], "code_num": [2], "code": "s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\\ns.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\\ns.bind((HOST, PORT))", "id": "18676559", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 2878, 1400, 3894, 1598, 540, 2571, 2326, 4], "code_num": [2], "code": "(width, height) = im.size", "id": "6444548", "code_sizes": 1}, {"nl_num": [3, 69, 568, 4390, 1312, 1170, 3886, 2674, 1282, 2610, 1822, 4], "code_num": [2], "code": "hitApples = pygame.sprite.spritecollide(snake, apple_list, True)\\nif hitApples:\\n    callback()", "id": "6326133", "code_sizes": 1}, {"nl_num": [3, 188, 1545, 568, 3004, 2237, 4178, 2327, 4], "code_num": [2], "code": "_buffData[t_offset:t_offset + len(t_data)] = bytearray(t_data)", "id": "8478524", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4536, 4220, 2536, 853, 28, 3747, 1130, 2, 2825, 540, 4317, 177, 2, 177, 2, 2326, 4], "code_num": [2], "code": "points -= points.mean(axis=0)\\ntri = Delaunay(points)", "id": "30868399", "code_sizes": 1}, {"nl_num": [3, 4705, 1227, 4110, 2610, 990, 864, 550, 568, 3981, 2878, 549, 1039, 4115, 2326, 4], "code_num": [2], "code": "driver.execute_script(\"for(var i = 0; i < document.links.length; i++){document.links[i].onclick = function clicked(){var e = document.createElement('a'); e.setAttribute('id','myUniqueID'); e.setAttribute('value', this); document.getElementsByTagName('body')[0].appendChild(e);};}\")\\n\\nclicked = driver.find_element_by_id('myUniqueID').get_attribute('value')", "id": "21295335", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4575, 2610, 1828, 655, 4686, 2326, 4], "code_num": [2], "code": "from django.db.models import Count\\n\\n#group by portfolios count\\nUser.objects.annotate(portfolios=Count('portfolio')).order_by('portfolios')\\n#group by projects count\\nUser.objects.annotate(projects=Count('portfolio__project')).order_by('projects')", "id": "21165318", "code_sizes": 1}, {"nl_num": [3, 3397, 1828, 1821, 1007, 451, 1750, 4387, 1598, 2610, 4135, 4], "code_num": [2], "code": "self.defaultstyle = wx.richtext.RichTextAttr()\\nself.GetStyle(self.GetInsertionPoint(), self.defaultstyle)\\nself.defaultsize = self.defaultstyle.GetFont().GetPointSize()", "id": "2751943", "code_sizes": 1}, {"nl_num": [3, 990, 3747, 1176, 4505, 2238, 1535, 1007, 1711, 1176, 327, 2610, 1828, 4640, 3528, 4], "code_num": [2], "code": "for ext in extension_list:\\n    mydict[ext] += 1", "id": "7715909", "code_sizes": 1}, {"nl_num": [3, 550, 568, 53, 616, 740, 551, 3316, 4465, 1708, 763, 2610, 188, 4], "code_num": [2], "code": "def unpack48(x):\\n    x1, x2, x3 = struct.unpack('<HHI', x)\\n    return x1, x2 | (x3 << 16)", "id": "7949912", "code_sizes": 1}, {"nl_num": [3, 550, 449, 2023, 2, 4403, 2, 2610, 1828, 188, 3119, 3138, 2326, 4], "code_num": [33], "code": "sys.stdout", "id": "10372355", "code_sizes": 1}, {"nl_num": [3, 990, 2464, 69, 568, 1945, 262, 3518, 3293, 2728, 3087, 2326, 4], "code_num": [2], "code": "import re\\nimport urllib\\nstream=urllib.urlopen(\"http://....\")\\nresult=re.search('<dcdIntegerValue>(\\d*)</dcdIntegerValue>',stream.read(),re.IGNORECASE)\\nif result:\\n     value=result.group(1)", "id": "21410825", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3366, 3215, 167, 2319, 2610, 2385, 2326, 4], "code_num": [2], "code": "from django.shortcuts import redirect\\n\\ndef login(request):\\n    if request.method == 'POST':\\n        return redirect('all_members')\\n    else:\\n        context = RequestContext(request)\\n        return render_to_response(\"templates/login.html\", context)", "id": "28647093", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3119, 547, 3407, 169, 547, 4311, 4179, 869, 2610, 1828, 3467, 3004, 4], "code_num": [2], "code": "import re\\n\\ns = '''   <DT><A HREF=\"http://gmazars.info/conf/index.html\" \\n            <DT><A HREF=\"http://research.google.com/\" \\n            <DT><A HREF=\"http://research.microsoft.com/en-us/\" \\n            <DT><A HREF=\"http://techresearch.intel.com/articles/index.html\" \\n'''\\n\\nprint re.findall(\"HREF=\\\"(.*?)\\\"\", s)", "id": "6551025", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 4032, 1828, 3004, 568, 1828, 3012, 2969, 2610, 990, 1708, 2, 4182, 4065, 2326, 4], "code_num": [2], "code": "import os\\nos.system(\"scp FILE USER@SERVER:PATH\")\\n#e.g. os.system(\"scp foo.bar joe@srvr.net:/path/to/foo.bar\")", "id": "68335", "code_sizes": 1}, {"nl_num": [3, 3990, 1482, 1594, 2610, 990, 4], "code_num": [2], "code": "def noofways(firstnumchosen, sum, numofnum):\\n    global count\\n    # don't set count to 0 here\\n    if sum<0:\\n        return \\n    if sum==0 and not(numofnum==0):\\n        return\\n    if sum==0 and numofnum==0:\\n       count+=1\\n       return\\n    if numofnum<=0:\\n       return\\n    if firstnumchosen>sum:\\n       return\\n    noofways(firstnumchosen+1,sum,numofnum)\\n    noofways(firstnumchosen+1,sum-firstnumchosen,numofnum-1)\\n\\n# set count to 0 here\\ncount = 0\\nres=noofways(1,8,3);\\nprint count", "id": "12967645", "code_sizes": 1}, {"nl_num": [3, 188, 1401, 2464, 69, 568, 403, 1915, 568, 1312, 2319, 4], "code_num": [2], "code": "import urllib\\n\\nclass AHandler(webapp2.RequestHandler):\\n  def get(self):\\n    name = 'Some name'\\n    redirect('b?%s' % urllib.urlencode({'name': name}))\\n\\nclass BHandler(webapp2.RequestHandler):\\n  def get(self):\\n    name = self.request.get('name')\\n    # do something with name", "id": "11316983", "code_sizes": 1}, {"nl_num": [3, 550, 1151, 949, 3316, 869, 223, 1959, 1251, 2610, 188, 2326, 3932, 4238, 3794, 1623, 4], "code_num": [2], "code": "names  = []\\n\\nfor row in cursor.fetchall():\\n    names.append(row[0])", "id": "15829509", "code_sizes": 1}, {"nl_num": [3, 3704, 889, 568, 1828, 746, 2464, 2, 889, 568, 4220, 1400, 3132, 4179, 1400, 841, 3813, 949, 746, 4], "code_num": [2], "code": "class Player:\\n    def __init__(self, name):\\n        self.name = name \\n        self.cardsInHand = set()\\n        self.hasBid = False", "id": "5694022", "code_sizes": 1}, {"nl_num": [3, 990, 3068, 169, 38, 1773, 2610, 41, 3004, 540, 195, 4], "code_num": [2], "code": "import os\\n\\nwith open(\"data.txt\") as infile:\\n    for line in infile:\\n        line = line.strip()\\n        if os.path.isfile(os.path.join(\"sounds\", line)):\\n            os.rename(os.path.join(\"sounds\", line), os.path.join(\"sounds\", os.path.splitext(line)[0] + '.wav'))", "id": "29910845", "code_sizes": 1}, {"nl_num": [3, 4486, 568, 2616, 1828, 188, 2047, 383, 1828, 343, 4], "code_num": [2], "code": "webbrowser.open('http://www.google.com/')", "id": "6699201", "code_sizes": 1}, {"nl_num": [3, 4298, 122, 2610, 2940, 4457, 3747, 188, 1422, 2822, 1857, 4], "code_num": [2], "code": "import db\\n\\ndb_handler = db.DbHandler()", "id": "15579430", "code_sizes": 1}, {"nl_num": [3, 2, 2587, 4018, 223, 1959, 4], "code_num": [2], "code": "import numpy as np\\n\\ndef foo(a, b):\\n    # cond is a boolean array marking where the condition is met\\n    cond = a[1:] < a[:-1]\\n    cond = np.insert(cond, 0, False)\\n    # values is an array of the items in from a that will be used to fill b\\n    values = a[cond]\\n    values = np.insert(values, 0, b[0])\\n    # labels is an array of increasing indices into values\\n    label = cond.cumsum()\\n    b[:] = values[label]", "id": "13938235", "code_sizes": 1}, {"nl_num": [3, 188, 3701, 4691, 2604, 1405, 1527, 4498, 568, 1828, 4714, 4769, 4], "code_num": [2], "code": "for rec in db:\\n    if not rec.deleted:\\n        row_tuple = (rec[\"name\"], rec[\"address\"], rec[\"age\"])\\n        rows_list.append(row_tuple)", "id": "13395783", "code_sizes": 1}, {"nl_num": [3, 1132, 4220, 879, 2, 540, 2497, 2658, 2610, 188, 4], "code_num": [2], "code": "logging.Logger.manager.loggerDict", "id": "12508796", "code_sizes": 1}, {"nl_num": [3, 474, 2508, 568, 1712, 1828, 2710, 4], "code_num": [2], "code": "file=open(\"file1.txt\",\"r\")\\ntext=\"target\"\\ncount=0\\nfor line in file:\\n    count += 1\\n    if text in line:\\n        print (count, line)", "id": "20313604", "code_sizes": 1}, {"nl_num": [3, 2701, 784, 2610, 188, 4], "code_num": [2], "code": "random.seed(i)", "id": "3717354", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3222, 1470, 1977, 540, 3758, 3747, 4237, 4], "code_num": [2], "code": "app = Flask(__name__)\\napp.config.from_pyfile('base')\\napp.config.from_envvar('YOURAPPLICATION_SETTINGS')", "id": "27998331", "code_sizes": 1}, {"nl_num": [3, 3748, 1828, 265, 3747, 1637, 2710, 337, 551, 4347, 616, 864, 2, 4347, 568, 1828, 425, 841, 2326, 4], "code_num": [2], "code": "import datetime as dt\\n\\nnow = dt.datetime.now()\\nthen = dt.datetime.combine(now, dt.datetime.strptime(\"6:02PM\", \"%I:%M%p\").time())\\nprint(then)\\n# 2012-08-26 18:02:00\\n\\ntdelta = now - then\\nprint(tdelta)\\n# -1 day, 20:53:25.190721", "id": "12132908", "code_sizes": 1}, {"nl_num": [3, 1727, 4561, 2, 4179, 2571, 1432, 4593, 3105, 4], "code_num": [2], "code": "s = StringIO.StringIO()\\nwindow.save(s, \"jpg\")\\nencodedWindow = base64.b64encode(s.getvalue())", "id": "27652121", "code_sizes": 1}, {"nl_num": [3, 1727, 2778, 3518, 3293, 1828, 4238, 540, 2206, 2326, 4], "code_num": [2], "code": "def max_value(inputlist):\\n    return max([sublist[-1] for sublist in inputlist])\\n\\nprint max_value(resultlist)\\n# 9.1931", "id": "33269530", "code_sizes": 1}, {"nl_num": [3, 4328, 2, 3004, 2610, 990, 4], "code_num": [2], "code": "entire_file = open('hello.txt', 'rb').read()\\n\\nprint 'number of \\\\n: %d, number of bytes %d' % (\\n    entire_file.count('\\n'), len(entire_file))", "id": "2124238", "code_sizes": 1}, {"nl_num": [3, 906, 2798, 1708, 990, 4], "code_num": [2], "code": "import smtplib\\nfrom email.mime.multipart import MIMEMultipart\\nfrom email.mime.text import MIMEText\\n\\nfromaddr = 'demo@gmail.com'\\ntoaddrs = 'demotest@gmail.com'\\n\\nmsg = MIMEMultipart('alternative')\\nmsg['Subject'] = \"Link\"\\nmsg['From'] = \"good morning\" #like name\\nmsg['To'] = \"GGGGGG\"\\n\\nbody = MIMEText(\"example email body\")\\nmsg.attach(body)\\n\\nusername = 'demo@gmail.com'\\npassword = ''\\nserver = smtplib.SMTP_SSL('smtp.googlemail.com', 465)\\nserver.login(username, password)\\nserver.sendmail(fromaddr, toaddrs, msg.as_string())\\nserver.quit()", "id": "33564793", "code_sizes": 1}, {"nl_num": [3, 990, 864, 3222, 3744, 2710, 4179, 1594, 4], "code_num": [2, 2, 2], "code": "key_word = ['width', 'height', 'left', 'right']\\nregex_template = r'{}\\s*:\\s*\\d+'\\nfor key in key_word:\\n    print re.search(regex_template.format(key), line)", "id": "15688744", "code_sizes": 3}, {"nl_num": [3, 3397, 3674, 4121, 1708, 990, 4], "code_num": [2], "code": "ip = r.text.strip()", "id": "14916859", "code_sizes": 1}, {"nl_num": [3, 872, 3005, 1828, 1867, 3867, 2610, 188, 4], "code_num": [2], "code": "def make_scrapy_command_class(base_class):\\n    class ScrapyCommand(base_class):\\n        # your methods here\\n        pass\\n\\n    return ScrapyCommand\\n\\nScrapyCommand = make_command_class(someotherapp.crawl.OtherCommand)", "id": "13054646", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2878, 1400, 2481, 4179, 2, 4179, 389, 3852, 2610, 188, 2326, 4], "code_num": [2], "code": "def mean_forecast_err(y, y_predict):\\n   return y.sub(y_predict).mean()\\n\\n# other preparation before ...\\ny = df['sensor_19']\\narma_mod12 = sm.tsa.ARMA(y, (1, 2)).fit()\\ny_predict12 = arma_mod12.predict()\\nprint \"ARMA(1, 2): err_mean=\" + str(mean_forecast_err(y, y_predict12))", "id": "33912097", "code_sizes": 1}, {"nl_num": [3, 1535, 1569, 1704, 1427, 338, 2610, 4563, 4102, 4], "code_num": [2], "code": "request.get()", "id": "16626545", "code_sizes": 1}, {"nl_num": [3, 1372, 1037, 4179, 4023, 3293, 1828, 3433, 3747, 681, 1833, 3990, 188, 4], "code_num": [2], "code": "import re\\nimport csv\\nimport time\\nimport StringIO\\n\\nprint(time.ctime())\\n\\ninput_name = \"C:/Users/User/Desktop/File with No Extension That's Very Similar to CSV\"\\noutput_name = \"C:/Users/User/Desktop/testoutput.csv\"\\n\\nwith open(input_name, 'r') as f_input, open(output_name, 'wb') as f_output:\\n    # Read whole file in\\n    all_input = f_input.read()  \\n\\n    # Extract interesting lines\\n    ab_input = re.findall(r'Point A(.*?)Point B', all_input, re.DOTALL)[0]\\n\\n    # Convert into a file object and parse using the CSV reader\\n    fab_input = StringIO.StringIO(ab_input)\\n    csv_input = csv.reader(fab_input)\\n    csv_output = csv.writer(f_output)\\n\\n    # Iterate a row at a time from the input\\n    for input_row in csv_input:\\n        # Skip any empty rows\\n        if input_row:\\n            # Write row at a time to the output\\n            csv_output.writerow(input_row)\\n\\nprint(time.ctime())", "id": "31277418", "code_sizes": 1}, {"nl_num": [3, 1734, 4347, 3257, 4347, 568, 2583, 1833, 540, 188, 4], "code_num": [2], "code": "for filename in os.listdir('./json/'):\\n    sources = None\\n    with open('./json/'+filename) as data_file:    \\n        sources = json.load(data_file)\\n        sourcelist = sources['sources']\\n        for i, s in enumerate(sourcelist):\\n            sources['sources'][i]['collectorName'] = 'Collector' + str(i)\\n    with open('./json/'+filename, 'w') as data_file:  \\n        data_file.write(json.dumps(sources))", "id": "30504825", "code_sizes": 1}, {"nl_num": [3, 2385, 864, 3105, 549, 528, 3004, 3293, 1828, 2684, 4], "code_num": [2], "code": "im = Image.open(StringIO(request.FILES['im'].read()))", "id": "3201777", "code_sizes": 1}, {"nl_num": [3, 990, 864, 474, 2176, 3821, 2610, 1828, 2710, 4], "code_num": [2], "code": "def strip_accents(s):\\n  return ''.join((c for c in unicodedata.normalize('NFD', s) if unicodedata.category(c) != 'Mn'))", "id": "4932497", "code_sizes": 1}, {"nl_num": [3, 4194, 4214, 2, 2464, 4521, 1297, 4780, 3518, 4], "code_num": [2], "code": "x, y = A.groupby('one'), B.groupby('one')\\n\\nres = {i[0]:i[1].two.corr(y.get_group(i[0]).two) for i in x}\\n\\npd.DataFrame(res.items())\\n#   0  1\\n#0  a -1\\n#1  b -1", "id": "31126179", "code_sizes": 1}, {"nl_num": [3, 1115, 2295, 2610, 4147, 1773, 4], "code_num": [2], "code": "missingParen=re.compile(r\"^\\(\\d$\")", "id": "360600", "code_sizes": 1}, {"nl_num": [3, 3586, 2, 861, 4178, 1400, 2943, 2319, 177, 2, 3561, 1637, 540, 764, 4], "code_num": [2], "code": "class ProfileForm(Form):\\n    birthday  = DateTimeField('Your Birthday', format='%m/%d/%y')\\n    signature = TextAreaField('Forum Signature')\\n\\nclass AdminProfileForm(ProfileForm):\\n    username = StringField('Username', [validators.Length(max=40)])\\n    level = IntegerField('User Level', [validators.NumberRange(min=0, max=10)])", "id": "23139163", "code_sizes": 1}, {"nl_num": [3, 2, 4178, 726, 243, 568, 1828, 1007, 2, 1007, 2728, 3747, 4711, 4563, 4], "code_num": [2], "code": "from twisted.web import xmlrpc, server\\n\\nclass MultiStep(xmlrpc.XMLRPC):\\n    def __init__(self) :\\n        xmlrpc.XMLRPC.__init__(self)\\n        self.db = {}\\n    def getX(self, user, x):\\n       self.db[user] = {'x' : x}\\n       return 'OK'\\n    def getY(self, user, y):\\n       self.db[user]['y'] = y\\n       return 'OK'\\n    def plus(self,user) :\\n       return self.db[user]['x'] + self.db[user]['y']\\n\\nif __name__ == '__main__':\\n    from twisted.internet import reactor\\n    r = MultiStep()\\n    reactor.listenTCP(6666, server.Site(r))\\n    reactor.run()", "id": "4764548", "code_sizes": 1}, {"nl_num": [3, 188, 4476, 2452, 2176, 3821, 4], "code_num": [2], "code": "import re\\n\\npattern = \"[- ]+\"\\nre.sub(pattern, \" \", your_string)", "id": "12886949", "code_sizes": 1}, {"nl_num": [3, 3195, 4220, 4713, 3293, 1400, 2828, 2714, 2019, 1828, 4238, 4], "code_num": [2], "code": "prefixes = [your_list[:end] for end in xrange(1, len(your_list) + 1)]", "id": "19407604", "code_sizes": 1}, {"nl_num": [3, 188, 382, 3506, 841, 492, 2424, 551, 1890, 4], "code_num": [2], "code": "class jsonEncoder(simplejson.JSONEncoder):\\n    def default(self, obj):\\n        if isinstance(obj, db.GeoPt):\\n            return {'lat': obj.lat, 'lon': obj.lon}\\n        else:\\n            return simplejson.JSONEncoder.default(self, obj)", "id": "12232882", "code_sizes": 1}, {"nl_num": [3, 188, 2916, 4691, 2464, 2, 2, 2304, 4], "code_num": [2], "code": "class MyTestCase(unittest.TestCase):\\n    def run(self, result=None):\\n        '''Show log output on failed tests'''\\n\\n        if result:\\n            orig_err_fail = result.errors + result.failures\\n\\n        super().run(result)\\n\\n        if result and result.errors + result.failures > orig_err_fail:\\n            print (\"assertion failed\")", "id": "29923072", "code_sizes": 1}, {"nl_num": [3, 3611, 1828, 990, 1196, 853, 1828, 1209, 3004, 4], "code_num": [2], "code": "import numpy as np\\nout_dict[filename]=np.array(arr, dtype=np.float64)", "id": "19798387", "code_sizes": 1}, {"nl_num": [3, 188, 2, 568, 2, 4], "code_num": [2], "code": "from OpenSSL import crypto\\np12 = crypto.load_pkcs12(file(\"push.p12\", 'rb').read(), [password])\\n\\n# PEM formatted private key\\nprint crypto.dump_privatekey(crypto.FILETYPE_PEM, p12.get_privatekey())\\n\\n# PEM formatted certificate\\nprint crypto.dump_certificate(crypto.FILETYPE_PEM, p12.get_certificate())", "id": "23551579", "code_sizes": 1}, {"nl_num": [3, 1595, 3055, 41, 4505, 853, 2473, 4640, 540, 2, 4], "code_num": [2], "code": "from collections import defaultdict\\n\\ndef clean_line(line):\\n    name, _, value = line.partition(':')\\n    return name.strip(), value.strip()\\n\\ndef process_file(dic_, file, key):\\n    for line in file:\\n        name, value = clean_line(line)\\n        dic_[name][key] = value\\n\\ndef f_phone_addr(phonefile, addrfile):\\n\\n    out = defaultdict(dict)\\n    with open(phonefile) as pf, open(addrfile) as af:\\n        process_file(out, pf, 'phone')\\n        process_file(out, af, 'address')\\n    return out", "id": "13154896", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3273, 1400, 4254, 4179, 4238, 327, 2610, 188, 2326, 4], "code_num": [2], "code": "bin_width = int(round(duration / bins))\\nfollowers = [sum(followersList[i:i+bin_width]) for i in xrange(0, duration, bin_width)]", "id": "33651218", "code_sizes": 1}, {"nl_num": [3, 3704, 2406, 2025, 568, 1828, 4349, 4], "code_num": [2], "code": "lst = collections.defaultdict(list)", "id": "4378302", "code_sizes": 1}, {"nl_num": [3, 3317, 1427, 1460, 2624, 2610, 1400, 3862, 4179, 2176, 3821, 4], "code_num": [2], "code": "newjson = json.loads(result.read().decode('utf-8').encode(\"ascii\",\"xmlcharrefreplace\"))", "id": "28709528", "code_sizes": 1}, {"nl_num": [3, 3990, 1844, 2062, 2464, 69, 568, 2093, 4178, 4047, 3759, 2126, 2610, 343, 2473, 1268, 1312, 877, 568, 4073, 2981, 2126, 2326, 4], "code_num": [2], "code": "import requests\\n\\ndef find_broken_links(root, driver):\\n    visited = set()\\n    broken = set()\\n    # Use queue for BFS, list / stack for DFS.\\n    elements = [root]\\n    session = requests.session()\\n\\n    while len(elements):\\n        el = elements.pop()\\n        if el in visited:\\n            continue\\n\\n        visited.add(el)\\n\\n        resp = session.get(el)\\n        if resp.status_code in [500, 404]:\\n            broken.add(el)\\n            continue\\n\\n        driver.get(el)\\n        links = driver.find_element_by_tag_name(\"a\")\\n        for link in links:\\n            elements.append(link.get_attribute('href'))\\n\\n    return broken", "id": "17863302", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3530, 1738, 853, 4694, 2, 4342, 540, 188, 2326, 4], "code_num": [2], "code": "import urllib2\\n\\ndef get_unread_msgs(user, passwd):\\n    auth_handler = urllib2.HTTPBasicAuthHandler()\\n    auth_handler.add_password(\\n        realm='New mail feed',\\n        uri='https://mail.google.com',\\n        user='%s@gmail.com' % user,\\n        passwd=passwd\\n    )\\n    opener = urllib2.build_opener(auth_handler)\\n    urllib2.install_opener(opener)\\n    feed = urllib2.urlopen('https://mail.google.com/mail/feed/atom')\\n    return feed.read()", "id": "1777081", "code_sizes": 1}, {"nl_num": [3, 2, 443, 1708, 990, 2, 4], "code_num": [2], "code": "import os\\n\\ntry:\\n    with open(\"/tmp/myproc.pid\") as pidfile:\\n        pidfile.write(str(os.getpid()))\\n    main()\\nfinally:\\n    os.remove(\"/tmp/myproc.pid\")", "id": "10579907", "code_sizes": 1}, {"nl_num": [3, 188, 864, 550, 568, 1652, 3293, 549, 470, 177, 4428, 3004, 2326, 4], "code_num": [2], "code": "from . import db", "id": "22282316", "code_sizes": 1}, {"nl_num": [3, 69, 1352, 2291, 2378, 1400, 415, 4179, 2847, 1470, 1477, 1708, 1828, 223, 1959, 2326, 4], "code_num": [2], "code": "avg=sum/12.", "id": "19530193", "code_sizes": 1}, {"nl_num": [3, 3991, 868, 540, 2, 4], "code_num": [2], "code": "from django.utils.safestring import mark_safe    \\n\\n@register.filter\\ndef wikify(value):\\n    output = wikilink.sub(r\"<a href='/wikicamp/\\1/'>\\1</a>\", value)\\n    return mark_safe(output)", "id": "32379027", "code_sizes": 1}, {"nl_num": [3, 392, 3053, 4409, 4238, 2610, 188, 4], "code_num": [2], "code": "a = [2, 3, 5, 6, 6, 7, 10, 11, 13, 14, 15, 16, 16, 17, 18, 20, 21]\\n\\nseqlist = [] # List of Sequences\\nseq = []     # Current Sequence\\nlast = -1\\n\\nfor item in a:\\n   # Start a new sequence if the gap from the last item is too big\\n   if item - last > 1:\\n       seqlist.append(seq)\\n       seq = []\\n\\n   # only add item to the sequence if it's not the same as the last\\n   if item != last:\\n        seq.append(item)\\n\\n   last = item\\n\\n# Print longest sequence found\\nprint max(seqlist)", "id": "3856016", "code_sizes": 1}, {"nl_num": [3, 4706, 1297, 188, 3028, 2583, 551, 2710, 4597, 4179, 4718, 4], "code_num": [2], "code": "people = models.UserRelationships.query.filter_by(user_id=user_id, active=ACTIVE_RECORD)\\nfriends = people.filter_by(friends=YES)\\n\\nreturn jsonify(friends.first().as_dict())", "id": "19717514", "code_sizes": 1}, {"nl_num": [3, 432, 3324, 540, 4047, 4347, 1661, 4347, 540, 1828, 262, 169, 1828, 4634, 2238, 2, 338, 3528, 4], "code_num": [2], "code": "#Depending on the content of vol_B you can do astype(int) or astype(float) as well.\\ngb = df.groupby([df['vol_B'].astype(str), df['expiry']])", "id": "30445044", "code_sizes": 1}, {"nl_num": [3, 1082, 1828, 1170, 568, 2869, 265, 711, 4366, 4], "code_num": [2], "code": "def show_time(hour, minutes):\\n    if hour >= 12:\\n        suffix = \"pm\"\\n        if hour != 12:\\n            hour -= 12\\n    else:\\n        suffix = \"am\"\\n        if hour == 0:\\n            hour = 12\\n    return \"{0}:{1:02}{2}\".format(hour, minutes, suffix)", "id": "33070941", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2878, 4220, 2047, 868, 2610, 1828, 2319, 2326, 4], "code_num": [2], "code": "from bs4 import BeautifulSoup\\nimport urllib\\n\\nfor page in range(1, 27+1): # currently there are 27 pages.\\n    url = 'http://www.brothersoft.com/windows/mp3_audio/midi_tools/{}.html'.format(page)\\n    html = urllib.urlopen(url)\\n    soup = BeautifulSoup(html)\\n\\n    for a in soup.select('div.freeText dl a[href]'):\\n        print \"http://www.borthersoft.com\"+a['href'].encode('utf-8','replace')", "id": "18480247", "code_sizes": 1}, {"nl_num": [3, 545, 3976, 3551, 2610, 4807, 3948, 540, 3230, 3747, 3948, 4], "code_num": [2], "code": "for activesession in SessionModel.all():\\n    data = Session._Session__decode_data(activesession.pdump)\\n    logged_in.append(data['user'])", "id": "5042566", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 3559, 1828, 2, 528, 853, 1828, 990, 2817, 1563, 2326, 4], "code_num": [2], "code": "import Tkinter as tk\\nfrom PIL import ImageTk, Image\\n\\n#This creates the main window of an application\\nwindow = tk.Tk()\\nwindow.title(\"Join\")\\nwindow.geometry(\"300x300\")\\nwindow.configure(background='grey')\\n\\npath = \"Aaron.jpg\"\\n\\n#Creates a Tkinter-compatible photo image, which can be used everywhere Tkinter expects an image object.\\nimg = ImageTk.PhotoImage(Image.open(path))\\n\\n#The Label widget is a standard Tkinter widget used to display a text or image on the screen.\\npanel = tk.Label(window, image = img)\\n\\n#The Pack geometry manager packs widgets in rows or columns.\\npanel.pack(side = \"bottom\", fill = \"both\", expand = \"yes\")\\n\\n#Start the GUI\\nwindow.mainloop()", "id": "23901168", "code_sizes": 1}, {"nl_num": [3, 566, 568, 611, 1637, 2828, 286, 4179, 1807, 2610, 2601, 4588, 2326, 4], "code_num": [2], "code": "\"/(http:\\/\\/www\\.mega\\.pk\\/mobiles-\\w+\\/)(?!.*\\1)/gs\"", "id": "32757532", "code_sizes": 1}, {"nl_num": [3, 2432, 169, 326, 1828, 3467, 3004, 2610, 188, 2, 4], "code_num": [2], "code": "gradebook = list()\\nwith open('scores.txt') as infile:\\n    for line in file:\\n        line = line.split(':').rstrip()\\n        gradebook.append((line[0], line[1]))", "id": "27092384", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 2426, 1828, 188, 1422, 1579, 4350, 2610, 3273, 2544, 3293, 1828, 2, 4350, 2326, 4], "code_num": [2], "code": "python /path/to/my/python/script.py", "id": "3187301", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 3366, 1250, 1176, 2610, 188, 2326, 4], "code_num": [2], "code": "x = \"I use computers\"\\nprint len(x.split())", "id": "15098269", "code_sizes": 1}, {"nl_num": [3, 454, 2385, 841, 3498, 2575, 1828, 4238, 4179, 769, 4], "code_num": [2], "code": "week_song_list = []\\nseen_ids = []\\nfor song in week_songs:\\n    if song.song_id not in seen_ids:\\n        week_song_list.append(song)\\n        seen_ids.append(song.song_id)", "id": "20692242", "code_sizes": 1}, {"nl_num": [3, 832, 746, 1384, 3995, 3293, 262, 4], "code_num": [2], "code": "class StoreNames(db.Expando):\\n  index = db.FloatProperty()\\n\\nname = \"unknown\"\\n\\nvalue = \"something\"\\n\\nstore = StoreNames()\\n\\nsetattr(db, name, value)", "id": "16995516", "code_sizes": 1}, {"nl_num": [3, 3793, 2376, 975, 2284, 899, 2610, 4758, 4], "code_num": [2], "code": "b = re.compile('\\/\\*(.*?)\\*/', re.M|re.S)", "id": "17382637", "code_sizes": 1}, {"nl_num": [3, 891, 568, 3178, 3705, 3544, 4], "code_num": [2], "code": "make -j", "id": "2395525", "code_sizes": 1}, {"nl_num": [3, 55, 1833, 4328, 169, 3460, 4023, 4], "code_num": [2], "code": "with open('MyText.txt', 'r') as f:\\n  lineArr=f.read().split('\\n')\\n  if 'Sample Text' in lineArr:\\n    timeTaken = [s for s in lineArr if \"Time Taken\" in s]\\n    print timeTaken[0]", "id": "17440815", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3344, 900, 3247, 1297, 3518, 2610, 990, 4640, 2326, 4], "code_num": [2], "code": "matching = [d for d in session['cart'] if d['product_id'] == id]\\nif matching:\\n    matching[0]['qty'] += int(qty)\\nelse:\\n    session['cart'].append(dict({'product_id': id, 'qty': int(qty)}))", "id": "32594269", "code_sizes": 1}, {"nl_num": [3, 2385, 2957, 540, 3163, 4188, 4], "code_num": [2], "code": "from django.contrib.admin.widgets import AdminDateWidget\\n\\nclass MyForm(ModelForm):\\n\\n    class Meta:\\n        widgets = {\\n            'date': AdminDateWidget(),\\n        }", "id": "8938939", "code_sizes": 1}, {"nl_num": [3, 3990, 2813, 2, 2, 2610, 188, 4], "code_num": [2], "code": "setup(\\n    name=\"mypkg\", version=\"0.0.1\",\\n    # etc etc blah blah blabh\\n    install_requires=[\"PIL\"],\\n)", "id": "8850102", "code_sizes": 1}, {"nl_num": [3, 2367, 2485, 169, 2616, 4220, 323, 2610, 1828, 2710, 223, 990, 4], "code_num": [2], "code": "''.join(c.lower() for c in s if not c.isspace())", "id": "5799090", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3881, 1828, 990, 4238, 4798, 2605, 1812, 1400, 1039, 483, 3452, 2629, 412, 4], "code_num": [2], "code": "content = list(f)\\nf.write('905771\\n')", "id": "34494663", "code_sizes": 1}, {"nl_num": [3, 474, 43, 3293, 4640, 4], "code_num": [2, 2, 2], "code": "import re\\n\\nmonth_pair = (re.compile('(\\d\\s*)m'), 'months')\\nyear_pair = (re.compile('(\\d\\s*)y'), 'years')\\n\\ndef substitute(s, pairs):\\n  for (pattern, substitution) in pairs:\\n    match = pattern.search(s)\\n    if match:\\n      s = pattern.sub(match.group(1)+substitution, s)\\n  return s\\n\\npairs = [month_pair, year_pair]\\nprint(substitute('65 y 4m', pairs))", "id": "27138349", "code_sizes": 3}, {"nl_num": [3, 3243, 1828, 1384, 3747, 2, 4738, 568, 1828, 2406, 3867, 4], "code_num": [2], "code": "class ToAdd(object):\\n    @property\\n    def foo(self):\\n        return 'foo!'\\n\\nclass Base(object):\\n    pass\\n\\nb = Base()\\n\\nNewBase = type('NewBase', (Base, ToAdd), {})\\nb.__class__ = NewBase\\nprint(b.foo)\\n# foo!", "id": "11053194", "code_sizes": 1}, {"nl_num": [3, 2677, 777, 3004, 2610, 990, 540, 2, 864, 2719, 540, 21, 169, 869, 694, 2610, 1400, 3004, 4], "code_num": [2], "code": "elem.sourceline", "id": "1250192", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2616, 2385, 2255, 1586, 2, 4597, 4179, 1675, 4], "code_num": [2], "code": "class DiferencialItemInline(admin.TabularInline):\\n    model = DiferencialItem\\n\\nclass DiferencialAdmin(admin.ModelAdmin):\\n    inlines = [DiferencialItemInline]", "id": "29629862", "code_sizes": 1}, {"nl_num": [3, 4786, 2610, 3004, 1007, 451, 3579, 1901, 2610, 188, 4], "code_num": [2], "code": "source_file = open(\"myfile\", \"r\")\\nfile_data = list(source_file.read())\\nsource_file.close()\\nfile_data.insert(position, data)\\nopen(\"myfile\", \"wb\").write(file_data)", "id": "1188214", "code_sizes": 1}, {"nl_num": [3, 4720, 1828, 4471, 336, 2610, 655, 2326, 4], "code_num": [2], "code": "from datetime import datetime\\nEntry.objects.filter(pub_date=datetime(2008, 10, 18))", "id": "433507", "code_sizes": 1}, {"nl_num": [3, 2, 1892, 540, 4502, 3672, 3747, 188, 4], "code_num": [2], "code": "# taking every 3rd element moves the start by 3\\nprint list(islice(window(idlist, n=2),None,None,3))", "id": "6924603", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4335, 2, 2, 711, 1243, 3963, 2610, 188, 2326, 4], "code_num": [2], "code": "random.expovariate", "id": "29510556", "code_sizes": 1}, {"nl_num": [3, 3311, 2, 2756, 863, 209, 2, 1109, 1650, 4], "code_num": [2], "code": "def is_even(number):\\n    return number % 2 == 0\\n\\ndef even_count(numbers_list):\\n    count = 0\\n\\n    for number in numbers_list:\\n        if is_even(number): count += 1\\n\\n    return count\\n\\nraw_numbers = input(\"Please enter more than one number: \")\\nnumbers_list = [int(i) for i in raw_numbers.split()]\\n\\ncount = even_count(numbers_list)\\nprint(count)", "id": "18121179", "code_sizes": 1}, {"nl_num": [3, 1881, 864, 587, 568, 2477, 540, 3884, 3293, 3008, 4], "code_num": [2], "code": "from sqlalchemy.dialects.postgresql import array\\n\\n# First write the subquery.  array() function is used for Pg ARRAY literals.\\nsubq = db.session.query(\\n    db.func.unnest(array([1])).label('model_id'),\\n    db.func.unnest(array([2])).label('quantity')\\n).subquery()\\n\\n# Now when you have the subquery, you can use it as if it were a Table object.\\nq = db.session.query(db.func.sum(ProductModel.mass * subq.c.quantity)).\\\\n    join(subq, ProductModel.id == subq.c.model_id).\\\\n    group_by(ProductModel.id)", "id": "20387289", "code_sizes": 1}, {"nl_num": [3, 3250, 3674, 817, 568, 1400, 213, 3747, 990, 4], "code_num": [2], "code": "print(' '*(60 - len(s))+s)", "id": "29187058", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 3190, 1828, 3995, 2, 1651, 1828, 879, 1170, 169, 1828, 332, 2610, 1312, 1170, 2326, 4], "code_num": [2], "code": "globals()['clean']()", "id": "9238350", "code_sizes": 1}, {"nl_num": [3, 2522, 338, 3293, 3004, 990, 4], "code_num": [2], "code": "def main():\\n    isTime = False\\n    newLists = []\\n    with open(\"time.txt\", 'r') as newFile:\\n        result = newFile.readlines()\\n        for line in result:\\n            if \"$TIME\" in line:\\n                isTime = True\\n            elif isTime:\\n                newLists.append(line)\\n\\n    for line in newLists:\\n        print line\\n\\nif __name__ == '__main__':\\n    main()", "id": "26729301", "code_sizes": 1}, {"nl_num": [3, 3748, 1828, 1584, 3747, 3934, 123, 568, 2738, 2746, 2610, 990, 4], "code_num": [2], "code": "tree = \"\"\"Root\\n  Branch1\\n    LeafA\\n    LeafB\\n  Branch2\\n    LeafC\\n      LeafZ\\n    LeafD\"\"\"\\n\\naDict = {}\\niDict = {}\\nfor line in tree.split(\"\\n\"):\\n    key = line.lstrip(\" \")\\n    indent = (len(line) - len(key)) / 2\\n    if indent == 0:\\n        aDict[key] = None\\n    else:\\n        aDict[key] = iDict[indent - 1]\\n    iDict[indent] = key\\n\\nprint aDict\\n# {'LeafD': 'Branch2', 'LeafA': 'Branch1', 'Branch2': 'Root', 'LeafC': 'Branch2', 'LeafB': 'Branch1', 'Branch1': 'Root', 'Root': None, 'LeafZ': 'LeafC'}", "id": "4270970", "code_sizes": 1}, {"nl_num": [3, 990, 3747, 3167, 805, 3004, 2610, 4238, 4], "code_num": [2], "code": "list = [['multinational_intel_2014-10-22T110406Z.zip', '2014 10 22 11:05:19'],\\n        ['multinational_intel_2014-10-24T140006Z.zip', '2014 10 24 14:02:51'],\\n        ['multinational_intel_2014-11-12T104622Z.zip', '2014 11 12 10:47:49'],\\n        ['multinational_intel_2014-11-10T131155Z.zip', '2014 11 10 13:13:57'],\\n        ['multinational_intel_2014-11-14T172344Z.zip', '2014 11 14 17:25:17'],\\n        ['multinational_intel_2014-11-11T103518Z.zip', '2014 11 11 10:36:47']]\\n\\nsorted_list = sorted(list, key=lambda x: x[1], reverse=True)\\nmost_recent = sorted_list[0][0]\\nprint most_recent", "id": "29313006", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1742, 2, 4702, 3293, 3342, 4178, 3531, 188, 4], "code_num": [2], "code": "from mapreduce import control\\n\\nmapreduce_id = control.start_map(\\n    \"My Mapper\",\\n    \"main.my_mapper\",\\n    \"mapreduce.input_readers.DatastoreInputReader\",\\n    {\"entity_kind\": \"models.MyEntity\"},\\n    shard_count=10)", "id": "6228802", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2878, 1400, 1180, 4179, 1828, 360, 2082, 2610, 1828, 990, 4350, 4], "code_num": [2], "code": "import time\\n\\nNUM_CYCLES = 10\\nstart = time.time()\\nfor impulse_count in range(NUM_CYCLES):\\n    GPIO.wait_for_edge(25, GPIO.FALLING)\\nduration = time.time() - start      #seconds to run for loop\\nfrequency = NUM_CYCLES / duration   #in Hz", "id": "23187035", "code_sizes": 1}, {"nl_num": [3, 990, 2287, 2319, 711, 2, 4], "code_num": [2], "code": "def Mypage(self,ip):\\n    try:\\n        conn = httplib.HTTPConnection(ip)\\n        conn.request(\"GET\", \"/path/to/mypage.php\")\\n        resp = conn.getresponse()\\n        if (resp.status == 200):\\n            html = BeautifulSoup(resp.read())\\n            data = html.find('title')\\n            titulo = str(data.contents[0])\\n            if titulo == \"THE TITLE\":\\n                return True\\n            else:\\n                return False\\n        else :\\n            return False\\n    except :\\n        return False", "id": "17599193", "code_sizes": 1}, {"nl_num": [3, 188, 864, 4527, 2, 177, 3324, 540, 1773, 4], "code_num": [2], "code": "temp_word = 'correct'\\nletters_guessed = ['g','r','a','b']\\n\\nfor letter in temp_word:\\n    if letter not in letters_guessed:\\n        temp_word = temp_word.replace(letter,'_')\\n\\nprint temp_word\\n\\n## >>> '__rr___'\\n## string.replace(old, new) you can use any character for new '*' returns '**rr***'", "id": "21619464", "code_sizes": 1}, {"nl_num": [3, 66, 2049, 2, 841, 568, 2869, 2, 344, 3293, 2, 568, 2, 169, 840, 4406, 551, 3319, 1395, 2326, 4], "code_num": [2], "code": "df['DATE']=pd.to_datetime(df.DATE).apply(pd.Period, freq='A-FEB')", "id": "22205159", "code_sizes": 1}, {"nl_num": [3, 3990, 2, 3293, 188, 4178, 717, 2, 95, 4], "code_num": [2], "code": "uri = self.calendar.GetAlternateLink().href\\nbatch_uri = uri + u'/batch'\\ncalendar_service.ExecuteBatch(request_feed, batch_uri)", "id": "3207883", "code_sizes": 1}, {"nl_num": [3, 2582, 77, 2610, 1828, 2964, 2464, 2473, 3497, 2961, 2839, 540, 4395, 1927, 169, 3256, 290, 4], "code_num": [2], "code": "import numpy as np\\nimport matplotlib.pyplot as plt\\n\\nxlim = (-60.,60.)\\nylim = (-110.,110.)\\naxes_pad = 0.02\\ncbar_height = 0.025\\nh_pad = 0.1\\nv_pad = 0.1\\n\\nfig_w = 7.\\nfig_h = 6.\\n\\nheight = 1-axes_pad-cbar_height-2*v_pad\\nwidth = np.abs((xlim[1]-xlim[0])/(ylim[1]-ylim[0]))*height*fig_h/fig_w # ensure equal aspect\\n\\nbottom_h = v_pad+height+axes_pad\\nleft_h = h_pad+width+axes_pad\\n\\nrect_c = [h_pad, v_pad, width, height]\\nrect_cbar = [h_pad, bottom_h, width, cbar_height]\\nrect_r = [left_h, v_pad, 1-axes_pad-width-2*h_pad, height]\\n\\nfig = plt.figure(1, figsize=(fig_w,fig_h))\\nax_c = plt.axes(rect_c)\\nax_cbar = plt.axes(rect_cbar)\\nax_r = plt.axes(rect_r)\\n\\nax_c.set_xlim(xlim)\\nax_c.set_ylim(ylim)\\nax_r.set_ylim(ylim)\\n\\nax_rty = ax_r.twiny()\\nax_rty.set_xlim((-100,0)) # determined dynamically later\\nax_r.set_xlim((0,0.5)) # determined dynamically later\\n\\nplt.savefig('skeleton.pdf',bbox_inches='tight')", "id": "22076635", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1704, 1637, 3843, 4498, 3293, 1828, 3467, 3004, 2326, 4], "code_num": [2], "code": "import numpy as np\\nimport itertools\\nwith open('test.dat') as f_in:\\n    x = np.genfromtxt(itertools.islice(f_in, 1, 12, None), dtype=float)\\n    print x[0,:]", "id": "32027015", "code_sizes": 1}, {"nl_num": [3, 990, 1133, 4316, 3747, 3747, 2375, 378, 568, 4778, 1479, 4], "code_num": [2], "code": "import sys \\n\\n@GET(\"/some/path/extensions/:module/:func/:params\")\\ndef callmodule(module, func, params):\\n    D = dict(params)\\n    # Pull module instance from systems stack\\n    moduleInstance = sys.modules[module]\\n    # Grab method from module\\n    functionInstance = getattr(moduleInstance,func)\\n    # Pass \"D\" variable to function instance\\n    functionInstance(D)", "id": "16882668", "code_sizes": 1}, {"nl_num": [3, 188, 2, 1170, 1915, 4], "code_num": [2], "code": "import matplotlib.pyplot as plt\\n\\nfig = plt.figure()\\nax1 = fig.add_subplot(4,2,1)\\nax2 = fig.add_subplot(4,2,4)\\nax3 = fig.add_subplot(4,2,5)\\nax4 = fig.add_subplot(4,2,8)\\n\\nfig.subplots_adjust(hspace=1)\\n\\nplt.show()", "id": "5054593", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2616, 1828, 4238, 3293, 1828, 4582, 2610, 990, 2326, 4], "code_num": [2], "code": "string_input = raw_input()\\ninput_list = string_input.split() #splits the input string on spaces\\n# process string elements in the list and make them integers\\ninput_list = [int(a) for a in input_list]", "id": "23026324", "code_sizes": 1}, {"nl_num": [3, 990, 717, 2822, 1857, 864, 2, 864, 4058, 4], "code_num": [2], "code": "def post(self):\\n  \"\"\"\\n  username: Get the username from POST dict\\n  password: Get the password from POST dict\\n  \"\"\"\\n  username = self.request.POST.get('username')\\n  password = self.request.POST.get('password')\\n  # Try to login user with password\\n  # Raises InvalidAuthIdError if user is not found\\n  # Raises InvalidPasswordError if provided password doesn't match with specified user\\n  try:\\n    self.auth.get_user_by_password(username, password)\\n    self.redirect('/secure')\\n  except (InvalidAuthIdError, InvalidPasswordError), e:\\n    # Returns error message to self.response.write in the BaseHandler.dispatcher\\n    # Currently no message is attached to the exceptions\\n    return e", "id": "10497997", "code_sizes": 1}, {"nl_num": [3, 1746, 360, 2441, 2610, 990, 4], "code_num": [2], "code": "def isqrt(n):\\n    x = n\\n    y = (x + 1) // 2\\n    while y < x:\\n        x = y\\n        y = (x + n // x) // 2\\n    return x", "id": "15390807", "code_sizes": 1}, {"nl_num": [3, 1224, 3467, 540, 1530, 1422, 990, 3747, 3191, 4347, 4669, 1422, 4035, 1422, 4347, 552, 869, 3836, 4], "code_num": [2], "code": "for part in mail.walk():\\n    if part.get_content_type() == 'text/plain':\\n        content = part.get_payload()\\n        message = re.compile(r'\\%(.+?)\\%', re.DOTALL).findall(content)\\n        # This will just substitue the '=\\r\\' with nothing.\\n        message = re.sub(r'=\\\\r\\\\', '', message)\\n        print message", "id": "16426550", "code_sizes": 1}, {"nl_num": [3, 482, 2701, 4773, 2610, 188, 4], "code_num": [2], "code": "countArea()", "id": "13827430", "code_sizes": 1}, {"nl_num": [3, 672, 242, 4479, 4238, 3293, 549, 1666, 4479, 3004, 4], "code_num": [2], "code": "def set_hosts():\\n    env.hosts = open('hosts_file', 'r').readlines()", "id": "10391377", "code_sizes": 1}, {"nl_num": [3, 4659, 864, 3884, 188, 1830, 667, 223, 1007, 1479, 1007, 1227, 4256, 694, 4], "code_num": [2], "code": "import sys\\nprint sys.modules", "id": "13296498", "code_sizes": 1}, {"nl_num": [3, 4137, 188, 2464, 3886, 2403, 3090, 1237, 2610, 4238, 2464, 69, 568, 1742, 552, 2707, 2613, 3678, 2604, 2, 2326, 4], "code_num": [2], "code": "mylist = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']\\ni = 0\\nwhile i <= 27:\\n    print mylist[i % len(mylist)]\\n    i +=1", "id": "8468082", "code_sizes": 1}, {"nl_num": [3, 2, 971, 1828, 2, 1637, 4531, 3288, 2319, 841, 4], "code_num": [2], "code": "class FooContent(models.Model):\\n    content = models.Bar('...')\\n\\n    class Meta:\\n        abstract = True\\n\\n    def clean(self):\\n        if self.parent.foocontent_set.count() >= 1:\\n            raise ValidationError('FooContent is only allowed once per Page.')\\n\\n    def render(self, **kwargs):\\n        return render_to_string('content/foo.html', {\\n            'content': self.content\\n        })", "id": "16211089", "code_sizes": 1}, {"nl_num": [3, 2367, 3843, 2637, 3293, 1828, 3079, 3004, 2464, 169, 1322, 568, 1828, 2406, 3004, 4], "code_num": [2], "code": "import csv\\nimport string\\n\\ninput_file = open('DesktopData.csv', 'r')\\noutput_file = open('fixformat.csv', 'w')\\ndata = csv.reader(input_file)\\nwriter = csv.writer(output_file,quoting=csv.QUOTE_ALL)# dialect='excel')\\nspecials = '%'\\n\\nfor line in data:\\n    line = str(line)\\n    new_line = str.replace(line,specials,'')\\n    writer.writerow(new_line.split(','))\\n\\ninput_file.close()\\noutput_file.close()", "id": "17176542", "code_sizes": 1}, {"nl_num": [3, 1495, 1594, 2610, 188, 1650, 3867, 4], "code_num": [2], "code": "import urllib\\nfrom urllib.request import urlopen\\n\\nx = None\\n\\nclass ABC(object):\\n\\n def __init__(self):\\n   global x\\n   x=urlopen('http://www.google.com/').read()", "id": "17235531", "code_sizes": 1}, {"nl_num": [3, 3333, 2, 2464, 2, 3102, 2101, 2011, 540, 2, 2, 4], "code_num": [2], "code": "X = np.array(xvals)\\nY = np.array(yvals)\\nZ = np.array(zvals)\\nY_bot = np.array(bottomvals)\\n\\nfig = plt.figure()\\nax = fig.add_subplot(111)\\n\\njet = plt.get_cmap('jet')\\n\\nlog_norm = colors.LogNorm()\\n\\nfor x,y,z,bot in zip(X,Y,Z,Y_bot):\\n    log_z = np.log10(z)/np.log10(max(Z))\\n    colour = jet(log_price)\\n    ax.bar(x,y,bottom=bot, width=1, edgecolor='none',color=c_col)\\n\\na = np.vstack((Z,Z))\\nim = plt.imshow(a, aspect='auto', cmap=jet, origin='lower', norm=log_norm)\\nim.set_visible(False)\\nplt.colorbar(format='%.1f')\\nplt.axis([values])\\nplt.show()", "id": "13042471", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4570, 990, 773, 568, 955, 1828, 3004, 1605, 2604, 1704, 2610, 2326, 4], "code_num": [2], "code": "f = open('myfile.txt', 'r')\\nhtmlmarkdown=markdown.markdown( f.read() )", "id": "14325654", "code_sizes": 1}, {"nl_num": [3, 972, 2388, 568, 3843, 2587, 4018, 327, 4], "code_num": [2], "code": "cond2 = (SPN >= -alpha) & (SPN <= 0)\\nSPN[cond2] = -np.cos(SPN[cond2]*np.pi/(2*alpha))", "id": "21484476", "code_sizes": 1}, {"nl_num": [3, 3397, 1400, 3322, 4179, 1400, 887, 120, 1125, 3886, 2951, 1828, 102, 3293, 1828, 4350, 4], "code_num": [2], "code": "settings = get_project_settings()\\nsettings.set('USER_AGENT','Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)')\\nprocess = CrawlerProcess(settings)\\nprocess.crawl(MySpider3)\\nprocess.start()", "id": "31640971", "code_sizes": 1}, {"nl_num": [3, 3352, 2184, 2610, 188, 540, 4057, 4], "code_num": [2], "code": "python-ogre", "id": "3225539", "code_sizes": 1}, {"nl_num": [3, 3793, 223, 2710, 3616, 540, 1982, 3831, 1297, 4465, 169, 1812, 3040, 4], "code_num": [2], "code": "'^\\$\\d+=.*\\(.*\\).*'", "id": "29999521", "code_sizes": 1}, {"nl_num": [3, 3089, 2604, 1400, 159, 1442, 568, 4356, 2013, 4068, 568, 1773, 2223, 1605, 1400, 3247, 1535, 840, 3046, 2610, 990, 2326, 4], "code_num": [2], "code": "doodahs = (\\n    (0, \"FOO\"),\\n    (257, \"BAR\"),\\n    (258, \"FISH\"),\\n    (279, \"MOOSE\"),\\n    (280, \"Darth Vader\"),\\n    (65535, \"Death to all newbies\")\\n)", "id": "1606150", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 2878, 694, 4179, 4505, 911, 2610, 3494, 188, 4], "code_num": [2], "code": "self.uploadedfilenames", "id": "32308803", "code_sizes": 1}, {"nl_num": [3, 3499, 1828, 2793, 3518, 568, 1828, 1075, 1170, 3293, 990, 4], "code_num": [2], "code": "from ctypes import *\\n\\nVal_GetStatus= CDLL('x').Val_GetStatus\\nVal_GetStatus.argtypes = [c_int,POINTER(c_unit8)]\\nVal_GetStatus.restype = c_int\\n\\ndeviceStatus = ctypes.c_uint8()\\n\\nprint Val_GetStatus(0, byref(deviceStatus))\\nprint deviceStatus.value", "id": "26363641", "code_sizes": 1}, {"nl_num": [3, 188, 2869, 4220, 658, 1370, 4], "code_num": [2], "code": "import apt\\ncache = apt.Cache()\\n\\nfor mypkg in apt.Cache():\\n    if cache[mypkg.name].is_installed:\\n        print mypkg.name", "id": "26105433", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1945, 2645, 2126, 568, 383, 1828, 2544, 1422, 3004, 2610, 1712, 4179, 1828, 3119, 3138, 2326, 2238, 188, 1700, 2047, 3528, 4], "code_num": [2], "code": "print('<a href=\"http://www.example.com\">example text</a>')", "id": "15592947", "code_sizes": 1}, {"nl_num": [3, 4502, 694, 4179, 4339, 540, 2385, 1561, 1394, 2326, 4], "code_num": [2], "code": "class EligibilityForm(forms.Form):\\n    def __init__(self, *args, **kwargs):\\n        super(EligibilityForm, self).__init__(*args, **kwargs)\\n        # dynamic fields here ...\\n        self.fields['plan_id'] = CharField()\\n    # normal fields here ...\\n    date_requested = DateField()", "id": "411761", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2878, 594, 1712, 4179, 990, 4227, 2326, 4], "code_num": [2], "code": "import logging\\nlogger = logging.getLogger('myapp')\\nhdlr = logging.FileHandler('/var/tmp/myapp.log')\\nformatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')\\nhdlr.setFormatter(formatter)\\nlogger.addHandler(hdlr) \\nlogger.setLevel(logging.WARNING)", "id": "17945271", "code_sizes": 1}, {"nl_num": [3, 3990, 4612, 568, 3222, 1828, 4253, 3747, 4219, 223, 4220, 4179, 3674, 2, 4], "code_num": [2], "code": "import os\\nimport tempfile\\n\\n#define the location of 'mytemp' parent folder relative to the system temp\\nsysTemp = tempfile.gettempdir()\\nmyTemp = os.path.join(sysTemp,'mytemp')\\n\\n#You must make sure myTemp exists\\nif not os.path.exists(myTemp):\\n    os.makedirs(myTemp)\\n\\n#now make your temporary sub folder\\ntempdir = tempfile.mkdtemp(suffix='foo',prefix='bar',dir=myTemp)\\n\\nprint tempdir", "id": "8856053", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3881, 2613, 3674, 4714, 209, 1828, 3843, 135, 4], "code_num": [2], "code": "table = [['*', '*', '*', '*', '*'],\\n        ['*', '*', '*', '*', '*'],\\n        ['*', '*', '*', '*', '*'],\\n        ['*', '*', '*', '*', '*'],\\n        ['*', '*', '*', '*', '*']]\\n\\ndef print_table():\\n    print('\\n'.join(['\\t'.join(x) for x in table]))\\n\\ndef table_has_letter(letter):\\n    return any(letter in x for x in table)\\n\\nprint(table_has_letter('*'))", "id": "32889881", "code_sizes": 1}, {"nl_num": [3, 2, 2385, 1920, 540, 2, 1675, 2, 4], "code_num": [2], "code": "return BuildPart.objects.filter(build__id=part.product.pk)", "id": "27016026", "code_sizes": 1}, {"nl_num": [3, 454, 3420, 3046, 540, 2385, 4], "code_num": [2], "code": "Deal.objects.filter(\\n  Q(deal_day_start__lte=current_day, deal_day_end__gte=current_day) | \\n  Q(deal_day_start__lte=current_day, deal_day_end__lt=F(\"deal_day_start\")) | \\n  Q(deal_day_start__gte=current_day, deal_day_end__gte=current_day, deal_day_end__lt=F(\"deal_day_start\"))\\n)", "id": "29612350", "code_sizes": 1}, {"nl_num": [3, 4328, 93, 4018, 338, 853, 188, 4], "code_num": [2], "code": "data = numpy.loadtxt('position.txt')", "id": "27344433", "code_sizes": 1}, {"nl_num": [3, 1872, 4220, 3022, 2610, 3954, 2681, 4], "code_num": [2], "code": "cmds.delete(cmds.ls(type='expression'))", "id": "29934519", "code_sizes": 1}, {"nl_num": [3, 4133, 4190, 1828, 593, 568, 772, 1828, 3102, 4018, 853, 2582, 2665, 249, 2326, 4], "code_num": [2], "code": "X,Y =  np.indices(data.shape)\\nZ = data.ravel()\\nX = X.ravel()\\nY = Y.ravel()", "id": "21740235", "code_sizes": 1}, {"nl_num": [3, 1881, 864, 3990, 2692, 1422, 4174, 540, 1828, 3670, 3332, 4], "code_num": [2], "code": "db.session.query(Post).filter(Post.user_id==current_user.id).delete()", "id": "32075749", "code_sizes": 1}, {"nl_num": [3, 1699, 1828, 177, 1609, 528, 2610, 1828, 1563, 2610, 4135, 4], "code_num": [2], "code": "png = wx.Image(imageFile, wx.BITMAP_TYPE_ANY).ConvertToBitmap()\\nwx.StaticBitmap(self, -1, png, (10, 5), (png.GetWidth(), png.GetHeight()))", "id": "1315884", "code_sizes": 1}, {"nl_num": [3, 3990, 2817, 568, 4769, 1976, 817, 568, 1828, 177, 3079, 3004, 4], "code_num": [2], "code": "from tkinter import * \\nimport csv\\n\\nclass App(Frame):\\n    def __init__(self, master=None):\\n        Frame.__init__(self, master)\\n        self.pack()\\n        self.output()\\n\\n    def output(self):\\n        Label(text='Name:').pack(side=LEFT,padx=5,pady=5)\\n        self.e = Entry(root, width=10)\\n        self.e.pack(side=LEFT,padx=5,pady=5)\\n\\n        self.b = Button(root, text='Submit', command=self.writeToFile)\\n        self.b.pack(side=RIGHT,padx=5,pady=5)\\n\\n    def writeToFile(self):\\n        with open('WorkOrderLog.csv', 'a') as f:\\n            w=csv.writer(f, quoting=csv.QUOTE_ALL)\\n            w.writerow([self.e.get()])\\n\\nif __name__ == \"__main__\":\\n    root=Tk()\\n    root.title('Auto Logger')\\n    root.geometry('1000x100')\\n    app=App(master=root)\\n    app.mainloop()\\n    root.mainloop()", "id": "18339893", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2, 549, 1537, 2610, 188, 568, 1828, 2, 4], "code_num": [2], "code": "car.color()", "id": "32463870", "code_sizes": 1}, {"nl_num": [3, 3464, 3100, 4023, 2, 223, 4780, 4], "code_num": [2], "code": "cursor.execute(\"\"\"INSERT INTO temps VALUES (%s,%s,CURRENT_TIMESTAMP)\"\"\",(avgtemperatures[0],avgtemperatures[1]))", "id": "19232025", "code_sizes": 1}, {"nl_num": [3, 2385, 3747, 1912, 4047, 2577, 2610, 2, 4], "code_num": [2], "code": "def prepend_urls(self):\\n        return [\\n            url(\\n                r\"^(?P<resource_name>%s)/(?P<my_id>\\d+)/$\"\\n                % self._meta.resource_name, self.wrap_view('dispatch_detail'),\\n                name=\"api_dispatch_detail_id\"),\\n            url(\\n                r\"^(?P<resource_name>%s)/(?P<name>[\\w\\d_.-]+)/$\"\\n                % self._meta.resource_name, self.wrap_view('dispatch_detail'),\\n                name=\"api_dispatch_detail_name\"),\\n        ]", "id": "19834980", "code_sizes": 1}, {"nl_num": [3, 2385, 2577, 2, 568, 4115, 2725, 4], "code_num": [2], "code": "urlpatterns = patterns('django.views.generic.simple',\\n    (r'(.+\\.html)$', 'direct_to_template'),\\n    # ...\\n)", "id": "3402708", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 3641, 1712, 568, 1828, 3004, 3886, 4190, 4403, 480, 3747, 3183, 3821, 2326, 4], "code_num": [2], "code": "PYTHONIOENCODING=utf8", "id": "25758729", "code_sizes": 1}, {"nl_num": [3, 2076, 223, 1959, 250, 1828, 1956, 1959, 2610, 990, 4], "code_num": [2], "code": "def izpisi(polje):\\n    return '\\n'.join([ # inserts '\\n' between the lines\\n        ''.join(map(str, sublst)) # converts list to string of numbers\\n        for sublst in zip(*polje) # zip(*...) transposes your matrix\\n    ][::-1]) # [::-1] reverses the list\\n\\npolje = [[1, 2, 4, 4], [4, 1, 4, 2], [2, 1, 4, 3], [2, 4, 2, 3], [1, 2, 3, 4]]\\nprint izpisi(polje)", "id": "27666120", "code_sizes": 1}, {"nl_num": [3, 4137, 188, 2464, 69, 1062, 2473, 2484, 1400, 18, 3747, 764, 4219, 3995, 2610, 1828, 3647, 2326, 4], "code_num": [2], "code": "'/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisTop/2.0.24/RootCore'.split('/')[-2]", "id": "28348309", "code_sizes": 1}, {"nl_num": [3, 2385, 3747, 550, 568, 4570, 1828, 3715, 540, 1828, 3212, 2252, 3008, 2326, 4], "code_num": [2], "code": "LogEntry.objects.filter(content_type__name='visitor')", "id": "5517314", "code_sizes": 1}, {"nl_num": [3, 4624, 2291, 3824, 3090, 869, 4155, 2610, 2101, 4], "code_num": [2], "code": "import matplotlib.pyplot as plt\\nfrom itertools import cycle\\nlines = [\"-\",\"--\",\"-.\",\":\"]\\nlinecycler = cycle(lines)\\nplt.figure()\\nfor i in range(10):\\n    x = range(i,i+10)\\n    plt.plot(range(10),x,next(linecycler))\\nplt.show()", "id": "7799156", "code_sizes": 1}, {"nl_num": [3, 69, 568, 2878, 1515, 2797, 298, 1708, 990, 2326, 4], "code_num": [2], "code": "for i in range (0,1000):\\n   if data['statuses'][i][u'lang']==u'en':\\n      print data['statuses'][i]['text']\\n      print '\\n'", "id": "20579745", "code_sizes": 1}, {"nl_num": [3, 188, 2855, 167, 568, 2590, 4], "code_num": [2], "code": "import mechanize\\n\\nself.browser = mechanize.Browser()\\nself.browser.open(self.url)\\nself.browser.select_form(name=\"login\")\\n\\nself.browser[\"login_nick\"] = self.username\\nself.browser[\"login_pwd\"] = self.password\\nself.browser.new_control(\"HIDDEN\", \"action\", {})\\ncontrol = self.browser.form.find_control(\"action\")\\ncontrol.readonly = False\\nself.browser[\"action\"] = \"login\"\\nself.browser.method = \"POST\"\\nself.browser.action = self.url\\n\\nresponse = self.browser.submit()", "id": "4225721", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 550, 568, 2246, 1828, 4486, 568, 1828, 1630, 761, 4], "code_num": [2], "code": "import urllib2\\ncontent = urllib2.urlopen(some_url)", "id": "33320138", "code_sizes": 1}, {"nl_num": [3, 236, 3047, 540, 1530, 568, 3178, 2, 3821, 1708, 188, 4], "code_num": [2], "code": "import re\\n\\nline = [u'x', u'y', u'z', u'???', u'a']\\n\\nif any([re.search(u'[\\u3131-\\ucb4c]', x) for x in line[3:]]):\\n    print \"found character\"", "id": "30512418", "code_sizes": 1}, {"nl_num": [3, 2, 2, 4179, 4691, 1566, 3747, 2, 2326, 4], "code_num": [2], "code": "# code\\n\\nif __name__ == \"__main__\": exec(\"\"\"\\n\\n# main code\\n\\n#\"\"\")", "id": "6217505", "code_sizes": 1}, {"nl_num": [3, 3222, 1828, 3004, 2610, 1400, 4350, 1708, 990, 4], "code_num": [2], "code": "open('1.txt', 'w')", "id": "21632386", "code_sizes": 1}, {"nl_num": [3, 2613, 1959, 2610, 4370, 223, 1828, 3518, 2610, 1828, 3083, 4], "code_num": [2], "code": "isid_node=[100,105]\\nisid_init_val=100\\nisid_new=[]\\n\\nwhile(len(isid_new)<=5):\\n  if isid_init_val in isid_node:\\n    isid_init_val=isid_init_val+1\\n  else:\\n    isid_new.insert(20,isid_init_val)\\n    isid_init_val=isid_init_val+1\\n\\nprint isid_new", "id": "33117127", "code_sizes": 1}, {"nl_num": [3, 2, 1007, 1711, 2732, 223, 4505, 568, 2092, 540, 3550, 4], "code_num": [2], "code": "from scrapy.contrib.pipeline.media import MediaPipeline\\n\\nclass VideoPipeline(MediaPipeline):\\n    VIDEOS_DIR = \"/stack/scrapy/video/video/store\"\\n\\n    def get_media_requests(self, item, info):\\n        \"\"\"\\n        Evaluate file and, if you like it, download it.\\n        \"\"\"\\n        os.system(\"vlc -vvv %s > /dev/null 2>&1 &\" % item['video_url'][0])\\n        your_opinion = raw_input(\"how does it look?\")\\n        item[\"comment\"] = your_opinion\\n        if your_opinion == \"hot\":\\n            # issue request download video\\n            return Request(item[\"video_url\"][0], meta={\"item\":item})\\n\\n    def media_downloaded(self, response, request, info):\\n        \"\"\"\\n        File is downloaded available as response.body save it.\\n        \"\"\"\\n        item = response.meta.get(\"item\")\\n        video = response.body\\n        video_basename = item['title'][0]\\n        new_filename = os.path.join(self.VIDEOS_DIR, video_basename)\\n        f = open(new_filename, 'wb')\\n        f.write(video)\\n        f.close()", "id": "23815324", "code_sizes": 1}, {"nl_num": [3, 3397, 1828, 2710, 3293, 2711, 177, 2426, 2326, 4], "code_num": [2], "code": "p = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE)\\nsomestr = p.stdout.readline()", "id": "20601765", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 4229, 1400, 4714, 338, 223, 611, 4498, 2610, 4429, 4], "code_num": [2], "code": "from bs4 import BeautifulSoup\\nimport requests\\n\\nr=requests.get('http://www.virginiaequestrian.com/main.cfm?action=greenpages&GPType=8')\\nsoup=BeautifulSoup(r.content)\\n\\ntbl = soup.findAll('table')[2]\\nfor tr in tbl.findAll('tr'):\\n    for td in tr.findAll('td'):\\n        if td.p:\\n            print td.p.string", "id": "31501557", "code_sizes": 1}, {"nl_num": [3, 3089, 2604, 1400, 159, 1442, 568, 2484, 772, 415, 1438, 327, 3293, 1828, 2710, 2610, 188, 2326, 4], "code_num": [2], "code": "# s is the string to parse\\nloadavg = [float(x) for x in s.rsplit('load average: ', 1)[1].split(', ')]", "id": "471211", "code_sizes": 1}, {"nl_num": [3, 2, 4231, 2, 1176, 3293, 188, 2326, 4], "code_num": [2], "code": "from os import getcwd\\n\\nfilename = getcwd() + '//' + filename", "id": "17050211", "code_sizes": 1}, {"nl_num": [3, 3748, 1828, 4238, 4179, 1773, 568, 1828, 4238, 4179, 2639, 2610, 990, 4], "code_num": [2], "code": "[tuple(int(s) for s in i.split(',')) for i in k]", "id": "25478881", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3715, 1828, 4238, 540, 2, 889, 1342, 1637, 4], "code_num": [2], "code": "list1 = [i for i in list1 if not(i%3==0)]", "id": "17896556", "code_sizes": 1}, {"nl_num": [3, 2, 57, 3481, 223, 619, 3843, 899, 4], "code_num": [2], "code": "filnames = [\"LOG.001\",\"LOG.002\",\"LOG.001.csv\",\"LOG.003.csv\",\"LOG.1002\"]\\nprint [x for x in filnames if re.search(\"LOG.\\d+$\",x)]\\n\\n['LOG.001', 'LOG.002', 'LOG.1002']", "id": "24515320", "code_sizes": 1}, {"nl_num": [3, 40, 223, 1959, 2610, 188, 1650, 4], "code_num": [2], "code": "for i in range(numberOfValues):\\n    print startValue + i * increment", "id": "19205614", "code_sizes": 1}, {"nl_num": [3, 3055, 2206, 853, 2473, 93, 4238, 4], "code_num": [2], "code": "list3 = [list(a) for a in zip(list1, list2)]", "id": "12624623", "code_sizes": 1}, {"nl_num": [3, 2, 2947, 2610, 1828, 1550, 1170, 4], "code_num": [2], "code": "return gcd((b, a % b))", "id": "20151081", "code_sizes": 1}, {"nl_num": [3, 2367, 3996, 3293, 55, 1833, 4], "code_num": [2], "code": "from collections import OrderedDict\\n\\nwith open('/home/jon/testdata.txt') as fin:\\n    lines = (line.rstrip() for line in fin)\\n    unique_lines = OrderedDict.fromkeys( (line for line in lines if line) )\\n\\nprint unique_lines.keys()\\n# ['None_None', 'ConfigHandler_56663624', 'ColumnConverter_56963312',PredicatesFactory_56963424', 'PredicateConverter_56963648', 'ConfigHandler_80134888']", "id": "15830290", "code_sizes": 1}, {"nl_num": [3, 2, 4047, 2, 1708, 188, 4], "code_num": [2], "code": "def run_strategy(smaPeriod,inst):\\n\\n        # Download the bars.\\n    feed = yahoofinance.build_feed([inst], 2011, 2013, \".\")\\n\\n        # Evaluate the strategy with the feed's bars.\\n    myStrategy = MyStrategy(feed, inst, smaPeriod)\\n    myStrategy.run()\\n    print \"Final portfolio value: $%.2f\" % myStrategy.getBroker().getEquity()\\ndef main():\\n    instruments = [\"AAPL\",\"EBAY\", \"NFLX\", \"BBY\"]\\n    for inst in instruments:\\n            run_strategy(10,inst)\\nif __name__ == '__main__':\\n        main()", "id": "23186816", "code_sizes": 1}, {"nl_num": [3, 1503, 4798, 1828, 2710, 631, 540, 2473, 4179, 1828, 4238, 1007, 451, 262, 3747, 1022, 2, 4], "code_num": [2], "code": "name=name[len(filter(name.startswith,prefixes+[''])[0]):]", "id": "7539959", "code_sizes": 1}, {"nl_num": [3, 3082, 3494, 3337, 2610, 990, 4], "code_num": [2], "code": "def user_updater(self):\\n    self.user_updater_id = self.user_label.after(1000, self.user_updater)\\n    lines = []\\n    for user in self.server.Users:\\n        lines.append(user)\\n    self.user_label[\"text\"] = \"\\n\".join(lines)\\n\\ndef stop_user_updater(self):\\n    self.user_label.after_cancel(self.user_updater_id)", "id": "773797", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2484, 1400, 3744, 338, 3293, 1828, 1221, 3004, 1708, 990, 2326, 4], "code_num": [2], "code": "from pydub import AudioSegment\\n\\nsound = AudioSegment.from_mp3(\"test.mp3\")\\n\\n# sound._data is a bytestring\\nraw_data = sound._data", "id": "16634128", "code_sizes": 1}, {"nl_num": [3, 2, 3494, 4249, 568, 244, 4179, 4739, 2714, 2464, 1708, 177, 2964, 4], "code_num": [2], "code": "len_max = 0\\nlist_items = [\"item2\", \"item2\", \"item3+a few characters for the size\"]\\nfor m in list_items:\\n    if len(m) > len_max:\\n        len_max = len(m)\\n\\nimport tkinter\\nmaster = Tk()\\n\\nmy_listbox1 = Listbox(master, width = len_max)\\nmy_listbox1.grid(row = 0, column = 0)\\n\\nmy_listbox2 = Listbox(master, width = len_max)\\nmy_listbox2.grid(row = 0, column = 1)\\n\\nmy_listbox1.insert(END, list_items[0])\\nmy_listbox2.insert(END, list_items[1])\\nmy_listbox2.insert(END, list_items[2])\\n\\nmaster.mainloop()", "id": "31046479", "code_sizes": 1}, {"nl_num": [3, 550, 568, 120, 2126, 568, 1828, 3061, 1576, 1297, 4768, 4178, 717, 2326, 4], "code_num": [2], "code": "return [FormRequest.from_response(response,\\n            formdata={'search': 'you\\'re search string'},\\n            callback=self.parse)]", "id": "7483118", "code_sizes": 1}, {"nl_num": [3, 188, 2, 172, 568, 939, 609, 3083, 4179, 118, 685, 4], "code_num": [2], "code": "import numpy as np\\n\\nd = np.random.choice(xrange(0, 1000), size=100000, replace=True).tolist()\\nd = [str(item) for item in d]\\n\\ntotal = len(d)\\ngreatest = d[total-1]\\nfor i in reversed(xrange(total)):\\n    greatest = max(greatest, d[i])\\n    if i % 1000 == 0:  # To track progress\\n        print i", "id": "34216037", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2878, 1400, 1976, 1081, 3293, 2157, 177, 863, 3886, 2, 1828, 3008, 2610, 2, 2326, 4], "code_num": [2], "code": "groups_list = User.objects.filter(userprofile__status__in=group_list).values_list('email',    flat=True)", "id": "6582183", "code_sizes": 1}, {"nl_num": [3, 990, 2464, 586, 1828, 262, 2223, 2605, 1007, 451, 2, 551, 549, 1537, 4], "code_num": [2], "code": "temp = gc.open(row['sheet'])\\nwks = temp.row['worksheet']", "id": "33542920", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1712, 1828, 346, 4018, 568, 1828, 3004, 841, 223, 2, 4], "code_num": [2], "code": "import cloud\\nimport cPickle as pickle\\n\\n# to write\\ncloud.bucket.putf(pickle.dumps(P), 'p.csv')\\n\\n# to read\\nobj = pickle.loads(cloud.bucket.getf('p.csv').read())", "id": "17707178", "code_sizes": 1}, {"nl_num": [3, 1727, 3909, 4179, 3107, 4018, 438, 3456, 3518, 2604, 2610, 2828, 2, 4], "code_num": [2], "code": "m[np.argmin(m[:, 0]), :]", "id": "29030341", "code_sizes": 1}, {"nl_num": [3, 3333, 2, 2610, 188, 3293, 2, 889, 4], "code_num": [2], "code": "import matplotlib.pyplot as plt;\\nplt.plot(X, Y, color);\\nplt.show();", "id": "22612612", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 2103, 1828, 990, 4238, 3794, 568, 1828, 2776, 1422, 3715, 1170, 4217, 2326, 4], "code_num": [2], "code": "return map(lambda x: x.doSomething(), \\n           filter(lambda x: x[0] == \"z\", getIterator()))", "id": "8897536", "code_sizes": 1}, {"nl_num": [3, 1372, 3293, 3079, 4505, 540, 990, 897, 4], "code_num": [2], "code": "for row in cr:\\n    if row or any(row) or any(field.strip() for field in row):\\n         ca.writerow(row)\\n\\n# add these two lines\\noutputCSV.close() \\nappendCSV.close()\\n\\nf=csv.reader(open('C:\\\\..\\\\OUTPUT.csv','rb'))\\nfor column in f:\\n     if column or any(column) or any(fields.strip() for fields in column):\\n         ca_final.writerow(column[3:]) # put a colon here\\n\\n# close files\\ninputCSV.close()\\noutputCSV.close()\\nappendCSV.close()", "id": "31960498", "code_sizes": 1}, {"nl_num": [3, 2522, 619, 3976, 3293, 2062, 4], "code_num": [2], "code": "from selenium import webdriver\\nfrom selenium.webdriver.common.keys import Keys\\nimport time\\ndriver = webdriver.Firefox()\\ndriver.get(\"http://www.flipkart.com/mobiles/pr?   p%5B%5D=sort%3Dfeatured&sid=tyy%2C4io&ref=659eb948-c365-492c-99ef-59bd9f0427c6\")\\ntime.sleep(3)\\nfor i in range(5):\\n    driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\") # scroll to bottom of page\\n    time.sleep(2)\\ndriver.find_element_by_xpath('//*[@id=\"show-more-results\"]').click() # click load more  button, needs to be done until you reach the end.\\nelem=[]\\nelem=driver.find_elements_by_xpath('.//div[@class=\"pu-title fk-font-13\"]')\\nfor e in elem:\\n   print e.text", "id": "23651185", "code_sizes": 1}, {"nl_num": [3, 2471, 927, 4714, 2610, 990, 4], "code_num": [2], "code": "sql = (\"CREATE INDEX index_my_table2 ON my_table (value);\")\\ncursor.execute(sql)", "id": "23715466", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1818, 1828, 1884, 4179, 2, 2610, 2529, 3022, 2326, 4], "code_num": [2, 23, 2, 2, 2], "code": "_ATTRIBUTE_PATTERN = r'[\\w_]+\\s*=\\s*[\\w\\.\\-]+' # matches ad = 0.013p\\n# _ATTRIBUTE_PATTERN = r'[^=]+=[^=]+' # matches string containing '='\\n_PIN_PATTERN = r'\\w+\\s*:\\s*\\w+'  # matches VSS:F85\\n# _PIN_PATTERN = r'[^=]+' # if you want to match any string which does not contain '=' char", "id": "21574240", "code_sizes": 5}, {"nl_num": [3, 2149, 472, 2710, 853, 1438, 4], "code_num": [2], "code": "def as_float32(self):\\n    \"\"\"\\n    See: http://en.wikipedia.org/wiki/IEEE_754-2008\\n    \"\"\"\\n    from struct import pack,unpack\\n    s = self.bitlist\\n    return unpack(\"f\",pack(\"I\", bits2int(s)))\\n\\n# Where the bits2int function converts bits to an integer.  \\ndef bits2int(bits):\\n    # You may want to change ::-1 if depending on which bit is assumed\\n    # to be most significant. \\n    bits = [int(x) for x in bits[::-1]]\\n\\n    x = 0\\n    for i in range(len(bits)):\\n        x += bits[i]*2**i\\n    return x", "id": "7395806", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3222, 1828, 941, 1463, 4179, 1828, 4219, 4], "code_num": [2], "code": "#!/usr/bin/env python\\nimport os\\nimport zipfile\\n\\ndef zipdir(path, ziph):\\n    # ziph is zipfile handle\\n    for root, dirs, files in os.walk(path):\\n        for file in files:\\n            ziph.write(os.path.join(root, file))\\n\\nif __name__ == '__main__':\\n    zipf = zipfile.ZipFile('Python.zip', 'w')\\n    zipdir('tmp/', zipf)\\n    zipf.close()", "id": "1855095", "code_sizes": 1}, {"nl_num": [3, 2259, 2610, 568, 2590, 1708, 188, 823, 4691, 4], "code_num": [2], "code": "payload_login = {\\n    'proxyUsername': username,\\n    'proxyPassword': password,\\n    'proxyRememberUser': true\\n}", "id": "25373649", "code_sizes": 1}, {"nl_num": [3, 69, 1535, 2291, 3788, 3674, 3514, 2888, 4752, 568, 3371, 2007, 265, 2464, 990, 4], "code_num": [2], "code": "some_task()#do processor heavy task", "id": "4451714", "code_sizes": 1}, {"nl_num": [3, 2149, 528, 3995, 4778, 3293, 177, 82, 568, 177, 1609, 2610, 188, 4], "code_num": [2], "code": "import os\\n\\nfiles = os.listdir(\".\")\\nfor filename in files:\\n    file_wo_ext, file_ext = os.path.splitext(filename)\\n    if file_ext == \".PNG\":\\n        newfile = file_wo_ext + \".png\"\\n        os.rename(filename, newfile)", "id": "7594318", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 2051, 1828, 3211, 2133, 1708, 3821, 169, 382, 1956, 4327, 2610, 188, 897, 2326, 4], "code_num": [2], "code": "chr = \"*\"\\nsize = 5\\nrow = 1\\nwhile row <= size:\\n    col = size - row + 1\\n    while col <= size:\\n        print ' ', \\n        col = col + 1\\n    col = 0\\n    while col <= size-row:\\n        print chr, \\n        col = col + 1\\n    row = row + 1\\n    print ''\\nprint ''", "id": "19851547", "code_sizes": 1}, {"nl_num": [3, 188, 2, 864, 550, 568, 2878, 2605, 568, 2545, 2326, 4], "code_num": [2], "code": "please_die = threading.Event()\\n\\n# in handler\\nplease_die.set()\\n\\n# in main thread\\nplease_die.wait()\\nhttpd.shutdown()", "id": "11493985", "code_sizes": 1}, {"nl_num": [3, 4731, 540, 2687, 2238, 148, 2464, 1395, 3528, 4], "code_num": [2], "code": "from pylab import *\\n\\ndef genuchten(t,C,k):\\n    return 1/(1+(C/t)**k)**(1-1/k)\\n\\n###MAIN#######\\nt0, Y, X = ogrid[0:10:100j, 1:10:10j, 1:10:10j]\\nf0 = genuchten(t0, 3, 3)\\nf = genuchten(t0, X, Y)\\nZ = sum(abs(f0-f), axis=0)\\ncontourf(X.ravel(), Y.ravel(), Z)\\nshow()", "id": "11872496", "code_sizes": 1}, {"nl_num": [3, 3755, 568, 1519, 3483, 2548, 4092, 568, 2, 2610, 3508, 990, 4], "code_num": [2], "code": "import wx.lib.agw.pyprogress.ProgressGauge as pg\\n\\nprog = pg.ProgressGauge(self, -1)\\nprog.SetGaugeBackground(wx.Colour(0, 0, 0))", "id": "4468326", "code_sizes": 1}, {"nl_num": [3, 188, 864, 3344, 813, 899, 4], "code_num": [2], "code": "import _mysql\\n\\ndb=_mysql.connect(\"localhost\",\"sundar\",\"\",\"test\")\\n\\ndb.query(\"select username from auth_user\")\\n\\nresult = db.store_result()\\nr=\"\"\\nwhile True:\\n    record = result.fetch_row()\\n    if not record: break\\n    elif record is None:break\\n    else:r+= record[0][0]\\nprint r", "id": "23287767", "code_sizes": 1}, {"nl_num": [3, 4764, 1828, 3746, 853, 3055, 4311, 4], "code_num": [2], "code": "def list_parser(l):\\n    for t in l:\\n        items = t[0].split(\", \")\\n        category = items[0]\\n        number_strings = items[1:]\\n        numbers = [float(n) for n in number_strings]\\n        yield (category, numbers)", "id": "32046513", "code_sizes": 1}, {"nl_num": [3, 848, 869, 1297, 869, 169, 2, 589, 265, 540, 1828, 188, 3306, 4], "code_num": [2], "code": "import time\\ndef time_chunk( some_source, period=10 ):\\n    start= time.time()\\n    buffer= []\\n    for line in some_source:\\n        buffer.append( line )\\n        if time.time() - start >= period:\\n            start= time.time()\\n            yield buffer\\n            buffer= []\\n    yield buffer\\n\\nfor chunk in time_chunk( sys.stdin ):  \\n    print( stats( chunk ) )", "id": "5276551", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2616, 1828, 1170, 3119, 449, 3676, 4178, 1400, 2943, 869, 2464, 2063, 177, 4645, 177, 3119, 2238, 1007, 1470, 1007, 3528, 4790, 1650, 4], "code_num": [2], "code": "def myprint(times):\\n    print(times*\"foobar\")\\nfoo = random.randint(1, 6)\\nmyprint(foo)", "id": "9693655", "code_sizes": 1}, {"nl_num": [3, 2, 568, 1828, 2375, 2067, 2610, 188, 4], "code_num": [2], "code": "def example(arg_list, res=[]):\\n    if arg_list == []:\\n        print res\\n        return\\n    for i in arg_list[0]:\\n        example(arg_list[1:], res+[i])", "id": "34407116", "code_sizes": 1}, {"nl_num": [3, 1060, 3723, 2252, 2385, 727, 4], "code_num": [2], "code": "e2.delete()", "id": "29657312", "code_sizes": 1}, {"nl_num": [3, 3427, 2610, 2052, 3538, 188, 4], "code_num": [2], "code": "f = urlopen ('http://ichart.finance.yahoo.com/table.csv?s=AAPL&d=4&e=29&f=2014&g=d&a=8&b=22&c=1981&ignore=.csv')\\nwith open('output.csv', 'w') as out:\\n    # print header first\\n    out.write(f.readline())\\n\\n    # then print reversed lines\\n    for line in reversed(f.readlines()):\\n        out.write(line)\\n\\nf.close()  # !!!", "id": "23938334", "code_sizes": 1}, {"nl_num": [3, 550, 568, 941, 1828, 746, 4179, 2206, 4667, 4356, 2610, 1828, 4238, 2610, 990, 2326, 4], "code_num": [2], "code": "zip(*list_of_list)", "id": "19397712", "code_sizes": 1}, {"nl_num": [3, 3083, 3293, 2710, 4179, 3648, 4499, 4], "code_num": [2], "code": "s = raw_input() # input() in Python 3\\ntry:\\n  numbers = map(int, s.split())\\nexcept ValueError:\\n  print('Invalid format')", "id": "7281257", "code_sizes": 1}, {"nl_num": [3, 3082, 1828, 1748, 1041, 2610, 4064, 4], "code_num": [2], "code": "Feed.objects(_id=\"...\", posts__text=\"findvalue\").update(set__posts__S__value=\"updatevalue\")", "id": "14170479", "code_sizes": 1}, {"nl_num": [3, 1734, 2684, 3008, 338, 2237, 4178, 1976, 817, 4], "code_num": [2], "code": "def save(self):\\n    data = self.cleaned_data\\n\\n    questions = get_questions_with_tag('example_tag')\\n    questions = questions[:data['number_of_questions']]\\n\\n    self.instance.save()\\n    self.instance.questions = questions\\n\\n    quiz.save()", "id": "26258980", "code_sizes": 1}, {"nl_num": [3, 188, 864, 69, 1535, 483, 2878, 4439, 4179, 1400, 18, 1039, 4179, 3703, 724, 2326, 4], "code_num": [2], "code": "a = [[501, 4], [501, 4], [501, 4], [501, 4]]\\nb = [c[0] for c in a]", "id": "3898065", "code_sizes": 1}, {"nl_num": [3, 1503, 4633, 2613, 1568, 1400, 1162, 2610, 1828, 1250, 4403, 3400, 4], "code_num": [2], "code": "def mostlyVowels(words):\\n  acc = []\\n  for word in words.split():\\n    i = 0\\n    for char in word.lower():\\n      if char in 'aeiou': i += 1\\n      else:               i -= 1\\n    if i > 0: acc.append(word)\\n  return acc", "id": "26539904", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4639, 3728, 2, 3293, 291, 1531, 2326, 4], "code_num": [2], "code": "rows, cols = map(int, os.popen('stty size', 'r').read().split())\\nchild.setwinsize(rows, cols)", "id": "16804254", "code_sizes": 1}, {"nl_num": [3, 2076, 1750, 3518, 3293, 1828, 382, 2746, 1189, 2610, 990, 4], "code_num": [2], "code": "def try_get(dic, default, *keys):\\n    for key in keys:\\n        try:\\n            dic = dic[key]\\n        except KeyError:\\n            return default\\n    return dic\\n\\ne['a'] = try_get(d, 0, 'a')\\ne['d'] = try_get(d, 0, 'b', 'c', 'd')", "id": "14451985", "code_sizes": 1}, {"nl_num": [3, 697, 1828, 679, 2, 3977, 551, 1828, 2, 4179, 3083, 4], "code_num": [2], "code": "class AvgList(list):\\n  def avg(self):\\n     for items in self:\\n        if not isinstance(items,int):\\n            raise ValueError('Invalid item in list. All items need to be an integer.')\\n\\n     return sum(self)/len(self)", "id": "33795535", "code_sizes": 1}, {"nl_num": [3, 990, 3119, 1637, 1400, 3372, 3293, 3467, 3004, 4], "code_num": [2], "code": "with open(\"malenames.txt\") as f:\\n   for line in f:\\n      print (line.split()[0])", "id": "13458868", "code_sizes": 1}, {"nl_num": [3, 1780, 1828, 869, 568, 1828, 1242, 2610, 2101, 2464, 640, 2, 4], "code_num": [2], "code": "import matplotlib.pyplot as plt\\ndef add_lines(ax=None):\\n    ax = ax or plt.gca()\\n    return ax.plot([1, 2], [1, 2])", "id": "17130574", "code_sizes": 1}, {"nl_num": [3, 188, 2905, 3293, 4612, 1569, 51, 4], "code_num": [2], "code": "import subprocess\\nimport tempfile\\n\\neditor = ['gedit']\\n\\nwith tempfile.NamedTemporaryFile(delete=False) as tmpfile:\\n    subprocess.call(editor + [tmpfile.name])    # editor = 'subl -w -n' for example \\n    tmpfile.file.close()\\n    tmpfile = file(tmpfile.name)\\n    print tmpfile.read()", "id": "28068058", "code_sizes": 1}, {"nl_num": [3, 3311, 1400, 889, 2610, 4238, 4572, 4018, 2610, 2, 4], "code_num": [2], "code": "A = [1,1,1,-1,-1,-1,-1,1,1,1,-1,-1]\\nAA = ['a','a','b','b','b','a','b','b','b','b','b','a','a']\\nvar = 0\\ncounter = 0\\nB = []\\nBB = []\\nfor num, val in enumerate(A):\\n    if var:\\n        if var==val:\\n            count = count + val\\n        else:\\n            var = val\\n            B.append(count)\\n            count = val\\n    else:\\n        var = val\\n        count = val\\n    if num == len(A) - 1:\\n        B.append(count)\\n\\nvar = 0\\ncounter = 0\\nfor num, val in enumerate(AA):\\n    if var: \\n        if var==val:\\n            count = count + 1\\n        else:\\n            BB.append([var, count])\\n            var = val\\n            count = 1\\n    else:\\n        var = val\\n        count = 1\\n    if num == len(AA) - 1:\\n        BB.append([val, count])", "id": "32419456", "code_sizes": 1}, {"nl_num": [3, 990, 864, 1378, 4179, 3055, 2, 1773, 4], "code_num": [2], "code": "import datetime\\n\\nd1 = datetime.datetime.strptime('2011:10:01:10:30:00', '%Y:%m:%d:%H:%M:%S')\\nd2 = datetime.datetime.strptime('2011:10:01:11:15:00', '%Y:%m:%d:%H:%M:%S')\\ndiff = (d2 - d1).total_seconds() / 60", "id": "7601781", "code_sizes": 1}, {"nl_num": [3, 4328, 549, 733, 1833, 3293, 4662, 2610, 188, 4], "code_num": [2], "code": "HtmlFile = open(fname, 'r', encoding='utf-8')\\nsource_code = HtmlFile.read()", "id": "32547543", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2484, 1081, 3353, 1708, 1400, 3279, 4563, 4102, 2798, 4564, 2326, 4], "code_num": [2, 2], "code": "body = re.sub(\"^[\\s\\S]*?[\\n\\r][\\n\\r]\", \"\", body)", "id": "22731451", "code_sizes": 2}, {"nl_num": [3, 188, 69, 2378, 1828, 2042, 2, 1708, 549, 2, 177, 2, 177, 2, 841, 4], "code_num": [2], "code": "poly = [(0,10),(10,10),(10,0),(0,0)]\\n\\n\\ndef segments(poly):\\n        \"\"\"A sequence of (x,y) numeric coordinates pairs \"\"\"\\n        return zip(poly, poly[1:] + [poly[0]])\\n\\ndef area(poly):\\n    \"\"\"A sequence of (x,y) numeric coordinates pairs \"\"\"\\n    return 0.5 * abs(sum(x0*y1 - x1*y0\\n        for ((x0, y0), (x1, y1)) in segments(poly)))\\n\\ndef perimeter(poly):\\n    \"\"\"A sequence of (x,y) numeric coordinates pairs \"\"\"\\n    return abs(sum(math.hypot(x0-x1,y0-y1) for ((x0, y0), (x1, y1)) in segments(poly)))", "id": "13517211", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1704, 1400, 338, 4179, 1828, 3744, 528, 2610, 990, 3747, 3783, 4], "code_num": [2], "code": "raw_data = imread('my_picture.raw')", "id": "30631789", "code_sizes": 1}, {"nl_num": [3, 188, 2049, 1095, 864, 361, 694, 4179, 4585, 4], "code_num": [2], "code": "import pandas as pd\\ndf = pd.DataFrame({\"pear\": [1,2,3], \"apple\": [2,3,4], \"orange\": [3,4,5]})\\n\\nlen(df.columns)\\n3", "id": "20297332", "code_sizes": 1}, {"nl_num": [3, 69, 568, 2, 1828, 868, 2093, 2610, 4158, 4], "code_num": [2], "code": "from tabwidget import Ui_MainWindow\\nimport sys\\nfrom PyQt4 import QtGui, QtCore\\n\\nclass MyApp(QtGui.QMainWindow):\\n    def __init__(self, parent=None):\\n        QtGui.QWidget.__init__(self, parent)\\n        self.ui = Ui_MainWindow()\\n        self.ui.setupUi(self)\\n\\n        QtCore.QObject.connect(self.ui.pushButton, QtCore.SIGNAL('clicked()'), self._show)\\n\\n    def _show(self):\\n        self.ui.tabWidget.setCurrentWidget(self.ui.tab_2)\\n        self.ui.textBrowser.setSource(QtCore.QUrl('text.html#anchor'))\\n\\nif __name__ == \"__main__\":\\n    app = QtGui.QApplication(sys.argv)\\n    mw = MyApp()\\n    mw.show()\\n    app.exec_()", "id": "3286451", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1217, 1828, 4534, 1448, 2710, 568, 331, 169, 3348, 1400, 2229, 2610, 4115, 3004, 2610, 990, 4], "code_num": [2], "code": "conn = boto.connect_s3(AWS_ACCESS_KEYXXX, AWS_SECRET_KEYXXX)\\nbucket = conn.get_bucket(AWS_BUCKET_NAMEXXX)\\nk = Key(bucket)\\nk.key = s3_file_name\\nk.set_metadata('Content-Type', 'image/jpeg')\\nk.set_contents_from_file(file_obj)", "id": "22730051", "code_sizes": 1}, {"nl_num": [3, 228, 69, 568, 2878, 4254, 4179, 4220, 327, 2610, 1828, 4238, 2326, 4], "code_num": [2], "code": "d = defaultdict(int)\\n\\nfor model in models:\\n\\n    getids = model.objects.values_list('keyword', 'score')\\n    for kw, score in getids:\\n        d[kw] += score", "id": "33112347", "code_sizes": 1}, {"nl_num": [3, 1343, 2610, 188, 2615, 568, 2203, 1738, 853, 1828, 3004, 4], "code_num": [2], "code": "tornado.options.options.log_file_prefix = \"local.log\"", "id": "33411269", "code_sizes": 1}, {"nl_num": [3, 188, 3027, 3747, 1117, 3316, 13, 2910, 4], "code_num": [2], "code": "def convertTime(seconds, tz):\\n    tzhours, tzminutes = map(int, (tz.lstrip('-')[:2], tz[-2:]))\\n    offset = tzhours * 3600 + tzminutes * 60\\n    if tz.startswith('-'):\\n        offset *= -1\\n    return time.strftime('%Y%m%d_%H%M%S', time.gmtime(seconds + offset))", "id": "11783564", "code_sizes": 1}, {"nl_num": [3, 550, 4570, 1400, 2481, 593, 4178, 1828, 2049, 2, 540, 3871, 2429, 327, 2326, 4], "code_num": [2], "code": "import numpy as np\\nts.groupby([by('year'), by('month'), by('day')]).apply(lambda x: np.mean(x))", "id": "11459106", "code_sizes": 1}, {"nl_num": [3, 4399, 682, 3747, 2, 568, 188, 1227, 1075, 682, 3747, 2, 4], "code_num": [2], "code": "import crypt\\ndef hashPassword(salt, password, rounds=5000):\\n    return crypt.crypt(password, '$6$rounds={:d}${}$'.format(rounds, salt))", "id": "6026226", "code_sizes": 1}, {"nl_num": [3, 4133, 2605, 1394, 568, 2007, 1828, 188, 4350, 551, 1828, 113, 2610, 4171, 2326, 4140, 1394, 2464, 69, 2326, 4], "code_num": [2], "code": "import pythoncom\\nimport win32serviceutil\\nimport win32service\\nimport win32event\\nimport servicemanager\\nimport socket\\n\\n\\nclass AppServerSvc (win32serviceutil.ServiceFramework):\\n    _svc_name_ = \"TestService\"\\n    _svc_display_name_ = \"Test Service\"\\n\\n    def __init__(self,args):\\n        win32serviceutil.ServiceFramework.__init__(self,args)\\n        self.hWaitStop = win32event.CreateEvent(None,0,0,None)\\n        socket.setdefaulttimeout(60)\\n\\n    def SvcStop(self):\\n        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)\\n        win32event.SetEvent(self.hWaitStop)\\n\\n    def SvcDoRun(self):\\n        servicemanager.LogMsg(servicemanager.EVENTLOG_INFORMATION_TYPE,\\n                              servicemanager.PYS_SERVICE_STARTED,\\n                              (self._svc_name_,''))\\n        self.main()\\n\\n    def main(self):\\n        pass\\n\\nif __name__ == '__main__':\\n    win32serviceutil.HandleCommandLine(AppServerSvc)", "id": "32404", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2616, 549, 4440, 1460, 3293, 1828, 4350, 568, 790, 2326, 4], "code_num": [2], "code": "from google.appengine.tools import appengine_rpc\\nuse_production = True\\nif use_production:\\n  base_url = 'myapp.appspot.com'\\nelse:\\n  base_url = 'localhost:8080'\\n\\n\\ndef passwdFunc():\\n  return ('user@gmail.com','password')\\n\\ndef main(argv):\\n  rpcServer = appengine_rpc.HttpRpcServer(base_url,\\n                                          passwdFunc,\\n                                          None,\\n                                          'myapp',\\n                                          save_cookies=True,\\n                                          secure=use_production)\\n# Makes the actual call, I guess is the same for POST and GET?\\nblah = rpcServer.Send('/some_path/')\\n\\nprint blah\\n\\nif __name__ == '__main__':\\n  main(sys.argv)", "id": "10118585", "code_sizes": 1}, {"nl_num": [3, 188, 425, 1383, 4043, 4], "code_num": [2], "code": "datetime.strptime(\"2012-03-10\", \"%Y-%m-%d\").strftime(\"%a, %d %b %Y %H:%M:%S EDT\")", "id": "9642930", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2, 1006, 2, 2610, 188, 2326, 4], "code_num": [2], "code": "scipy.sparse", "id": "12239002", "code_sizes": 1}, {"nl_num": [3, 2, 1237, 2610, 2, 213, 3747, 2093, 147, 4], "code_num": [2], "code": "import nautilus\\n\\nclass ExampleMenuProvider(nautilus.MenuProvider):\\n    def __init__(self):\\n        pass\\n\\n    def get_file_items(self, window, files):\\n        submenu = nautilus.Menu()\\n\\n        item = nautilus.MenuItem('Nautilus::sbi','Nau-T','image')\\n        item.set_submenu(submenu)\\n\\n        item_two = nautilus.MenuItem('Nautilus::s','www','image')\\n        submenu.append_item(item_two)\\n\\n        return item,", "id": "1845681", "code_sizes": 1}, {"nl_num": [3, 52, 4179, 1400, 1681, 3214, 4178, 1828, 869, 4], "code_num": [2], "code": "# Length along line that is closest to the point\\nprint(line.project(p))\\n\\n# Now combine with interpolated point on line\\nnp = line.interpolate(line.project(p))\\nprint(np)  # POINT (5 7)", "id": "24415806", "code_sizes": 1}, {"nl_num": [3, 69, 568, 2878, 3063, 4465, 3293, 990, 425, 177, 265, 3008, 4], "code_num": [2], "code": "def set_hour_for_date(customer, hour_str, transaction_date):\\n    meridian = hour_str[-2:]\\n    hour = int(hour_str[:2])\\n    if meridian == 'PM':\\n        hour = hour + 12\\n    relative_time = customer.time_zone.localize(datetime(\\n                                                        transaction_date.year, \\n                                                        transaction_date.month, \\n                                                        transaction_date.day, \\n                                                        hour, \\n                                                        0, \\n                                                        0, \\n                                                        294757))\\n\\n    return relative_time", "id": "26153933", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3191, 4220, 1569, 1438, 3963, 169, 3018, 3293, 4238, 4], "code_num": [2], "code": "import re\\nresult = set(['17.99', '0.0', '26.95', '26.95', '17.99', 'None', '0.0'])\\nresult = [item for item in result if re.match('\\d+\\.\\d+$', item)]\\nresult = [item for item in result if float(item) != 0.0]", "id": "24724946", "code_sizes": 1}, {"nl_num": [3, 1594, 1164, 2610, 2, 1569, 2610, 2725, 540, 2, 4669, 3340, 4], "code_num": [2], "code": "ALLOWED_HOSTS = ['localhost']", "id": "16084688", "code_sizes": 1}, {"nl_num": [3, 1325, 990, 897, 568, 3559, 1185, 3518, 853, 727, 4], "code_num": [2], "code": "cur.execute(\"INSERT INTO name (first, middle, last) VALUES (%s, %s, %s)\", (f, m, l))", "id": "31054210", "code_sizes": 1}, {"nl_num": [3, 2153, 4047, 2974, 2610, 188, 2817, 2, 4], "code_num": [2], "code": "self.panel1.configure(image=new_image)", "id": "13781653", "code_sizes": 1}, {"nl_num": [3, 672, 2817, 1750, 2200, 2924, 4], "code_num": [2], "code": "my_options = {\"bg\" : \"gray60\", \"font\" : (\"Tahoma\", 20)}\\n\\ntk.Label(root, text = \"Same background\", **my_options).grid(row = 1, column = 1)\\ntk.Button(root, text = \"and font.\", **my_options).grid(row = 1, column = 2, padx = (5, 0))", "id": "18194647", "code_sizes": 1}, {"nl_num": [3, 4402, 3018, 3293, 1095, 540, 927, 1227, 3909, 2977, 4], "code_num": [2], "code": "a.combine_first(b)", "id": "10771745", "code_sizes": 1}, {"nl_num": [3, 188, 2464, 3119, 1828, 135, 3803, 3676, 4178, 549, 1303, 749, 4], "code_num": [2], "code": "for i in range(1, 10):\\n    for j in \"abcdefghijklmnopqrstuvwxyz\":\\n        print j * i", "id": "10308731", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 3222, 3055, 769, 1605, 2795, 3703, 4807, 2326, 4], "code_num": [2], "code": "import multiprocessing as mp\\n\\nqueue = mp.Queue()\\n\\ndef adder(q):  # for the sake of this example, let's say we want to add squares of all numbers to the queue\\n    i = 0\\n    while i < 100:\\n        q.put(i**2)\\n        i += 1\\n    q.put(None)\\n\\ndef monitor(q):  # monitor the queue and do stuff with the data therein\\n    for e in iter(q.get, None):\\n        print(e)   # for now, let's just print the stuff\\n\\n\\na = mp.Process(target=adder, args=(queue,))\\nb = mp.Process(target=monitor, args=(queue,))\\na.start()\\nb.start()\\na.join()  # wait for the process to finish\\nb.join()  # wait for the process to finish (both processes running simultaneously)\\na.terminate()\\nb.terminate()", "id": "33207644", "code_sizes": 1}, {"nl_num": [3, 2641, 1339, 733, 4474, 624, 540, 188, 4], "code_num": [2], "code": "#!/usr/bin/env python\\n\\nfrom smtplib import SMTP              # sending email\\nfrom email.mime.text import MIMEText  # constructing messages\\n\\nfrom jinja2 import Environment        # Jinja2 templating\\n\\nTEMPLATE = \"\"\"\\n<html>\\n<head>\\n<title>{{ title }}</title>\\n</head>\\n<body>\\n\\nHello World!.\\n\\n</body>\\n</html>\\n\"\"\"  # Our HTML Template\\n\\n# Create a text/html message from a rendered template\\nmsg = MIMEText(\\n    Environment().from_string(TEMPLATE).render(\\n        title='Hello World!'\\n    ), \"html\"\\n)\\n\\nsubject = \"Subject Line\"\\nsender= \"root@localhost\"\\nrecipient = \"root@localhost\"\\n\\nmsg['Subject'] = subject\\nmsg['From'] = sender\\nmsg['To'] = recipient\\n\\n# Send the message via our own local SMTP server.\\ns = SMTP('localhost')\\ns.sendmail(sender, [recipient], msg.as_string())\\ns.quit()", "id": "30180406", "code_sizes": 1}, {"nl_num": [3, 1881, 648, 4105, 237, 853, 4139, 2549, 4], "code_num": [2], "code": "query = session.query(\\n    Account,\\n    case([(FollowAssociation.follower_id == None, False)], else_=True).label('first'),\\n    case([(ali.follower_id == None, False)], else_=True).label('second')\\n).outerjoin(\\n    FollowAssociation,\\n    and_(Account.id == FollowAssociation.followee_id, FollowAssociation.follower_id == 1)\\n).outerjoin(ali, and_(Account.id == ali.follower_id, ali.followee_id == 1))\\n\\n\\nclass CustomAccount(object):\\n    pass\\n\\n\\nmapper(CustomAccount, query.statement.alias())\\n\\nres = session.query(CustomAccount).all()\\nprint(res[0].id)\\nprint(res[0].first)", "id": "25853086", "code_sizes": 1}, {"nl_num": [3, 3527, 2, 169, 2, 327, 3293, 1828, 2, 1708, 1912, 4], "code_num": [2], "code": "class MyModelResource(Resource):\\n    class Meta:\\n        qs = MyModel.objects.all()\\n\\n    def dehydrate(self, bundle):\\n        # remove unneeded point-field from the response data\\n        del bundle.data['point']\\n        # add required fields back to the response data in the form we need it\\n        bundle.data['lat'] = bundle.obj.point.y\\n        bundle.data['lng'] = bundle.obj.point.x\\n        return bundle", "id": "12301195", "code_sizes": 1}, {"nl_num": [3, 3001, 1442, 568, 38, 1828, 3316, 1039, 2610, 1400, 4238, 540, 1864, 4], "code_num": [2], "code": "list[list.index('foo')] = None", "id": "16842340", "code_sizes": 1}, {"nl_num": [3, 188, 864, 550, 568, 2280, 3119, 4115, 853, 1828, 3004, 4], "code_num": [2], "code": "from BeautifulSoup import BeautifulSoup as bs\\nroot=lh.tostring(sliderRoot) #convert the generated HTML to a string\\nsoup=bs(root)                #make BeautifulSoup\\nprettyHTML=soup.prettify()   #prettify the html", "id": "6150108", "code_sizes": 1}, {"nl_num": [3, 3202, 338, 2610, 2697, 1708, 4156, 2610, 188, 4], "code_num": [2], "code": "max_row = ws.get_highest_row() # find last row of worksheet\\nreff = \"A1:A\" + str(max_row) # build an Excel range covering the data\\nvalues = [cell.value for cell in ws.range(reff)] # collect the data\\nws.cell('A' + str(max_row + 1)).value = ' '.join(values) # write values", "id": "11902672", "code_sizes": 1}, {"nl_num": [3, 2, 4179, 1400, 2, 4370, 1170, 4], "code_num": [2], "code": "def basic_gen_primes(n):\\n    \"\"\"Return a list of all primes less then or equal to n\"\"\"\\n    if n < 2:\\n        return []\\n\\n    # The sieve.  Each entry i represents (2i + 1)\\n    size = (n + 1) // 2\\n    sieve = [True] * size\\n\\n    # 2(0) + 1 == 1 is not prime\\n    sieve[0] = False\\n\\n    for i, value in enumerate(sieve):\\n        if not value:\\n            continue\\n\\n        p = 2*i + 1\\n\\n        # p is prime.  Remove all of its multiples from the sieve\\n        # p^2 == (2i + 1)(2i + 1) == (4i^2 + 4i + 1) == 2(2i^2 + 2i) + 1\\n        multiple = 2 * i * i + 2 * i \\n        if multiple >= size:\\n            break\\n\\n        while multiple < size:\\n            sieve[multiple] = False\\n            multiple += p \\n\\n    return [2] + [2*i+1 for i, value in enumerate(sieve) if value]", "id": "11741437", "code_sizes": 1}, {"nl_num": [3, 69, 568, 1875, 291, 2, 1976, 568, 1828, 260, 841, 2610, 655, 4], "code_num": [2], "code": "save_prof = comp_prof.save(commit=False)\\nsave_prof.user = request.user\\nsave_prof.save()", "id": "28928054", "code_sizes": 1}, {"nl_num": [3, 2951, 990, 4350, 2238, 540, 1790, 836, 3528, 551, 1828, 113, 4], "code_num": [2], "code": "import myGUI\\n\\nwhile True:\\n  try:\\n    myGUI.runGUICode() # make sure the execution stays in this loop\\n  except:\\n    pass # or do some recovery, initiallization, and logging here", "id": "31627231", "code_sizes": 1}, {"nl_num": [3, 1592, 549, 4115, 869, 169, 2131, 4633, 1637, 3963, 1605, 2122, 1828, 547, 4506, 4], "code_num": [2], "code": "if int(c.high0) >= 34:\\n            plt.text(x, y, int(c.high0), fontsize=7, fontweight='bold')", "id": "18732767", "code_sizes": 1}, {"nl_num": [3, 103, 2898, 593, 3599, 2610, 990, 4], "code_num": [2], "code": "class parent(object):\\n  def method(self):\\n    blah\\n    self.helper()\\n    blah\\n  def helper(self):\\n    print(\"parent running\")\\n\\nclass child(parent):\\n  def helper(self):\\n    print(\"child running\")", "id": "28225541", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4011, 4524, 817, 853, 1828, 4238, 2610, 188, 2326, 4], "code_num": [2], "code": "user_choice_port = \"23, 80, 44\"\\nprint map(int, user_choice_port.split(\",\"))\\nprint [int(n) for n in user_choice_port.split(\",\")]", "id": "24093487", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1065, 3782, 1007, 451, 96, 2610, 188, 1650, 2326, 4], "code_num": [2], "code": "from socket import timeout\\ntry:\\n    response = urllib.request.urlopen(url, timeout=10).read().decode('utf-8')\\nexcept (HTTPError, URLError) as error:\\n    logging.error('Data of %s not retrieved because %s\\nURL: %s', name, error, url)\\nexcept timeout:\\n    logging.error('socket timed out - URL %s', url)\\nelse:\\n    logging.info('Access successful.')", "id": "8763451", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 2, 1828, 4640, 568, 547, 822, 4], "code_num": [2], "code": "with open('some_namespace.belns', 'w') as fp:\\n    for key in sorted(hgnc_ns_dict):\\n        fp.write('    {0}|{1}\\n'.format(key, hgnc_ns_dict[key]))", "id": "16844617", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 3068, 549, 1039, 2610, 1400, 4238, 540, 1828, 2710, 3518, 2610, 990, 2326, 4], "code_num": [2], "code": "changes = \"D A C\"\\nmessages1 = changes.split(\" \")\\nif messages1[0] == \"D\":\\n    print \"message1 == 'D'\"\\n    #..... you logic here", "id": "33521433", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4254, 2746, 889, 4], "code_num": [2], "code": "dictf = reduce(lambda x, y: dict((k, v + y[k]) for k, v in x.iteritems()), dict1)", "id": "3490738", "code_sizes": 1}, {"nl_num": [3, 483, 2217, 1828, 1907, 3783, 223, 4491, 3747, 785, 3209, 2610, 188, 4], "code_num": [2], "code": "if tmin is None: tmin = -INF\\nif tmax is None: tmax = +INF\\n\\ntval = float(-b - discriminant) / float (2*a)\\nif tmin <= tval <= tmax:\\n    return tval \\n\\ntval = float(-b + discriminant) / float (2*a)\\nif tmin <= tval <= tmax:\\n    return tval\\n\\n# Neither solution was within the acceptable range.\\nreturn None", "id": "1873625", "code_sizes": 1}, {"nl_num": [3, 3504, 2, 1697, 3144, 1897, 3461, 2, 2, 2622, 4], "code_num": [2], "code": "scipy.linalg.solve", "id": "2361176", "code_sizes": 1}, {"nl_num": [3, 236, 4179, 1182, 2238, 1890, 3528, 4], "code_num": [2], "code": "try:\\n    how_much = int(next)\\nexcept ValueError:\\n    # handle the conversion failing; pass means 'ignore'\\n    pass", "id": "31637924", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2616, 2406, 2353, 2610, 3208, 966, 773, 1297, 1750, 2326, 4], "code_num": [2], "code": "from IPython.display import display, Javascript\\n\\ndef markdown_below():\\n    display(Javascript(\"\"\"\\n    IPython.notebook.insert_cell_below('markdown')\\n    \"\"\"));\\n\\nmarkdown_below()", "id": "19260901", "code_sizes": 1}, {"nl_num": [3, 4328, 4498, 4179, 3433, 3004, 853, 2710, 2610, 188, 4], "code_num": [2], "code": "import csv\\nwith open('eggs.csv', 'rb') as csvfile:\\n    spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')\\n    for row in spamreader:\\n        print ', '.join(row)", "id": "16268174", "code_sizes": 1}, {"nl_num": [3, 3990, 2, 2610, 4754, 2610, 1273, 568, 3348, 1110, 1708, 2, 1418, 4], "code_num": [2], "code": "ai = NTLMAuthenticationInfo(\"domain\", \"your host\", \"user\", \"password\")\\nresult = request101.GET('/')\\nresult = NTLMAuthentication(result, request101, ai)", "id": "9325980", "code_sizes": 1}, {"nl_num": [3, 1468, 1828, 955, 2019, 3674, 188, 897, 4], "code_num": [2], "code": "import subprocess\\n\\np = subprocess.Popen('commands to run program', shell=True, stdin=subprocess.PIPE)\\np.communicate(input='Y')\\np.wait()", "id": "19195903", "code_sizes": 1}, {"nl_num": [3, 69, 568, 4570, 1400, 1712, 1422, 3518, 4179, 262, 2610, 990, 4], "code_num": [2], "code": "back_minutes = timedelta(minutes=int(sys.argv[2]))", "id": "7059787", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 948, 1828, 2, 1959, 2610, 2135, 4], "code_num": [2], "code": "QTimer.singleShot(60000, self.RefreshData)", "id": "14120889", "code_sizes": 1}, {"nl_num": [3, 1031, 2, 2536, 1605, 1535, 840, 577, 568, 2684, 1828, 2042, 2238, 2610, 990, 3528, 4], "code_num": [2], "code": "import math\\nimport matplotlib.patches as patches\\nimport pylab\\npp=[(-0.500000050000005, -0.5), (-0.499999950000005, 0.5), (-0.500000100000005, -1.0), (-0.49999990000000505, 1.0), (0.500000050000005, -0.5), (-1.0000000250000025, -0.5), (1.0000000250000025, -0.5), (0.499999950000005, 0.5), (-0.9999999750000024, 0.5), (0.9999999750000024, 0.5), (0.500000100000005, -1.0), (0.49999990000000505, 1.0), (-1.0, 0.0), (-0.0, -1.0), (0.0, 1.0), (1.0, 0.0), (-0.500000050000005, -0.5)]\\n# compute centroid\\ncent=(sum([p[0] for p in pp])/len(pp),sum([p[1] for p in pp])/len(pp))\\n# sort by polar angle\\npp.sort(key=lambda p: math.atan2(p[1]-cent[1],p[0]-cent[0]))\\n# plot points\\npylab.scatter([p[0] for p in pp],[p[1] for p in pp])\\n# plot polyline\\npylab.gca().add_patch(patches.Polygon(pp,closed=False,fill=False))\\npylab.grid()\\npylab.show()", "id": "10846431", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 121, 4125, 3747, 2367, 775, 4], "code_num": [2], "code": "numbers_data = [int(e.text) for e in soup.find_all('td', 'right')]\\n\\nprint numbers_data", "id": "19016427", "code_sizes": 1}, {"nl_num": [3, 2432, 1828, 4238, 4179, 769, 2610, 990, 4178, 2580, 4179, 1537, 1007, 451, 2582, 2940, 3518, 2326, 4], "code_num": [2], "code": "score = dict(high=0, medium=1, low=2)\\nmylist.sort(key=lambda x: score[x.priority])", "id": "10529613", "code_sizes": 1}, {"nl_num": [3, 4419, 2610, 188, 1007, 451, 90, 540, 2, 4], "code_num": [2], "code": "arra = sum(a for i,a in enumerate(arra) if i %3==1 and i != 16)", "id": "1690203", "code_sizes": 1}, {"nl_num": [3, 487, 2, 733, 2610, 188, 4], "code_num": [2], "code": "from BeautifulSoup import BeautifulSoup\\ntree = BeautifulSoup(bad_html)\\ngood_html = tree.prettify()", "id": "3073881", "code_sizes": 1}, {"nl_num": [3, 2052, 2686, 1189, 2610, 188, 4], "code_num": [2], "code": "from dns import resolver,reversename\\naddr=reversename.from_address(\"2001:4860:4860::8888\")\\nstr(resolver.query(addr,\"PTR\")[0])", "id": "11901010", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3222, 1828, 2101, 2548, 3166, 540, 1828, 2720, 869, 2326, 4], "code_num": [2], "code": "import numpy as np\\nimport matplotlib.pyplot as plt\\n\\n# some example data\\nthreshold = 43.0\\nvalues = np.array([30., 87.3, 99.9, 3.33, 50.0])\\nx = range(len(values))\\n\\n# split it up\\nabove_threshold = np.maximum(values - threshold, 0)\\nbelow_threshold = np.minimum(values, threshold)\\n\\n# and plot it\\nfig, ax = plt.subplots()\\nax.bar(x, below_threshold, 0.35, color=\"g\")\\nax.bar(x, above_threshold, 0.35, color=\"r\",\\n        bottom=below_threshold)\\n\\n# horizontal line indicating the threshold\\nax.plot([0., 4.5], [threshold, threshold], \"k--\")\\n\\nfig.savefig(\"look-ma_a-threshold-plot.png\")", "id": "28129606", "code_sizes": 1}, {"nl_num": [3, 188, 864, 550, 568, 3222, 549, 1856, 265, 4780, 2610, 4189, 4], "code_num": [2], "code": "df[c] = df[c] - 500", "id": "33730856", "code_sizes": 1}, {"nl_num": [3, 3759, 1901, 1605, 2, 205, 1901, 4], "code_num": [2], "code": "import matplotlib.pyplot as plt\\nfrom random import random\\n\\ndef get_dots(width, height, pitch):\\n    xs, ys = [], []\\n    for y in range(height // pitch):\\n      for x in range(width // pitch):\\n          xs.append((x + random()) * pitch)\\n          ys.append((y + random()) * pitch)\\n    return xs, ys\\n\\ndef main():\\n    xs, ys = get_dots(20, 20, 2)\\n    plt.scatter(xs, ys, c=\"r\")\\n    plt.axis((0., 20., 0., 20.))\\n    plt.show()\\n\\nif __name__==\"__main__\":\\n    main()", "id": "34112684", "code_sizes": 1}, {"nl_num": [3, 3990, 188, 4795, 568, 4314, 2, 3506, 4], "code_num": [2], "code": "lat = float(request.GET.get('lat'))\\nlng = float(request.GET.get('lng'))\\na = Authority.objects.get(area__contains=Point(lng, lat))\\nif a:\\n    json = simplejson.dumps({'name': a.name, \\n                             'area': \"{replaceme}\",\\n                             'id': a.id}), \\n    return HttpResponse(json.replace('\"{replaceme}\"', a.area.geojson),\\n                        mimetype='application/json')", "id": "2027668", "code_sizes": 1}, {"nl_num": [3, 2, 568, 869, 2610, 990, 2326, 4], "code_num": [2], "code": "from sys import exit\\n\\ndef menu():\\n    a = raw_input(\"choose: apple[a], grape[g], quit[q] \")\\n    if a == 'a':\\n        return 'apple'\\n    elif a == 'g':\\n        return 'grape'\\n    elif a == 'q':\\n        print 'Are you sure you want to quit?'\\n        b = raw_input ('Choose: yes[y], no[n] ')\\n        if b == 'y':\\n            exit()\\n        elif b == 'n':\\n            return menu()  # This calls the function again, so we're asked question \"a\" again\\n\\nmenu()", "id": "31352863", "code_sizes": 1}, {"nl_num": [3, 188, 864, 544, 3090, 1828, 3079, 2610, 1828, 1956, 1959, 4], "code_num": [2], "code": "line = list(csv_data) #Convert into a list\\n\\nlineCount = line[n] # Done so I can iterate line by line\\n\\nwhile (startTime + 30) > timeToEpoch(lineCount['EnterN']) >= startTime:\\n    print \"time on\"\\n    pc = playerCount(lineCount['EnterN'],lineCount['ExitN'],lineCount['Player'])\\n    n += 1\\n    lineCount = line[n]", "id": "30128592", "code_sizes": 1}, {"nl_num": [3, 188, 371, 338, 4526, 3293, 223, 1959, 250, 223, 1959, 4], "code_num": [2], "code": "import numpy as np\\nimport matplotlib.pyplot as plt\\n\\nx = 0.1\\n# preallocate xn\\nxn = np.zeros([1001, 200])\\n# linspace is better for a non-integer step\\nzz = np.linspace(2.8, 3.9, 1001)\\n\\n# use enumerate instead of counting iterations\\nfor j,z in enumerate(zz):\\n    print(j)\\n    for n in range(200):\\n        # use tuple unpacking so old values of x are unneeded\\n        xn[j,n], x = x, z*x*(1 - x)\\n\\nplt.plot(zz, xn[:, 100:], 'r.')\\nplt.show()", "id": "26743852", "code_sizes": 1}, {"nl_num": [3, 2, 864, 550, 568, 3222, 862, 4529, 2610, 1828, 990, 4271, 2326, 4], "code_num": [2], "code": "class Param(caffe.Layer):\\n    def setup(self, bottom, top):\\n        self.blobs.add_blob(1,2,3)\\n        self.blobs[0].data[...] = 0\\n\\n    def reshape(self, bottom, top):\\n        top[0].reshape(10)\\n\\n    def forward(self, bottom, top):\\n        print(self.blobs[0].data)\\n        self.blobs[0].data[...] += 1\\n\\n    def backward(self, top, propagate_down, bottom):\\n        pass", "id": "34498527", "code_sizes": 1}, {"nl_num": [3, 2905, 2, 1007, 3754, 1007, 4505, 540, 990, 2238, 740, 4018, 4572, 2587, 3528, 4], "code_num": [2], "code": "import numpy as np\\nimport os\\nimport sys\\n\\n# WARNING: this will work on little-endian architectures (eg Intel x86) only!\\nif '__main__' == __name__:\\n    if len(sys.argv) > 1:\\n        with open(sys.argv[1], 'rb') as f:\\n            magic = np.fromfile(f, np.float32, count=1)\\n            if 202021.25 != magic:\\n                print 'Magic number incorrect. Invalid .flo file'\\n            else:\\n                w = np.fromfile(f, np.int32, count=1)\\n                h = np.fromfile(f, np.int32, count=1)\\n                print 'Reading %d x %d flo file' % (w, h)\\n                data = np.fromfile(f, np.float32, count=2*w*h)\\n                # Reshape data into 3D array (columns, rows, bands)\\n                data2D = np.resize(data, (w, h, 2))\\n    else:\\n        print 'Specify a .flo file on the command line.'", "id": "28013200", "code_sizes": 1}, {"nl_num": [3, 483, 1535, 383, 3894, 3293, 3958, 2464, 3594, 3886, 483, 2, 3293, 2590, 4190, 2604, 666, 4723, 2244, 2000, 21, 4], "code_num": [2], "code": "fd = open(CONFIG.SERVICES_PATH + sname+'/'+url,'rb')", "id": "17081125", "code_sizes": 1}, {"nl_num": [3, 188, 2654, 4031, 3747, 2, 55, 4178, 2319, 4], "code_num": [2], "code": "from reportlab.pdfbase.pdfmetrics import stringWidth\\nfrom reportlab.rl_config import defaultPageSize\\n\\nPAGE_WIDTH  = defaultPageSize[0]\\nPAGE_HEIGHT = defaultPageSize[1]\\n\\ntext = \"foobar foobar foobar\"\\ntext_width = stringWidth(text)\\ny = 1050 # wherever you want your text to appear\\npdf_text_object = canvas.beginText((PAGE_WIDTH - text_width) / 2.0, y)\\npdf_text_object.textOut(text) # or: pdf_text_object.textLine(text) etc.", "id": "3755851", "code_sizes": 1}, {"nl_num": [3, 3535, 896, 568, 1869, 2, 2610, 2, 4], "code_num": [2], "code": "pdcurses_path = ctypes.util.find_library('pdcurses.dll')\\nif pdcurses_path:\\n    pdcurses = ctypes.CDLL(pdcurses_path)\\nelse:\\n    raise ImportError(\"could not locate pdcurses.dll library\")", "id": "8296802", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3788, 949, 990, 2, 1170, 4], "code_num": [2], "code": "def A(x, n):\\n    a = 3 * x\\n    for i in range(len(x)):\\n        a[i] += np.sum(x[np.ix_(n[i]-1)], axis=0)\\n    return a", "id": "23851463", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3222, 1828, 2, 2, 3293, 3055, 249, 4179, 2536, 4], "code_num": [2], "code": "array = [[(0,0),(1,0),(2,0),(3,0)],[(1,3),(1.4,2),(2,0)]]", "id": "24986969", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 1652, 1312, 4691, 2610, 1400, 2943, 2898, 4219, 2326, 4], "code_num": [15], "code": "__init__.py", "id": "27921874", "code_sizes": 1}, {"nl_num": [3, 990, 3068, 2603, 4491, 568, 3575, 3004, 4], "code_num": [2], "code": "for Z in ip_results:\\n    matching = 0\\n    for X in host_file:\\n        if Z in X:\\n            print Z, X\\n            matching = 1\\n    if matching == 0:\\n        print Z", "id": "30857515", "code_sizes": 1}, {"nl_num": [3, 2802, 170, 1563, 2610, 836, 4], "code_num": [2], "code": "class Settings(wx.Frame):\\n    def __init__(self, parent, run_params):\\n        self.run_params = run_params\\n        if self.run_params[\"running\"] == True:\\n            wx.Frame.__init__(self, parent, -1, 'Please Wait', size=(350,150), pos=(35, 100), style=wx.STAY_ON_TOP | wx.DEFAULT_FRAME_STYLE)\\n            wx.StaticText(self, -1, \"Processing files. Please wait\", style=wx.ALIGN_CENTRE)\\n            self.Centre()\\n            self.Show()\\n\\n    def OnClose(self):\\n        if self.run_params[\"running\"] == False:\\n            self.Close()", "id": "23608810", "code_sizes": 1}, {"nl_num": [3, 69, 568, 3202, 1007, 1890, 1007, 169, 1007, 3746, 1007, 769, 4], "code_num": [2], "code": "for item in out:\\n    text = text.replace(\"Keys1029\",\"Keys\"+str(item))", "id": "16570804", "code_sizes": 1}, {"nl_num": [3, 188, 2464, 1545, 4640, 327, 2610, 549, 2697, 3004, 4], "code_num": [2], "code": "import xlsxwriter\\n\\nworkbook = xlsxwriter.Workbook('data.xlsx')\\nworksheet = workbook.add_worksheet()\\n\\nd = {'a':['e1','e2','e3'],'b':['e1','e2'],'c':['e1']}\\nrow = 0\\ncol = 0\\n\\nfor key in d.keys():\\n    row += 1\\n    worksheet.write(row, col,     key)\\n    for item in d[key]:\\n        worksheet.write(row, col + 1, item)\\n        row += 1\\n\\nworkbook.close()", "id": "23113231", "code_sizes": 1}, {"nl_num": [3, 993, 167, 2610, 1708, 655, 3747, 2, 711, 2, 1400, 2319, 4], "code_num": [2], "code": "request.session", "id": "31370534", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2878, 2, 4179, 3843, 2549, 4179, 549, 1132, 1977, 1708, 3037, 2326, 4], "code_num": [2], "code": "# columns in table x\\nfor row in cursor.columns(table='x'):\\n    print row.column_name", "id": "4539254", "code_sizes": 1}, {"nl_num": [3, 188, 4328, 2, 3293, 1833, 4], "code_num": [2], "code": "with open(\"test.txt\", \"r\") as f:\\n    for a_line in f:\\n        command, quantity, price = a_line.split()\\n        print(command, quantity, price)\\n        # do what you want with these values here\\n        # please note that quantity and price are strings. need to \\n        # change them to float if you want to do some calculations.", "id": "28891633", "code_sizes": 1}, {"nl_num": [3, 2213, 990, 2047, 568, 369, 3090, 683, 4121, 2326, 4], "code_num": [2], "code": "import requests\\n\\nproxies = {\\n  \"http\": \"http://10.10.1.10:3128\",\\n  \"https\": \"http://10.10.1.10:1080\",\\n}\\n\\nrequests.get(\"http://example.org\", proxies=proxies)", "id": "30150025", "code_sizes": 1}, {"nl_num": [3, 3419, 2, 3747, 1180, 4379, 3886, 2, 540, 2049, 4], "code_num": [2], "code": "s.reindex(DatetimeIndex(start=s.index[0].replace(day=1), end=s.index[-1], freq='D'))", "id": "12840847", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 4335, 4220, 1394, 1773, 2610, 1828, 879, 2637, 746, 2326, 4], "code_num": [2], "code": "from itertools import product\\nimport string\\n\\ncharSet = string.ascii_letters + string.digits\\nfor wordchars in product(charSet, repeat=4):\\n    print ''.join(wordchars)", "id": "13380666", "code_sizes": 1}, {"nl_num": [3, 2385, 864, 3474, 2898, 262, 4178, 655, 260, 4], "code_num": [2], "code": "def save(self, *args, **kwargs):\\n    self.name = self.parent_set.all()[0].parent_name\\n    super(Child, self).save(*args, **kwargs)", "id": "33921581", "code_sizes": 1}, {"nl_num": [3, 3748, 694, 568, 2710, 521, 3186, 3475, 1022, 4], "code_num": [2], "code": "precision = 2\\nnumber_to_convert = 10000\\nprint \"%0.*e\"%(precision,number_to_convert)", "id": "23941488", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 69, 1535, 483, 297, 549, 4018, 299, 1828, 4019, 640, 2326, 4], "code_num": [2], "code": "idx = [slice(None)] * array.ndim\\nidx[axis] = slice(start, end)\\nmyslice = array[tuple(idx)]", "id": "18723364", "code_sizes": 1}, {"nl_num": [3, 1710, 4628, 4139, 2030, 2610, 2385, 2684, 4], "code_num": [2], "code": "form.instance.person.address", "id": "28894737", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 3182, 1374, 1007, 1891, 4526, 4692, 3484, 2610, 188, 2326, 4], "code_num": [2], "code": "import requests.packages.urllib3 as urllib3\\nurllib3.filepost.choose_boundary = lambda: 'I_AM_NOT_A_MULTIPART_BOUNDARY'\\n\\nwith open('foobar.txt') as f:\\n    r = requests.post(\"http://requestb.in/179gbs61\", files={'file':f})", "id": "18828156", "code_sizes": 1}, {"nl_num": [3, 3748, 1828, 3952, 4238, 568, 2830, 66, 188, 4], "code_num": [2], "code": "import datetime\\n\\nd = datetime.datetime(2008, 1, 1)\\nend = datetime.datetime(2009, 1, 1)\\n\\nwhile d <= end:\\n    print(d.strftime(\"%Y%m%d%H%M%S\"))\\n    d += datetime.timedelta(hours=6)", "id": "33767921", "code_sizes": 1}, {"nl_num": [3, 1169, 3670, 1273, 2610, 2101, 4], "code_num": [2], "code": "import numpy as np\\nimport matplotlib.pyplot as plt\\n\\nx = np.arange(0, 8, .1)\\nnp.random.shuffle(x)\\ny = np.sin(x)\\n\\nsx = np.argsort(x)  # find the order for sorting x\\nx2 = x[sx]          #    apply this to x\\ny2 = y[sx]          #    apply this to y\\n\\nplt.plot(x, y, 'y')\\nplt.plot(x2, y2, 'r', linewidth=4)\\n\\nplt.show()", "id": "19370289", "code_sizes": 1}, {"nl_num": [3, 4080, 1400, 1022, 3293, 4042, 3759, 1039, 568, 1400, 764, 1039, 2610, 1828, 764, 2238, 250, 1828, 4238, 3528, 4], "code_num": [2], "code": "my_list = [[3, 0, 2, 1, 5, 4], [5, 2, 1, 3, 0, 4]]\\nrande = 3  # for this example\\ndistances = [len(L) - L.index(rande) -1 for L in my_list]", "id": "33239011", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 2103, 1579, 1007, 451, 1960, 1007, 2, 4790, 1007, 822, 568, 763, 177, 1960, 223, 188, 2326, 4], "code_num": [2], "code": "struct.pack('>I', some_integer) + struct.pack('b'*len(long_array), *long_array)", "id": "1527534", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1875, 1828, 472, 3738, 2637, 568, 1828, 262, 2610, 990, 2326, 4], "code_num": [2], "code": "MSG_TERMINATOR = \"\\0\"", "id": "34543408", "code_sizes": 1}, {"nl_num": [3, 2367, 3004, 4778, 3293, 3004, 2019, 2717, 4], "code_num": [2], "code": "if extension == \".png\":\\n\\n    folder_path_length = len(folder_path)+1\\n    extension = len(file)-4 + folder_path_length\\n    filename = file[:extension]\\n\\n    os.rename(current, current[:extension])\\n\\n    extension = len(file)-4 \\n    truncated_filename = file[:extension]\\n\\n    print \"\\n\\t%s \\n\\tnow renamed to: %s\" % (filename, truncated_filename)\\n\\n    files_renamed_count +=1", "id": "29463517", "code_sizes": 1}, {"nl_num": [3, 545, 1828, 2, 604, 95, 169, 4335, 1828, 4031, 2452, 540, 4785, 3467, 4], "code_num": [2], "code": "_client = gdata.docs.client.DocsClient('My-Prety-App-v1')\\n# Set your prefered auth method\\n# ...\\nentry = _client.GetDoc('document:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')\\nexportFormat = 'html'\\ncontent = _client.GetFileContent(uri=entry.content.src + '&exportFormat=' + exportFormat)\\nself.response.out.write(content)", "id": "5019628", "code_sizes": 1}, {"nl_num": [3, 1574, 777, 3004, 568, 3388, 2064, 338, 169, 4356, 2605, 2610, 2054, 1977, 2610, 188, 4], "code_num": [2], "code": "from pymongo import MongoClient\\nimport xml.etree.ElementTree as ET\\nfrom urllib2 import urlopen\\n\\ncl = MongoClient()\\ncoll = cl[\"dbname\"][\"collectionname\"]\\n\\ntree = ET.parse(\"https://www.eventbrite.com/xml/event_search?app_key=USO53E2ZHT6LM4D5RA&country=DE&max=100&date=Future&page=1\")\\nroot = tree.getroot()\\n\\nfor event in root.findall(\"./event\"):\\n    doc = {}\\n    for c in event.getchildren():\\n        if c.tag in (\"start_date\", \"end_date\", \"title\"):\\n            doc[c.tag] = c.text\\n        elif c.tag == \"venue\":\\n            doc[c.tag] = {}\\n            for v in c.getchildren():\\n                if v.tag in (\"address\", \"address_2\", \"city\", \"latitude\", \"longitude\", \"name\", \"postal_code\"):\\n                    doc[c.tag][v.tag] = v.text\\n\\n    coll.insert(doc)", "id": "18595791", "code_sizes": 1}, {"nl_num": [3, 836, 2184, 4178, 1828, 2, 4], "code_num": [2], "code": "def Draw(self, e):\\n    print \"Draw\" \\n    img = wx.Image(\"./poster/Test2.png\", wx.BITMAP_TYPE_ANY)\\n    bit = wx.EmptyBitmap(517,524)\\n    imgBit = wx.BitmapFromImage(img)\\n    dc = wx.MemoryDC(imgBit)\\n    dc.SetPen(wx.Pen(wx.RED, 1))\\n    dc.DrawLines(((83, 375), (83, 42), (120, 42), (120,375), (83,375)))\\n    dc.SelectObject(wx.NullBitmap)# I didn't know I had to deselect the DC\\n    self.imageCtrl.SetBitmap(imgBit)  \\n    imgBit.SaveFile(\"bit.bmp\", wx.BITMAP_TYPE_BMP)", "id": "11786103", "code_sizes": 1}, {"nl_num": [3, 3860, 1442, 568, 861, 338, 568, 1828, 2684, 1708, 188, 2326, 4], "code_num": [2], "code": "import urllib, urllib2\\nurl = 'http://db.systemsbiology.net/gestalt/cgi-pub/Kaviar.pl'\\nform_data = {'chr':'chr1', 'pos':'46743'} # the form takes 2 parameters: 'chr', and 'pos'\\n                                          # the values given in the dict are\\n                                          # just examples.\\n# the next line POSTs the form to url, and reads the resulting response (HTML\\n# in this case) into the variable response\\nresponse = urllib2.urlopen(url,urllib.urlencode(form_data)).read()\\n# now you can happily parse response.", "id": "3927599", "code_sizes": 1}, {"nl_num": [3, 1432, 1283, 864, 1503, 2, 2610, 549, 528, 4], "code_num": [2], "code": "import numpy as np\\nimport Image\\nfrom scipy import ndimage\\nimport matplotlib.pyplot as plt\\n\\nroi = 2.5\\npeak_threshold = 120\\n\\nim = Image.open('Q766c.png');\\nimage = im.copy()\\n\\nsize = 2 * roi + 1\\nimage_max = ndimage.maximum_filter(image, size=size, mode='constant')\\nmask = (image == image_max)\\nimage *= mask\\n\\n# Remove the image borders\\nimage[:roi] = 0\\nimage[-roi:] = 0\\nimage[:, :roi] = 0\\nimage[:, -roi:] = 0\\n\\n# Find peaks\\nimage_t = (image > peak_threshold) * 1\\n\\n# get coordinates of peaks\\nf = np.transpose(image_t.nonzero())\\n\\n# Show\\nimg = plt.imshow(np.asarray(im))\\nplt.plot(f[:, 1], f[:, 0], 'o', markeredgewidth=0.45, markeredgecolor='b', markerfacecolor='None')\\n\\nplt.axis('off')\\nplt.savefig('local_max.png', format='png', bbox_inches='tight')\\nplt.show()", "id": "26526269", "code_sizes": 1}, {"nl_num": [3, 2, 3963, 990, 4], "code_num": [2], "code": "result = number & 0x1FFFFFFF", "id": "21031350", "code_sizes": 1}, {"nl_num": [3, 236, 990, 568, 1886, 3407, 3293, 2473, 3004, 4633, 4179, 1312, 3004, 4], "code_num": [2], "code": "with open('/tmp/file1') as f:\\n  lines1 = f.readlines()\\n\\nwith open('/tmp/file2') as f:\\n  for line in f:\\n    if any(line.startswith(x.strip()) for x in lines1):\\n      print line,", "id": "10491358", "code_sizes": 1}, {"nl_num": [3, 3586, 1395, 3747, 4562, 2610, 1612, 2238, 2, 3747, 681, 3528, 4], "code_num": [2], "code": "pyqtgraph/examples/MultiplePlotAxes.py", "id": "23679159", "code_sizes": 1}, {"nl_num": [3, 3268, 312, 2644, 4092, 223, 2497, 1712, 2610, 1862, 1603, 4], "code_num": [2], "code": "ch = logging.StreamHandler(sys.stdout)", "id": "25360714", "code_sizes": 1}, {"nl_num": [3, 550, 568, 586, 1828, 4423, 3090, 655, 1007, 451, 2, 4], "code_num": [2], "code": "serializer_context = {'request': request, 'pictures': pictures, 'filter': FilterForm()}\\n\\nif request.accepted_renderer.format == 'html':\\n    return Response(serializer_context, template_name='index.html')\\n\\nserializer = PaginatedPictureSerializer(pictures, context=serializer_context)\\nreturn Response(serializer.data, template_name='index.html')", "id": "19905920", "code_sizes": 1}, {"nl_num": [3, 188, 3460, 169, 2245, 1773, 2610, 3427, 3138, 4], "code_num": [2], "code": "i=0     \\nwhile (i<=5):\\n    print( \"#\" +(\" \"*i)+ \"#\")\\n    i=i+1", "id": "26455757", "code_sizes": 1}, {"nl_num": [3, 4189, 938, 3747, 611, 4498, 1605, 1957, 2473, 4179, 449, 1934, 4], "code_num": [2], "code": "new_df = my_df[my_df['Column'].isin(selected_items)]", "id": "29850116", "code_sizes": 1}, {"nl_num": [3, 188, 4341, 28, 3886, 3130, 1828, 4219, 1605, 2604, 383, 540, 4379, 2, 4], "code_num": [2], "code": "import shutil\\nimport time\\n\\n\\ntry:    \\n    shutil.rmtree(output_folder)  \\nexcept WindowsError, e:\\n    print \"Failed to delete\"        # Or just pass\\n\\ntime.sleep(0.5)\\nos.makedirs(output_folder)", "id": "33656696", "code_sizes": 1}, {"nl_num": [3, 1727, 4628, 4139, 540, 2385, 3332, 4], "code_num": [2], "code": "D = D.objects.all()\\nfor element in D:\\n    if hasattr(element.user, \"A\"):\\n        results.append(element.user.A)\\n    elif hasattr(element.user, \"B\"):\\n        results.append(element.user.B)\\n    elif hasattr(element.user, \"C\"):\\n        results.append(element.user.C)", "id": "21431007", "code_sizes": 1}, {"nl_num": [3, 1998, 2977, 540, 4047, 2, 3821, 4], "code_num": [2], "code": "data = \"*****''[[dogs and cats]]''/n\"\\nstart = data.find('[')+2\\nend = data.find(']')\\nanswer = data[start:end].split()\\n\\nprint answer[0]\\nprint answer[1]\\nprint answer[2]", "id": "13355469", "code_sizes": 1}, {"nl_num": [3, 3656, 4238, 1297, 4254, 4179, 1237, 4], "code_num": [2], "code": "def group(lst, limit):\\n\\n    lim = 0\\n    grp = []\\n\\n    for x in lst:\\n        if x + lim > limit:\\n            yield grp\\n            grp = []\\n            lim = 0\\n\\n        grp.append(x)\\n        lim += x\\n\\n    yield grp\\n\\nprint list(group([1, 1, 1, 1, 2, 2, 1, 3, 1, 1, 2], 3))", "id": "19181872", "code_sizes": 1}, {"nl_num": [3, 550, 568, 746, 3055, 3247, 223, 4640, 1708, 2, 4], "code_num": [2], "code": "import json\\nd = {}\\nd.setdefault( 'key1',{})\\nd.setdefault( 'key2',{}).setdefault('inner key',{})['inner inner key'] = 'value'\\n\\n\\nprint json.dumps(d, sort_keys=True, indent=4)", "id": "30656269", "code_sizes": 1}, {"nl_num": [3, 1102, 2968, 3055, 2011, 2610, 2101, 4166, 2473, 2604, 549, 388, 1242, 2326, 4], "code_num": [2], "code": "import matplotlib.pyplot as plt\\nimport numpy as np\\nimport matplotlib.gridspec as grd\\n\\nv1 = np.random.rand(50,150)\\nv2 = np.random.rand(150)\\n\\nfig = plt.figure()\\n\\n# create a 2 X 2 grid \\ngs = grd.GridSpec(2, 2, height_ratios=[1,10], width_ratios=[6,1], wspace=0.1)\\n\\n# image plot\\nax = plt.subplot(gs[2])\\np = ax.imshow(v1,interpolation='nearest',aspect='auto') # set the aspect ratio to auto to fill the space. \\nplt.xlabel('Day')\\nplt.ylabel('Depth')\\nplt.xlim(1,140)\\n\\n# color bar in it's own axis\\ncolorAx = plt.subplot(gs[3])\\ncb = plt.colorbar(p, cax = colorAx)\\ncb.set_label('RWU')\\n\\n# line plot\\nax2 = plt.subplot(gs[0])\\n\\nax2.spines['right'].set_visible(False)\\nax2.spines['top'].set_visible(False)\\nax2.xaxis.set_ticks_position('bottom')\\nax2.yaxis.set_ticks_position('left')\\nax2.set_yticks([0,1])\\nx=np.arange(1,151,1)\\nax2.plot(x,v2,'k',lw=0.5)\\nplt.xlim(1,140)\\nplt.ylim(0,1.1)\\n\\nplt.show()", "id": "19407950", "code_sizes": 1}, {"nl_num": [3, 1158, 1400, 327, 2610, 3467, 4505, 2610, 1828, 4219, 2610, 188, 4], "code_num": [2], "code": "import os, os.path, EditHeader2\\n\\nfolder1 = 'editedheaders'\\nfolder2 = 'editedheaders/1'\\n\\nextensions = ('.txt', '.tfw', 'your extensions here ...')\\n\\nfor filename in os.listdir(folder1):\\n    infilename = os.path.join(folder1, filename)\\n    if not os.path.isfile(infilename): continue\\n    base, extension = os.path.splitext(filename)\\n    if os.path.splitext(filename)[1] in extensions:\\n        infile = open(infilename, 'r')\\n        outfile = open(os.path.join(folder2, '{}'.format(base, extension)), 'w')\\n        EditHeader2.edit(infile, outfile)", "id": "17024624", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3222, 717, 95, 2, 2, 841, 3293, 3269, 3270, 4], "code_num": [2], "code": "from oauth2client.client import GoogleCredentials\\nfrom oauth2client import GOOGLE_TOKEN_URI\\n\\naccess_token = None\\ntoken_expiry = None\\ntoken_uri = GOOGLE_TOKEN_URI\\nuser_agent = 'Python client library'\\nrevoke_uri = None\\n\\ngCreds = GoogleCredentials( \\n    access_token, \\n    client_id,\\n    client_secret, \\n    refresh_token, \\n    token_expiry,\\n    token_uri, \\n    user_agent,\\n    revoke_uri=revoke_uri\\n    )", "id": "26805866", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 3866, 1828, 4238, 4], "code_num": [2], "code": "L = [['22', '14']]\\nM = [ int(i) for i in L[0] ]", "id": "12212183", "code_sizes": 1}, {"nl_num": [3, 188, 2677, 1400, 3407, 3293, 1828, 3004, 4], "code_num": [2], "code": "import ast\\n\\nwith open(\"test.txt\", \"r\") as f:\\n    for line in f:\\n        li = ast.literal_eval(line)\\n        edge_u = [x[0] for x in li]\\n        edge_v = [x[1] for x in li]", "id": "33964800", "code_sizes": 1}, {"nl_num": [3, 897, 209, 568, 840, 1828, 1438, 2223, 69, 1535, 2291, 2103, 2605, 568, 1828, 4465, 4], "code_num": [2], "code": "core.skillModService.addSkillMod(actor, 'movement', int(0.5))", "id": "19782309", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 2197, 223, 382, 4640, 4], "code_num": [2], "code": "class DictWrapper(object):\\n\\n    def __init__(self, x_names, y_names):\\n        self._dict = {}\\n        for x in x_names:\\n            self._dict[x] = {}\\n            for y in y_names:\\n                self._dict[x][y] = {}\\n\\n    def __setitem__(self, key, val): # single key\\n        self._dict[key[0]][key[1]] = val\\n\\n    def __getitem__(self, key): # single key\\n        return self._dict[key[0]][key[1]]\\n\\n\\nresults_holder = DictWrapper(['x1', 'x2', 'x3'], ['y1', 'y2'])\\nresults_holder[('x1','y2')] = 11\\nprint results_holder[('x1','y2')]\\n\\n# without () works too\\nresults_holder['x1','y2'] = 11\\nprint results_holder['x1','y2']", "id": "33614290", "code_sizes": 1}, {"nl_num": [3, 2, 549, 640, 2610, 2101, 540, 1383, 1773, 4], "code_num": [2], "code": "plt.ylabel('Price Spread between %s and %s' % (ticker[0], ticker[1]))", "id": "28533479", "code_sizes": 1}, {"nl_num": [3, 3793, 568, 3047, 733, 169, 3178, 1828, 694, 1268, 1400, 286, 4179, 1828, 2710, 2610, 990, 4], "code_num": [2], "code": "import re\\ntext =\"\"\"<tr><td valign=\"top\">Buffer Usage / Capacity left</td>  \\n<td colspan=2>100 % / 0 m</td>\"\"\"\\nresult = re.search(r\"Buffer Usage.*\\n.*?>(\\d{1,3}) % .+\",text).group(1)\\nprint result # 100", "id": "30349014", "code_sizes": 1}, {"nl_num": [3, 545, 413, 3293, 4251, 177, 2, 4], "code_num": [2], "code": "import urllib\\nimport urllib2\\nimport cookielib\\n\\ncj = cookielib.LWPCookieJar()\\nopener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))\\nurllib2.install_opener(opener)\\n\\nrequest = urllib2.Request(\"http://what.cd/index.php\", None)\\nf = urllib2.urlopen(request)\\nf.close()\\n\\ndata = urllib.urlencode({\"username\": \"your-login\", \"password\" : \"your-password\"})\\nrequest = urllib2.Request(\"http://what.cd/login.php\", data)\\nf = urllib2.urlopen(request)\\n\\nhtml = f.read()\\nf.close()", "id": "7716994", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 4570, 1400, 2943, 4300, 1170, 568, 2863, 4047, 1594, 2326, 4], "code_num": [2], "code": "import tkinter as tk\\nfrom functools import partial\\n\\ndef callback(key, var, *args):\\n    print \"callback var =\", key, var.get()\\n    ##myStrVars[key].set(var[-1])\\n\\nroot = tk.Tk()\\n\\nfor key in range(5):\\n    var = tk.StringVar()\\n    var.trace('w', partial(callback, key, var))\\n    tk.Entry(root, textvariable=var).pack()\\n\\nroot.mainloop()", "id": "27369546", "code_sizes": 1}, {"nl_num": [3, 2737, 835, 4179, 3028, 1400, 4393, 1250, 2610, 1828, 2710, 4], "code_num": [2], "code": "if __name__ == '__main__':\\n    import timeit\\n\\n    print(timeit.timeit(\"LongestWordA('hello this is just an example')\", number=1000, setup=\"from __main__ import LongestWordA\"))\\n    print(timeit.timeit(\"LongestWordB('hello this is just an example')\", number=1000, setup=\"from __main__ import LongestWordB\"))\\n\\n    # LongestWordA 0.013688346021808684\\n    # LongestWordB 0.004950157948769629", "id": "25633692", "code_sizes": 1}, {"nl_num": [3, 1113, 2746, 4179, 2639, 1297, 2971, 3746, 3518, 540, 2, 2, 4], "code_num": [2], "code": "sortedSubjects = sorted(tmpSubjects.iteritems(),\\n                        key=operator.itemgetter(1),\\n                        cmp=comparator,   # What about specifying the comparison?\\n                        reverse=True)", "id": "15927596", "code_sizes": 1}, {"nl_num": [3, 2561, 1828, 1959, 3007, 4], "code_num": [2], "code": "primes = [2, 3]\\nupto = 1000\\nfor num in range(4, upto+1):\\n    if all(num % p for p in primes):\\n        primes.append(num)\\n\\nprint(primes)", "id": "22283875", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 1242, 1828, 2009, 1170, 540, 4496, 2326, 4], "code_num": [2], "code": "from collections import OrderedDict\\n\\nfrom bokeh._legacy_charts import Step, show, output_file\\n\\nxyvalues = OrderedDict(\\n    python=[2, 3, 7, 5, 26, 81, 44, 93, 94, 105, 66, 67, 90, 83],\\n    pypy=[12, 20, 47, 15, 126, 121, 144, 333, 354, 225, 276, 287, 270, 230],\\n    jython=[22, 43, 70, 75, 76, 101, 114, 123, 194, 215, 201, 227, 139, 160],\\n)\\n\\n\\noutput_file(\"steps.html\", title=\"line.py example\")\\n\\nchart = Step(xyvalues, title=\"Steps\", ylabel='measures', legend='top_left')\\n\\nshow(chart)", "id": "24745655", "code_sizes": 1}, {"nl_num": [3, 2, 1980, 2610, 310, 966, 4], "code_num": [2], "code": "import getpass\\npassword = getpass.getpass()", "id": "24410785", "code_sizes": 1}, {"nl_num": [3, 4314, 4780, 3372, 3293, 3037, 3994, 2238, 3528, 3138, 4], "code_num": [2], "code": "columns = [column[0] for column in cursor.description]", "id": "12704305", "code_sizes": 1}, {"nl_num": [3, 2418, 540, 2905, 3293, 2697, 3433, 169, 3697, 568, 1312, 4], "code_num": [2], "code": "def readLines():\\n    r = csv.reader(open('test.csv', \"rt\", newline=''), dialect=\"excel\")\\n    return [l for l in r]\\n\\ndef writeFile(lines):\\n    resultFile = open('output.csv', 'wt', newline='')\\n    wr = csv.writer(resultFile, dialect='excel')\\n    wr.writerows(lines)", "id": "14782641", "code_sizes": 1}, {"nl_num": [3, 990, 1278, 2464, 2, 2536, 2464, 69, 568, 1519, 2, 1153, 568, 3963, 4], "code_num": [2], "code": "python-pptx", "id": "26465667", "code_sizes": 1}, {"nl_num": [3, 1096, 589, 1170, 4021, 1828, 2284, 3518, 4], "code_num": [2], "code": "import pygame\\npygame.init()\\ni = 0\\nclock = pygame.time.Clock()\\nwhile i < 10: # Just run a few cycles to check the output\\n    res = clock.tick(1) # Caps framerate to 1 fps\\n    print res # This should print out 1000\\n    i += 1", "id": "8880697", "code_sizes": 1}, {"nl_num": [3, 1503, 1400, 415, 694, 4], "code_num": [2], "code": "d = {}\\nwith open('in.txt') as f:\\n    data = f.readlines()\\nfor x in data:\\n    x = x.strip()\\n    if not x:\\n        continue\\n    name = x.split(':')[0].strip()\\n    score = int(x.split(':')[-1].split('/')[0].strip())\\n    if name not in d:\\n        d[name] = {}\\n        d[name]['score'] = 0\\n        d[name]['count'] = 0\\n    d[name]['count'] += 1\\n    d[name]['score'] = (d[name]['score'] + score) / float(d[name]['count'])\\n\\nds = sorted(d.keys(), key=lambda k: d[k]['score'], reverse=True)\\n\\nfor x in ds:\\n    print('{0}: {1}'.format(x, d[x]['score']))", "id": "32356918", "code_sizes": 1}, {"nl_num": [3, 3184, 3759, 2694, 3214, 694, 4], "code_num": [2], "code": "import random\\nrandom.uniform(0.1,0.4)", "id": "29314213", "code_sizes": 1}, {"nl_num": [3, 3527, 1828, 2, 3747, 2, 4238, 4179, 2206, 4], "code_num": [2], "code": "def triangle(n):\\n    a=[]\\n    for i in range(n):\\n        b=[]\\n        for j in range(n-i):\\n            b.append(i)\\n        a.append(b)\\n    for row in a:\\n        print row", "id": "21390870", "code_sizes": 1}, {"nl_num": [3, 2294, 1828, 2630, 411, 2610, 188, 711, 1007, 4182, 4347, 2464, 1708, 1400, 3119, 1170, 4], "code_num": [2], "code": "while i < len(phipsi):\\n    if phipsi[i][0]>a and phipsi[i][0]<b:\\n        if phipsi[i][1]>c and phipsi[i][1]<d:\\n            print ('the couple [%+.2f, %+.2f] has his angles in helix' % (phipsi[i][0], phipsi[i][1]))\\n    else:\\n        print ('the couple [%+.2f, %+.2f] does not have his angles in helix' % (phipsi[i][0], phipsi[i][1]))\\n    i=i+1", "id": "7352353", "code_sizes": 1}, {"nl_num": [3, 2, 2583, 171, 2610, 990, 4], "code_num": [2], "code": "def diff(prev,lat):\\n    p=prev\\n    l=lat\\n\\n\\n    prevDiff = []\\n    latDiff = []\\n\\n    for d1 in p[:]:\\n        flag = False\\n        for d2 in l:\\n            if len(set(d1.items()) ^ set(d2.items())) == 0:\\n                p.remove(d1)\\n                l.remove(d2)\\n                flag = True\\n                break\\n        if not flag:\\n            prevDiff.append(d1)\\n            p.remove(d1)\\n\\n    prevDiff = prevDiff + p\\n    latDiff = latDiff + l\\n\\n    resJSONdata=[]\\n    if len(prevDiff) != 0:\\n        resJSONdata.append({'prevCount':len(prevDiff)})\\n        resJSONdata.append({'prev':prevDiff})\\n    if len(latDiff) != 0:\\n        resJSONdata.append({'latestCount':len(latDiff)})\\n        resJSONdata.append({'latest':latDiff})\\n\\n#     return json.dumps(resJSONdata,indent = 4,sort_keys=True)\\n    return resJSONdata", "id": "28838170", "code_sizes": 1}, {"nl_num": [3, 3704, 1828, 2710, 2610, 2160, 4179, 1828, 2710, 223, 3703, 2714, 2610, 1828, 4238, 2610, 990, 4], "code_num": [2], "code": "n = [i if i.startswith('h') else 'http' + i for i in n]", "id": "2130552", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 653, 3091, 223, 179, 3747, 4526, 1286, 193, 2610, 3758, 2326, 4], "code_num": [2], "code": "environment.filters['my_multiplier'] = my_multiplier", "id": "21739773", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4772, 549, 1039, 1297, 3867, 3995, 169, 660, 3467, 2610, 990, 1844, 4], "code_num": [2], "code": "driver.find_element_by_xpath(\"//div[@class='fc-day-content' and text()='15']\")", "id": "26370554", "code_sizes": 1}, {"nl_num": [3, 2, 3293, 1828, 2710, 4], "code_num": [2], "code": "# vim: encoding=utf-8\\n\\nimport urllib\\n\\nbase_url = 'http://google.com/search'\\nparams = dict(\\n    q=('???????????????????????????????'\\n       + ' site:imdb.com/title'))\\n\\nquery = urllib.urlencode(params)\\nprint base_url + '?' + query", "id": "26703312", "code_sizes": 1}, {"nl_num": [3, 2257, 3279, 1556, 1297, 3909, 2464, 1569, 1297, 2094, 4], "code_num": [2], "code": "headers = wks.row_values(1)        \\nrow = 2 # start from the second row because the first row are headers\\nfor k in range(len(lstdic)):\\n        values=[]\\n        cell_list=wks.range('B%s:AB%s' % (row,row)) # make sure your row range equals the length of the values list\\n        for key in headers:\\n            values.append(lstdic[k][key])   \\n        for i in range(len(cell_list)):\\n            cell_list[i].value = values[i]\\n        wks.update_cells(cell_list)\\n        print \"Updating row \" + str(k+2) + '/' + str(len(lstdic) + 1)\\n        row += 1", "id": "25061863", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 3793, 550, 568, 38, 3821, 2610, 1828, 2710, 2326, 4], "code_num": [2, 2], "code": "import re\\ns = 'D08838  Acotiamide hydrochloride hydrate (JAN/BBC); Acotiamide hydrochloride (USAN) Antagonist'\\nprint re.sub('(\\s*\\(.*?\\))', '', s)\\n#D08838  Acotiamide hydrochloride hydrate; Acotiamide hydrochloride Antagonist", "id": "18165615", "code_sizes": 2}, {"nl_num": [3, 550, 568, 2770, 1828, 4238, 337, 1605, 2605, 3561, 223, 4220, 3953, 4], "code_num": [2], "code": "def safe_normalize(lst):\\n    try:\\n        return normalize(lst)\\n    except ZeroDivisionError:\\n        return lst", "id": "22588650", "code_sizes": 1}, {"nl_num": [3, 4600, 4323, 2725, 4102, 223, 990, 4], "code_num": [2], "code": "def dynamic_text(name, food):\\n    return \"\"\"\\n    Dear %(name)s,\\n    We're glad to hear that you like %(food)s and we'll be sending you some more soon.\\n    \"\"\" % {'name':name, 'food':food}", "id": "4406102", "code_sizes": 1}, {"nl_num": [3, 3860, 1442, 568, 4335, 1828, 4409, 2612, 2610, 188, 4], "code_num": [2], "code": "from itertools import count\\n\\nclass MyClass(object):\\n    id_counter = count().next\\n    def __init__(self):\\n        self.id = self.id_counter()", "id": "7181432", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1316, 1828, 2940, 3575, 250, 1828, 4322, 1125, 4], "code_num": [2], "code": "from fabric.context_managers import settings\\nwith settings(host_string='remote_server'):\\n    run('ls -lart')", "id": "12877168", "code_sizes": 1}, {"nl_num": [3, 3733, 1828, 4238, 4179, 1773, 223, 4042, 4253, 3747, 2710, 3293, 1312, 4238, 4], "code_num": [2], "code": "def check_data(data):\\n    s = \"\\n\".join(data);\\n    for k in keywords:\\n        if k in s:\\n            return True\\n\\n    return False", "id": "749342", "code_sizes": 1}, {"nl_num": [3, 1592, 2928, 4023, 3293, 303, 169, 4221, 1170, 4178, 1125, 1957, 4], "code_num": [2], "code": "cmds = {}\\ncmds['name1'] = func1\\n\\ntry:\\n     while True:\\n        str = self.dataQ.get_nowait()\\n        cmd_name, cmd_params = str.split(' ', 1)\\n        try:\\n            res = cmds[cmd_name](cmd_params)\\n        except:\\n            ## command not found\\n            pass \\nexcept queue.Empty:\\n    raise StopIteration", "id": "28905038", "code_sizes": 1}, {"nl_num": [3, 69, 568, 3191, 3963, 169, 3412, 3293, 1712, 4179, 2, 1956, 1708, 2, 523, 2326, 4], "code_num": [2], "code": "topic_tuple = lda.show_topic(0, 10)\\n\\nprint ','.join([str(word_tuple[1]) for word_tuple in topic_tuple])", "id": "32201795", "code_sizes": 1}, {"nl_num": [3, 4135, 3747, 1756, 1828, 771, 147, 4], "code_num": [2], "code": "self.menuBar.EnableTop(0, False)", "id": "11576522", "code_sizes": 1}, {"nl_num": [3, 2, 3747, 1708, 862, 2, 540, 2, 4678, 4], "code_num": [2], "code": "out_cc = env.Command('file.wave.cpp', 'file.cpp', 'wave command < $SOURCE > $TARGET')\\nenv.Program('myprog', ['this.cc', 'that.cc', out_cc])", "id": "18270827", "code_sizes": 1}, {"nl_num": [3, 3492, 3053, 2, 1708, 1104, 4], "code_num": [2], "code": "replacements = {'newlines': ' ',\\n                'deletions': ''}\\npattern = re.compile(u'(?P<newlines>\\n+)|'\\n                     u'(?P<deletions>\\u201c|\\u201d|\\u2019[a-z]?|\\u2013|\\u2018)')\\n\\ndef lookup(match):\\n    return replacements[match.lastgroup]\\n\\ntext = pattern.sub(lookup, text_1)", "id": "33023904", "code_sizes": 1}, {"nl_num": [3, 2, 4047, 889, 1741, 2610, 188, 4713, 4], "code_num": [2], "code": "def remove_repeated_pairs(l):\\n    i = 2;\\n    while i < len(l)-1:\\n            if l[i] == l[i-2] and l[i+1]==l[i-1]:\\n                l.pop(i);\\n                l.pop(i);\\n            else:\\n                i+=1;\\n\\n    return l;", "id": "11067892", "code_sizes": 1}, {"nl_num": [3, 1399, 1442, 568, 2655, 540, 4268, 2610, 1828, 4094, 873, 1563, 4], "code_num": [2], "code": "class MainFrame(QWidget):\\n    def __init__(self):\\n        self.popup_windows = [] # to store the pops\\n\\ndef display_popup_window(self, item):\\n    # item is the reference item that it's internal value reached 0\\n    popup_window = PopupFrame(self, item)\\n    popup_window.show()\\n    popup_window._raise()\\n    self.popup_windows.append(popup_window)\\n\\n\\nclass PopupFrame(QWidget):\\n    def __init__(self, parent, item):\\n        self.parent = parent\\n        self.item = item\\n        # set up other things, like buttons, layout...\\n        self.options_button_completed.clicked.connect(self.set_completed)\\n        self.options_button_missed.clicked.connect(self.set_missed)\\n        self.options_button_delayed.clicked.connect(self.set_delayed)\\n\\n    def set_completed(self):\\n        # do something with self.item\\n        pass", "id": "28057782", "code_sizes": 1}, {"nl_num": [3, 777, 880, 2540, 28, 4], "code_num": [2], "code": "url = '%s%s/?api_key=%s&method=%s&%s'% \\\\n      (HOST, API, API_KEY, method, _get_auth_url_suffix(method, auth, params))\\npayload = '%s' % (urlencode(params))", "id": "3664084", "code_sizes": 1}, {"nl_num": [3, 1708, 990, 2464, 69, 568, 3191, 771, 869, 2610, 3079, 3004, 2613, 3843, 2637, 2604, 4723, 2610, 949, 869, 2326, 4], "code_num": [2], "code": "import csv\\nreader = csv.reader(open(\"file.csv\", \"rb\"), delimiter=',')\\nfor line in reader:\\n    if \"-1\" not in line:\\n        print line", "id": "8566342", "code_sizes": 1}, {"nl_num": [3, 2, 1773, 2610, 4013, 2610, 1828, 4640, 4], "code_num": [2], "code": "for stuff in listofstrings:\\n    dictionary[\"key\"] = dictionary.get(\"key\",defaultvalueforkey) + stuff", "id": "17461592", "code_sizes": 1}, {"nl_num": [3, 4624, 1757, 653, 4047, 2, 223, 1828, 1548, 2326, 2, 2326, 4], "code_num": [2], "code": "class Foo(models.Model):\\n    bar = models.CharField()\\n    baz = models.CharField()\\n\\n# admin.py\\nclass FooProxy(Foo):\\n    class Meta:\\n        proxy=True\\n\\nadmin.site.register(Foo, FooAdmin1)\\nadmin.site.register(FooProxy, FooAdmin2)", "id": "4716880", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2616, 3921, 1460, 3090, 1828, 2238, 2, 3528, 2, 683, 1708, 990, 2326, 4], "code_num": [2], "code": "import urllib, urllib2\\n\\n##Download SocksiPy - A Python SOCKS client module. ( http://code.google.com/p/socksipy-branch/downloads/list )\\n##Simply copy the file \"socks.py\" to your Python's lib/site-packages directory, and initiate a socks socket like this.\\n## NOTE: you must use socks before urllib2.\\nimport socks\\nimport socket\\nsocks.setdefaultproxy(socks.PROXY_TYPE_SOCKS5, \"127.0.0.1\", 9050)\\nsocket.socket = socks.socksocket\\n\\nurl = 'http://ifconfig.me/ip'\\nrequest = urllib2.Request(url)\\nrequest.add_header('Cache-Control','max-age=0')\\nresponse = urllib2.urlopen(request)\\nprint response.read()", "id": "10967631", "code_sizes": 1}, {"nl_num": [3, 990, 2711, 4356, 3703, 869, 4179, 1712, 2610, 1828, 4238, 4], "code_num": [2], "code": "#!/usr/bin/env python\\n# src_dimensions.py\\n# requires mediainfo package\\nimport subprocess, glob\\nglobpattern = 'path/to/*.*'\\ncmd = ['mediainfo', '--Inform=Video;%Width%x%Height%\\\\n']\\ncmd.extend(glob.glob(globpattern))\\nproc = subprocess.Popen(cmd,stdout=subprocess.PIPE)\\noutputlines = filter(lambda x:len(x)>0,(line.strip() for line in proc.stdout))\\nprint outputlines", "id": "15786637", "code_sizes": 1}, {"nl_num": [3, 2482, 305, 3576, 540, 990, 2, 2658, 4], "code_num": [2], "code": "def connectionMade(self):\\n        irc.IRCClient.connectionMade(self)\\n        task.LoopingCall(lambda : (self.msg(counterpartID, \"hi there\"))).start(5.0)", "id": "19259857", "code_sizes": 1}, {"nl_num": [3, 2, 2610, 1170, 2610, 2587, 568, 2, 549, 1746, 551, 1828, 2587, 4018, 540, 927, 4669, 4465, 3518, 746, 4], "code_num": [2], "code": "def oneOfK(label):\\n    rows = label.shape[0];\\n    rowsIndex=np.arange(rows,dtype=\"int\")\\n    oneKLabel = np.zeros((rows,10))\\n    #oneKLabel = np.zeros((rows,np.max(label)+1))\\n    oneKLabel[rowsIndex,label.astype(int)]=1\\n    return oneKLabel", "id": "28886439", "code_sizes": 1}, {"nl_num": [3, 550, 568, 746, 2218, 4092, 4179, 547, 2817, 2200, 2326, 4], "code_num": [2], "code": "widget.config(highlightbackground=COLOR)", "id": "4320725", "code_sizes": 1}, {"nl_num": [3, 2539, 188, 864, 4291, 1545, 568, 1828, 2951, 1809, 955, 4], "code_num": [2], "code": "#!/usr/bin/python\\nfrom twisted.internet import reactor\\n\\nfrom twisted.internet import protocol\\n\\nclass Echo(protocol.Protocol):\\n    def connectionMade(self):\\n        self.pp = MyPP()\\n        reactor.spawnProcess(self.pp, 'cat', ['cat'])\\n    def dataReceived(self, data):\\n        self.pp.transport.write(data)\\n    def connectionLost(self, reason):\\n        self.pp.transport.loseConnection()\\n\\nclass MyPP(protocol.ProcessProtocol):\\n    def connectionMade(self):\\n        print \"connectionMade!\"\\n    def outReceived(self, data):\\n        print \"out\", data,\\n    def errReceived(self, data):\\n        print \"error\", data,\\n    def processExited(self, reason):\\n        print \"processExited\"\\n    def processEnded(self, reason):\\n        print \"processEnded\"\\n        print \"quitting\"\\n\\nfactory = protocol.Factory()\\nfactory.protocol = Echo\\nreactor.listenTCP(8200, factory)\\nreactor.run()", "id": "10936181", "code_sizes": 1}, {"nl_num": [3, 566, 568, 3178, 4684, 3886, 1708, 2, 540, 2, 4], "code_num": [2], "code": "model.similarity('/en/microsoft', '/en/apple')", "id": "31166218", "code_sizes": 1}, {"nl_num": [3, 2, 990, 3156, 3293, 3270, 2326, 4], "code_num": [2], "code": "dpkg -r", "id": "3544378", "code_sizes": 1}, {"nl_num": [3, 3306, 1297, 277, 336, 1268, 1585, 1645, 1460, 4178, 188, 3531, 4], "code_num": [2], "code": "custQuery = db.Query(Customer)\\nbirthdate = datetime.strptime(q,\"%Y-%m-%d\").date()\\ncustQuery.filter('birthdate = ',birthdate)", "id": "14164569", "code_sizes": 1}, {"nl_num": [3, 2694, 671, 3518, 1704, 551, 2, 1708, 4156, 4], "code_num": [2], "code": "import datetime\\nimport openpyxl\\nfrom openpyxl import load_workbook\\n\\n# Source workbook - wb\\n\\nwb = load_workbook(filename = r'C:\\data\\TEST.xlsx' , use_iterators = True)\\nws = wb.get_sheet_by_name(name ='QuoteFile ')\\n\\n# Quick explanation:\\n# If it's a number, return it. Otherwise, take the difference between the datetime\\n# and 1899-12-31 00:00:00. The way the datetimes work is they're internally a float,\\n# being the number of days since the start of 1900. We get the number of seconds in\\n# the delta (done through subtraction) and divide that by 86400 (the number of seconds\\n# in a day).\\nforcefloat = lambda val : val if type(val) in (int,float) else (\\n                         (val - datetime.datetime(1899,12,31,0,0,0)).total_seconds() / 86400)\\n\\nfor row in ws.iter_rows():\\n        print(row[0].internal_value ,forcefloat(row[3].internal_value) ,row[4].internal_value         ,row[5].internal_value)\\n\\n\\nprint('Done')", "id": "16953545", "code_sizes": 1}, {"nl_num": [3, 2529, 452, 2878, 694, 3293, 2710, 4], "code_num": [2], "code": "hxs.select('//some/xpath/expression/text()').re(r'(\\d+).*')", "id": "22232618", "code_sizes": 1}, {"nl_num": [3, 188, 587, 4476, 568, 2, 4331, 748, 2454, 2079, 2610, 4476, 4], "code_num": [2], "code": "import itertools\\n\\ns = 'this is a string'\\n\\nwords = s.split()\\nfor t in itertools.product(range(len('01')), repeat=len(words)-1):\\n    print(''.join([words[i]+t[i]*' ' for i in range(len(t))])+words[-1])", "id": "29739011", "code_sizes": 1}, {"nl_num": [3, 188, 2977, 2000, 3821, 853, 1828, 2710, 4], "code_num": [2], "code": "s1 = \"/xubuntu/daily/current/lucid-alternate-i386.iso\"\\ns2 = \"/xubuntu/daily/current/lucid-alternate-amd64.iso\"\\n\\npattern = re.compile(r'^.+-(.+)\\..+$')\\n\\nm = pattern.match(s1)\\nm.group(1)\\n'i386'\\n\\nm = pattern.match(s2)\\nm.group(1)\\n'amd64'", "id": "2925306", "code_sizes": 1}, {"nl_num": [3, 3397, 4220, 1394, 3518, 2146, 4], "code_num": [2], "code": "itertools.product()", "id": "4359085", "code_sizes": 1}, {"nl_num": [3, 3099, 3166, 568, 3068, 338, 4179, 4408, 2549, 4], "code_num": [2], "code": "import numpy as np\\nimport matplotlib.pylab as plt\\n\\nmod1 = np.array([ 468, 28000, 800000000 ])\\nmod2 = np.array([ 162, 2000, 228000000 ])\\n\\nproc = mod2.astype(float) / mod1.astype(float)\\n\\nfor ii, bar in enumerate(proc):\\n    plt.bar(ii, bar)\\n    plt.text(ii + 0.4, bar + 0.01, \"%.2f\" % bar, ha='center', va='bottom')\\nplt.ylim(0, 1.0)\\nplt.show()", "id": "14988515", "code_sizes": 1}, {"nl_num": [3, 3748, 2710, 1422, 2637, 568, 4465, 2610, 990, 4], "code_num": [2], "code": "chr(ord(ch)+2)", "id": "1923054", "code_sizes": 1}, {"nl_num": [3, 1577, 4179, 2, 4179, 2, 2, 1170, 4], "code_num": [2], "code": "def jtheta_dq(n, z, q):\\n    # cf. http://functions.wolfram.com/EllipticFunctions/EllipticTheta2/13/01/0002/\\n    return -mpmath.jtheta(n, z, q, 2)/(4*q)", "id": "29364762", "code_sizes": 1}, {"nl_num": [3, 3001, 2710, 568, 533, 1170, 4], "code_num": [2], "code": "def StringToHexString(s):\\n    return ''.join( map(lambda param:hexLoookup[param], map(ord,s) ) )", "id": "7943919", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1470, 1828, 862, 990, 3747, 1536, 3747, 2157, 4488, 2326, 4], "code_num": [2], "code": "from mycustompipeline import pipelinefunction\\n\\nclass MyPipeLineTest(TestCase):\\n    def setUp(self):\\n        self.arg1 = Arg1() #both one and two could be mocks.\\n        self.arg2 = Arg2()\\n\\n    def test_that_my_pipeline_does_something(self):\\n        result = pipelinefunction(self.arg1, self.arg2)\\n\\n        self.assertTrue(result)", "id": "25193255", "code_sizes": 1}, {"nl_num": [3, 2, 1929, 568, 77, 4], "code_num": [2], "code": "fig.colorbar(p, ax=ax[0,i], shrink=0.5)\\nfig.colorbar(p2, ax=ax[1,i],  shrink=0.5)", "id": "23982755", "code_sizes": 1}, {"nl_num": [3, 2, 239, 2, 4], "code_num": [2], "code": "ldap.set_option(ldap.OPT_REFERRALS, 0)", "id": "9261848", "code_sizes": 1}, {"nl_num": [3, 2840, 4691, 1932, 1007, 1711, 383, 1422, 1929, 3565, 3004, 2250, 4], "code_num": [2], "code": "excel.close()", "id": "29453733", "code_sizes": 1}, {"nl_num": [3, 4624, 483, 2878, 1833, 2, 3952, 3293, 1828, 3004, 383, 223, 2905, 2238, 990, 3528, 4], "code_num": [2], "code": "import os\\nfilepath = '/path/to/file'\\nmodifytime1 = os.path.getmtime(filepath)\\nfp = open(filepath)\\nmodifytime2 = os.path.getmtime(filepath)\\nif modifytime1 != modifytime2:\\n    print \"File modified after opening\"", "id": "8769328", "code_sizes": 1}, {"nl_num": [3, 2, 2, 2610, 1645, 4], "code_num": [2], "code": "webapp2.Route", "id": "24153176", "code_sizes": 1}, {"nl_num": [3, 4405, 177, 2, 540, 188, 4], "code_num": [2], "code": "import sys\\nimport chilkat\\n\\ncompress = chilkat.CkCompression()\\n\\n#  Any string argument automatically begins a 30-day trial.\\nsuccess = compress.UnlockComponent(\"30-day trial\")\\nif (success != True):\\n    print \"Compression component unlock failed\"\\n    sys.exit()\\n\\ncompress.put_Algorithm(\"ppmd\")\\n\\n#  Decompress back to the original:\\nsuccess = compress.DecompressFile(\"t.zipx\", \"t\")\\nif (success != True):\\n    print compress.lastErrorText()\\n    sys.exit()\\n\\nprint \"Success!\"", "id": "29852100", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1420, 1828, 3746, 2610, 990, 4], "code_num": [2], "code": "[(a, b, c) for a, (b, c) in l]", "id": "18500541", "code_sizes": 1}, {"nl_num": [3, 554, 2610, 3004, 3747, 1519, 1326, 3747, 1545, 4633, 568, 2943, 3004, 4], "code_num": [2], "code": "with open(filename) as f:\\n    file_str = f.read()\\n\\n# do stuff with file_str\\n\\nwith open(flename, \"w\") as f:\\n    f.write(file_str)", "id": "7194665", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4032, 4220, 4505, 3293, 1828, 2544, 2238, 2147, 4253, 3747, 2544, 3528, 1956, 1569, 3242, 1400, 2544, 2991, 2610, 990, 4], "code_num": [2], "code": "import os\\nimport shutil\\n\\nfor root, dirs, files in os.walk('.'):  # replace the . with your starting directory\\n   for file in files:\\n      path_file = os.path.join(root,file)\\n      shutil.copy2(path_file,'destination_directory') # change you destination dir", "id": "23196512", "code_sizes": 1}, {"nl_num": [3, 2238, 2291, 1007, 2534, 1929, 3747, 2291, 2, 3528, 188, 1959, 3090, 4238, 4179, 2, 540, 1844, 4], "code_num": [2], "code": "unittest.main()", "id": "1544701", "code_sizes": 1}, {"nl_num": [3, 1210, 2473, 4018, 3654, 1312, 990, 4], "code_num": [2], "code": "vec = list(v)", "id": "29785084", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2878, 1400, 2901, 4179, 1828, 276, 2610, 1828, 2385, 1561, 2, 2326, 4], "code_num": [2], "code": "reason = form.cleaned_data['reason']\\nreason = dict(form.fields['reason'].choices)[reason]", "id": "761698", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1704, 1828, 177, 3079, 3004, 3843, 1237, 1605, 2, 949, 2, 2326, 4], "code_num": [2], "code": "with open('text.csv') as text:\\n    # iterate the list except for the title line and grab desired items\\n    data = [a for a, b, c in list(csv.reader(text))[1:] if float(b) > 0]", "id": "29584411", "code_sizes": 1}, {"nl_num": [3, 2, 169, 4022, 1584, 4], "code_num": [2], "code": "hello = \"Hello\"\\nworld = 'World'\\n\\nhello_world = hello + \" \" + world\\n\\nprint(hello_world)", "id": "27736926", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1519, 1400, 4387, 1598, 169, 4092, 4179, 773, 2094, 2610, 1862, 2238, 4428, 389, 177, 1861, 3528, 966, 4], "code_num": [2], "code": "from IPython.core.display import HTML\\nHTML(\"\"\"\\n<style>\\n\\ndiv.cell { /* Tunes the space between cells */\\nmargin-top:1em;\\nmargin-bottom:1em;\\n}\\n\\ndiv.text_cell_render h1 { /* Main titles bigger, centered */\\nfont-size: 2.2em;\\nline-height:1.4em;\\ntext-align:center;\\n}\\n\\ndiv.text_cell_render h2 { /*  Parts names nearer from text */\\nmargin-bottom: -0.4em;\\n}\\n\\n\\ndiv.text_cell_render { /* Customize text cells */\\nfont-family: 'Times New Roman';\\nfont-size:1.5em;\\nline-height:1.4em;\\npadding-left:3em;\\npadding-right:3em;\\n}\\n</style>\\n\"\"\")", "id": "34303422", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 1365, 1945, 2406, 4238, 2223, 1605, 1288, 4403, 2610, 1400, 2943, 3909, 3594, 2940, 4780, 540, 1400, 2746, 2610, 4714, 4115, 2326, 4], "code_num": [2], "code": "keys = {\"hello\":{\"postfix\":\"bonjour\", \"count\":0}, \\n        \"hi\":{\"postfix\":\"kiss\", \"count\":0}}\\n\\nfrequencies = [\"hello\",\"hi\",\"hello\",\"hello\"]\\n\\nfor item in frequencies:\\n    keys[item][\"count\"] += 1\\n\\nprint('<table>')\\nfor k,v in keys.items():\\n    print(\"<tr><td>{0}</td><td>{1}</td><td>{2}</td></tr>\"\\n          .format(k, v[\"count\"], v[\"postfix\"]))\\nprint('</table>')", "id": "16540110", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4570, 188, 4238, 2326, 4], "code_num": [2], "code": "lst = ['paragraph 1','paragraph 2','paragraph 3']\\ncorpus = Corpus(documents=[Document(x) for x in lst])", "id": "10256738", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3715, 4633, 4713, 2237, 4178, 1828, 4019, 338, 1708, 188, 2326, 4], "code_num": [2], "code": "from Bio import SeqIO\\n\\ninput_file = 'a.fasta'\\nmerge_file = 'original.fasta'\\noutput_file = 'results.fasta'\\nexclude = set()\\nfasta_sequences = SeqIO.parse(open(input_file),'fasta')\\nfor fasta in fasta_sequences:\\n    exclude.add(fasta.id)\\n\\nfasta_sequences = SeqIO.parse(open(merge_file),'fasta')\\nwith open(output_file, 'w') as output_handle:\\n   for fasta in fasta_sequences:\\n        if fasta.id not in exclude:\\n            SeqIO.write([fasta], output_handle, \"fasta\")", "id": "31287065", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 1704, 1400, 1712, 223, 1828, 3004, 1809, 3090, 2711, 177, 1799, 2610, 188, 2326, 4], "code_num": [2], "code": "out, err = p.communicate()", "id": "6473753", "code_sizes": 1}, {"nl_num": [3, 188, 864, 4133, 4190, 1828, 1442, 568, 2878, 1828, 3958, 1170, 262, 3293, 2019, 1828, 2474, 1605, 2, 2605, 2326, 4], "code_num": [2], "code": "import sys\\n\\nclass persistent_locals(object):\\n    def __init__(self, func):\\n        self._locals = {}\\n        self.func = func\\n\\n    def __call__(self, *args, **kwargs):\\n        def tracer(frame, event, arg):\\n            if event=='return':\\n                self._locals = frame.f_locals.copy()\\n\\n        # tracer is activated on next call, return or exception\\n        sys.setprofile(tracer)\\n        try:\\n            # trace the function call\\n            res = self.func(*args, **kwargs)\\n        finally:\\n            # disable tracer and replace with old one\\n            sys.setprofile(None)\\n        return res\\n\\n    def clear_locals(self):\\n        self._locals = {}\\n\\n    @property\\n    def locals(self):\\n        return self._locals\\n\\n@persistent_locals\\ndef func():\\n    local1 = 1\\n    local2 = 2\\n\\nfunc()\\nprint func.locals", "id": "9186395", "code_sizes": 1}, {"nl_num": [3, 1810, 1828, 2964, 4], "code_num": [2], "code": "grid = Grid(4)\\ngrid.setValue(0,0,1)\\ngrid.setValue(1,1,2)\\ngrid.setValue(2,2,3)\\ngrid.setValue(3,3,4)", "id": "20433266", "code_sizes": 1}, {"nl_num": [3, 990, 2101, 598, 1586, 2828, 3257, 4179, 1828, 4238, 1637, 4], "code_num": [2], "code": "for x,y,c,lb in zip(ind,menMeans,my_colors,lab):\\n    ax.bar(x, y, width, color=c,label=lb)\\n\\nax.legend()", "id": "23317150", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 848, 2415, 3676, 3690, 1828, 2973, 265, 4], "code_num": [2], "code": "import random, time\\n\\nDURATION = 5 * 86400  # five days\\nEXECS = 100\\n\\nnow = time.time()\\npoints = sorted(random.random() * DURATION + now\\n                for i in xrange(EXECS))\\n\\nfor p in points:\\n   now = time.time()\\n   if p > now:\\n       time.sleep(p - now)\\n   # run your loop here", "id": "14564312", "code_sizes": 1}, {"nl_num": [3, 3990, 1828, 724, 568, 361, 338, 3293, 1828, 4559, 4238, 4], "code_num": [2], "code": "searches = ('aa90_273024', 'another_search', 'yet_another_search')\\nmy_result = [item[1:] for item in data if item[0] in searches]", "id": "8697150", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3509, 1485, 3747, 1447, 769, 4178, 2, 2326, 4], "code_num": [2], "code": "db = SQLAlchemy()\\n\\n#models here\\n\\ndef create_app():\\n    app = Flask(__name__)\\n    #db configuration\\n    db.init_app(app)\\n    return db", "id": "24111163", "code_sizes": 1}, {"nl_num": [3, 2, 1828, 1250, 169, 3178, 660, 3311, 3293, 1738, 3004, 223, 2940, 3676, 4], "code_num": [2, 2], "code": "import re\\npattern=re.compile(r\"\\d{4}-\\d{1,2}-\\d{1,2}\\s+\\d{1,2}:\\d{1,2}:\\d{1,2}:|Error\",re.IGNORECASE)\\nll=pattern.findall(x)\\nd={}\\nfor x in ll:\\n    if x!=\"Error\":\\n        d[x]=0\\n        last=x\\n    else:\\n        d[last]=d[last]+1\\nprint d", "id": "27055408", "code_sizes": 2}, {"nl_num": [3, 1747, 568, 403, 1828, 746, 4179, 338, 169, 4238, 2605, 2610, 1828, 3004, 4], "code_num": [2], "code": "mass_of_rider_kg = float(input('input mass of rider in kilograms:'))\\nmass_of_bike_kg = float(input('input mass of bike in kilograms:'))\\nvelocity_in_ms = float(input('input velocity in meters per second:'))\\ncoefficient_of_drafting = float(input('input coefficient of drafting:'))\\nwith open('BikeOutput.txt', 'w') as myfile:\\n    a = mass_of_rider_kg\\n    while a < mass_of_rider_kg+20:\\n        a = a + 4\\n        pAir = .18*coefficient_of_drafting*(velocity_in_ms**3)  \\n        pRoll = .001*9.8*(a+mass_of_bike_kg)*velocity_in_ms\\n        pSec = pAir+pRoll\\n        print(pSec)\\n        myfile.write('data: %.2f %.2f %.2f %.2f %.2f\\n' %  ( a, mass_of_bike_kg, velocity_in_ms,coefficient_of_drafting, pSec))", "id": "19172480", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3344, 4498, 568, 2192, 177, 1052, 2326, 4], "code_num": [2], "code": "itr = store.append(['Its working', ])", "id": "14922533", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2028, 2640, 169, 3388, 2583, 3293, 832, 2326, 4], "code_num": [2], "code": "eggs_dict = {\"large\":10, \"medium\":5, \"small\":24}\\neggs_json = simplejson.dumps(eggs_dict)\\nspam = Spam(key_name='blah')\\nspam.eggs = eggs_dict\\ndb.put(spam.eggs)        \\n\\nnew_spam = db.get(db.Key.from_path('Spam', 'blah'))\\n\\n# Later, fetch spam and then return the json as part of a Response\\nself.response.out.write(new_spam.eggs)", "id": "5124781", "code_sizes": 1}, {"nl_num": [3, 550, 568, 459, 2, 4], "code_num": [2], "code": "{{capture|safe}}", "id": "5662549", "code_sizes": 1}, {"nl_num": [3, 188, 864, 454, 3055, 3433, 4505, 169, 4768, 223, 2035, 1237, 4], "code_num": [2], "code": "import csv\\n\\nf1 = file('hosts.csv', 'r')\\nf2 = file('masterlist.csv', 'r')\\nf3 = file('results.csv', 'w')\\n\\nc1 = csv.reader(f1)\\nc2 = csv.reader(f2)\\nc3 = csv.writer(f3)\\n\\nmasterlist = list(c2)\\n\\nfor hosts_row in c1:\\n    row = 1\\n    found = False\\n    for master_row in masterlist:\\n        results_row = hosts_row\\n        if hosts_row[3] == master_row[1]:\\n            results_row.append('FOUND in master list (row ' + str(row) + ')')\\n            found = True\\n            break\\n        row = row + 1\\n    if not found:\\n        results_row.append('NOT FOUND in master list')\\n    c3.writerow(results_row)\\n\\nf1.close()\\nf2.close()\\nf3.close()", "id": "5268929", "code_sizes": 1}, {"nl_num": [3, 2, 1828, 990, 4238, 3293, 1075, 4778, 897, 4], "code_num": [2], "code": "PyList_New()", "id": "11666283", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 2, 550, 568, 611, 4047, 2804, 223, 2, 540, 2035, 3372, 4], "code_num": [2], "code": "import glob\\nimport shutil\\n\\ndeldirs = glob.glob(\"path/to/master/test.directory.*\")\\nfor dir_ in deldirs:\\n    shutil.rmtree(dir_)", "id": "30583358", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1519, 3993, 4178, 1828, 1389, 1977, 540, 990, 4], "code_num": [2], "code": "import couchdb\\ncouch=couchdb.Server(\"http://admin:admin@localhost:5984\")\\ndb=couch[\"db\"]\\nsecurity_doc=db.resource.get_json(\"_security\")[2]\\ndb.resource.put(\"_security\",{u'admins': {u'names': [u'admin1','admin2','admin3'], u'roles': []}, u'members': {u'names': [], u'roles': []}})", "id": "23566320", "code_sizes": 1}, {"nl_num": [3, 550, 4624, 483, 2198, 4047, 1561, 568, 1828, 3316, 861, 2087, 2610, 2385, 2326, 4], "code_num": [2], "code": "class DocumentForm(forms.Form): \\n    form1 = forms.FileField()\\n    form2 = forms.FileField()", "id": "10951963", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1945, 148, 694, 4179, 4059, 568, 1828, 2710, 4], "code_num": [2], "code": "printer += ' ' * offset", "id": "23835810", "code_sizes": 1}, {"nl_num": [3, 188, 2, 869, 1285, 568, 2718, 4013, 4], "code_num": [2], "code": "ant_mkdir = '<mkdir dir=\"..' + path.rstrip() + '\"/>'", "id": "23654273", "code_sizes": 1}, {"nl_num": [3, 4527, 549, 2587, 4018, 225, 2851, 4220, 3261, 4128, 2458, 4314, 1828, 2864, 4018, 4], "code_num": [2], "code": "A.__class__ = np.ndarray", "id": "5474844", "code_sizes": 1}, {"nl_num": [3, 3809, 2610, 568, 3433, 3004, 711, 4361, 1404, 4], "code_num": [2], "code": "import csv\\na = open(\"d.txt\")\\ndata = csv.reader(a)\\n\\nrf = open(\"output.csv\", 'wb')\\nwr = csv.writer(rf, dialect='excel')\\nfor i in data:\\n    wr.writerow(i)", "id": "33765553", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1959, 3690, 1828, 2137, 4238, 2464, 1956, 2, 1797, 169, 2903, 291, 1039, 2326, 4], "code_num": [2], "code": "for i, e in enumerate(L):\\n    print(e, L[i-1], L[(i+1) % len(L)])", "id": "12010820", "code_sizes": 1}, {"nl_num": [3, 1447, 449, 3747, 568, 3747, 449, 700, 2464, 69, 568, 3715, 1400, 3402, 4], "code_num": [2], "code": "my_tag = session.query(Tag).get(1)\\n\\n# option-1: if data is already loaded into memory\\nposts = [post for post in my_tag.posts if post.id > 10]\\n\\n# option-2: query database with filter if you have \"my_tag\" instance\\nposts = session.query(Post).with_parent(my_tag).filter(Post.id > 10).all()\\n\\n# option-3: query database with filter if you have slug value\\nposts = session.query(Post).join(Tag, Post.tags).filter(Tag.slug == \"my_slug\").filter(Post.id > 10).all()", "id": "25606912", "code_sizes": 1}, {"nl_num": [3, 3991, 4780, 3293, 2049, 1095, 927, 4], "code_num": [2], "code": "df.reset_index(level=0, inplace=True)", "id": "20228998", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2878, 1400, 1750, 2319, 2326, 4], "code_num": [2], "code": "user_pref(\"browser.startup.homepage\", \"about:blank\");", "id": "24057059", "code_sizes": 1}, {"nl_num": [3, 2578, 2, 71, 169, 1314, 2464, 1177, 4538, 337, 1605, 71, 3932, 4538, 1623, 4669, 4669, 1314, 4], "code_num": [2], "code": "import numpy as np\\n\\nA = np.array(['b', 'c', 'e', 'd', 'a'])\\nB = np.array(['a', 'd', 'c', 'b', 'e'])\\n\\nP = np.empty(len(A), int)\\nP[B.argsort()] = A.argsort()", "id": "26109347", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3119, 1828, 4238, 2610, 188, 4347, 150, 4347, 4], "code_num": [2], "code": "from pprint import pprint\\npprint(the_list)", "id": "1523660", "code_sizes": 1}, {"nl_num": [3, 2677, 3004, 568, 2, 590, 3149, 540, 2, 2489, 4], "code_num": [2], "code": "fp=open(\"file1\",\"r\")\\nmydict = {}\\n\\nfor line in fp:\\n    if line[0]==\"=\":\\n        key = line.strip()\\n    else:\\n        mydict.setdefault(key,[]).append(line.strip())\\n\\nfor key, value in mydict.iteritems():\\n    print key\\n    print \"\".join(value)", "id": "24314835", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1792, 3867, 1007, 451, 593, 4261, 2326, 188, 2464, 3867, 1408, 568, 2658, 1605, 1535, 1007, 1711, 840, 3653, 4], "code_num": [2], "code": "from lib import A\\n\\ndef my_method(instance, *args, **kwargs):\\n    some_code_here()\\n\\nA.method = my_method", "id": "16997356", "code_sizes": 1}, {"nl_num": [3, 3990, 2, 4597, 4179, 603, 2610, 1427, 2684, 4], "code_num": [2], "code": "import httplib\\nhttplib.HTTPConnection.debuglevel = 1", "id": "7278010", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 541, 3467, 3293, 1828, 3843, 3467, 869, 2610, 188, 2326, 4], "code_num": [2], "code": "with open(\"file.txt\") as f:\\n    for i in range(9):\\n        f.next()\\n    print f.readline()", "id": "4799456", "code_sizes": 1}, {"nl_num": [3, 1210, 1400, 1843, 4179, 1828, 4714, 540, 655, 1227, 2, 1079, 4], "code_num": [2], "code": "from south.db import db\\nfrom south.v2 import SchemaMigration\\n\\nclass Migration(SchemaMigration):\\n    def forwards(self, orm):\\n        db.execute('alter table appname_modelname charset=utf8')\\n        db.execute('alter table appname_modelname alter column fieldname charset=utf8')\\n        # et cetera for any other char or text columns\\n\\n    def backwards(self, orm):\\n        db.execute('alter table appname_modelname charset=latin1')\\n        db.execute('alter table appname_modelname alter column fieldname charset=latin1')\\n        # et cetera for any other char or text columns\\n\\n    complete_apps = ['appname']", "id": "3404737", "code_sizes": 1}, {"nl_num": [3, 545, 1129, 841, 223, 2, 4], "code_num": [2], "code": "returned = Person.objects.filter( carusage__end__isnull=True ).annotate(Max('carusage__start'))\\nnot_returned = Person.objects.filter( carusage__end__isnull=False ).annotate(Max('carusage__end'))", "id": "6124485", "code_sizes": 1}, {"nl_num": [3, 1997, 3407, 3128, 540, 2943, 2710, 169, 2190, 764, 3775, 4], "code_num": [2], "code": "from collections import OrderedDict\\n\\nlines = OrderedDict()\\nfor line in file:\\n    lines[line[0:12]] = line", "id": "6800154", "code_sizes": 1}, {"nl_num": [3, 550, 1365, 1535, 2878, 3083, 4179, 2577, 1268, 4603, 2590, 3293, 887, 2610, 2, 990, 4350, 2326, 4], "code_num": [2], "code": "from setuptools import setup, find_packages\\n\\nsetup(name='scrapy-mymodule',\\n  entry_points={\\n    'scrapy.commands': [\\n      'my_command=my_scrapy_module.commands:MyCommand',\\n    ],\\n  },\\n )", "id": "29092291", "code_sizes": 1}, {"nl_num": [3, 188, 2658, 223, 4583, 3976, 3578, 2, 1424, 2326, 4], "code_num": [2], "code": "Client.log()", "id": "4471195", "code_sizes": 1}, {"nl_num": [3, 1727, 655, 3008, 4347, 276, 4347, 3293, 3844, 3518, 4], "code_num": [2], "code": "status_dict = dict(my_thing.STATUSES)\\nreturn status_dict[value]", "id": "31946458", "code_sizes": 1}, {"nl_num": [3, 3991, 188, 1007, 451, 651, 635, 3316, 3747, 2637, 43, 223, 2, 2326, 4], "code_num": [2], "code": "foo_parser = subparsers.add_parser('foo', aliases=['f'])", "id": "13609118", "code_sizes": 1}, {"nl_num": [3, 616, 889, 2610, 549, 4018, 3594, 1637, 1987, 873, 551, 3971, 4], "code_num": [2], "code": "CellNetInfopkt += struct.pack(\"b\" * len(this_or_address_send_array), *this_or_address_send_array)\\n#  Notice the \"*\"                                                   ^^^", "id": "24025912", "code_sizes": 1}, {"nl_num": [3, 361, 2126, 3293, 1133, 2319, 1708, 990, 169, 4429, 4], "code_num": [2], "code": "import httplib2\\nfrom BeautifulSoup import BeautifulSoup, SoupStrainer\\n\\nhttp = httplib2.Http()\\nstatus, response = http.request('http://www.nytimes.com')\\n\\nfor link in BeautifulSoup(response, parseOnlyThese=SoupStrainer('a')):\\n    if link.has_attr('href'):\\n        print link['href']", "id": "1080411", "code_sizes": 1}, {"nl_num": [3, 1016, 2, 425, 568, 3491, 4], "code_num": [2], "code": "a = \"SELECT * FROM Table1 WHERE Date <= '%s'\" % get_est()", "id": "16374789", "code_sizes": 1}, {"nl_num": [3, 188, 1833, 483, 1422, 3292, 864, 697, 1828, 1170, 1605, 4032, 1007, 451, 1400, 2489, 4179, 2473, 3467, 3004, 568, 549, 1948, 3467, 3004, 4], "code_num": [2], "code": "def fcopy(file1, file2):\\n    os.chdir('C:/Users/Noah/Documents/myPython')\\n    open_file_1 = open(file1, 'r')\\n    open_file_2 = open(file2, 'w')\\n    for line in open_file_1:\\n        open_file_2.write(line)\\n    open_file_1.close()\\n    open_file_2.close()\\n    open_file_2 = open(file2, 'r')\\n    for line in open_file_2:\\n        print(line)\\n    open_file_2.close()", "id": "33470704", "code_sizes": 1}, {"nl_num": [3, 188, 2640, 41, 3004, 2610, 1828, 2940, 2544, 4], "code_num": [2], "code": "np.savetxt(r\"C:\\ASCII\\%s.txt\" % count,s)", "id": "16519290", "code_sizes": 1}, {"nl_num": [3, 2, 4567, 2610, 188, 4], "code_num": [2], "code": "for line in open(\"file\"):\\n    print line[4:8] , line[11:16]", "id": "1963546", "code_sizes": 1}, {"nl_num": [3, 1708, 619, 1608, 2473, 2, 2610, 1400, 2943, 2, 869, 540, 2101, 4], "code_num": [2], "code": "import matplotlib.pyplot as plt\\nimport numpy as np\\n\\nx = np.linspace(1,2,10)\\ny = np.linspace(1,2,10)\\n\\nplt.plot(x[:4],y[:4],'-ko',x[3:],y[3:],'--ko')\\nplt.show()", "id": "30526306", "code_sizes": 1}, {"nl_num": [3, 4335, 528, 3747, 1101, 2997, 2610, 1485, 540, 1828, 338, 2231, 4], "code_num": [2], "code": "import urllib\\nfrom cStringIO import StringIO\\n\\npng_output = StringIO()\\ncanvas.print_png(png_output)\\ndata = png_output.getvalue().encode('base64')\\ndata_url = 'data:image/png;base64,{}'.format(urllib.quote(data.rstrip('\\n')))", "id": "25140826", "code_sizes": 1}, {"nl_num": [3, 4137, 990, 1844, 2464, 69, 1151, 2473, 3178, 1400, 2, 4179, 549, 1039, 2326, 4], "code_num": [2], "code": "from selenium import webdriver\\n\\ndriver = webdriver.Firefox()\\ndriver.get('http://www.google.com')\\nelement = driver.find_element_by_id('gbqfba') #this element is visible\\nif element.is_displayed():\\n  print \"Element found\"\\nelse:\\n  print \"Element not found\"\\n\\nhidden_element = driver.find_element_by_name('oq') #this one is not\\nif hidden_element.is_displayed():\\n  print \"Element found\"\\nelse:\\n  print \"Element not found\"", "id": "15937966", "code_sizes": 1}, {"nl_num": [3, 1535, 2291, 2396, 4758, 1007, 451, 4181, 177, 4710, 568, 2, 2804, 2610, 1319, 1273, 2326, 69, 2326, 4], "code_num": [2], "code": "def main_work_subdirs(gl):\\n    for root, dirs, files in os.walk(gl['pwd']):\\n        dirs.sort()\\n        if root == gl['pwd']:\\n            for d2i in dirs:\\n                print(d2i)", "id": "6670029", "code_sizes": 1}, {"nl_num": [3, 2364, 4688, 889, 3293, 4640, 889, 2610, 2, 4], "code_num": [2], "code": "from traits.api import *\\nfrom traitsui.api import *\\nfrom traitsui.ui_editors.array_view_editor import ArrayViewEditor\\nimport numpy as np\\n\\nclass DContainer(HasTraits):\\n    _dict=Dict\\n    def __getattr__(self, k):\\n        if k in self._dict:\\n            return self._dict[k]\\n\\nclass SmallPartOfLargeApplication(HasTraits):\\n  d=Instance(DContainer)\\n\\n  def _d_default(self):\\n    d=DContainer()\\n    d._dict={'a_stat':np.random.random((10,1)),\\n            'b_stat':np.random.random((10,10))}\\n\\n    return d\\n\\n  def traits_view(self):\\n    v=View(\\n        Item('object.d.a_stat',editor=ArrayViewEditor()))\\n    return v\\n\\nSmallPartOfLargeApplication().configure_traits()", "id": "19228631", "code_sizes": 1}, {"nl_num": [3, 3397, 4439, 4179, 3018, 4], "code_num": [2], "code": "adj = [word.strip() for word in ad.split(\",\") if word != \"\"]\\nfor a in adj:\\n  if a in file:\\n    file = file.replace(a, '[' + a + ']')\\nprint file", "id": "27465127", "code_sizes": 1}, {"nl_num": [3, 188, 864, 2613, 3138, 540, 3055, 1594, 4], "code_num": [2], "code": "if level in easy:\\n    current_text = easy_level\\n    answers = easy_answers\\nelif level in medium:\\n    current_text = medium_level\\n    answers = medium_answers\\nelif level in hard:\\n    current_text = hard_level\\n    answers = hard_answers\\nask_questions(current_text, answers)", "id": "32879476", "code_sizes": 1}, {"nl_num": [3, 3335, 338, 3293, 4628, 4458, 4], "code_num": [2], "code": "countries = {}\\n\\ncountry_list = Country.objects.all()\\n\\nfor c in country_list:\\n    # check the stories that has the country\\n    stories = Story.objects.filter(country_set__name__exact=c.name)\\n\\n    # only if the country have stories\\n    if stories.count() > 0:\\n        ## check for initialize list\\n        if not countries.has_key(c.continent.name):\\n            countries[c.continent.name] = []\\n\\n        ## finally we add the country\\n        countries[c.continent.name].append(c)", "id": "16471943", "code_sizes": 1}, {"nl_num": [3, 3068, 4047, 4585, 2610, 3055, 4505, 2464, 38, 3518, 2610, 3004, 389, 540, 3518, 3293, 3004, 3971, 4], "code_num": [2], "code": "clines_dict = {} #open an empty dictionary\\n\\nwith open(smaller_file) as b:\\n    for line in b:\\n        clines_dict[\"\\t\".join(line.split('\\t')[1:5])] = [line.split('\\t')[5]]\\n\\n# clines_dict[key] = [value]\\n\\nprint \"dictionary created!\"\\n\\nwith open(larger_file) as a:\\n    with open(\"scores.txt\", \"w\") as result:\\n        for line in a:\\n            line = line.split('\\t')\\n            look_for = \"\\t\".join(line[1:5])\\n            if look_for in clines_dict: #check if look_for is a key in your dictionary\\n                result.write(\"\\t\".join(line[1:7]) + \"\\t\" + clines_dict[look_for][0] + \"\\n\")", "id": "28098979", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 550, 568, 4390, 549, 1170, 4178, 549, 841, 179, 1297, 3995, 2326, 4], "code_num": [2], "code": "obj = MyClass()\\ntry:\\n    func = getattr(obj, \"dostuff\")\\n    func()\\nexcept AttributeError:\\n    print \"dostuff not found\"", "id": "3951840", "code_sizes": 1}, {"nl_num": [3, 3397, 1828, 2746, 4179, 4220, 1400, 962, 2610, 1828, 496, 2725, 4], "code_num": [2], "code": "Template.blocks", "id": "10036484", "code_sizes": 1}, {"nl_num": [3, 2, 990, 1007, 451, 576, 3119, 576, 3138, 169, 2360, 2610, 1790, 4], "code_num": [2], "code": "import StringIO\\nimport sys\\n\\n# somewhere to store output\\nout = StringIO.StringIO()\\n\\n# set stdout to our StringIO instance\\nsys.stdout = out\\n\\n# print something (nothing will print)\\nprint 'herp derp'\\n\\n# restore stdout so we can really print (__stdout__ stores the original stdout)\\nsys.stdout = sys.__stdout__\\n\\n# print the stored value from previous print\\nprint out.getvalue()", "id": "17067560", "code_sizes": 1}, {"nl_num": [3, 420, 4179, 2974, 2610, 990, 4], "code_num": [2], "code": "from PIL import Image                                                            \\nimport numpy                                                                     \\nimport matplotlib.pyplot as plt                                                  \\nimport glob\\n\\nimageFolderPath = '/home/B/Pictures/'\\nimagePath = glob.glob(imageFolderPath+'/*.JPG') \\n\\nim_array = numpy.array( [numpy.array(Image.open(imagePath[i]).convert('L'), 'f') for i in range(len(imagePath))] )", "id": "27841554", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2, 4220, 1064, 2610, 1828, 2, 2610, 3531, 568, 1312, 2, 711, 2, 3474, 4633, 3703, 1384, 4], "code_num": [2], "code": "def clone_entity(e, to_klass, **extra_args):\\n  \"\"\"Clones an entity, adding or overriding constructor attributes.\\n\\n  The cloned entity will have exactly the same property values as the original\\n  entity, except where overridden. By default it will have no parent entity or\\n  key name, unless supplied.\\n\\n  Args:\\n    e: The entity to clone\\n    extra_args: Keyword arguments to override from the cloned entity and pass\\n      to the constructor.\\n  Returns:\\n    A cloned, possibly modified, copy of entity e.\\n  \"\"\"\\n  klass = e.__class__\\n  props = dict((k, v.__get__(e, klass)) for k, v in klass.properties().iteritems())\\n  props.update(extra_args)\\n  return to_klass(**props)\\n\\n# Use the clone method\\nquery = db.GqlQuery(\"SELECT * FROM OrigKind\")\\nresults = query.fetch(10);\\n\\nfor user in results:\\n    new_entry = clone_entity(user, NewKind)\\n    new_entry.put()", "id": "14314344", "code_sizes": 1}, {"nl_num": [3, 3943, 1400, 3904, 3293, 4359, 3204, 147, 4], "code_num": [2], "code": "gdk_pointer_ungrab(GDK_CURRENT_TIME);\\ngdk_keyboard_ungrab(GDK_CURRENT_TIME);\\ngtk_grab_remove(menu);", "id": "9879262", "code_sizes": 1}, {"nl_num": [3, 2878, 2828, 841, 2610, 4064, 4], "code_num": [2], "code": "Request.objects.first()", "id": "28293096", "code_sizes": 1}, {"nl_num": [3, 4133, 4190, 1828, 1442, 568, 2616, 4047, 1827, 4743, 2610, 2101, 2326, 4], "code_num": [2], "code": "import numpy as np\\nimport pylab as plt\\n\\ntotfigs = 5\\n\\nplt.figure()\\nplt.hold = True\\nboxes=[]\\nfor i in np.arange(totfigs):    \\n    x = np.random.random(50)\\n    boxes.append(x)\\n\\nplt.boxplot(boxes,vert=0)\\nplt.show()", "id": "6665771", "code_sizes": 1}, {"nl_num": [3, 516, 568, 2453, 2610, 188, 4690, 4], "code_num": [2], "code": "import sys\\nimport telnetlib\\n\\ntn = telnetlib.Telnet(\"xxxxxxxx\")\\n\\nTELNET_PROMPT=\"xxxxxxxxxx\"\\nTIMEOUT=1\\ntn.write(\"xxxxxxx\"+\"\\n\")\\ntn.write(\"xxxxxxx\"+\"\\n\")\\nprint tn.read_until(TELNET_PROMPT, TIMEOUT)\\ntn.write(\"term len 0\" + \"\\n\")\\nprint tn.read_until(TELNET_PROMPT, TIMEOUT)\\ntn.write(\"show version\" + \"\\n\")\\nprint tn.read_until(TELNET_PROMPT, TIMEOUT)\\ntn.write(\"exit\"+\"\\n\")\\ntn.close()", "id": "14853757", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 3994, 1828, 1871, 1170, 879, 2610, 177, 3398, 1708, 990, 2711, 4691, 2326, 4], "code_num": [2], "code": "import subprocess\\nsubprocess.call(['bash', '-c', '. ~/.profile && knife-LHR'])", "id": "25900559", "code_sizes": 1}, {"nl_num": [3, 3486, 4692, 338, 540, 2, 1422, 1374, 4], "code_num": [2], "code": "import requests\\n\\nfiles = {\\n    'attachment': ('filename.jpg',\\n           open('path/to/filename.jpg', 'rb'),\\n           'image/jpeg; name=filename.jpg',\\n           {'Content-Transfer-Encoding': 'binary'}),\\n    'metadata': ('body.xml',\\n           open('/path/to/body.xml', 'rb'),\\n           'application/xml; name=body.xml',\\n           {'Content-Transfer-Encoding': 'binary'})}\\n\\nresponse = requests.post(url, files=files)", "id": "24981673", "code_sizes": 1}, {"nl_num": [3, 2, 2229, 1007, 451, 3551, 2610, 1828, 262, 2610, 990, 4], "code_num": [2], "code": "import csv\\nimport sys\\nimport urllib2\\n\\ncsvfile = list(csv.reader(open(sys.argv[1])))\\nfor row in csvfile:\\n  sid = \"http://myurl.com?sid=\"+row[13]\\n  urllib2.urlopen(sid)", "id": "17137378", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1470, 2613, 4190, 2604, 1828, 1007, 2, 1007, 2610, 1400, 4423, 4526, 223, 1828, 2, 117, 4], "code_num": [2], "code": "class BlogListViewTests(TestCase):\\n\\n    def setUp(self):\\n        self.resp = self.client.get('/blog/')\\n\\n    def test_has_a_post_list(self):\\n        self.assertTrue('post_list' in self.resp.context)", "id": "22434217", "code_sizes": 1}, {"nl_num": [3, 69, 568, 2103, 2, 853, 2979, 864, 2, 2326, 4], "code_num": [2], "code": "import datetime\\ntime_string = \"17:48:12,98\"\\nt = datetime.datetime.strptime(time_string, \"%H:%M:%S,%f\")\\nseconds = 60 * t.minute * t.hour\\n\\nprint (seconds, t.microsecond)", "id": "17439246", "code_sizes": 1}, {"nl_num": [3, 2385, 3747, 2, 1828, 3332, 2710, 711, 2473, 4179, 1400, 1594, 4], "code_num": [2], "code": "z = request.GET.copy()\\ndel z['a']", "id": "5036498", "code_sizes": 1}, {"nl_num": [3, 4624, 1757, 1242, 1532, 338, 2610, 2101, 2326, 4], "code_num": [2], "code": "import matplotlib.pyplot as plt\\nimport time\\nimport threading\\nimport random\\n\\ndata = []\\n\\n# This just simulates reading from a socket.\\ndef data_listener():\\n    while True:\\n        time.sleep(1)\\n        data.append(random.random())\\n\\nif __name__ == '__main__':\\n    thread = threading.Thread(target=data_listener)\\n    thread.daemon = True\\n    thread.start()\\n    #\\n    # initialize figure\\n    plt.figure() \\n    ln, = plt.plot([])\\n    plt.ion()\\n    plt.show()\\n    while True:\\n        plt.pause(1)\\n        ln.set_xdata(range(len(data)))\\n        ln.set_ydata(data)\\n        plt.draw()", "id": "18791722", "code_sizes": 1}, {"nl_num": [3, 3324, 540, 943, 3407, 4179, 1293, 2610, 1738, 3004, 4], "code_num": [2], "code": "logging.warn", "id": "8973698", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3678, 4227, 1956, 1959, 2610, 990, 4], "code_num": [2], "code": "keepAlive = True\\n\\ndef main():\\n    global keepAlive\\n    if(input(\"Enter 1 to end program\") == \"1\"):\\n        print(\"Killing program...\")\\n        keepAlive = False\\n\\nwhile(keepAlive):\\n    main()", "id": "26823013", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 2640, 338, 3293, 1828, 2957, 568, 1977, 2610, 655, 2326, 4], "code_num": [2], "code": "def cost(request, offset):\\n    if request.method == 'POST':\\n        project = Project.objects.get(title=offset)\\n        date = request.POST.get('date', '')\\n        cost = request.POST.get('cost', '')\\n        cost_obj = Cost(project=project, date=date, cost=cost)\\n        cost_obj.save()\\n        return HttpResponseRedirect('/')", "id": "2837229", "code_sizes": 1}, {"nl_num": [3, 2, 2, 2610, 188, 4], "code_num": [2], "code": "return max (KnapSack(i+1, w, X, W), KnapSack(i, w, X-w[i], W))", "id": "29723046", "code_sizes": 1}, {"nl_num": [3, 3486, 2, 2, 1597, 604, 188, 169, 2118, 4], "code_num": [2], "code": "import smtplib\\n\\nusername = \"account@gmail.com\"\\npassword = \"password\"\\n\\nvtext = \"1112223333@vtext.com\"\\nmessage = \"this is the message to be sent\"\\n\\nmsg = \"\"\"From: %s\\nTo: %s\\nSubject: text-message\\n%s\"\"\" % (username, vtext, message)\\n\\nserver = smtplib.SMTP('smtp.gmail.com',587)\\nserver.starttls()\\nserver.login(username,password)\\nserver.sendmail(username, vtext, msg)\\nserver.quit()", "id": "8982572", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4335, 3817, 2101, 4716, 552, 1828, 265, 2326, 4], "code_num": [2], "code": "def do_pie(fic,data):\\n    import pylab    \\n    # make a square figure and axes\\n    pylab.figure(1, figsize=(6,6))\\n    ax = pylab.axes([0.1, 0.1, 0.8, 0.8])\\n    pylab.pie(data,labels=data)\\n    pylab.title(fic, bbox={'facecolor':'0.8', 'pad':5})\\n    pylab.savefig('%s.png' % fic,dpi=100)\\n    pylab.close()", "id": "4206175", "code_sizes": 1}, {"nl_num": [3, 2007, 1828, 4652, 4350, 3293, 188, 1790, 4], "code_num": [2], "code": "# assuming Python3\\nimport tkinter as tk\\nimport subprocess as sub\\n\\nWINDOW_SIZE = \"600x400\"\\n\\nroot = tk.Tk()\\nroot.geometry(WINDOW_SIZE)\\n\\ntk.Button(root, text=\"Push me!\", command=lambda: sub.call('path/to/script')).pack()", "id": "25028717", "code_sizes": 1}, {"nl_num": [3, 69, 568, 3348, 1400, 3867, 262, 1297, 2710, 2610, 188, 2326, 4], "code_num": [2], "code": "getattr(test, a_string)", "id": "13303100", "code_sizes": 1}, {"nl_num": [3, 1398, 2, 4189, 2, 853, 1828, 3316, 177, 3079, 2464, 2403, 1297, 4214, 4238, 4], "code_num": [2], "code": "# our merged items and store locations\\nmerged_items = items.merge(store_loc, on='itemCat')\\nfor i in stores:\\n    # take a copy\\n    temp_df = merged_items.copy()\\n    # set the store id\\n    temp_df['storeID'] = i\\n    # now just concat\\n    item_merged = pd.concat([iterm_merged, temp_df], ignore_index=True)\\n\\n# rest of code is same", "id": "25695324", "code_sizes": 1}, {"nl_num": [3, 1810, 1828, 1135, 2323, 540, 2, 4], "code_num": [2], "code": "import sys\\nfrom PyQt4 import QtGui, QtCore\\n\\nclass mymainwindow(QtGui.QMainWindow):\\n    def __init__(self):\\n        QtGui.QMainWindow.__init__(self)\\n        self.setWindowFlags(\\n            QtCore.Qt.WindowStaysOnTopHint |\\n            QtCore.Qt.FramelessWindowHint |\\n            QtCore.Qt.X11BypassWindowManagerHint\\n            )\\n        self.setGeometry(QtGui.QStyle.alignedRect(\\n            QtCore.Qt.LeftToRight, QtCore.Qt.AlignCenter,\\n            QtCore.QSize(220, 32),\\n            QtGui.qApp.desktop().availableGeometry()))\\n\\n    def mousePressEvent(self, event):\\n        QtGui.qApp.quit()\\n\\napp = QtGui.QApplication(sys.argv)\\nmywindow = mymainwindow()\\nmywindow.show()\\napp.exec_()", "id": "25950049", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2484, 1828, 2710, 3293, 3467, 1605, 2604, 3842, 3165, 1825, 169, 2, 4179, 71, 568, 2687, 169, 2707, 3747, 4442, 177, 177, 631, 540, 1828, 2, 135, 4], "code_num": [2], "code": "reobj = re.compile(r\"\"\"(?=[A-Z])([A-Za-z0-9\"'. ]{50,}\\.)\"\"\")\\nresult = reobj.findall(subject)", "id": "23144735", "code_sizes": 1}, {"nl_num": [3, 188, 864, 607, 1828, 528, 4532, 4178, 1828, 1006, 4], "code_num": [2], "code": "def BLOCKplace(self):\\n    for row_index in range(len(self.myMatrix)):\\n        for column_index in range(len(self.myMatrix[row_index])):\\n            if self.myMatrix[row_index][column_index] == 1:\\n                canvas.create_image(row_index, column_index, image=redB, state=\"normal\", tag=\"rB\")\\n                canvas.update()", "id": "34069975", "code_sizes": 1}, {"nl_num": [3, 4133, 4190, 4042, 1442, 568, 746, 4268, 711, 4042, 8, 2610, 2, 2326, 4], "code_num": [2], "code": "parser_X.set_defaults(action=action_func)\\nargs.action(args)", "id": "4370834", "code_sizes": 1}, {"nl_num": [3, 1075, 568, 188, 2, 4], "code_num": [2], "code": "def are_anagrams(s1, s2):\\n    return sorted(s1)==sorted(s2)", "id": "11286555", "code_sizes": 1}, {"nl_num": [3, 3990, 2, 568, 2484, 338, 3293, 549, 2, 3004, 4], "code_num": [2], "code": "player = raw_input(\"Enter player name\")\\nwb = load_workbook(\"LeaguePlayers.xlsx\")\\nws = wb.active\\nfor cell in ws.columns[0]: # get first column\\n    if cell.value == player:\\n        cost = cell.offset(column=4).value\\n        print(\"{0} costs {1}\".format(player, cost))\\n        break", "id": "29255837", "code_sizes": 1}, {"nl_num": [3, 2, 864, 394, 1828, 4214, 2, 4256, 4179, 990, 711, 2, 1400, 4181, 4182, 1400, 291, 990, 4256, 4], "code_num": [2], "code": "emerge --sync", "id": "33488585", "code_sizes": 1}, {"nl_num": [3, 2103, 1828, 746, 853, 2710, 2610, 990, 4], "code_num": [2], "code": "print(', '.join(x[:-1]) + \" or \" + x[-1])", "id": "26815301", "code_sizes": 1}, {"nl_num": [3, 990, 1723, 223, 3317, 3747, 3747, 762, 4], "code_num": [2], "code": "class BindableHTTPHandler(urllib2.HTTPHandler):\\n    def http_open(self, req):\\n        return self.do_open(BindableHTTPConnectionFactory('10.91.56.4'), req)", "id": "27103386", "code_sizes": 1}, {"nl_num": [3, 990, 1007, 451, 104, 864, 4314, 292, 2613, 1530, 1812, 2610, 1400, 2710, 4], "code_num": [2], "code": "import re\\nword = 'fubar'\\nregexp = re.compile(r'ba[r|z|d]')\\nif regexp.search(word) is not None:\\n  print 'matched'", "id": "9012008", "code_sizes": 1}, {"nl_num": [3, 4614, 2610, 4064, 4], "code_num": [2], "code": "thread = Thread.objects.fields(slice__comments=10).get(id=thread_id)", "id": "5818669", "code_sizes": 1}, {"nl_num": [3, 990, 1530, 568, 4344, 1828, 2503, 338, 2991, 4], "code_num": [2], "code": "import re\\n\\nkeyPat = re.compile(r'key (\\w+) key')\\nvaluePat = re.compile(r'value (\\d+)')\\n\\nresult = {}\\nfor line in open('data.txt'):\\n    if keyPat.search(line):\\n        match = keyPat.search(line).group(1)\\n        tempL = []\\n        result[match] = tempL\\n    elif valuePat.search(line):\\n        match = valuePat.search(line).group(1)\\n        tempL.append(int(match))\\n    else:\\n        print('Did not match:', line)\\n\\nprint(result)", "id": "31307698", "code_sizes": 1}, {"nl_num": [3, 2074, 3747, 1249, 2486, 2, 1670, 3293, 955, 568, 3508, 177, 4242, 2124, 4], "code_num": [2], "code": "self.cb(text)", "id": "10969228", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 3119, 2790, 3963, 2610, 3674, 2728, 1678, 4597, 4179, 2790, 3372, 1708, 990, 1007, 451, 1544, 2326, 4], "code_num": [2], "code": "outputString.replace(\"&lt;\",\"&#60;\")", "id": "715304", "code_sizes": 1}, {"nl_num": [3, 3672, 2969, 694, 2610, 4361, 1959, 540, 377, 3630, 4209, 855, 4], "code_num": [2], "code": "numservers = 15 # put anything you want here\\nfor i in range(1,numservers+1):\\n    print('server{}'.format(i))\\n    if i%5 == 0:\\n        print('*'*22)", "id": "24125708", "code_sizes": 1}, {"nl_num": [3, 69, 568, 3222, 1828, 4640, 3293, 1828, 746, 4179, 2028, 4406, 2639, 2610, 990, 4], "code_num": [2], "code": "import json\\n\\nd = json.loads('{\"responseStatus\":\"SUCCESS\",\"sessionId\":\"01234\",\"userId\":2000004904}')", "id": "31281583", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1460, 4220, 1400, 3976, 3293, 1400, 733, 2684, 2610, 717, 2822, 1857, 2326, 4], "code_num": [2], "code": "# An iterable with alll items in the MultiDict:\\n# [('check', 'a'), ('check', 'b'), ('name', 'Bob')]\\nself.request.POST.items()", "id": "23858234", "code_sizes": 1}, {"nl_num": [3, 4504, 1039, 1297, 1039, 4238, 4179, 2206, 990, 4], "code_num": [2], "code": "np.sum(weighted_prob, axis=0)", "id": "18079265", "code_sizes": 1}, {"nl_num": [3, 188, 2047, 1569, 2, 2386, 4592, 2610, 990, 3004, 4], "code_num": [2], "code": "reload(file)", "id": "26438498", "code_sizes": 1}, {"nl_num": [3, 69, 1352, 1757, 2616, 549, 2, 297, 2, 540, 1400, 2, 990, 95, 2326, 4], "code_num": [2], "code": "bin_addr = results.reply_tree.reply[n]['answer']['rdata']['ipv4_address']\\nstring_addr = '.'.join(map(str, map(ord, bin_addr)))", "id": "30223526", "code_sizes": 1}, {"nl_num": [3, 878, 3747, 2103, 2, 2710, 2238, 2, 4790, 3528, 568, 188, 1650, 4147, 841, 4], "code_num": [2], "code": "PyUnicode_FromWideChar(result, -1)", "id": "16521011", "code_sizes": 1}, {"nl_num": [3, 990, 1650, 864, 2608, 1828, 1001, 169, 2291, 2217, 568, 4756, 4251, 2608, 1935, 177, 69, 1352, 2291, 2616, 2605, 4062, 3703, 2, 3995, 2, 2326, 4], "code_num": [2], "code": "list_students = []\\nlist_score = []\\nlist_outof = []\\n\\nhow=int(input(\"how many students in your class?\"))\\nfor i in range(how):\\n   student=str(input(\"Enter name of student \" +str(i+1)+\":\"))\\n   list_students.append(student)\\n\\nfor student in list_students:\\n    score=int(input(\" \" + student +\":\"))\\n    list_score.append(score)\\n    outof=int(input(\"what was the exam out of?\"))\\n    list_outof.append(outof)\\n\\nprint(\"The percentage scores are:\")\\nfor index, student in enumerate(list_students):\\n    print (student,\":\",(list_score[index]/list_outof[index])*100.0,\"%\")", "id": "26549595", "code_sizes": 1}, {"nl_num": [3, 4328, 1828, 2133, 4179, 3963, 853, 1828, 3107, 4018, 4179, 856, 2610, 188, 4], "code_num": [2], "code": "arr = [[int(i) for i in line.split()] for line in open('input.txt')]", "id": "2711681", "code_sizes": 1}, {"nl_num": [3, 2, 1482, 769, 540, 524, 2, 3886, 2, 1828, 4691, 2610, 188, 4], "code_num": [2], "code": "try:\\n    cache\\nexcept NameError:\\n    cache = {}", "id": "9002276", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 383, 1828, 3433, 3004, 2610, 310, 4178, 4171, 4], "code_num": [2], "code": "import pandas as pd\\nmyFile = pd.read_csv('ch06/ex1.csv')\\nmyFile.head()", "id": "34158824", "code_sizes": 1}, {"nl_num": [3, 2, 2385, 863, 199, 4650, 540, 2948, 2549, 4], "code_num": [2], "code": "class UserAdmin(UserAdmin):\\n    inlines = (InsiderUserInline, )\\n    list_display = ('email', 'first_name', 'last_name', 'display_company_name', )\\n\\n    def display_company_name(self, request):\\n        if InsiderUser.objects.filter(user__id = request.id):\\n            return InsiderUser.objects.get(user__id = request.id).company_name\\n        else:\\n            return None\\n    display_company_name.short_description = 'Company Name'\\n\\nadmin.site.unregister(User)\\nadmin.site.register(User, UserAdmin)", "id": "19648977", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 3994, 1828, 2710, 3813, 188, 897, 2610, 188, 2326, 4], "code_num": [2], "code": "import sys\\nimport StringIO\\n\\n# create file-like string to capture output\\ncodeOut = StringIO.StringIO()\\ncodeErr = StringIO.StringIO()\\n\\ncode = \"\"\"\\ndef f(x):\\n    x = x + 1\\n    return x\\n\\nprint 'This is my output.'\\n\"\"\"\\n\\n# capture output and errors\\nsys.stdout = codeOut\\nsys.stderr = codeErr\\n\\nexec code\\n\\n# restore stdout and stderr\\nsys.stdout = sys.__stdout__\\nsys.stderr = sys.__stderr__\\n\\nprint f(4)\\n\\ns = codeErr.getvalue()\\n\\nprint \"error:\\n%s\\n\" % s\\n\\ns = codeOut.getvalue()\\n\\nprint \"output:\\n%s\" % s\\n\\ncodeOut.close()\\ncodeErr.close()", "id": "701802", "code_sizes": 1}, {"nl_num": [3, 2426, 3958, 262, 4179, 1828, 1170, 2610, 1312, 1170, 4], "code_num": [2], "code": "self.field1 = wx.TextCtrl(panel,pos=(120,25),size=(170,20))\\n\\nself.field1.SetValue(dlg.GetPath())", "id": "14931391", "code_sizes": 1}, {"nl_num": [3, 550, 4624, 483, 1869, 1828, 2, 853, 1828, 2, 4141, 2326, 4], "code_num": [2], "code": "from VIEW.friendsForm import Ui_friendForm\\ndef actionFriends_click(self):\\n    subwindow_friend = Ui_friendForm()\\n    self.mdiArea.addSubWindow(subwindow_friend)\\n    subwindow_friend.show()", "id": "29215363", "code_sizes": 1}, {"nl_num": [3, 2, 3407, 2610, 3726, 1422, 188, 4], "code_num": [2], "code": "import cv2\\nimport numpy as np\\n\\nimg = cv2.imread('dave.jpg')\\ngray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\\n\\n\\nedges = cv2.Canny(gray,100,200,apertureSize = 3)\\ncv2.imshow('edges',edges)\\ncv2.waitKey(0)\\n\\nminLineLength = 30\\nmaxLineGap = 10\\nlines = cv2.HoughLinesP(edges,1,np.pi/180,15,minLineLength,maxLineGap)\\nfor x in range(0, len(lines)):\\n    for x1,y1,x2,y2 in lines[x]:\\n        cv2.line(img,(x1,y1),(x2,y2),(0,255,0),2)\\n\\ncv2.imshow('hough',img)\\ncv2.waitKey(0)", "id": "33541551", "code_sizes": 1}, {"nl_num": [3, 69, 568, 2103, 949, 853, 1828, 2, 1486, 2610, 2101, 4], "code_num": [2], "code": "import matplotlib.pyplot as plt\\nimport numpy as np\\n\\nx = np.linspace(0, 8, 1000)\\nx_knots = list(range(0,9))\\ny_knots = [\\n    8.714871428, 8.618221961, 8.338674976,\\n    7.904714805, 6.73505356, 6.08059523,\\n    5.423472376, 4.785585409, 3.615895343\\n]\\n\\npoly_deg = 3\\ncoefs = np.polyfit(x_knots, y_knots, poly_deg)\\ny_poly = np.polyval(coefs, x)\\n\\nplt.plot(x_knots, y_knots, \"o\", label=\"data points\")\\nplt.plot(x, y_poly, label=\"polynomial fit\")\\nplt.ylabel(r'$\\frac{\\kappa}{C} \\rho$')\\nplt.legend()", "id": "30436144", "code_sizes": 1}, {"nl_num": [3, 3113, 2746, 4200, 3022, 568, 549, 841, 4], "code_num": [2], "code": "(lambda s: {\"len\" : len(s), \"slice\" : s[2:4]})(u'hello')", "id": "15800756", "code_sizes": 1}, {"nl_num": [3, 1727, 1762, 3518, 540, 4084, 2464, 188, 4], "code_num": [2], "code": "name[0].firstChild.nodeValue", "id": "317413", "code_sizes": 1}, {"nl_num": [3, 990, 540, 521, 3186, 2, 4], "code_num": [2], "code": "udskrift.write((\" %.5E , %.5E\\n\" % (entry[2], entry[3])).replace('E+', 'E'))", "id": "19956412", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3222, 3816, 4640, 2991, 2610, 188, 2326, 4], "code_num": [2], "code": "with open('data.txt', mode=\"r\") as data_file:\\n    fieldnames = ('character', 'string', 'value1', 'value2')\\n    reader = csv.DictReader(data_file, fieldnames=fieldnames, delimiter=\"\\t\")\\n\\n    complete_dict = {}\\n    for row in reader:\\n        char_dict = complete_dict.setdefault(row['character'], {})\\n        values_list = char_dict.setdefault(row['string'], [])\\n        values = [int(row['value1']), float(row['value2'])] \\n        values_list.append(values)\\n\\npprint.pprint(complete_dict)", "id": "7769474", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3366, 2055, 540, 4041, 2326, 4], "code_num": [2], "code": "class WSGICache(object):\\n\\n    def __init__(self, app):\\n        self.app = app\\n        self.cache = {}\\n\\n    def is_expired(self, environ):\\n        \"\"\"Determine is the resource the request for already expired?\\n\\n        \"\"\"\\n        # FIXME: check is the resource expired, by looking\\n        # PATH_INFO, if it is a file, it might be last modified time\\n        # if it is an object from database, see what is the last modified time\\n        return False\\n\\n    def __call__(self, environ, start_response):\\n        path = environ['PATH_INFO']\\n        cached = self.cache.get(path)\\n        # do we have valid cache?\\n        if self.is_expired(environ) or not cached:\\n            cached = list(self.app(environ, start_response))\\n            self.cache[path] = cached\\n        return cached", "id": "5115648", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2484, 2, 3293, 1828, 2, 85, 2326, 4], "code_num": [2], "code": "deriv = np.polyder(ridge.coef_[::-1])\\nyd_plot = np.polyval(deriv,x_plot)", "id": "34293045", "code_sizes": 1}, {"nl_num": [3, 2385, 2319, 2, 968, 2, 4], "code_num": [2], "code": "HitCount.DoesNotExist", "id": "7227123", "code_sizes": 1}, {"nl_num": [3, 188, 4496, 864, 3191, 3933, 3293, 3166, 4], "code_num": [2], "code": "p.logo = None\\np.toolbar_location = None", "id": "32158939", "code_sizes": 1}, {"nl_num": [3, 3333, 540, 3407, 3289, 2536, 4], "code_num": [2], "code": "import matplotlib.pyplot as plt\\nf = open('wind.txt', 'r')\\nmin_vector = []\\nmax_vector = []\\nz_vector = []\\nfor line in f.readlines():\\n    line = line.strip()\\n    columns = line.split()\\n    z = columns[0]\\n    u_min = columns[1]\\n    u_10 = columns[2]\\n    u_max = columns[4]\\n    u_90 = columns[3]\\n\\n    min_vector.append(u_min)\\n    max_vector.append(u_max)\\n    z_vector.append(z)\\n\\nplt.plot(min_vector, z_vector, '-o')\\nplt.plot(max_vector, z_vector, '-o')", "id": "31411092", "code_sizes": 1}, {"nl_num": [3, 3492, 2, 2610, 990, 2326, 4], "code_num": [2], "code": "def __init__(self, city=\"Berlin\"):\\n  self.city = city", "id": "2164258", "code_sizes": 1}, {"nl_num": [3, 3733, 1828, 1530, 3813, 2176, 3821, 4], "code_num": [2], "code": "re.search(r'\\$\\.', inputstring)", "id": "26919576", "code_sizes": 1}, {"nl_num": [3, 474, 327, 2610, 2587, 4018, 4], "code_num": [2], "code": "M=30\\nN=40\\nX = np.zeros((M,N))  # random values, but 0s work too\\nY = np.where(np.random.rand(M,N) > .5, True, False)\\nA=np.array([ 7,  8, 10, 13]), # in my setting, it's (1,4), not (4,)\\nB = [1,2,1,1]\\n\\n# position in row where X should equal - 1, i.e. X[7,a0], X[8,a1], etc\\na0=np.where(Y[7]==True)[0][0]\\na1=np.where(Y[8]==True)[0][0]\\na2=np.where(Y[8]==True)[0][1]\\na3=np.where(Y[10]==True)[0][0]\\na4=np.where(Y[13]==True)[0][0]\\n\\n# For each row (i) indexed by A, take only B[i] entries where Y[i]==True.  Assume these indices in X = -1\\nfor i in range(len(A[0])):\\n    X[A[0][i]][(Y[A][i]==True).nonzero()[0][0:B[i]]]=-1\\n\\nnp.sum(X) # should be -5\\nX[7,a0]+X[8,a1]+X[8,a2]+X[10,a3]+X[13,a4] # should be -5", "id": "18680211", "code_sizes": 1}, {"nl_num": [3, 1592, 2889, 2583, 841, 2610, 188, 4], "code_num": [2], "code": "def twitterfeed():\\n   auth = tweepy.OAuthHandler(consumer_key, consumer_secret)\\n   auth.set_access_token(access_key, access_secret)\\n   api = tweepy.API(auth)\\n   statuses = tweepy.Cursor(api.home_timeline).items(20)\\n   data = [s.text.encode('utf8') for s in statuses]\\n   print data", "id": "14856526", "code_sizes": 1}, {"nl_num": [3, 4745, 600, 3055, 3407, 4179, 1828, 3467, 3004, 2610, 188, 438, 547, 3821, 4403, 667, 4], "code_num": [2], "code": "import re\\n\\ni = open('i.txt').read()\\no = re.sub(r'\\n+(?=[a-z])', ' ', i)\\n\\nopen('o.txt', 'w').write(o)", "id": "29575669", "code_sizes": 1}, {"nl_num": [3, 990, 2, 1397, 711, 2429, 2658, 4], "code_num": [2], "code": "import new\\nfrom types import MethodType\\n\\nclass Proxy(object):\\n\\n    def __init__(self, target):\\n        self._target = target\\n\\n    def __getattr__(self, aname):\\n        target = self._target\\n        ### Beginning of special logic ###\\n        if aname[:4]!='set_' and aname[:4]!='get_':\\n        ### End of special logic ###\\n            # Rebind the method to the target.\\n            return new.instancemethod(f.im_func, self, target.__class__)\\n        else:\\n            return f", "id": "10496681", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 1519, 1400, 4387, 1598, 4179, 1400, 3285, 2610, 2101, 2011, 2326, 4], "code_num": [2], "code": "from matplotlib import pyplot\\nimport math\\n\\ndef setLabelExample():\\n    fig = pyplot.figure() \\n    x = [i for i in range(200)]\\n    y = [xi**2 for xi in x]\\n\\n    ax = fig.add_subplot(1,1,1)\\n    ax.plot(x, y) \\n    ax.tick_params(axis='x', labelsize=30)\\n    fig.suptitle('Matplotlib xticklabels Example')\\n    pyplot.show()\\n\\nif __name__ == '__main__':\\n    setLabelExample()", "id": "11379910", "code_sizes": 1}, {"nl_num": [3, 990, 345, 864, 2396, 445, 4174, 4], "code_num": [2], "code": "relevant_widget.update_idletasks()", "id": "7905973", "code_sizes": 1}, {"nl_num": [3, 4023, 1296, 1402, 4196, 1956, 1747, 568, 179, 1945, 4585, 2238, 2549, 3528, 3293, 2697, 2610, 1973, 3747, 1132, 1977, 1708, 188, 4], "code_num": [2], "code": "db.Execute(\"ALTER TABLE MY_TABLE ADD COLUMN [{0}] TEXT(50)\".format(cell_value))", "id": "27786531", "code_sizes": 1}, {"nl_num": [3, 2, 1007, 1711, 2878, 3798, 899, 3293, 188, 1007, 451, 2666, 4], "code_num": [2], "code": "class Test(object):\\n     def __init__(self):\\n         self.message = \"Hello World\"\\nclass Print(Test):\\n         def __init__(self):\\n             print super(Print, self).message", "id": "9311312", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 1757, 1451, 1594, 568, 4649, 3618, 3518, 2610, 990, 2326, 4], "code_num": [2], "code": "lives = 6\\n\\ndef change():\\n    global lives\\n    lives = 0", "id": "14174620", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2878, 1400, 1568, 3143, 4179, 2, 2610, 655, 2725, 4], "code_num": [2], "code": "offset = len(lines) / 2\\n\\nif offset % 2 != 0:\\n    # ensure that the second col does not contain more than the first one\\n    offset += 1\\n\\nlines_col0 = lines[:offset]\\nlines_col1 = lines[offset:]", "id": "9454049", "code_sizes": 1}, {"nl_num": [3, 550, 568, 517, 1828, 647, 2047, 1708, 1828, 2087, 4], "code_num": [2], "code": "App.get_running_app().stop()", "id": "32425831", "code_sizes": 1}, {"nl_num": [3, 188, 864, 733, 1530, 1569, 2977, 4], "code_num": [2], "code": "import lxml.html\\ndoc = lxml.html.fromstring(your_html)\\nresult = doc.xpath(\"//div[@class='col result_name']\")\\nprint result", "id": "4650163", "code_sizes": 1}, {"nl_num": [3, 550, 568, 843, 1828, 2133, 3261, 2610, 990, 2326, 4], "code_num": [2], "code": "vertices = []\\nfor i in range(3):                         # Do this 3 times\\n    x = random.randint(0, 500)             # Create a random x value\\n    y = random.randint(0, 500)             # Create a random y value\\n    vertices.append(graphics.Point(x, y))  # Add the (x, y) point to the vertices\\ntriangle = graphics.Polygon(vertices)      # Create the triangle\\ntriangle.setFill(colour)\\ntriangle.draw(win)", "id": "23217965", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 3348, 1125, 869, 2947, 2610, 188, 2326, 4], "code_num": [2], "code": "import sys\\n\\nprint(sys.argv)", "id": "4033723", "code_sizes": 1}, {"nl_num": [3, 69, 568, 997, 2656, 3079, 4505, 2610, 188, 4], "code_num": [2], "code": "fout=open(\"out.csv\",\"a\")\\n# first file:\\nfor line in open(\"sh1.csv\"):\\n    fout.write(line)\\n# now the rest:    \\nfor num in range(2,201):\\n    f = open(\"sh\"+str(num)+\".csv\")\\n    f.next() # skip the header\\n    for line in f:\\n         fout.write(line)\\n    f.close() # not really needed\\nfout.close()", "id": "2512386", "code_sizes": 1}, {"nl_num": [3, 3990, 2, 3293, 3079, 4691, 568, 1545, 4585, 3616, 1268, 1400, 2828, 2326, 4], "code_num": [2], "code": "newrows = list()\\nfor fl in infiles:\\n    with open(fl, 'rb') as csvin:\\n        reader = csv.reader(csvin, delimiter=',')\\n        reader.next() # skip header\\n        for row in reader:\\n            sld = gettld(row[urlcolumn])\\n            tld = psl.get_public_suffix(row[urlcolumn])\\n            newrows.append([sld, tld] + row[1:]) # row[1:] is everything but the first\\n\\nwith open(outfile, 'wb') as csvout:\\n    wtr = csv.writer(csvout, delimiter=',', quotechar='|', quoting=csv.QUOTE_MINIMAL)\\n    wtr.writerow([\"TLD\", \"SLD\", \"Registrar\", \"Host\", \"ASN\"]) # write header\\n    wtr.writerows(newrows)", "id": "26835957", "code_sizes": 1}, {"nl_num": [3, 655, 3747, 4604, 2153, 1566, 3747, 4714, 338, 4], "code_num": [2], "code": "counts = [ { 'tbl': k, 'tbl_cnt': v} for k,v in counts.items() ]", "id": "33845504", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3881, 4220, 1400, 889, 2610, 1828, 4238, 1605, 209, 1828, 3843, 2, 2326, 4], "code_num": [2], "code": "mycards= ['0H','8H','7H','6H','AH','QS'] \\nall((x == 'QS' or 'H' in x) for x in mycards)\\n#  True", "id": "16728824", "code_sizes": 1}, {"nl_num": [3, 655, 2819, 3747, 3881, 2613, 4640, 2252, 3477, 2610, 1828, 4139, 3008, 2326, 4], "code_num": [2], "code": "thing, created = Thing.object.update_or_create(\\n    unique_id=dict1['unique_key'], \\n    defaults={'property': dict1['other_key']}\\n)", "id": "33147130", "code_sizes": 1}, {"nl_num": [3, 2, 4220, 3155, 2610, 1828, 123, 169, 867, 327, 4518, 540, 3703, 3893, 4], "code_num": [2], "code": "def paths(tree, sum_so_far):\\n    #Helper function\\n    #receives a tree and \\n    #returns all paths that have this node as root\\n    if not tree:\\n        return []\\n    else: #tree is a node\\n        root = tree.ID\\n        val = tree.Value\\n        rooted_paths = [[[root], value]]\\n        for subtree in tree.nextDest:\\n            useable = paths(subtree, sum_so_far + val)\\n            for path in useable:\\n                rooted_paths.append([[root]+path[0], path[1]])\\n    return rooted_paths", "id": "10200278", "code_sizes": 1}, {"nl_num": [3, 188, 3767, 864, 1242, 540, 389, 3747, 774, 2947, 864, 69, 568, 4033, 4268, 2326, 4], "code_num": [2], "code": "import numpy as np\\nimport matplotlib.pyplot as plt\\nnp.random.seed(2013)\\nN = 10\\nx, y = np.random.random((2,N,2))\\nx.cumsum(axis=0, out=x)\\ny.cumsum(axis=0, out=y)\\nfig, ax = plt.subplots()\\ncolors = ['red', 'black']\\nax.set_color_cycle(colors)\\nax.plot(x,y)\\nplt.show()", "id": "17171122", "code_sizes": 1}, {"nl_num": [3, 3119, 4220, 1400, 327, 4179, 1828, 2794, 4179, 769, 711, 2403, 3090, 2605, 4], "code_num": [2], "code": "Products = productBll.listProduct(params)\\nprint [prd.__dict__ for prd in Products]", "id": "18510355", "code_sizes": 1}, {"nl_num": [3, 4133, 4190, 4042, 1442, 568, 1742, 1736, 2023, 552, 1828, 547, 265, 540, 1828, 990, 4350, 2326, 4], "code_num": [2], "code": "\"Power ON by Alarm\"", "id": "18246682", "code_sizes": 1}, {"nl_num": [3, 2156, 188, 540, 1235, 711, 1531, 4378, 4], "code_num": [2], "code": "import py_compile\\npy_compile.compile('abc.py')", "id": "13727533", "code_sizes": 1}, {"nl_num": [3, 2, 864, 2402, 3348, 3293, 2, 3715, 4], "code_num": [2], "code": "def get_clip_corners(clip):\\n    hack_mesh = tvtk.api.tvtk.PolyData()\\n    clip.widget.widget._vtk_obj.GetPolyData(hack_mesh._vtk_obj)\\n    corners = hack_mesh.points.to_array()[:8, :]\\n    return corners, hack_mesh\\n\\ndef get_inside_mask(sep, data):\\n    is_in = numpy.zeros((data.shape[0],), dtype = numpy.bool)\\n    for (di, d) in enumerate(data):\\n        di_in = sep.is_inside_object(d[0], d[1], d[2])\\n        is_in[di] = di_in\\n    return is_in\\n\\ndef extract_points_inside_clip(clip, data):\\n    corners, mesh = get_clip_corners(clip)\\n\\n    sep = tvtk.api.tvtk.SelectEnclosedPoints()\\n    sep.initialize(mesh)\\n\\n    is_in = get_inside_mask(sep, data)\\n    data_in_box = data[is_in, :]\\n    return data_in_box", "id": "27066401", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4570, 2, 568, 2878, 3467, 2610, 1400, 3026, 4178, 1501, 4], "code_num": [2], "code": "class TreeView(QtGui.QTreeView):\\n    def __init__(self, parent=None):\\n        super(TreeView, self).__init__(parent)      \\n        self.clicked.connect(self.getCurrentIndex)    \\n        # self.connect(self, SIGNAL(\"clicked(QModelIndex)\"), self.getCurrentIndex)\\n\\n    def getCurrentIndex(self, index):\\n        print(index.data())\\n        # Use 'InternalId' obtain the corresponding text, not int and hoping to simple.", "id": "23745511", "code_sizes": 1}, {"nl_num": [3, 2, 1828, 4238, 568, 1400, 1170, 4179, 1312, 4238, 4], "code_num": [2], "code": "Force = [(function(x)-0.5)/slope for x in Power]", "id": "29278102", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3427, 1850, 2707, 551, 1974, 2610, 990, 4], "code_num": [2], "code": "hex_data = \"FF\"\\nnumber = int(\"0x\" + hex_data, 16) \\nprint '%03d' % number # either this\\nprint '{:03d}'.format(number) # or this (Python >= 2.6)", "id": "12317504", "code_sizes": 1}, {"nl_num": [3, 1734, 2, 568, 990, 726, 629, 1605, 4378, 2610, 310, 966, 3140, 4], "code_num": [2], "code": "def my_matches(test):\\n    # might want to be smarter here\\n    return ['angela@domain.com', 'michael@domain.com', 'david@test.com']\\nip = get_ipython()\\nip.Completer.matchers.append(my_matches)\\n# it works", "id": "27485994", "code_sizes": 1}, {"nl_num": [3, 2, 3747, 990, 4058, 732, 864, 4438, 216, 4], "code_num": [2], "code": "api = finding(domain='svcs.sandbox.ebay.com', debug=True, config_file='myebay.yaml')", "id": "32198411", "code_sizes": 1}, {"nl_num": [3, 134, 1828, 1959, 2610, 990, 4], "code_num": [2], "code": "final_fun = [sum(fun[:,i_base])/n_ci for i_base in xrange(n_base)]", "id": "11762521", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2190, 2, 2227, 568, 2, 2326, 4], "code_num": [2], "code": "client.create(path, ephemeral=True)", "id": "29218107", "code_sizes": 1}, {"nl_num": [3, 550, 3178, 327, 2610, 549, 4018, 1605, 2122, 3055, 1934, 1708, 188, 4], "code_num": [2], "code": "numpy.nonzero((a > 3) & (a < 8))", "id": "3248542", "code_sizes": 1}, {"nl_num": [3, 2156, 4652, 1334, 2237, 4178, 3518, 4179, 2252, 787, 4], "code_num": [2], "code": "import os\\nimport signal\\nimport subprocess\\n\\nprocess = subprocess.Popen('script.sh', stdout=subprocess.PIPE, \\n                   shell=False, preexec_fn=os.setsid) \\n\\nos.killpg(process.pid, signal.SIGTERM)", "id": "27215265", "code_sizes": 1}, {"nl_num": [3, 990, 864, 2878, 4220, 2065, 923, 2577, 4179, 1828, 2861, 4], "code_num": [2], "code": "import urllib, json\\nauthor = 'Youtube_Username'\\n\\nfoundAll = False\\nind = 1\\nvideos = []\\nwhile not foundAll:\\n    inp = urllib.urlopen(r'http://gdata.youtube.com/feeds/api/videos?start-index={0}&max-results=50&alt=json&orderby=published&author={1}'.format( ind, author ) )\\n    try:\\n        resp = json.load(inp)\\n        inp.close()\\n        returnedVideos = resp['feed']['entry']\\n        for video in returnedVideos:\\n            videos.append( video ) \\n\\n        ind += 50\\n        print len( videos )\\n        if ( len( returnedVideos ) < 50 ):\\n            foundAll = True\\n    except:\\n        #catch the case where the number of videos in the channel is a multiple of 50\\n        print \"error\"\\n        foundAll = True\\n\\nfor video in videos:\\n    print video['title'] # video title\\n    print video['link'][0]['href'] #url", "id": "15512239", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 3452, 2473, 1549, 2, 568, 3817, 2536, 2610, 2101, 2326, 4], "code_num": [2], "code": "import numpy as np\\nimport matplotlib.pyplot as plt\\n\\nfig = plt.figure()\\nax = fig.add_subplot(111)\\n\\nt = np.arange(0.0, 5.0, 0.01)\\ns = np.cos(2*np.pi*t)\\nline, = ax.plot(t, s, lw=2)\\n\\ncoords_to_annote = [(2,1),(3,1),(4,1)]\\n\\nfor coords in coords_to_annote:\\n    ax.annotate('local max', xy=coords, xytext=(3, 1.5),\\n                arrowprops=dict(facecolor='black', shrink=0.05),\\n                )\\n\\n\\nax.set_ylim(-2,2)\\nplt.show()", "id": "17414010", "code_sizes": 1}, {"nl_num": [3, 2522, 327, 3293, 4115, 4714, 1708, 2, 2238, 170, 3909, 2, 2464, 3941, 169, 2, 4780, 3528, 4], "code_num": [2], "code": "table = soup.find('table', id='DailySettlementTable')\\n\\n# The slice notation below, [2:7], says to take the third (index 2)\\n# to the eighth (index 7) values from the rows we get.\\nfor rows in table.find_all('tr')[2:7]:\\n    cells = rows.find_all('td')\\n    month = cells[0]\\n    settle = cells[6]\\n\\n    print month.string + ':' + settle.string", "id": "20663898", "code_sizes": 1}, {"nl_num": [3, 3733, 2, 604, 1236, 95, 1708, 188, 4], "code_num": [2], "code": "keyBing = ''        # get Bing key from: https://datamarket.azure.com/account/keys\\ncredentialBing = 'Basic ' + (':%s' % keyBing).encode('base64')[:-1] # the \"-1\" is to remove the trailing \"\\n\" which encode adds\\nsearchString = '%27Xbox+One%27'\\ntop = 20\\noffset = 0\\n\\nurl = 'https://api.datamarket.azure.com/Bing/Search/Image?' + \\\\n      'Query=%s&$top=%d&$skip=%d&$format=json' % (searchString, top, offset)\\n\\nrequest = urllib2.Request(url)\\nrequest.add_header('Authorization', credentialBing)\\nrequestOpener = urllib2.build_opener()\\nresponse = requestOpener.open(request) \\n\\nresults = json.load(response)\\n\\n# process results", "id": "27606478", "code_sizes": 1}, {"nl_num": [3, 333, 1535, 1007, 1711, 483, 1957, 1828, 3215, 1576, 3995, 540, 1828, 188, 1530, 2326, 4], "code_num": [2], "code": "import re\\n\\na = re.compile(\"(example\\.com)\", re.IGNORECASE)\\n\\na.search(\"http://www.example.com/sdklfjsdf\").groups(1)\\n('example.com',)", "id": "31117043", "code_sizes": 1}, {"nl_num": [3, 550, 2101, 2869, 2, 3654, 2326, 4], "code_num": [2], "code": "import numpy as np\\nimport matplotlib.pylab as pl\\n\\nx = np.arange(100)\\ny = np.random.randint(1270000-10, 1270000+10, x.size)\\n\\npl.figure()\\npl.subplot(121)\\npl.plot(x,y)\\npl.ylim(y.min()-1, y.max()+1)\\n\\npl.subplot(122)\\npl.plot(x,y)\\npl.ylim(y.min()-1, y.max()+1)\\nax=pl.gca()\\nax.get_yaxis().get_major_formatter().set_useOffset(False)", "id": "33884902", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1519, 4748, 3087, 568, 1828, 2710, 817, 2610, 1828, 1182, 2238, 817, 2238, 1007, 2, 1007, 3528, 3528, 2464, 568, 1828, 2, 1018, 2326, 4], "code_num": [2], "code": "def get_int(prompt=\"Enter an Integer:\"):\\n    while True:\\n        try:\\n           return int(input(prompt))\\n        except ValueError:\\n           print(\"That is not an integer!\")\\n\\nx = get_int(\"What is 1+1\")", "id": "32532293", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2640, 1081, 528, 3396, 1708, 1965, 4], "code_num": [2], "code": "from org.python.core.util import StringUtil\\nfrom java.nio import ByteBuffer\\n\\n\\ntmp, filename = tempfile.mkstemp(suffix = \".\" + extension, text=True)\\nbytes = StringUtil().toBytes(attachment)\\nbb = ByteBuffer.wrap(bytes)\\ntmp.write(bb)\\ntmp.close()", "id": "14420711", "code_sizes": 1}, {"nl_num": [3, 3631, 55, 1650, 95, 864, 1727, 4220, 3467, 3293, 1828, 3004, 4], "code_num": [2], "code": "content = self.view.substr(sublime.Region(0, self.view.size()))", "id": "20182008", "code_sizes": 1}, {"nl_num": [3, 188, 864, 1503, 2778, 4179, 1828, 2315, 2, 3747, 3518, 4], "code_num": [2], "code": "d = {'one':(1,2,3), 'two':(3,2,1), 'three':(4,5,6)}\\ntuple(max(x) for x in zip(*d.values()))", "id": "10844520", "code_sizes": 1}, {"nl_num": [3, 550, 3659, 483, 3211, 1400, 1326, 4179, 4042, 4019, 303, 2610, 990, 2326, 4], "code_num": [2], "code": "# suppose your have a Queue my_queue\\naux_stack = Stack()\\nwhile not my_queue.isEmpty():\\n    aux_stack.push(my_queue.dequeue())\\n\\nwhile not aux_stack.isEmpty():\\n    my_queue.enqueue(aux_stack.pop())", "id": "24150838", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2616, 4206, 3921, 3198, 1374, 2610, 188, 169, 586, 3087, 841, 568, 1828, 1170, 4], "code_num": [2], "code": "def print_url(r, **kwargs):\\n    print r.url", "id": "17977525", "code_sizes": 1}, {"nl_num": [3, 3184, 1828, 3759, 4018, 2417, 1828, 3645, 3518, 4], "code_num": [2], "code": "first_value = random.randint(0, 10)\\nrandarray = [i for i in random.sample(range(0, 10), 10) if i != first_value]\\nrandarray.insert(0, first_value)", "id": "30696348", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2, 2531, 3690, 3055, 2518, 552, 1400, 2943, 265, 2326, 4], "code_num": [2], "code": "for item1, item2 in zip(structure1, structure2):\\n    do_something(item1, item2)", "id": "24930357", "code_sizes": 1}, {"nl_num": [3, 1503, 1828, 1901, 2610, 549, 4018, 4179, 1828, 2, 3214, 3293, 1828, 2, 3004, 2464, 2, 4], "code_num": [2], "code": "for arg in sys.argv[1:]:\\n        a=pyfits.getdata(arg).MAG_AUTO\\n        arr=numpy.array(a)\\n        indices = heapq.nlargest(10,xrange(len(arr)),key=arr.__getitem__)\\n        print indices", "id": "16790639", "code_sizes": 1}, {"nl_num": [3, 188, 1776, 3467, 853, 962, 4179, 1927, 3821, 4], "code_num": [2], "code": "# open inputfile/read/auto-close \\nwith open('inputfile.txt') as f:\\n    lines = f.readlines() # with block auto closes file after block is executed\\n\\noutput = []\\n\\nfor line in lines:\\n    if len(line) > 110:\\n        while True: # until break\\n            output.append(line[:107] + '...') \\n            if len(line[107:]) < 111: # if remainder of line is under 110 chars\\n                output.append('...' + line[107:])\\n                break\\n            line = line[107:] # otherwise loop continues with new line definition\\n    else:\\n        output.append(line)\\n\\n# open outputfile/write/auto-closed\\nwith open('outputfile.txt', 'w') as f:\\n    for line in output:\\n        f.write(line)", "id": "23165111", "code_sizes": 1}, {"nl_num": [3, 4137, 2817, 69, 1535, 483, 2, 2878, 1828, 4654, 3518, 4], "code_num": [2], "code": "from Tkinter import *\\nmaster = Tk()\\n\\ndef getThrottle(event):\\n    print Throttle.get()\\n\\nThrottle = Scale(master, from_=0, to=100, orient=HORIZONTAL, command=getThrottle)\\nThrottle.set(0)\\nThrottle.pack()\\n\\nmainloop()", "id": "18563717", "code_sizes": 1}, {"nl_num": [3, 2049, 864, 4106, 938, 764, 3909, 1297, 2828, 3909, 4], "code_num": [2], "code": "df.T[df.index[0]] / df.T[df.index[-1]]", "id": "23308582", "code_sizes": 1}, {"nl_num": [3, 1734, 2406, 4738, 568, 2, 746, 2610, 2054, 540, 990, 169, 2711, 177, 2426, 4], "code_num": [2], "code": "subprocess.call([\"/usr/bin/mongo\", \"--port\", str(port), \"--eval\", task])", "id": "17909349", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3178, 2710, 2610, 2714, 4179, 4238, 990, 4], "code_num": [2], "code": "cities = [w.split(',')[0] for w in my_list]\\nterm = \"de\"\\nresults = [city for city in cities if term in city.lower()]", "id": "31455053", "code_sizes": 1}, {"nl_num": [3, 4142, 2319, 2610, 2385, 2237, 4178, 660, 4129, 4], "code_num": [2], "code": "url(r'^/someapp/(?P<page_id>\\d+)/$', paginas),\\n\\n\\ndef paginas(request, **kwargs):\\n    id = kwargs.pop('page_id')\\n    page = get_object_or_404(Page, id=id)\\n    # etcetera\\n\\n\\nclass Page(models.Model):\\n    # regular stuff\\n    def get_absolute_url(self):\\n        return \"/someapp/%d/\" % self.id", "id": "11506437", "code_sizes": 1}, {"nl_num": [3, 2, 1113, 4773, 2610, 188, 3747, 4463, 1105, 2080, 2432, 4], "code_num": [2], "code": "def bubbleSort(numbers): # Bubble Sort Algorithm\\n    nums = list(numbers)\\n    for i in range(len(nums)):\\n        for j in range(i+1, len(nums)):\\n            if numbers[j] < numbers[i]:\\n                numbers[j], numbers[i] = numbers[i], numbers[j]\\n\\n    print numbers", "id": "9204574", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 4370, 3843, 2710, 2610, 4505, 4], "code_num": [2], "code": "pattern = r'(\\d+)/(\\d+)/(\\d+)\\|(\\d+):(\\d+):(\\d+)\\|(\\S+)\\|(\\S+)\\|(\\S+)\\|(\\S+)\\|(\\S+)\\|(\\S+)\\|(\\d+)\\|(\\d+)\\|(\\S+)\\|'", "id": "33232537", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 550, 568, 4769, 3703, 2714, 2610, 1828, 4238, 568, 3197, 3467, 3004, 4], "code_num": [2], "code": "i = 0\\nfor item in text_list:\\n    i += 1\\n    #also use format instead of the %s\\n    f = open(\"c:\\\\users\\\\jacob\\\\documents\\\\txt_files\\\\{0}.txt\".format(i), 'w')\\n    f.write(item)\\n    f.close()", "id": "28174233", "code_sizes": 1}, {"nl_num": [3, 1503, 1400, 2516, 4179, 1828, 2, 3293, 1400, 2, 4179, 1828, 2186, 2610, 188, 4], "code_num": [2], "code": "if route.distance(p) <= r:\\n    return route.project(p)", "id": "28805237", "code_sizes": 1}, {"nl_num": [3, 3209, 551, 2, 223, 2, 2610, 2049, 4], "code_num": [2], "code": "df.loc[idx[1.5,:], :]", "id": "25510255", "code_sizes": 1}, {"nl_num": [3, 3601, 990, 4238, 4179, 2315, 540, 2, 4178, 4780, 1273, 4], "code_num": [2], "code": "first = [{'a':'aaa','b':'ccc','c':'bbb','d':'ddd'},\\n         {'a':'bb','b':2,'c':1,'d':3},\\n         {'a':'cc','b':22,'c':11,'d':33}]\\n\\nsecond = [{'a':'aaa','b':'bbb','c':'ccc','d':'ddd'},\\n          {'a':'bb','b':1,'c':2,'d':3},\\n          {'a':'cc','b':11,'c':22,'d':33}]\\n\\n\\ndef compare(first,second):\\n    for a,b in zip(first, second):\\n        vals_a = list(a.values())\\n        vals_b = list(b.values())\\n\\n        vals_a.sort()\\n        vals_b.sort()\\n\\n        if vals_a != vals_b:\\n            return False\\n\\n    return True\\n\\nprint compare(first,second)", "id": "14478202", "code_sizes": 1}, {"nl_num": [3, 3306, 2, 1297, 2, 2610, 2385, 540, 1400, 2, 2, 4179, 2, 4], "code_num": [2], "code": "def get_models_within_25 (self):\\n    from django.db import connection, transaction\\n    cursor = connection.cursor()\\n\\n    cursor.execute(\"\"\"SELECT id, ( \\n        3959 * acos( cos( radians(37) ) * cos( radians( lat ) ) * \\n        cos( radians( lng ) - radians(-122) ) + sin( radians(37) ) * \\n        sin( radians( lat ) ) ) )\\n        AS distance FROM stores HAVING distance < 25\\n        ORDER BY distance LIMIT 0 , 20;\"\"\")\\n    ids = [row[0] for row in cursor.fetchall()]\\n\\n    return MyModel.filter(id__in=ids)", "id": "1916953", "code_sizes": 1}, {"nl_num": [3, 2, 643, 2610, 2710, 4], "code_num": [2], "code": "' '.join(\"some   user entered     text\".split())", "id": "6496884", "code_sizes": 1}, {"nl_num": [3, 1027, 2604, 2249, 3594, 2606, 2878, 2605, 568, 3202, 4], "code_num": [2], "code": "import string\\nfrom math import *\\n\\ndef main():\\n    n=4\\n    abscissa=[-5,-2,3,7]\\n    ordinate=[4,-6,8,1]\\n    result = ''\\n    for j,y in enumerate(ordinate):\\n        if j!=0:\\n            result += '+'\\n        LP=str(y)\\n        denom=\"1\"\\n        for k,x in enumerate(abscissa):\\n            if k!=j:\\n                denom += '*({}-{})'.format(abscissa[j],x)\\n                LP += '*(x-{})'.format(x)\\n        LP += '/' + denom\\n        result += LP\\n    print(result)\\nmain()", "id": "15171663", "code_sizes": 1}, {"nl_num": [3, 69, 568, 4174, 1828, 4780, 2610, 1828, 813, 4714, 1708, 2, 2326, 4], "code_num": [2], "code": "stmt = sqlalchemy.update(Table1).\\\\n            values(trackingId = 'UPSTXNID1').\\\\n            where(Table1.id == '12345')\\ndb.engine.execute(stmt)\\n\\n# If you want to see the underlying SQL statement that is created\\nprint str(stmt.compile(dialect=sqlalchemy.dialects.mysql.dialect()))", "id": "31128123", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 2121, 28, 223, 3496, 3073, 4179, 3746, 1297, 18, 1039, 4], "code_num": [2], "code": "x,y = min(((x,f(x)) for x in array), key = lambda(k, v): v)", "id": "15442251", "code_sizes": 1}, {"nl_num": [3, 3268, 4032, 593, 2610, 188, 4], "code_num": [2], "code": "Q = P[:]", "id": "26430207", "code_sizes": 1}, {"nl_num": [3, 3990, 4047, 3434, 2, 223, 1400, 2943, 2, 2610, 3550, 4], "code_num": [2], "code": "article['title'] = response.css(\"p.title ::text\").extract() + \\\\n                   response.css(\"span.newstitle ::text\").extract()", "id": "25019175", "code_sizes": 1}, {"nl_num": [3, 2, 3747, 2, 864, 550, 1535, 483, 2616, 1597, 540, 2, 177, 4563, 4], "code_num": [2], "code": "from appscript import *\\n\\nmail = app('Mail')\\nmsg = mail.make(new=k.outgoing_message)\\nmsg.subject.set(\"hello\"),\\nmsg.content.set(\"appscript\")\\nmsg.to_recipients.end.make(new=k.to_recipient, with_properties={'address':'taichino@gmail.com'})\\nmsg.send()", "id": "3166175", "code_sizes": 1}, {"nl_num": [3, 997, 1828, 4238, 4179, 389, 2206, 4182, 4570, 1828, 4660, 2326, 4], "code_num": [2], "code": "board.objects.filter(run__floor=1)", "id": "5496177", "code_sizes": 1}, {"nl_num": [3, 188, 2710, 178, 4], "code_num": [2], "code": "ids = [int(s.split(\"/\")[3]) for s in id_arr]", "id": "4396453", "code_sizes": 1}, {"nl_num": [3, 1016, 2024, 853, 470, 2610, 188, 4], "code_num": [2], "code": "class AddNoteForm(forms.Form):\\n    def __init__(self, test_values, *args, **kwargs):\\n        self.custom_choices = test_values\\n        super(AddNoteForm, self).__init__(*args, **kwargs)\\n        self.fields['choices'] = forms.MultipleChoiceField(\\n          label='Test Choices',\\n          choices=self.custom_choices\\n        )", "id": "31601529", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2633, 338, 1268, 1288, 3452, 3795, 3090, 1828, 2, 1984, 169, 3784, 3747, 1066, 858, 2464, 990, 4], "code_num": [2], "code": "vq.whiten", "id": "29616520", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3222, 383, 2, 2610, 2, 4], "code_num": [2], "code": "b = Box2D.b2ChainShape(vertices_chain=a)", "id": "18641898", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2, 1828, 1170, 2610, 990, 389, 177, 1861, 2326, 4], "code_num": [2], "code": "import traceback\\n\\ndef foo():\\n    bar()\\n\\ndef bar():\\n    baz()\\n\\ndef baz():\\n    traceback.print_stack() \\n    # or trace = traceback.extract_stack()\\n\\nfoo()", "id": "10330119", "code_sizes": 1}, {"nl_num": [3, 1872, 3630, 1566, 2881, 3747, 3183, 3412, 2, 2710, 4], "code_num": [2], "code": "line=line.encode('utf-8').decode('utf-8','ignore').encode(\"utf-8\")", "id": "26541968", "code_sizes": 1}, {"nl_num": [3, 1741, 1584, 3293, 1712, 188, 389, 177, 1861, 4], "code_num": [2], "code": "print \"Too fast! The fine is ${0}\".format((clocked - limit) * 5 + 50)", "id": "14660744", "code_sizes": 1}, {"nl_num": [3, 2184, 640, 2610, 1400, 3064, 4179, 1400, 2, 2610, 990, 4], "code_num": [2], "code": "import math\\nimport numpy as np\\nimport matplotlib.pyplot as plt\\n\\ndef sigmoid(x):\\n    a = []\\n    for item in x:\\n        a.append(1/(1+math.exp(-item)))\\n    return a\\n\\n\\nx = np.arange(-10., 10., 0.2)\\nsig = sigmoid(x)\\n\\nfig = plt.figure()\\nax = fig.add_subplot(1, 1, 1)\\n\\n# Move left y-axis and bottim x-axis to centre, passing through (0,0)\\nax.spines['left'].set_position('center')\\nax.spines['bottom'].set_position('center')\\n\\n# Eliminate upper and right axes\\nax.spines['right'].set_color('none')\\nax.spines['top'].set_color('none')\\n\\n# Show ticks in the left and lower axes only\\nax.xaxis.set_ticks_position('bottom')\\nax.yaxis.set_ticks_position('left')\\n\\nplt.plot(x,sig)\\nplt.show()", "id": "31556446", "code_sizes": 1}, {"nl_num": [3, 3942, 4220, 1479, 3293, 523, 2610, 990, 4], "code_num": [2], "code": "from .add import add", "id": "27093069", "code_sizes": 1}, {"nl_num": [3, 4505, 1007, 451, 472, 338, 3551, 551, 262, 250, 990, 3004, 4], "code_num": [2], "code": "import base64\\n\\nexe = 'c:/users/me/program.exe'\\nscript = 'c:/users/me/newpython.py'\\nchunksize = 6144\\nlinelength = 80\\n\\nwith open(exe,'rb') as inf, open(script,'w') as outf:\\n    outf.write('program_data = \"\"\"')\\n\\n    while True:\\n        progdata = inf.read(chunksize)\\n        if len(progdata):\\n            progdata = progdata.encode(\"base64\")\\n            outf.writelines(progdata[i:i+linelength] for i in range(0, len(progdata), linelength))\\n        else:\\n            break\\n\\n    outf.write('\"\"\".decode(\"base64\")')", "id": "4911440", "code_sizes": 1}, {"nl_num": [3, 3767, 3345, 1242, 3747, 3102, 822, 223, 817, 338, 2326, 4], "code_num": [2], "code": "import numpy\\nimport matplotlib.pyplot as plt\\nfrom mpl_toolkits.mplot3d import axes3d\\n\\ndef peaks(x,y):\\n    return x * numpy.sin(y)\\n\\nfig = plt.figure()\\nax = fig.gca(projection='3d')\\nX = Y= numpy.arange(-3, 3, 0.1).tolist()\\nX, Y = numpy.meshgrid(X, Y)\\n\\nZ = []\\nfor i in range(len(X)):\\n    Z.append(peaks(X[i],Y[i]))\\n\\nax.plot_surface(X, Y, Z, rstride=8, cstride=8, alpha=0.3)\\ncset = ax.contour(X, Y, Z, zdir='z', offset=-8)\\ncset = ax.contour(X, Y, Z, zdir='x', offset=-8)\\ncset = ax.contour(X, Y, Z, zdir='y', offset=8)\\n\\nax.set_xlabel('X')\\nax.set_xlim(-8, 8)\\nax.set_ylabel('Y')\\nax.set_ylim(-8, 8)\\nax.set_zlabel('Z')\\nax.set_zlim(-8, 8)\\n\\nplt.show()", "id": "9152958", "code_sizes": 1}, {"nl_num": [3, 2, 4780, 223, 655, 3747, 4458, 551, 1573, 2678, 4238, 4], "code_num": [2], "code": "countries = [\\n    {'name': 'Australia', 'population': 21, 'tz': 'UTC +10', 'visits': 1},\\n    {'name': 'Germany', 'population': 81, 'tz': 'UTC +1', 'visits': 2},\\n    {'name': 'Mexico', 'population': 107, 'tz': 'UTC -6', 'visits': 0},\\n]\\n\\ntemplate = \"\"\"\\n<select>\\n<option{% if record.visits = 0%} selected {% endif %}>0\\n<option{% if record.visits = 1%} selected {% endif %}>1\\n<option{% if record.visits = 2%} selected {% endif %}>2\\n</select>\\n\"\"\"\\n\\nclass CountryTable(tables.Table):\\n    name = tables.Column()\\n    population = tables.Column()\\n    tz = tables.Column(verbose_name='time zone')\\n    visits = tables.TemplateColumn(template)", "id": "11326234", "code_sizes": 1}, {"nl_num": [3, 1158, 2637, 2610, 3004, 4], "code_num": [2], "code": "str=\"                IN      Mx\"\\n\\nfor line in file:\\n    if str in line:\\n       line= \"@\"+line[1:]", "id": "24039568", "code_sizes": 1}, {"nl_num": [3, 188, 3881, 2828, 169, 764, 927, 4179, 1828, 4238, 4], "code_num": [2], "code": "li = iter(object_list)\\n\\nobj = next(li)\\n\\ndo_first_thing_with(obj)\\n\\nwhile True:\\n    try:\\n        do_something_with(obj)\\n        obj = next(li)\\n    except StopIteration:\\n        do_final_thing_with(obj)\\n        break", "id": "3394687", "code_sizes": 1}, {"nl_num": [3, 4786, 3963, 3293, 2707, 568, 2, 4], "code_num": [2], "code": "# Python 2.\\n# Change xrange to range for Python 3.\\n\\nimport time\\n\\nstart_time = time.time()\\n\\nlimit = 100000000  # 1/10 your limit.\\nskip  = 1000       # Batch size.\\n\\nwith open('numlistbegin', 'w') as fh:\\n    for i in xrange(0, limit, skip):\\n        batch = ''.join('%010d\\n' % j for j in xrange(i, i + skip, 1))\\n        fh.write(batch)\\n\\nprint time.time() - start_time   # 73 sec. (106 sec. without batching).", "id": "17791039", "code_sizes": 1}, {"nl_num": [3, 188, 1170, 1605, 4250, 4314, 1828, 1176, 2238, 1182, 3528, 395, 1400, 4393, 4409, 4767, 4179, 315, 3963, 2610, 4018, 4], "code_num": [2], "code": "def countLongestSequence(nums):\\n        countMax=0\\n        count=0\\n        for i in range(0, len(nums)+1):\\n                if i == len(nums) or nums[i] <= 0:\\n                        if count > countMax:\\n                                countMax=count\\n                        count=0\\n                else:           \\n                        count+=1\\n        return countMax", "id": "7949396", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1065, 1400, 28, 1605, 4240, 4178, 3346, 74, 694, 4179, 1915, 2610, 1828, 1170, 2426, 2610, 188, 2326, 4], "code_num": [2], "code": "def fun_name(*args):\\n  if len(args) != 2:\\n    raise TypeError('Two arguments required')", "id": "456673", "code_sizes": 1}, {"nl_num": [3, 2878, 4220, 757, 2, 169, 3119, 3594, 1637, 540, 1751, 3995, 4], "code_num": [2], "code": "import boto\\nfrom boto.s3.connection import S3Connection\\ns3 = boto.connect_s3()  \\nbuckets = s3.get_all_buckets() \\nfor key in buckets:\\n    print key.name", "id": "30133956", "code_sizes": 1}, {"nl_num": [3, 4322, 3747, 1016, 2947, 568, 305, 604, 3994, 4], "code_num": [2], "code": "execute(ssh_keygen, 'jbloggs', '/home/jbloggs', host=\"server1\")", "id": "22709799", "code_sizes": 1}, {"nl_num": [3, 2385, 1519, 2229, 3293, 2287, 864, 353, 1422, 353, 1422, 568, 2287, 864, 1422, 1422, 4], "code_num": [2], "code": "url.replace('\\/', '/')", "id": "8746791", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 1757, 2442, 1828, 262, 1828, 3518, 551, 1400, 155, 4179, 549, 2613, 3138, 2326, 4], "code_num": [2], "code": "if gpio.input(i):\\n\\n    if gpio.input(i) and p == 0:\\n\\n        p = 1\\n\\n        time.sleep(0.5)\\n\\n        while not(gpio.input(i)) and p == 1:\\n\\n            gpio.output(o, False)\\n\\n            time.sleep(t)\\n\\n            gpio.output(o, True)\\n\\n            time.sleep(t) \\n\\n        else:\\n\\n            while gpio.input(i):\\n\\n                p = 0\\n\\n                time.sleep(0.5)", "id": "18890198", "code_sizes": 1}, {"nl_num": [3, 2, 655, 568, 4570, 549, 4465, 551, 1828, 3212, 2252, 4178, 2, 4], "code_num": [2], "code": "MyModel.objects.filter(**your_filters).extra(select={\\n  'measure_name': \\n    'SELECT measure.name FROM measure WHERE mymodeltable.measure_id = measure.id'\\n})", "id": "7029652", "code_sizes": 1}, {"nl_num": [3, 550, 568, 255, 2583, 540, 2129, 1659, 3821, 1708, 990, 3506, 4691, 2326, 4], "code_num": [2], "code": "data = jsDat.get('data')\\ndata = data.encode('ascii', 'ignore')", "id": "11956503", "code_sizes": 1}, {"nl_num": [3, 990, 4238, 2310, 3747, 1530, 1957, 4], "code_num": [2], "code": "def first_name_is_in(first_names, full_names):\\n    for name in first_names:\\n        for full_name in full_names:\\n            if full_name.startswith(\"%s \" % (name,)):\\n               return True\\n    return False", "id": "10099413", "code_sizes": 1}, {"nl_num": [3, 1659, 2610, 990, 4], "code_num": [2], "code": "import json\\n\\nresp = '{\"Info\": \"8\\u6298\", \"Name\": \"\\u5bb6\\u4e50\\u798f\"}'\\nprint json.loads(resp)\\n\\n## {u'Info': u'8\\u6298', u'Name': u'\\u5bb6\\u4e50\\u798f'}", "id": "9867749", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 3366, 4047, 664, 1915, 2610, 1828, 2615, 2186, 2326, 4], "code_num": [2], "code": "import tornado.web\\nimport tornado.httpserver\\n\\nclass TestParamsHandler(tornado.web.RequestHandler):\\n    def get(self, param1, param2, param3):\\n        param2 = param2 if param2 else 'default2'\\n        param3 = param3 if param3 else 'default3'\\n        self.write(\\n            {\\n                'param1': param1,\\n                'param2': param2,\\n                'param3': param3\\n            }\\n        )\\n\\n# My initial answer is above, but I think the following is better.\\nclass TestParamsHandler2(tornado.web.RequestHandler):\\n    def get(self, **params):\\n        self.write(params)\\n\\n\\napplication = tornado.web.Application([\\n    (r\"/test1/(?P<param1>[^\\/]+)/?(?P<param2>[^\\/]+)?/?(?P<param3>[^\\/]+)?\", TestParamsHandler),\\n    (r\"/test2/(?P<param1>[^\\/]+)/?(?P<param2>[^\\/]+)?/?(?P<param3>[^\\/]+)?\", TestParamsHandler2)\\n])\\nhttp_server = tornado.httpserver.HTTPServer(application)\\nhttp_server.listen(8080)\\ntornado.ioloop.IOLoop.instance().start()", "id": "7744454", "code_sizes": 1}, {"nl_num": [3, 3130, 3909, 3293, 3467, 3004, 540, 990, 4], "code_num": [2], "code": "def DeleteToDo():\\n    print (\"Which Item Do You Want To Delete?\")\\n    DeleteItem = raw_input(\">\") #select a line number to delete\\n    print (\"Are You Sure You Want To Delete Number\" + DeleteItem + \"(y/n)\")\\n    DeleteItem=int(DeleteItem) \\n    VerifyDelete = str.lower(raw_input(\">\"))\\n    if VerifyDelete == \"y\":\\n        FILE = open('data.txt',\"r\") #open the file (tried w+ as well, entire file is deleted)\\n        lines=[x.strip() for x in FILE if int(x[:x.index('.')])!=DeleteItem] #read all the lines first except the line which matches the line number to be deleted\\n        FILE.close()\\n        FILE = open('data.txt',\"w\")#open the file again\\n        for x in lines:FILE.write(x+'\\n')    #write the data to the file\\n\\n    else:\\n        print (\"Nothing Deleted\")\\nDeleteToDo()", "id": "11249966", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 1869, 169, 2878, 1828, 746, 4179, 4047, 1237, 2610, 1828, 303, 2326, 4], "code_num": [2], "code": "fruit = 'banana'\\ncolour = 'yellow'\\nq.put((fruit, colour))", "id": "12977301", "code_sizes": 1}, {"nl_num": [3, 188, 3083, 2622, 492, 2632, 568, 3703, 4807, 4], "code_num": [2], "code": "copy.deepcopy", "id": "16072266", "code_sizes": 1}, {"nl_num": [3, 746, 1378, 223, 2049, 4], "code_num": [2], "code": "from pandas import  DataFrame\\n\\ndf1 = DataFrame({'col1':[1,2,3], 'col2':[2,3,4]})\\ndf2 = DataFrame({'col1':[4,2,5], 'col2':[6,3,5]})\\n\\nprint df2[~df2.isin(df1).all(1)]\\nprint df2[(df2!=df1)].dropna(how='all')\\nprint df2[~(df2==df1)].dropna(how='all')", "id": "18180763", "code_sizes": 1}, {"nl_num": [3, 4312, 2, 3886, 1405, 338, 568, 2697, 3797, 1600, 2610, 990, 4], "code_num": [2], "code": "contents = load_workbook('filename.xlsm', keep_vba = True);", "id": "30777139", "code_sizes": 1}, {"nl_num": [3, 188, 4189, 2, 3968, 3518, 1270, 4], "code_num": [2], "code": "for dataset in P:\\n        abc = P.loc[dataset,:,'b']\\n        abc_low = sum(i < 1.0 for i in abc)", "id": "28581124", "code_sizes": 1}, {"nl_num": [3, 990, 2464, 1804, 1828, 4018, 4179, 4238, 2610, 1828, 2, 4491, 2326, 4], "code_num": [2], "code": "a[1][1:4] = random.sample(a[1][1:4], 3)", "id": "33899220", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 1695, 873, 949, 4168, 897, 1605, 2, 1828, 2710, 4179, 3844, 1598, 4], "code_num": [2], "code": "file.write('0'.zfill(size))", "id": "28019103", "code_sizes": 1}, {"nl_num": [3, 550, 568, 361, 1828, 262, 3293, 841, 568, 4174, 2605, 2610, 2385, 2326, 4], "code_num": [2], "code": "class Score(models.Model):\\n    group_id = models.ForeignKey(Group)\\n    name = models.CharField(max_length=60)\\n    gender = models.CharField(max_length=1,default = False )\\n\\nclass Qs(models.Model):\\n    score = models.ForeignKey(Score)\\n    number = models.IntegerField()\\n    q_value = models.DecimalField(max_digits=20,decimal_places=8)", "id": "28961999", "code_sizes": 1}, {"nl_num": [3, 2385, 3715, 4660, 4178, 4347, 2639, 4347, 4179, 327, 223, 4047, 4585, 4], "code_num": [2], "code": "import operator\\nfrom itertools import izip\\nquery = reduce(\\n    operator.or_, \\n    (Q(firstname=fn, lastname=ln) for fn, ln in izip(first_list, last_list))\\n    )\\n\\nPerson.objects.filter(query)", "id": "20177749", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 1757, 1945, 4047, 2639, 2238, 2206, 2464, 2, 3528, 568, 1828, 3316, 4640, 2252, 711, 3790, 1280, 2326, 4], "code_num": [2], "code": "from collections import defaultdict\\n\\nx = defaultdict(list)\\nx['Key1'].append((1.000,2.003,3.0029))", "id": "10301589", "code_sizes": 1}, {"nl_num": [3, 418, 2756, 3426, 4476, 2610, 188, 4], "code_num": [2], "code": "import re\\nmy_str = '123hello 456world'\\noutput = re.sub(r'\\d+', '', my_str)\\nprint output  # 'hello world'", "id": "30315035", "code_sizes": 1}, {"nl_num": [3, 1997, 169, 2093, 549, 2714, 3293, 1007, 2, 1007, 898, 3518, 4], "code_num": [2], "code": "driver.find_element_by_xpath(\".//input[contains(@onclick, '1 Bedroom Deluxe')]\")\\n\\ndriver.find_element_by_css_selector(\"input[onclick*='1 Bedroom Deluxe']\")", "id": "21691126", "code_sizes": 1}, {"nl_num": [3, 3932, 1501, 1623, 4636, 2, 2, 4], "code_num": [2], "code": "QWidget.setFocusPolicy(QtCore.Qt.NoFocus)", "id": "24726206", "code_sizes": 1}, {"nl_num": [3, 2785, 2868, 1237, 2610, 1828, 4238, 1708, 188, 4], "code_num": [2], "code": "import random\\n\\nfrom itertools import izip_longest\\n\\n\\ndef grouper(iterable, n, fillvalue=None):\\n    \"Collect data into fixed-length chunks or blocks\"\\n    # Taken from itertools recipes:\\n    # https://docs.python.org/2/library/itertools.html#recipes\\n    # grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx\\n    args = [iter(iterable)] * n\\n    return izip_longest(fillvalue=fillvalue, *args)\\n\\n\\nstudents = ['Joe', 'Sam', 'Bob', 'Jill', 'Paul', 'Eric', 'Chai', 'Chris',\\n            'Sui', 'Matt', 'Leon', 'Nami', 'Leonard', 'Sai', 'Mike',\\n            'Julie', 'Jim', 'Holly', 'Marge', 'Ed']\\n\\nrandom.shuffle(students)\\n\\nfor first_student, second_student in grouper(students, 2):\\n    print str(first_student), \"and\", str(second_student)", "id": "32296266", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4174, 2473, 2479, 4018, 540, 327, 3293, 1828, 2940, 4018, 2326, 4], "code_num": [2], "code": "final_data[:loaded_data.shape[0]] = loaded_data", "id": "29083702", "code_sizes": 1}, {"nl_num": [3, 550, 568, 746, 2, 551, 2, 2610, 188, 4350, 2326, 4], "code_num": [2], "code": "#!/usr/bin/env python\\nimport urllib\\n\\nfrom os import pardir, rename, listdir, getcwd\\nfrom os.path import join\\n\\n\\nclass MyOpener(urllib.FancyURLopener):\\n     version = 'QuickTime/7.6.2 (verqt=7.6.2;cpu=IA32;so=Mac 10.5.8)'\\n\\n# This line tells urllib.urlretrieve and urllib.urlopen to use your MyOpener \\n# instead of the default urllib.FancyOpener\\nurllib._urlopener = MyOpener()\\n\\ndef main():\\n    # lots of stuff\\n    for title, url in downloads.iteritems():\\n        fpath = join(data_dir, title.strip().replace('\\t',\"\").replace(\" \", \"_\"))\\n        fpath += \".mov\"\\n        urllib.urlretrieve(url, fpath)", "id": "8618984", "code_sizes": 1}, {"nl_num": [3, 2679, 777, 3004, 540, 188, 1650, 4], "code_num": [2], "code": "def getXML(self,subreddit):\\n        url = 'http://www.reddit.com'+subreddit+'.rss'\\n        source = urllib.request.urlretrieve(url,'rss.xml')\\n        self.getXmlData()", "id": "20439321", "code_sizes": 1}, {"nl_num": [3, 3427, 568, 1301, 405, 3293, 188, 2326, 4], "code_num": [2], "code": "import subprocess\\nlpr =  subprocess.Popen(\"/usr/bin/lpr\", stdin=subprocess.PIPE)\\nlpr.stdin.write(your_data_here)", "id": "12723818", "code_sizes": 1}, {"nl_num": [3, 4174, 2473, 4640, 540, 1312, 1297, 1405, 327, 4289, 1279, 2452, 2605, 4], "code_num": [2], "code": "for key, value in dict2.iteritems():\\n    dict1.setdefault(key, []).extend(value)", "id": "7206610", "code_sizes": 1}, {"nl_num": [3, 3384, 188, 2, 540, 2, 4], "code_num": [2], "code": "with myApp('myAppName') as app:\\n    app.run()\\n    app.log.info('Starting MyApp')\\n\\n    try:\\n        app.run_forever()\\n    except (KeyboardInterrupt, SystemExit, CaughtSignal):\\n        app.log.info('Shutting down MyApp')\\n\\n        app.close()", "id": "28601144", "code_sizes": 1}, {"nl_num": [3, 3195, 262, 3372, 4178, 2, 4], "code_num": [2], "code": "rooms = dict(('room_%d' % x, Room(x)) for x in range(1, 6))", "id": "8554354", "code_sizes": 1}, {"nl_num": [3, 188, 864, 4238, 4179, 2206, 2, 733, 4714, 1838, 4], "code_num": [2], "code": "print '<table>'\\nfor i in zip(*food_list):\\n    print '<tr>'\\n    print '<td>'+i[0]+'</td><td>'+i[1]+'</td><td>'+i[2]+'</td>'\\n    print '</tr>'\\nprint' </table>'", "id": "3224657", "code_sizes": 1}, {"nl_num": [3, 1780, 3091, 568, 655, 260, 4], "code_num": [2], "code": "# sel_att holds the user selected attributes.\\n\\nresult = Person.objects.all()\\n\\nfor att in sel_att:\\n    result = result.filter(\\n        attributes__attribute_name=att.attribute_name, \\n        attributes__attribute_type=att.attribute_type\\n    )", "id": "27115013", "code_sizes": 1}, {"nl_num": [3, 2, 188, 136, 4], "code_num": [2], "code": "import hashlib\\n\\nsh = hashlib.sha1()\\nsh.update('password')\\nhash_value = sh.hexdigest()\\n# write hash_value to file/db...", "id": "27994098", "code_sizes": 1}, {"nl_num": [3, 3914, 1123, 568, 338, 3157, 4178, 1884, 4179, 2487, 2238, 188, 3528, 4], "code_num": [2], "code": "filen = 'filename.txt'\\nx = loadtxt(fn,unpack=True,usecols=[0]) \\ny = loadtxt(fn,unpack=True,usecols=[1])\\n\\nn = ma.masked_where(gradient(y) < 0, y)\\np = ma.masked_where(gradient(y) > 0, y)\\n\\npylab.plot(x,n,'r',x,p,'g')", "id": "13037432", "code_sizes": 1}, {"nl_num": [3, 3390, 69, 568, 316, 3332, 223, 2, 2, 4], "code_num": [2], "code": "cursor.executescript(\"SELECT COUNT(value) AS itemcount FROM history WHERE itemid=?; \\\\n    SELECT value FROM history WHERE itemid = ? ORDER BY value ASC LIMIT 1 OFFSET itemcount * (? / 100) - 1)\", \\\\n    [itemId, itemId, percentile])", "id": "20710341", "code_sizes": 1}, {"nl_num": [3, 1226, 18, 1486, 2610, 2940, 1563, 3747, 2, 4], "code_num": [2], "code": "from visual.graph import *\\ngraphX = gcurve(color = color.cyan)\\ngdisplay()\\ngraphY = gcurve(color = color.red)", "id": "7592840", "code_sizes": 1}, {"nl_num": [3, 4174, 2962, 2549, 540, 3898, 2, 4], "code_num": [2], "code": "data = { \"email\" : \"my_new_email@example.com\", \"age\" : 20, \"city\" : \"London\", \"country\" : \"UK\", \"language\" : \"English\", \"profession\" : \"developer\", \"employeer\" : \"BBC\" }\\nUser.query.filter_by(username='admin').update(data)\\ndb.session.commit()", "id": "26738062", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 2073, 3578, 4583, 1400, 2583, 3293, 1828, 1533, 868, 1708, 188, 2326, 4], "code_num": [2], "code": "import urllib2\\nimport base64\\n\\nrequest = urllib2.Request( 'https://stream.twitter.com...' )\\nrequest.add_header( 'Authorization', 'Basic ' + base64.b64encode( username + ':' + password ) )\\nresponse = urllib2.urlopen( request )", "id": "13355778", "code_sizes": 1}, {"nl_num": [3, 188, 3793, 3747, 980, 1828, 2637, 711, 3220, 2605, 4], "code_num": [2, 2], "code": "re.sub(r'\\b(\\s*)\"(?!,|[ \\t]*$)', r'\\1\"\"', s)", "id": "20118193", "code_sizes": 2}, {"nl_num": [3, 990, 4476, 568, 694, 4], "code_num": [2], "code": "format(float(bet1size), '.8f')", "id": "24486983", "code_sizes": 1}, {"nl_num": [3, 2, 2610, 4238, 2710, 1039, 1297, 3518, 4], "code_num": [2], "code": "tlist = ['Hello world',\\n   'Hello world print',\\n   'Text',\\n   'World hello print']\\n\\nprint [i for i in tlist if \"print\" in i]", "id": "33145070", "code_sizes": 1}, {"nl_num": [3, 1158, 2710, 540, 2, 694, 3293, 3004, 4], "code_num": [2], "code": "index = {}\\nwith open('/tmp/file_index', 'r') as f:\\n    for line in f.readlines():\\n        index[line.split(',')[1].strip()] = line.split(',')[0]\\n\\n\\nif CurrentString in index.keys():\\n    CurrentString = index[CurrentString]", "id": "32297608", "code_sizes": 1}, {"nl_num": [3, 1592, 1828, 1825, 4115, 1708, 4429, 732, 540, 1568, 883, 1712, 4], "code_num": [2], "code": "page.content\\nsoup = BeautifulSoup(page.content,'html.parser')", "id": "25374725", "code_sizes": 1}, {"nl_num": [3, 188, 2385, 3506, 2, 4], "code_num": [2], "code": "import json\\nfrom getdata.models import record_search\\n\\nquery_data = record_search.objects.filter(**filter_kwargs) \\\\n                          .values(\"id\", \"domain\", \"record\", \"record_points_to\",\\n                                  \"priority_mx\", \"ttl\", \"generated_on\")\\ndata = json.dumps(list(query_data))", "id": "28128590", "code_sizes": 1}, {"nl_num": [3, 2, 4366, 2019, 655, 2, 4], "code_num": [2], "code": "from .forms import foo", "id": "25322372", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2396, 3674, 837, 568, 750, 949, 4391, 4691, 658, 552, 1400, 1033, 3919, 2326, 4], "code_num": [2], "code": "--system-site-packages", "id": "11815272", "code_sizes": 1}, {"nl_num": [3, 2, 1273, 4179, 4640, 2, 4], "code_num": [2], "code": "expr1, expr2, expr3, expr4\\n(expr1, expr2, expr3, expr4)\\n{expr1: expr2, expr3: expr4}\\nexpr1 + expr2 * (expr3 - expr4)\\nexpr1(expr2, expr3, *expr4, **expr5)\\nexpr3, expr4 = expr1, expr2", "id": "15681054", "code_sizes": 1}, {"nl_num": [3, 4462, 1828, 655, 177, 1561, 177, 3188, 2464, 1439, 540, 1828, 3212, 2252, 169, 1828, 1750, 3518, 4], "code_num": [2], "code": "initial = {\\n           'update_date': datetime.datetime.now(),\\n           'creation_date': datetime.datetime.now(),\\n           'update_author': 1 # not Author.objects.get(id=1)\\n          }\\nif kwargs.has_key('initial'):\\n    kwargs['initial'].update(initial)\\nelse:\\n    kwargs['initial'] = initial\\n# Initializing form only after you have set initial dict\\nsuper(DataReviewsForm,self).__init__(*args, **kwargs)\\n\\nself.fields['update_date'].widget = forms.HiddenInput()\\nself.fields['creation_date'].widget = forms.HiddenInput()\\nself.fields['update_author'].widget = forms.HiddenInput()", "id": "3223936", "code_sizes": 1}, {"nl_num": [3, 3293, 1400, 2943, 4691, 1652, 3055, 2823, 2464, 2604, 1400, 4691, 3689, 3774, 2326, 4], "code_num": [35], "code": "sys.modules", "id": "18982964", "code_sizes": 1}, {"nl_num": [3, 188, 1222, 1925, 2736, 540, 1659, 3518, 2610, 1007, 2, 1007, 4021, 1894, 4], "code_num": [2], "code": "def make_me_unicode(s):\\n    if isinstance(s, str):\\n        return s.decode('utf-8')\\n    elif isinstance(s, unicode):\\n        return s\\n    else:\\n        return None", "id": "17066049", "code_sizes": 1}, {"nl_num": [3, 2, 169, 619, 2737, 1442, 568, 611, 2714, 3293, 4238, 4], "code_num": [2], "code": "def randomName():\\n    names = [\"Morpheus\",\"Neo\",\"_from_redpills\",\"Agent Smith\",\"Trinity\"]\\n    return random.choice(names)", "id": "34459317", "code_sizes": 1}, {"nl_num": [3, 3990, 2, 2, 540, 2, 2, 4], "code_num": [2], "code": "import random\\nfrom factory.fuzzy import BaseFuzzyAttribute\\n\\nclass FuzzyPoint(BaseFuzzyAttribute):\\n    def fuzz(self):\\n        return Point(random.uniform(-180.0, 180.0),\\n                     random.uniform(-90.0, 90.0))\\n\\n\\nclass PlaceFactory(FakerFactory):\\n    name = factory.LazyAttribute(lambda x: faker.name())\\n    location = FuzzyPoint()\\n    class Meta:\\n        model = models.Place", "id": "32828890", "code_sizes": 1}, {"nl_num": [3, 3496, 1336, 461, 2610, 990, 1650, 169, 4379, 4], "code_num": [2], "code": "import pygame\\nimport pygame.camera\\n\\npygame.camera.init()\\ncam = pygame.camera.Camera(0,(640,480))\\ncam.start()\\nimg = cam.get_image()\\npygame.image.save(img,\"filename.jpg\")", "id": "23175486", "code_sizes": 1}, {"nl_num": [3, 100, 2492, 4139, 2610, 3352, 540, 3767, 4], "code_num": [2], "code": "exog = pd.core.frame.DataFrame({'TV':xx.ravel(),'Radio':yy.ravel()})\\nout = fit.predict(exog=exog)\\nax.plot_surface(xx, yy, out.reshape(xx.shape), color='None')", "id": "26431800", "code_sizes": 1}, {"nl_num": [3, 3486, 1828, 2, 3004, 604, 990, 4], "code_num": [2], "code": "\"\"\"\\nthis is a quick and dirty script to send HTML email - emphasis on dirty :)\\npython emailpage.py http://www.sente.cc\\nmade to answer: http://stackoverflow.com/questions/9226719/sending-a-html-file-via-python\\nStuart Powers\\n\"\"\"\\nimport lxml.html\\nimport smtplib\\nimport sys\\nimport os\\n\\n\\npage = sys.argv[1]  #the webpage to send\\n\\nroot = lxml.html.parse(page).getroot()\\nroot.make_links_absolute()\\n\\ncontent = lxml.html.tostring(root)\\n\\nmessage = \"\"\"From: Stuart Powers <stuart.powers@gmail.com>\\nTo: Stuart Powers <stuart.powers@gmail.com>\\nMIME-Version: 1.0\\nContent-type: text/html\\nSubject: %s\\n\\n%s\"\"\" %(page, content)\\n\\n\\nsmtpserver = smtplib.SMTP(\"smtp.gmail.com\",587)\\nsmtpserver.starttls()\\nsmtpserver.login(\"stuart.powers@gmail.com\",os.environ[\"GPASS\"])\\nsmtpserver.sendmail('stuart.powers@gmail.com', ['stuart.powers@gmail.com'], message)", "id": "9226719", "code_sizes": 1}, {"nl_num": [3, 3611, 2710, 250, 2710, 853, 4347, 2864, 4347, 2710, 4], "code_num": [2], "code": "new_list = [x[1:-1] for x in old_list]", "id": "30831828", "code_sizes": 1}, {"nl_num": [3, 2, 1486, 2610, 2049, 4], "code_num": [2], "code": "x = [1,1,2,2,3]\\ny = [2,3,1,3,1]\\n\\nfwd = set( zip(x,y) )\\nrev = set( zip(y,x) )\\nprint ' not bi: ', fwd.difference(rev)", "id": "11129478", "code_sizes": 1}, {"nl_num": [3, 2, 3836, 4178, 3858, 1956, 3908, 1828, 1310, 1563, 4], "code_num": [2], "code": "import sfml as sf\\n\\nwin = sf.RenderWindow(sf.VideoMode(100,100),\"hi\")\\n\\nwhile(1):\\n    for i in win.events :\\n        pass\\n    win.clear()\\n    win.display()", "id": "22733010", "code_sizes": 1}, {"nl_num": [3, 2, 4119, 4179, 2, 1914, 4], "code_num": [2], "code": "all_ids = []\\nfor m in m_array:\\n    for s in s_array:\\n        chi = view.apply_async(run_simulation, m=m, s=s)\\n        async_results.append(chi)\\n        all_ids.extend(chi.msg_ids)\\n\\nrc.get_result(all_ids, owner=False).wait_interactive()", "id": "33061111", "code_sizes": 1}, {"nl_num": [3, 3809, 3004, 3293, 2, 813, 990, 4], "code_num": [2], "code": "cur = db2.cursor()\\n#get the file\\ncur.execute(\"SELECT mimetype,File,Name FROM ContentFiles WHERE ContentID=10414\")\\narchivo = cur.fetchone()\\n\\nimagen = open(archivo[2],'wb')\\nimagen.write(archivo[1].decode('base64'))\\nimagen.close()", "id": "12315888", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3972, 1406, 327, 2610, 1828, 93, 4018, 2326, 4], "code_num": [2], "code": "list(enumerate(set(color_names)))", "id": "15341047", "code_sizes": 1}, {"nl_num": [3, 2101, 864, 2964, 2610, 3345, 2011, 4], "code_num": [2], "code": "import matplotlib.pyplot as plt\\nfrom mpl_toolkits.mplot3d import Axes3D\\n\\nfig = plt.figure()\\nax = fig.add_subplot(211, projection='3d')\\nax.plot([1,2,3,4,5],[7,4,6,2,8],[4,6,8,9,2],'*')\\nax.grid(True)\\nax.set_title('grid on')\\n\\nax2 = fig.add_subplot(212, projection='3d')\\nax2.plot([1,2,3,4,5],[7,4,6,2,8],[4,6,8,9,2],'*')\\nax2.grid(False)\\nax2.set_title('grid off')\\nplt.show()", "id": "16279978", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 2, 619, 1608, 2473, 4338, 4178, 1290, 1227, 1075, 4], "code_num": [2], "code": "t1 = threading.Thread(target=record)\\nt1.daemon = True\\nt1.start()\\n\\nt2 = threading.Thread(target=ftp)\\nt2.daemon = True\\nt2.start()", "id": "12885252", "code_sizes": 1}, {"nl_num": [3, 945, 3747, 2969, 2795, 1422, 3530, 2, 2610, 990, 4], "code_num": [2], "code": "import subprocess\\n\\ncommands = [ [\"p1\"], [\"p2\"] ]\\nprograms = [ subprocess.Popen(c) for c in commands ]\\nwhile True:\\n    for i in range(len(programs)):\\n        if programs[i].returncode is None:\\n            continue # still running\\n        else:\\n            # restart this one\\n            programs[i]= subprocess.Popen(commands[i])\\n        time.sleep(1.0)", "id": "894474", "code_sizes": 1}, {"nl_num": [3, 990, 864, 550, 1352, 2291, 2092, 1828, 3004, 3293, 717, 416, 1708, 4564, 4], "code_num": [2], "code": "fo = open(\"foo.jpg\", \"wb\")\\nfo.write(content)\\nfo.close()", "id": "28308489", "code_sizes": 1}, {"nl_num": [3, 2, 2570, 540, 3055, 2, 188, 4], "code_num": [2], "code": "class Job(object):\\n    def __init__(self, fpriority, spriority, description, iata , hops, cost):\\n        self.fpriority = fpriority\\n        self.spriority = spriority\\n\\n    def __cmp__(self, other):\\n        '''Comparisons for Python 2.x - it's done differently in 3.x'''\\n        if self.fpriority > other.fpriority:\\n            return 1\\n        elif self.fpriority < other.fpriority:\\n            return -1\\n        else:\\n            if self.spriority > other.spriority:\\n                return 1\\n            elif self.spriority < other.spriority:\\n                return -1\\n            else:\\n                return 0", "id": "22733351", "code_sizes": 1}, {"nl_num": [3, 990, 265, 568, 893, 3143, 389, 2464, 2, 4], "code_num": [2], "code": "from datetime import timedelta,datetime\\ntry:\\n    offset = int(\"Tue, 22 Jul 2008 08:17:41 +0300\"[-5:])\\nexcept:\\n    print \"Error\"\\n\\ndelta = timedelta(hours = offset / 100)\\n\\nfmt = \"%a, %d %b %Y %H:%M:%S\"\\ntime = datetime.strptime(\"Tue, 22 Jul 2008 08:17:41 +0200\"[:-6], fmt)\\ntime -= delta", "id": "526406", "code_sizes": 1}, {"nl_num": [3, 188, 1170, 686, 540, 1170, 551, 3493, 399, 4], "code_num": [2], "code": "def f(t=None):\\n    if not t:\\n        t = datetime.datetime.now()\\n    return t.timetuple()", "id": "30958835", "code_sizes": 1}, {"nl_num": [3, 2293, 3090, 2206, 540, 2940, 694, 4179, 889, 4], "code_num": [2], "code": "Ts = [T0]\\nTx = []\\ncounter = 1\\nfor T in Ts:\\n    for t in T:\\n        Ts.append([s[0] * s[1] + s[2] for s in izip(Ts[-1], C, QIN)])", "id": "6541641", "code_sizes": 1}, {"nl_num": [3, 4133, 4190, 1828, 990, 2658, 2, 4179, 2053, 1400, 4734, 4179, 1828, 3345, 2825, 2326, 4], "code_num": [2], "code": "from collections import defaultdict\\nfrom itertools import combinations\\ntriangles = [(1,2,3), (2,3,4), (1,3,5), (3,4,5), (5,6,7), (4,5,6)]\\n# For each edge set triangles containing that edge\\nedge2trias = defaultdict(list)  # edge (v1,v2) -> list of triangles\\nfor t_ind, ps in enumerate(triangles):\\n    for edge in zip(ps, ps[1:]+ps[:1]):\\n        edge2trias[tuple(sorted(edge))].append(t_ind)\\n# For each edge, set pair(s) of neighbouring triangles\\ntria2neigh = defaultdict(list)  # triangle index -> list of neighbouring triangles\\nfor edge, trias in edge2trias.iteritems():\\n    for t1, t2 in combinations(trias, 2):\\n        tria2neigh[t1].append(t2)\\n        tria2neigh[t2].append(t1)", "id": "15746412", "code_sizes": 1}, {"nl_num": [3, 1226, 2234, 3246, 2610, 813, 2464, 568, 4373, 1828, 655, 1977, 4], "code_num": [2], "code": "from django.contrib.auth import authenticate\\n\\nfor username, password in get_usernames_and_passwords():\\n    if authenticate(username=username, password=password) is None:\\n        print \"Failed to authenticate user {!r}\".format(username)", "id": "26505270", "code_sizes": 1}, {"nl_num": [3, 2, 1584, 3886, 2, 733, 540, 121, 4125, 4], "code_num": [2], "code": "print u' '.join(soup.findAll(text=True))", "id": "7072789", "code_sizes": 1}, {"nl_num": [3, 1398, 1828, 3843, 841, 2238, 3594, 2943, 2429, 3528, 568, 1828, 2618, 841, 2610, 2385, 4], "code_num": [2], "code": "special_user_list = User.objects.filter(\\n    Q(userprofile__user_type='special') |\\n    Q(pk=request.user.pk)\\n).distinct()", "id": "10118737", "code_sizes": 1}, {"nl_num": [3, 2, 338, 2610, 2125, 4], "code_num": [2], "code": "logList = db.GqlQuery(\"SELECT * FROM Log ORDER BY date DESC LIMIT 1\")\\nresult = logList.get()\\nresult.content = \"some text\"\\nresult.put()", "id": "3806023", "code_sizes": 1}, {"nl_num": [3, 1158, 1400, 2489, 4179, 4640, 540, 1312, 4640, 2610, 1828, 1170, 3747, 188, 4], "code_num": [2], "code": "def func(dct):\\n   dct.clear()\\n   dct.update({'a': 5})", "id": "23159019", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 4570, 1828, 574, 3518, 568, 383, 873, 1312, 2220, 4179, 1828, 3867, 2610, 188, 2326, 4], "code_num": [2], "code": "if choice == \"car\":\\n        return CarRoom()", "id": "4982138", "code_sizes": 1}, {"nl_num": [3, 1881, 864, 2, 1400, 3008, 3372, 169, 327, 4179, 1828, 4139, 841, 2326, 4], "code_num": [2], "code": "class BaseModel(object):\\n\\n    @classmethod\\n    def _get_keys(cls):\\n        return sa.orm.class_mapper(cls).c.keys()\\n\\n    def get_dict(self):\\n        d = {}\\n        for k in self._get_keys():\\n            d[k] = getattr(self, k)\\n        return d", "id": "20824277", "code_sizes": 1}, {"nl_num": [3, 4171, 113, 2933, 540, 2, 1863, 4], "code_num": [2], "code": "opts = {'py2exe': {\\n'dist_dir': 'dist',\\n'dll_excludes': ['OLEAUT32.dll', 'USER32.dll', 'SHELL32.dll', 'ole32.dll', 'MSVCP90.dll',\\n                 'ADVAPI32.dll', 'NETAPI32.dll', 'WS2_32.dll', 'GDI32.dll', 'VERSION.dll',\\n                 'KERNEL32.dll', 'WINSPOOL.DRV', 'mfc90.dll'],\\n'includes': ['zmq.backend.cython', 'UserList', 'UserString', 'commands', 'future.backports.misc'],} }", "id": "31247829", "code_sizes": 1}, {"nl_num": [3, 188, 823, 3747, 684, 3786, 4], "code_num": [2], "code": "from selenium.webdriver.firefox.webdriver import WebDriver\\n\\n\\ndriver = WebDriver()\\ndriver.get('https://example.com/examplelogin')\\n\\nusername = driver.find_element_by_id('username')\\npassword = driver.find_element_by_id('password')\\n\\nusername.send_keys('MY_USERNAME')\\npassword.send_keys('MY_PASSWORD')\\n\\nsubmit.click()", "id": "34236817", "code_sizes": 1}, {"nl_num": [3, 4135, 2, 711, 1987, 2441, 1956, 1559, 1987, 2805, 4], "code_num": [2], "code": "self.tree = wx.TreeCtrl(self, style=wx.TR_HAS_BUTTONS + wx.TR_HIDE_ROOT)", "id": "2925971", "code_sizes": 1}, {"nl_num": [3, 2, 2, 2610, 188, 4], "code_num": [2], "code": "def make_linear_interpolator(x0, x1, y0, y1):\\n    \"\"\"\\n    Return a function to convert x in (x0..x1) to y in (y0..y1)\\n    \"\"\"\\n    dy_dx = (y1 - y0) / float(x1 - x0)\\n    def y(x):\\n        return y0 + (x - x0) * dy_dx\\n    return y\\n\\ncolor_to_temp = make_linear_interpolator(0, 32, 44000, 3200)\\n\\ncolor_to_temp(10)    # => 32150.0", "id": "28837344", "code_sizes": 1}, {"nl_num": [3, 4189, 3025, 4498, 568, 1406, 4498, 4], "code_num": [2], "code": "df.groupby('Id')['Name'].apply(','.join)", "id": "33107938", "code_sizes": 1}, {"nl_num": [3, 2, 655, 124, 568, 4395, 3575, 3293, 2, 3747, 1535, 1007, 1711, 3178, 435, 4], "code_num": [2], "code": "#!/home5/myorg/.virtualenvs/mydjango/bin/python\\nimport sys, os\\n\\n# Add a custom Python path.\\nsys.path.insert(0, \"/home/<user_name>/projects/\")\\nsys.path.insert(0, \"/home/<user_name>/projects/yourproyect\")\\n\\nfrom flup.server.fcgi import WSGIServer\\nos.environ['DJANGO_SETTINGS_MODULE'] = '<project_name>.settings'\\nfrom django.core.handlers.wsgi import WSGIHandler\\nWSGIServer(WSGIHandler()).run()", "id": "24396340", "code_sizes": 1}, {"nl_num": [3, 188, 177, 550, 1352, 483, 3119, 3843, 3518, 3293, 3506, 3886, 3293, 2, 3372, 2326, 4], "code_num": [2], "code": "for rs in ourResult:\\n    if rs['money'] == 12210:\\n        print rs['time']", "id": "21503295", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1704, 327, 4179, 2348, 1007, 451, 2, 3867, 2, 2019, 2, 523, 2326, 4], "code_num": [2], "code": "import numpy as np\\nimport theano\\nimport theano.tensor as T\\n\\n# Create some data with 100 samples, 10 features \\nX = np.random.randn(100, 10)\\nX_sym = T.fmatrix('X')\\n# Create prediction function\\npredict_function = theano.function(inputs=[X_sym], outputs=self.y_pred)\\n\\n# See the actual prediction\\nprint(predict_function(X))", "id": "26009101", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2878, 717, 2, 2, 711, 2, 3747, 1708, 2, 2238, 3528, 4597, 2326, 4], "code_num": [2], "code": "from oauth2client import tools\\n\\nflags = tools.argparser.parse_args(args=[])\\ncredentials = tools.run_flow(flow, storage, flags)", "id": "24890146", "code_sizes": 1}, {"nl_num": [3, 4133, 4190, 1828, 2465, 1442, 568, 3068, 4640, 327, 4], "code_num": [2], "code": "diffkeys = [k for k in dict1 if dict1[k] != dict2[k]]\\nfor k in diffkeys:\\n  print k, ':', dict1[k], '->', dict2[k]", "id": "1911273", "code_sizes": 1}, {"nl_num": [3, 188, 121, 4125, 199, 4023, 229, 2139, 2, 775, 4], "code_num": [2], "code": "import pickle\\nimport math\\nimport urllib2\\nfrom lxml import etree\\nfrom bs4 import BeautifulSoup\\nfrom urllib import urlopen\\n\\nyear = '2014'\\nlastWeek = '2'\\nfavQB1 = \"Tom Brady\"\\n\\nfavQBurl2 = 'http://www.nfl.com/player/tombrady/2504211/gamelogs'\\nfavQBhtml2 = urlopen(favQBurl2).read()\\nfavQBsoup2 = BeautifulSoup(favQBhtml2)\\nfavQBpass2 = favQBsoup2.find_all(\"table\", { \"summary\" : \"Game Logs For %s In %s\" % (favQB1, year)})[1]\\nfavQBrows2 = []\\n\\nfor row in favQBpass2.findAll(\"tr\"):\\n    if lastWeek in row.findNext('td'):\\n        for item in row.findAll(\"td\"):\\n            favQBrows2.append(item.text)\\nprint (\"Enter: Starting Quarterback QB Rating of Favored Team for the last game played (regular season): \"),\\nprint favQBrows2[15]", "id": "30734963", "code_sizes": 1}, {"nl_num": [3, 1011, 568, 2149, 1828, 1006, 3971, 4790, 1650, 853, 1828, 4238, 4], "code_num": [2], "code": "my_list = [col for row in matrix for col in row]", "id": "13944844", "code_sizes": 1}, {"nl_num": [3, 2385, 4351, 3747, 23, 1712, 3293, 4159, 3747, 2039, 3747, 4159, 700, 4660, 2326, 4], "code_num": [2], "code": "Keyword.objects.filter(url__user__username=username1, keyword__in=Keyword.objects.filter(url__user__username=username2).values_list('keyword', flat=True)).values_list('keyword', flat=True).distinct()", "id": "11826440", "code_sizes": 1}, {"nl_num": [3, 1503, 1400, 2778, 1039, 2610, 549, 4018, 2464, 2298, 2494, 2828, 169, 1279, 3837, 4], "code_num": [2], "code": "# ? ????? ???????? ??????\\na = [2, 3, 4, 5, 6, 7, 8, 10, 12, 24, 48, 12, 6, 5, 0, -1]\\n\\ndef calc(a):\\n    if len(a) <= 2:\\n        return a[0] if a[0] > a[1]  else a[1]\\n\\n    l2 = len(a) / 2\\n\\n    if a[l2 + 1] <= a[l2] and a[l2] >= a[l2 - 1]:\\n        return a[l2]\\n\\n    if a[l2] > a[l2 + 1]:\\n        return calc(a[:l2+1])\\n    else:\\n        return calc(a[l2:])\\n\\nprint calc(a) # 48", "id": "32424526", "code_sizes": 1}, {"nl_num": [3, 3748, 3433, 540, 2, 568, 2583, 540, 2, 4], "code_num": [2], "code": "import csv, json\\n\\nli = []\\nwith open('myfile.csv', newline='') as csvfile:\\n    reader = csv.reader(csvfile, delimiter=' ')\\n    for location_id, name, latitude, longitude in reader:\\n        li.append({\\n           \"location_id\": location_id,\\n           \"name\": name,\\n           \"latitude\": latitude,\\n           \"longitude\": longitude,\\n           \"geo\": {\\n                \"__type\": \"GeoPoint\",\\n                \"latitude\": latitude,\\n                \"longitude\": longitude,\\n            }\\n        })\\nwith open(\"outfile.geo\", \"w\") as f:\\n    json.dump(li, f)", "id": "26612541", "code_sizes": 1}, {"nl_num": [3, 766, 188, 897, 568, 4570, 2499, 223, 1828, 3978, 2426, 4], "code_num": [2], "code": "mykey = '/path/to/ssl_key_file'\\nmycert = '/path/to/ssl_cert_file'\\nopener = urllib2.build_opener(HTTPSClientAuthHandler(mykey, mycert))\\nopener.add_handler(urllib2.HTTPBasicAuthHandler()) # add HTTP Basic Authentication information...\\nopener.add_password(user=settings.USER_ID, passwd=settings.PASSWD)", "id": "3704405", "code_sizes": 1}, {"nl_num": [3, 3990, 655, 223, 4027, 3734, 4], "code_num": [2], "code": "import os, sys\\nif __name__ == '__main__':\\n    # Setup environ\\n    sys.path.append(os.getcwd())\\n\\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"main.settings\")", "id": "32088702", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2745, 1828, 2710, 223, 2229, 2, 2610, 990, 4], "code_num": [2], "code": "#!/usr/bin/python\\n\\nprint \"Content-Type: text/html;charset=utf-8\";\\nprint\\n\\nimport urllib\\n\\nstr = \"Hello World?\"\\nstr = urllib.quote_plus(str)\\n\\nprint str", "id": "20901768", "code_sizes": 1}, {"nl_num": [3, 3331, 2, 568, 2, 4196, 27, 2610, 717, 2822, 1857, 188, 4], "code_num": [2], "code": "app = webapp2.WSGIApplication(debug = os.environ['SERVER_SOFTWARE'].startswith('Dev'), config=config.webapp2_config)\\n\\napp.error_handlers[404] = handle_error\\napp.error_handlers[500] = handle_error\\nroutes.add_routes(app)", "id": "11596138", "code_sizes": 1}, {"nl_num": [3, 1592, 1828, 4491, 4179, 2013, 2610, 1828, 4238, 4], "code_num": [2], "code": "for o in re.finditer('left:102[0-9]\"><nobr>(.*?)</nobr></div>', words[index]):\\n    out = o.group(1)", "id": "2154116", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 4011, 1122, 2030, 1293, 2610, 2, 3747, 990, 4], "code_num": [2], "code": "config.set_string('-logfn', '/dev/null')", "id": "30734860", "code_sizes": 1}, {"nl_num": [3, 3704, 1125, 568, 1828, 990, 2817, 2, 4], "code_num": [2], "code": "from tkinter import *\\n\\ndef func(value):\\n    print(value)\\n\\nroot = Tk()\\noptions = [\"1\", \"2\", \"3\"]\\nvar = StringVar()\\ndrop = OptionMenu(root, var, *options, command=func)\\ndrop.place(x=10, y=10)", "id": "26744366", "code_sizes": 1}, {"nl_num": [3, 3397, 1240, 1422, 3711, 2, 3293, 2019, 188, 4], "code_num": [2], "code": "import os, sigar\\n\\nsg = sigar.open()\\nmem = sg.mem()\\nsg.close() \\nprint mem.total() / 1024, mem.free() / 1024", "id": "1204378", "code_sizes": 1}, {"nl_num": [3, 4310, 4179, 3317, 3747, 3747, 338, 3747, 472, 2610, 990, 2326, 4], "code_num": [2], "code": "import requests\\nres = requests.post(url='http://example.com/post',\\n                    data=open('example.file', 'rb'),\\n                    headers={'Content-Type': 'application/octet-stream'})", "id": "31108726", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 2878, 549, 1537, 3293, 549, 841, 2613, 483, 3452, 1400, 1537, 3995, 2610, 1828, 2710, 2326, 4], "code_num": [2], "code": "getattr(o, v)", "id": "9944182", "code_sizes": 1}, {"nl_num": [3, 188, 679, 1648, 652, 4], "code_num": [2], "code": "class Health:\\n    def __init__(self): #Constructor initializing the variables.\\n        self.player_health = 10\\n        self.enemy_health = 10\\n\\nclass Combat:\\n    #Attack function receives a health object called \"hitter\" \\n    def attack(self, hitter):\\n        hitter.player_health -= 1   #Health Object hitter's player_health reduced by one. \\n        return hitter\\n\\nbridge = Combat() #Combat Object\\nhitter = Health() #Health Object\\n\\nbridge.attack(hitter) #hitter.player_health is now 9.", "id": "30339530", "code_sizes": 1}, {"nl_num": [3, 582, 2610, 2385, 4650, 4], "code_num": [2], "code": "x = int(x)\\ny = int(y)", "id": "22582914", "code_sizes": 1}, {"nl_num": [3, 1096, 864, 550, 568, 2051, 2610, 1566, 1351, 2, 1021, 4], "code_num": [2], "code": "def blit_mask(source, dest, destpos, mask, maskrect):\\n    \"\"\"\\n    Blit an source image to the dest surface, at destpos, with a mask, using\\n    only the maskrect part of the mask.\\n    \"\"\"\\n    tmp = source.copy()\\n    tmp.blit(mask, maskrect.topleft, maskrect, special_flags=pygame.BLEND_RGBA_MULT)\\n    dest.blit(tmp, destpos, dest.get_rect().clip(maskrect))", "id": "5940935", "code_sizes": 1}, {"nl_num": [3, 4527, 3808, 4268, 540, 1719, 2610, 2817, 2326, 4], "code_num": [2], "code": "import tkinter as tk\\n\\nparent = tk.Tk()\\n\\nmenubar = tk.Menu(parent)\\nshow_all = tk.BooleanVar()\\nshow_all.set(True)\\nshow_done = tk.BooleanVar()\\nshow_not_done = tk.BooleanVar()\\n\\nview_menu = tk.Menu(menubar)\\nview_menu.add_checkbutton(label=\"Show All\", onvalue=1, offvalue=False, variable=show_all)\\nview_menu.add_checkbutton(label=\"Show Done\", onvalue=True, offvalue=0, variable=show_done)\\nview_menu.add_checkbutton(label=\"Show Not Done\", onvalue=1, offvalue=0, variable=show_not_done)\\nmenubar.add_cascade(label='View', menu=view_menu)\\nparent.config(menu=menubar)\\n\\nparent.mainloop()", "id": "3929355", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 38, 4220, 3132, 4179, 1400, 2828, 135, 2610, 1828, 2710, 2464, 3594, 1569, 1400, 2828, 135, 3239, 4], "code_num": [2], "code": "userString[0] + userString[1:].replace(userString[0], \"*\")", "id": "33111320", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 2, 769, 3293, 1828, 1881, 726, 337, 1605, 483, 1535, 3559, 1280, 853, 1828, 2940, 1977, 2326, 4], "code_num": [2], "code": "src_users = src.query(User).all()\\nduplicate_records = []\\nfor row in src.query(User).all(): \\n    duplicate_user.append(User(row.username +\":\"+ row.password +\":\"+str(row.uid)+\":\"+str(row.gid)+\":\"+row.gecos+\":\"+row.home_directory+\":\"+row.shell))", "id": "33946418", "code_sizes": 1}, {"nl_num": [3, 2385, 2497, 540, 2, 1642, 3178, 4347, 2497, 4347, 4691, 4], "code_num": [2], "code": "logging.handlers.TimeRotatingFileHandler", "id": "6961212", "code_sizes": 1}, {"nl_num": [3, 2116, 4563, 1151, 1569, 955, 378, 1869, 853, 1828, 4214, 4691, 2019, 1828, 523, 4], "code_num": [2], "code": "from controller.FooController import *", "id": "10769514", "code_sizes": 1}, {"nl_num": [3, 2257, 1828, 4238, 540, 769, 1708, 4238, 3794, 452, 4], "code_num": [2], "code": "[Ingredient(*ing) for ing in ings]", "id": "8017246", "code_sizes": 1}, {"nl_num": [3, 4317, 899, 2492, 1970, 899, 2, 4], "code_num": [2], "code": "1.1e-16", "id": "16414704", "code_sizes": 1}, {"nl_num": [3, 2066, 4018, 4179, 1828, 547, 1598, 2610, 2, 4], "code_num": [2], "code": "A = IntVector('A', 112)", "id": "20991530", "code_sizes": 1}, {"nl_num": [3, 4356, 2, 1976, 2610, 4334, 3279, 790, 4], "code_num": [2], "code": "users.get_current_user()", "id": "11249313", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 4747, 1400, 4510, 1651, 3055, 2910, 2326, 4], "code_num": [2], "code": "from datetime import *\\nd1 = datetime.strptime('05/01/2012', \"%d/%m/%Y\").date()\\nd2 = datetime.strptime('06/01/2012', \"%d/%m/%Y\").date()\\ndelta = d2 - d1\\nprint(delta.days)", "id": "10982705", "code_sizes": 1}, {"nl_num": [3, 69, 568, 3881, 262, 2575, 389, 1394, 327, 990, 4], "code_num": [2], "code": "if s in ('a', 'b'):\\n  return 1\\nelif s in ('c', 'd'):\\n  return 2\\nelse:\\n  return 3", "id": "3260057", "code_sizes": 1}, {"nl_num": [3, 1183, 1956, 2, 2710, 4718, 3886, 1747, 568, 3119, 1828, 353, 2610, 990, 4], "code_num": [2], "code": "print \"\\\\\" # You need to escape the \\ character", "id": "15126038", "code_sizes": 1}, {"nl_num": [3, 4527, 733, 2319, 1297, 796, 327, 3293, 3055, 4555, 2610, 990, 4], "code_num": [2], "code": "html2 = (\"\"\"<tr border = 1px black> \\n              <th>%s</th>\\n              <td>%s</td>\\n              <td>%s</td>\"\"\"  )% (key, value, ip_count_dict.get(key, 0))", "id": "18568112", "code_sizes": 1}, {"nl_num": [3, 2561, 389, 1249, 4327, 2610, 1400, 2943, 4227, 4], "code_num": [2], "code": "import nfqueue, socket\\nfrom threading import Thread\\nfrom scapy.all import *\\nimport os\\n\\nos.system('iptables -t mangle -A PREROUTING -j NFQUEUE --queue-num 1')\\nos.system('iptables -t mangle -A POSTROUTING -j NFQUEUE --queue-num 2')\\n\\n\\ncount = 0\\n\\ndef cb(payload):\\n    global count\\n    count +=1\\n    data = payload.get_data()\\n    p = IP(data) \\n\\n    print str(count) + \": TOS     = \" + str(p.tos)\\n    payload.set_verdict(nfqueue.NF_ACCEPT)\\n\\n\\ndef run_queue(queue_num):\\n    print \"Preparing the queue\"\\n    q = nfqueue.queue()\\n    q.open()\\n    q.unbind(socket.AF_INET)\\n    q.bind(socket.AF_INET)\\n    q.set_callback(cb)\\n    q.create_queue(queue_num)\\n\\n    try:\\n        print \"Running the queue\"\\n        q.try_run()\\n\\n    except KeyboardInterrupt, e:\\n        print \"interruption\"\\n        q.unbind(socket.AF_INET)\\n        q.close()\\n\\nif __name__ == \"__main__\":\\n    t1 = Thread(target=run_queue, args=(1,))\\n    t1.start()\\n    t2 = Thread(target=run_queue, args=(2,))\\n    t2.start()\\n    t1.join()\\n    t2.join()", "id": "24680117", "code_sizes": 1}, {"nl_num": [3, 4093, 1237, 3293, 173, 540, 1828, 4767, 4179, 2, 2366, 4], "code_num": [2], "code": "def transform(functions, arguments):\\n  return [f(a) for f, a in zip(functions, arguments)]", "id": "2204733", "code_sizes": 1}, {"nl_num": [3, 2319, 574, 1297, 990, 1427, 2940, 3293, 1605, 1297, 1614, 4], "code_num": [2], "code": "from selenium import webdriver\\nfrom time import sleep\\n\\ndriver = webdriver.Firefox()\\ndriver.get('http://david.abcc.ncifcrf.gov/summary.jsp')\\nsleep(0.1)\\nquery = \"\"\"Apba3\\nApoa1bp\\nDexi\\nDhps\\nDnpep\\nEral1\\nGcsh\\nGit1\\nGrtp1\\nGuk1\\nIfrd2\\nLsm3\\nMap2k1ip1\\nMed31\\nMettl11a\\nMrpl2\\nmrpl24\\nMrpl30\\nMrpl46\\nNdufaf3\\nNr1h2\\nObfc2b\\nParp3\\nPigt\\nPop5\\nPpt2\\nPtpmt1\\nRGD1304567\\nRGD1306215\\nRGD1309708\\nRras\"\"\"\\nlistBox = driver.find_element_by_id(\"LISTBox\")\\nlistBox.send_keys(query)\\n\\nIDT = driver.find_element_by_id(\"IDT\")\\nIDT.send_keys(\"O\")\\n\\nradioCheck = driver.find_element_by_name(\"rbUploadType\")\\nradioCheck.click()\\n\\n\\nsubmitButton = driver.find_element_by_name(\"B52\")\\n\\nsubmitButton.click()\\nsleep(0.1)\\nalert = driver.switch_to_alert()\\nalert.accept()\\nsleep(0.1)\\nhtml = driver.page_source", "id": "24936983", "code_sizes": 1}, {"nl_num": [3, 188, 319, 4502, 2610, 223, 1959, 4], "code_num": [2], "code": "for each in some_array:\\n    print each", "id": "4247626", "code_sizes": 1}, {"nl_num": [3, 188, 2, 3464, 761, 768, 4], "code_num": [2], "code": "def query(self, sql, parameters=None):\\n    cursor = self.db.cursor()\\n    try:\\n        cursor.execute(sql, parameters)\\n        return cursor\\n    except Exception as ex:\\n        if ex[0] == 2006: # mysql has gone away\\n            cursor.close()\\n            self.connect()\\n            return self.query(sql, parameters)\\n        raise ex", "id": "6447174", "code_sizes": 1}, {"nl_num": [3, 990, 2604, 2, 769, 3293, 3669, 4], "code_num": [2], "code": "Q = om.MQuaternion(1.0,2.0,3.0,4.0)\\nprint Q.x, Q.y, Q.z, Q.w\\nQ.conjugateIt()\\nprint Q.x, Q.y, Q.z, Q.w\\nprint \"----\"\\nP = om.MQuaternion(6,6,6,6)\\nprint P.x, P.y, P.z, P.w\\n\\n# 1.0 2.0 3.0 4.0\\n# -1.0 -2.0 -3.0 4.0\\n# ----\\n# 6.0 6.0 6.0 6.0", "id": "17031276", "code_sizes": 1}, {"nl_num": [3, 550, 2878, 4628, 769, 1297, 3008, 3995, 2326, 4], "code_num": [2], "code": "element._meta.get_field('categories').value_from_object(element)", "id": "19022251", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 1176, 3018, 2610, 1828, 382, 4238, 2237, 4178, 2828, 3055, 889, 2610, 990, 4], "code_num": [2], "code": "from collections import Counter\\nlst = [[1, 0, 0, 0], [1, 1, 0, 0], [2, 0, 0, 0], [2, 1, 0, 0], [2, 1, 0, 0], [1, 1, 0, 0], [3, 1, 0, 0], [1, 3, 0, 0], [2, 1, 0, 0], [2, 0, 0, 0]]\\nlist_of_tuples = [tuple(elem) for elem in lst]\\ndct = dict(Counter(list_of_tuples))\\nlst = [list(e) for e in dct]\\nfor elem in lst:\\n    elem[2] = dct[tuple(elem)]", "id": "24000239", "code_sizes": 1}, {"nl_num": [3, 990, 1530, 3442, 2977, 4], "code_num": [2], "code": "re.sub(r\"(?:ate|ize|ify|able)$\", \"\", \"terrorize\")", "id": "15040882", "code_sizes": 1}, {"nl_num": [3, 3601, 2804, 4178, 3004, 1422, 2544, 3372, 1637, 2464, 326, 4042, 3872, 2326, 4], "code_num": [2], "code": "import os\\nimport re\\n\\ndef build_files_set(rootdir):\\n    root_to_subtract = re.compile(r'^.*?' + rootdir + r'[\\\\/]{0,1}')\\n\\n    files_set = set()\\n    for (dirpath, dirnames, filenames) in os.walk(rootdir):\\n        for filename in filenames + dirnames:\\n            full_path = os.path.join(dirpath, filename)\\n            relative_path = root_to_subtract.sub('', full_path, count=1)\\n            files_set.add(relative_path)\\n\\n    return files_set\\n\\ndef compare_directories(dir1, dir2):\\n    files_set1 = build_files_set(dir1)\\n    files_set2 = build_files_set(dir2)\\n    return (files_set1 - files_set2, files_set2 - files_set1)\\n\\nif __name__ == '__main__':\\n    dir1 = 'old'\\n    dir2 = 'new'\\n    in_dir1, in_dir2 = compare_directories(dir1, dir2)\\n\\n    print '\\nFiles only in {}:'.format(dir1)\\n    for relative_path in in_dir1:\\n        print '* {0}'.format(relative_path)\\n\\n    print '\\nFiles only in {}:'.format(dir2)\\n    for relative_path in in_dir2:\\n        print '* {0}'.format(relative_path)", "id": "15069091", "code_sizes": 1}, {"nl_num": [3, 550, 568, 403, 338, 3293, 813, 1355, 169, 3559, 1280, 853, 1828, 3508, 177, 1858, 540, 922, 2610, 188, 4], "code_num": [2], "code": "self.myComboList = [\"some\", \"list\"]\\nfor row in rows:\\n   self.myComboList.Append(row[1])\\nself.ComboList.sort()\\nself.myComboBoxWidget.AppendItems(self.ComboList)", "id": "9167989", "code_sizes": 1}, {"nl_num": [3, 2484, 327, 3293, 2728, 4], "code_num": [2], "code": "from xml.etree import ElementTree\\n\\ntree = ElementTree.parse('filename.xml')\\nfor elem in tree.findall('lex'):\\n    print elem.attrib['marker']", "id": "15155044", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1704, 1598, 4179, 1808, 2610, 2935, 3747, 1843, 864, 1808, 2326, 4], "code_num": [2], "code": "chunk_size = int(line.strip().split(';')[0], 16)", "id": "12107635", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4570, 2, 2610, 2385, 2326, 4], "code_num": [2], "code": "chkr.getText()", "id": "10474971", "code_sizes": 1}, {"nl_num": [3, 2810, 1828, 1976, 817, 4], "code_num": [2], "code": "my_delimiter = my_delimiter.replace('\\\\t', '\\t')", "id": "31071324", "code_sizes": 1}, {"nl_num": [3, 2, 3747, 1296, 2, 664, 1592, 1708, 188, 4], "code_num": [2], "code": "a = 'jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=1.1.1.1)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=server.name)))'\\na = a.split('(')\\nhost = a[4].replace(\")\",\"\").replace(\"HOST=\",\"\")\\nport = a[5].replace(\")\",\"\").replace(\"PORT=\",\"\")\\ns_name = a[7].replace(\")\",\"\").replace(\"SERVICE_NAME=\",\"\")\\nurl = host + ':' + port + '/' + s_name\\nprint url", "id": "31726894", "code_sizes": 1}, {"nl_num": [3, 1503, 291, 816, 4179, 2, 2610, 2, 4], "code_num": [2], "code": "x,y=editor.control.GetScreenPosition()", "id": "16288937", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1177, 2, 1550, 3022, 2610, 1828, 1959, 2326, 4], "code_num": [2], "code": "#!/usr/bin/env python3\\n\\nc = 1\\nd = 1\\n\\nb = 1\\nwhile True:\\n    a = 3 * b + c\\n    new_b = (a - d) / 5\\n    if b - new_b <= 0.25:\\n        break\\n    b = new_b\\n\\nprint(a, new_b)", "id": "24468741", "code_sizes": 1}, {"nl_num": [3, 2367, 4465, 327, 3293, 869, 2610, 1828, 3004, 2610, 990, 4], "code_num": [2], "code": "import re\\nre.sub(r'\\d+', '', input_str)", "id": "24860800", "code_sizes": 1}, {"nl_num": [3, 2, 3559, 4498, 853, 2049, 938, 4], "code_num": [2], "code": "import pandas as pd\\n\\ndf = pd.DataFrame([['Apple',pd.to_datetime('1/1/2005'),10,10,'Orange'],['Apple', pd.to_datetime('12/1/2005'),1, 1 ,'Orange']])\\ndf.columns = ['Identity','Date', 'value1' , 'value2','Random']\\n\\nfull_df = pd.DataFrame()\\nfull_df['Date'] = [pd.to_datetime(str(x)+'/1/2005') for x in range(1,13)]\\nfull_df['Identity'] = 'Apple'\\n\\nresult =  full_df.merge(df,how='left').fillna(0)\\nresult", "id": "34212251", "code_sizes": 1}, {"nl_num": [3, 4558, 2458, 223, 3703, 2094, 2610, 1828, 2587, 4018, 4], "code_num": [2], "code": "import numpy as np\\n\\n# make sure it is a numpy.array\\nv = np.array(v)\\n\\n# vectorized computation\\nN = (v >> 7) & 255", "id": "30302520", "code_sizes": 1}, {"nl_num": [3, 467, 223, 1828, 2831, 1442, 568, 3178, 1400, 2042, 1828, 3214, 1408, 568, 1708, 2, 4], "code_num": [2], "code": "point.within(p)", "id": "20297977", "code_sizes": 1}, {"nl_num": [3, 1727, 2828, 1566, 3747, 1948, 2710, 3293, 1828, 4238, 2610, 990, 4], "code_num": [2], "code": "next(s for s in list_of_string if s)", "id": "1138024", "code_sizes": 1}, {"nl_num": [3, 2, 1828, 4691, 2610, 990, 1956, 3151, 4], "code_num": [2], "code": "reload(my.module)", "id": "1254370", "code_sizes": 1}, {"nl_num": [3, 2147, 1527, 4423, 3518, 655, 493, 4316, 4], "code_num": [2], "code": "def list(self, request, *args, **kwargs):\\n    response = super(ResultRowView, self).list(request, args, kwargs)\\n    response.data[ 'extra_value' ] = 5000\\n    return response", "id": "33772984", "code_sizes": 1}, {"nl_num": [3, 2, 3191, 4589, 3293, 990, 3249, 177, 3647, 4], "code_num": [2], "code": "sys.path =  filter (lambda a: not a.startswith('/System'), sys.path)", "id": "26471889", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4187, 1400, 1662, 4245, 169, 1400, 3537, 2610, 1828, 2487, 2, 891, 2326, 4], "code_num": [2], "code": "cost_f = []\\nwhile (abs(theta1_guess-theta1_last) > variance or abs(theta0_guess - theta0_last) > variance):\\n\\n    theta1_last = theta1_guess\\n    theta0_last = theta0_guess\\n\\n    hypothesis = create_hypothesis(theta1_guess, theta0_guess)\\n    cost_f.append((1./(2*m))*sum([ pow(hypothesis(point[0]) - point[1], 2) for point in data]))\\n\\n    theta0_guess = theta0_guess - learning_rate * (1./m) * sum([hypothesis(point[0]) - point[1] for point in data])\\n    theta1_guess = theta1_guess - learning_rate * (1./m) * sum([ (hypothesis(point[0]) - point[1]) * point[0] for point in data])   \\n\\nimport pylab\\npylab.plot(range(len(cost_f)), cost_f)\\npylab.show()", "id": "16640470", "code_sizes": 1}, {"nl_num": [3, 3195, 1828, 990, 3867, 1605, 2604, 2, 551, 1828, 4238, 2464, 3594, 540, 619, 2504, 2326, 4], "code_num": [2], "code": "class CustomList(list):\\n    def __init__(self, *args, **kwargs):\\n        list.__init__(self, args[0])\\n\\n    def foobar(self):\\n        return 'foobar'", "id": "6458461", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 2616, 4429, 4111, 1400, 1326, 4179, 414, 4260, 551, 733, 2326, 4], "code_num": [2], "code": "for textarea in soup.findAll('textarea'):\\n    contents = BeautifulSoup.BeautifulSoup(textarea.contents[0]).renderContents()\\n    textarea.replaceWith(contents)", "id": "2665390", "code_sizes": 1}, {"nl_num": [3, 69, 568, 4570, 3728, 568, 2878, 2, 1712, 4179, 2711, 2610, 990, 4], "code_num": [2], "code": "child = pexpect.spawn(launchcmd)\\nwhile True:\\n    try:\\n        child.expect('\\n')\\n        print(child.before)\\n    except pexpect.EOF:\\n        break", "id": "4208820", "code_sizes": 1}, {"nl_num": [3, 3990, 1972, 3791, 2610, 1828, 1825, 3747, 2951, 4563, 2326, 4], "code_num": [2], "code": "Queue.get", "id": "28573450", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3222, 862, 598, 2610, 2101, 2237, 4178, 1400, 3518, 4179, 1400, 3318, 2326, 4], "code_num": [2], "code": "import matplotlib.pyplot as plt\\ndaysofweek = {1:('Sunday','r'), \\n              2:('Monday','g'), \\n              3:('Tuesday','b'), \\n              4:('Wednesday','yellow'), \\n              5:('Thursday','k'), \\n              6:('Friday', 'magenta'), \\n              7:('Saturday', 'orange')}\\nax1 = plt.subplot(111)\\n\\nxval = [2., 4., 7.]\\nyval = [2.5, 3.6, 2.7]\\n\\nfor j in range(len(xval)):\\n    ax1.bar(xval[j], yval[j], width=0.8, bottom=0.0, align='center', color=daysofweek[xval[j]][1], alpha=0.6, label=daysofweek[xval[j]][0])\\nax1.set_xticks(xval)\\nax1.set_xticklabels([daysofweek[i][0] for i in xval])\\nax1.legend()\\nplt.show()", "id": "18974928", "code_sizes": 1}, {"nl_num": [3, 550, 1151, 1400, 3744, 2, 3293, 2571, 1251, 2326, 4], "code_num": [2], "code": "getdata()", "id": "14453953", "code_sizes": 1}, {"nl_num": [3, 1997, 889, 1297, 1497, 540, 2, 4], "code_num": [2], "code": "links = self.br.find_elements_by_xpath(\"//*[@class='image']/a\")\\nif not links:\\n    links = self.br.find_elements_by_xpath(\"//*[@class='newPrice']/a\")\\nfor products in links:\\n    self.urls.append(products.get_attribute(\"href\"))", "id": "20102936", "code_sizes": 1}, {"nl_num": [3, 527, 155, 3293, 1696, 4], "code_num": [2], "code": "# `title` is not an attribute, but a tag.\\ntitles = tree.xpath('.//title/text()')\\nprint(titles)\\n\\n# `td` does not have `href` attribute, but `a` tag.\\nteams = tree.xpath('//tr/td/a[@href]/text()')\\nprint(teams)", "id": "24341814", "code_sizes": 1}, {"nl_num": [3, 1741, 338, 3293, 1828, 2587, 177, 4018, 4], "code_num": [2], "code": "X = np.random.randn(1e3, 5)\\nX[np.abs(X)< .1]= 0 # some zeros\\nX = np.ma.masked_equal(X,0)\\nplt.boxplot(X) #masked values are not plotted\\n\\n#other functionalities of masked arrays\\nX.compressed() # get normal array with masked values removed\\nX.mask # get a boolean array of the mask\\nX.mean() # it automatically discards masked values", "id": "5927180", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2103, 4238, 568, 1564, 2710, 2326, 4], "code_num": [2], "code": "\"\"\"\\n{}\\n\"\"\".format(\"\\n\".join(items[1:]))", "id": "28572074", "code_sizes": 1}, {"nl_num": [3, 3427, 1400, 899, 3293, 104, 177, 2376, 4178, 1828, 2643, 869, 2610, 3351, 4], "code_num": [2], "code": "print(\"\\n\".join(title))", "id": "24396091", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 4390, 1828, 3467, 2681, 3293, 1828, 1125, 869, 4227, 681, 3865, 1151, 2326, 4], "code_num": [2], "code": "import subprocess\\nimport os.path\\n\\ndef start_editor(editor,file_name):\\n\\n    if not os.path.isfile(file_name): # If file doesn't exist, create it\\n        with open(file_name,'w'): \\n            pass\\n\\n    command_line=editor+' '+file_name # Add any desired command line args\\n    p = subprocess.Popen(command_line)\\n    p.wait()\\n\\nfile_name='test.txt' # Probably known from elsewhere\\neditor='notepad.exe' # Read from environment variable if desired\\n\\nstart_editor(editor,file_name)\\n\\nwith open(file_name,'r') as f: # Do something with the file, just an example here\\n    for line in f:\\n        print line", "id": "26108544", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4570, 1389, 3747, 990, 568, 2426, 1828, 4688, 540, 1828, 4238, 4179, 3247, 2326, 4], "code_num": [2], "code": "models = [d.value for d in views.models(self._db, keys=principals).rows]", "id": "25080922", "code_sizes": 1}, {"nl_num": [3, 188, 383, 1828, 868, 853, 2126, 4], "code_num": [2], "code": "import urllib2\\nimport re\\n\\nhtmlfile = urllib2.urlopen('http://www.kino.de/rss/neu-im-kino/')\\nhtmltext = htmlfile.read()\\nregex = '<link>(.+?)</link>'\\npattern = re.compile(regex)\\nlinks = re.findall(pattern,htmltext)\\n\\nprint( ' '.join(links) ) # or print( '\\n'.join(links) )\\n\\n\\nfor link in links:\\n    htmlfile_2 = urllib2.urlopen(link)\\n    htmltext_2 = htmlfile_2.read()\\n    regex_2 = '<meta itemprop=\"contentURL\" content=\"(.+?)\" />'\\n    pattern_2 = re.compile(regex_2)\\n    links_2 = re.findall(pattern_2,htmltext_2)\\n\\n    print( ' '.join(links_2) ) # or print( '\\n'.join(links_2) )", "id": "17389302", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2484, 1828, 2564, 3293, 1828, 664, 4572, 3344, 1828, 1250, 568, 2605, 2326, 4], "code_num": [2], "code": "filename = url[url.rfind(\"/\")+1:]\\nfilename_small = filename.replace(\".\", \"_small.\")", "id": "18727347", "code_sizes": 1}, {"nl_num": [3, 863, 762, 786, 3886, 1708, 1960, 4], "code_num": [2], "code": "frame = Frame(root, bd=2, relief=SUNKEN)\\n\\nscrollbar = Scrollbar(frame)\\nscrollbar.pack(side=RIGHT, fill=Y)\\n\\nlistbox = Listbox(frame, bd=0, yscrollcommand=scrollbar.set)\\nlistbox.pack()\\n\\nscrollbar.config(command=listbox.yview)\\n\\nframe.pack() #or others...", "id": "23257018", "code_sizes": 1}, {"nl_num": [3, 3399, 2680, 3518, 2610, 2957, 4], "code_num": [2], "code": "def __init__(self, *args, **kwargs):\\n    initial = kwargs.get('initial', {})\\n    initial['material'] = 'Test'\\n    kwargs['initial'] = initial\\n    super(ArtefactForm, self).__init__(*args, **kwargs)", "id": "2988548", "code_sizes": 1}, {"nl_num": [3, 1734, 1329, 4780, 568, 938, 540, 2049, 4], "code_num": [2], "code": "df.join(df2)", "id": "9762935", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 3047, 3090, 1530, 350, 2610, 188, 2326, 4], "code_num": [2], "code": "def doit( s ):\\n\\n    # with some side-effect on a\\n    a = [] \\n\\n    def f1( s, m ):\\n        a.append( 1 )\\n        print 'f1', a, s, m\\n\\n    def f2( s, m ):\\n        a.append( 2 )\\n        print 'f2', a, s, m\\n\\n    def f3( s, m ):\\n        a.append( 3 )\\n        print 'f3', a, s, m\\n\\n    re1 = re.compile( 'one' )\\n    re2 = re.compile( 'two' )\\n    re3 = re.compile( 'three' )\\n\\n\\n    func_re_list = (\\n        ( f1, re1 ), \\n        ( f2, re2 ), \\n        ( f3, re3 ),\\n    )\\n    for myfunc, myre in func_re_list:\\n        m = myre.match( s )\\n        if m:\\n            myfunc( s, m )\\n            break\\n\\n\\ndoit( 'one' ) \\ndoit( 'two' ) \\ndoit( 'three' )", "id": "2028164", "code_sizes": 1}, {"nl_num": [3, 188, 4189, 3747, 1210, 2000, 4780, 75, 568, 917, 4], "code_num": [2], "code": "for col in ['parks', 'playgrounds', 'sports', 'roading']:\\n    public[col] = public[col].astype('category')", "id": "28910851", "code_sizes": 1}, {"nl_num": [3, 3758, 864, 3509, 1828, 2186, 568, 2, 4505, 169, 3162, 681, 2, 1151, 4], "code_num": [2], "code": "import os.path\\nfrom flask import Flask\\nfrom flask.ext.autoindex import AutoIndex\\n\\napp = Flask(__name__)\\nAutoIndex(app, browse_root=os.path.curdir)\\n\\nif __name__ == '__main__':\\n    app.run()", "id": "24265798", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2, 1828, 4227, 2610, 188, 2610, 2613, 4], "code_num": [2], "code": "def main():\\n    print \"Hello\"\\n    testv=5\\n    if testv==6:\\n        print \"!!!\"\\n        return 0;\\n    else:\\n        print \"World\"\\n    print \"***********\"\\n    return 0;\\n\\nif __name__ == \"__main__\":\\n    main()", "id": "9760632", "code_sizes": 1}, {"nl_num": [3, 4550, 3747, 4290, 3954, 2610, 188, 4], "code_num": [2], "code": "totalIncome = ((classACost * float(classASeatsSold)) +\\n    (classBCost * float(classBSeatsSold)) +\\n    (classCCost * float(classCSeatsSold)))", "id": "1809890", "code_sizes": 1}, {"nl_num": [3, 188, 3793, 3747, 4349, 250, 4349, 4], "code_num": [2], "code": "import re\\n\\n_pat_student_parser = re.compile(r'((?P<id>\\d{4})(?P<name>\\w{4}))')\\n\\ndef nested_dict_from_text(text):\\n    m = re.search(_pat_student_parser, text)\\n    if not m:\\n        raise ValueError\\n    d = m.groupdict()\\n    return { \"student\": d }\\n\\nresult = nested_dict_from_text('1234STUD')\\nprint(result)", "id": "14931563", "code_sizes": 1}, {"nl_num": [3, 3227, 3747, 672, 4360, 3995, 2, 4179, 4139, 3995, 4], "code_num": [2], "code": "_get_kind()", "id": "22181097", "code_sizes": 1}, {"nl_num": [3, 236, 1594, 223, 817, 169, 1712, 2, 4], "code_num": [2], "code": "import aiml\\nimport os\\nimport time\\n\\ncharacter_mappings = {'a': 'a.mp3', 'b': 'b.mp3'}\\n\\ndef speak(char):\\n    out = character_mappings.get(char)\\n    if out:\\n         os.system('start {}'.format(out))\\n    else:\\n         time.sleep(0.1)\\n\\nk = aiml.Kernel()\\nk.learn(\"std-startup.xml\")\\nk.respond(\"load aiml b\")\\nwhile True: \\n    text = k.respond(raw_input(\"> \")) # \"string\" is a built-in\\n    for char in text.lower():\\n        speak(char) # translate is also a built-in\\n        time.sleep(0.25)", "id": "24473063", "code_sizes": 1}, {"nl_num": [3, 188, 864, 1897, 1146, 2464, 2604, 1828, 2160, 3747, 3678, 2969, 1422, 3211, 683, 2, 2326, 4], "code_num": [2], "code": "gevent.server", "id": "6319463", "code_sizes": 1}, {"nl_num": [3, 550, 568, 967, 3068, 1400, 1237, 2610, 1828, 4238, 2019, 1828, 4640, 568, 1400, 2, 2714, 2019, 1312, 4238, 2019, 1828, 18, 4640, 4], "code_num": [2], "code": "from itertools import chain\\n\\nd1 = {10: [123, 244, 222], 13: [109, 125]}\\nd2 = {125: [[120, 244, 222], [177, 134, 111], [123, 11, 344]], 123: [[125, 109, 180], [123, 156, 290]]}\\n\\n# Flatten out the list using a list comprehension\\nkey_values = [values for list in d1.values() for values in list]\\n\\nnew_dict = dict()\\nfor d2_list in chain.from_iterable(d2.itervalues()):\\n    key_to_check = d2_list[0]\\n    if key_to_check in key_values:\\n        if key_to_check in new_dict:\\n            new_dict[key_to_check].append(d2_list)\\n        else:\\n            new_dict[key_to_check] = [d2_list]\\nprint new_dict", "id": "31629720", "code_sizes": 1}, {"nl_num": [3, 2587, 2, 1723, 568, 2587, 2, 4], "code_num": [2], "code": "numpy.ndarray.tofile", "id": "15884440", "code_sizes": 1}, {"nl_num": [3, 4137, 990, 2464, 3886, 169, 69, 1535, 1757, 4570, 223, 169, 2613, 237, 711, 2, 4182, 2419, 2326, 4], "code_num": [2], "code": "(one_value for one_value in my_list if one_value == 0)", "id": "32571479", "code_sizes": 1}, {"nl_num": [3, 3088, 2229, 1268, 2083, 1293, 2610, 3846, 540, 655, 4563, 4], "code_num": [2], "code": "class FacebookConnectMiddleware(object):\\n\\n    facebook_user_is_authenticated = False", "id": "5549926", "code_sizes": 1}, {"nl_num": [3, 188, 568, 4033, 4667, 4691, 568, 1652, 3293, 2613, 4190, 4403, 943, 4691, 3372, 2326, 4], "code_num": [2], "code": "import imp\\n\\nmoduleB = imp.load_source('moduleB', '/ModuleBPath/B.py')\\nmoduleB.MyClass()", "id": "28352969", "code_sizes": 1}, {"nl_num": [3, 990, 38, 590, 4179, 3467, 540, 1637, 4689, 1400, 2, 169, 764, 1250, 4], "code_num": [2], "code": "import re\\n\\n# create regular expression pattern\\nchop = re.compile('#chop-begin.*?#chop-end', re.DOTALL)\\n\\n# open file\\nf = open('data', 'r')\\ndata = f.read()\\nf.close()\\n\\n# chop text between #chop-begin and #chop-end\\ndata_chopped = chop.sub('', data)\\n\\n# save result\\nf = open('data', 'w')\\nf.write(data_chopped)\\nf.close()", "id": "5071844", "code_sizes": 1}, {"nl_num": [3, 2385, 3747, 863, 2, 2610, 2, 540, 2, 4], "code_num": [2], "code": "CELERYBEAT_SCHEDULE_FILENAME = '/var/lib/celery/beat.db'", "id": "32320527", "code_sizes": 1}, {"nl_num": [3, 2587, 1170, 568, 746, 889, 4179, 4018, 568, 1828, 3518, 4019, 1828, 4238, 4179, 1218, 4], "code_num": [2], "code": "indices = [1, 4, 5, 6, 7]\\nzero = numpy.zeros(10)\\nzero[indices] = 42", "id": "8373079", "code_sizes": 1}, {"nl_num": [3, 990, 1704, 3004, 540, 2018, 2464, 3594, 3678, 540, 2528, 2238, 353, 3803, 3528, 4], "code_num": [2], "code": "data=f.read(256)\\ndata=data.splitlines(True)\\nif data[-1]!=data[-1].splitlines()[-1]:\\n    #must be newline at end of last line\\n    data=\"\".join(data)\\nelse:\\n    data=\"\".join(data[:-1])\\n\\nprint data", "id": "9204434", "code_sizes": 1}, {"nl_num": [3, 2, 327, 4179, 943, 1237, 2019, 1828, 4238, 4], "code_num": [2], "code": "from collections import defaultdict\\n\\nmylist = [('birthday', 1), ('ramen', 2), ('cake', 1), ('ramen', 1), ('cake', 2), ('ramen', 1)]\\n\\nd = defaultdict(int)\\n\\nfor k,v in mylist:\\n    d[k] += v        \\n\\nprint(d)    \\n# defaultdict(<type 'int'>, {'cake': 3, 'birthday': 1, 'ramen': 4})", "id": "28869420", "code_sizes": 1}, {"nl_num": [3, 4328, 3963, 3293, 1828, 177, 41, 3004, 4], "code_num": [2], "code": "import re\\n\\nfin = open('snp.txt','r').readlines()\\nl = [ re.match('.*(\\(.*?\\))',line).group(1) for line in fin]\\nl = [ '%d %f\\n'%eval(i) for i in l]\\n\\nwith open('o.txt','w') as fout:\\n    fout.writelines(l)\\n    fout.close()", "id": "23125974", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2734, 2, 4178, 1927, 4708, 990, 169, 2, 2, 2464, 188, 4], "code_num": [2], "code": "plt.xticks(index, ['Igorj', 'Borja', 'Vasja', 'Sanja', 'Petja'], rotation=45)", "id": "27090682", "code_sizes": 1}, {"nl_num": [3, 3195, 169, 1545, 568, 4505, 2237, 4178, 4238, 540, 681, 1237, 4], "code_num": [2], "code": "from sets import Set\\nimport csv\\n\\nsource = list(csv.reader(open(\"account_file.csv\")))\\n\\naccounts = Set(line[0] for line in source)\\n\\nfor account in accounts:\\n    out = open(account+\".csv\",\"w\")\\n    out.write( \"\\n\".join(\",\".join(x) for x in source if x[0] == account))\\n    out.close()", "id": "8458998", "code_sizes": 1}, {"nl_num": [3, 300, 4785, 95, 2814, 568, 3674, 3160, 2969, 4], "code_num": [2], "code": "import random, string\\n\\nkey = \"\".join([random.choice(string.letters + string.digits + string.punctuation) for _ in xrange(64)])", "id": "9674065", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 1945, 1828, 3319, 1153, 568, 3674, 188, 4350, 4], "code_num": [2], "code": "print('The average is: ' + format(average, ',.3f') + '%')", "id": "33589076", "code_sizes": 1}, {"nl_num": [3, 3223, 1828, 733, 3004, 1708, 188, 4], "code_num": [2], "code": "'<.*?>'", "id": "7694637", "code_sizes": 1}, {"nl_num": [3, 3828, 3747, 95, 4025, 2, 2610, 990, 3594, 1569, 540, 2, 4], "code_num": [2], "code": "request.add_header(\"Authorization\", \"BoxAuth api_key=\"+apikey+\"&auth_token=\"+auth_token)", "id": "12926712", "code_sizes": 1}, {"nl_num": [3, 2, 3293, 2900, 760, 4021, 1948, 4238, 2, 3004, 1586, 873, 2610, 1751, 4], "code_num": [2], "code": "with gcs.open(gcs_filename, 'w', content_type, options={b'x-goog-acl': b'public-read'}) as f:\\n    f.write(blob)", "id": "32306988", "code_sizes": 1}, {"nl_num": [3, 621, 864, 3527, 4220, 327, 3551, 2610, 1828, 1977, 4], "code_num": [2], "code": "keys = redis.keys('*')\\nfor key in keys:\\n    type = redis.type(key)\\n    if type == KV:\\n        val = redis.get(key)\\n    if type == HASH:\\n        vals = redis.hgetall(key)\\n    if type == ZSET:\\n        vals = redis.zrange(key, 0, -1)", "id": "19282580", "code_sizes": 1}, {"nl_num": [3, 188, 553, 3952, 1208, 4179, 338, 4], "code_num": [2], "code": "from bisect import bisect\\n\\nd = {\"A\": 0, \"B\": 0, \"C\": 0, \"D\": 0, \"E\": 0, \"F\": 0}\\n\\n\\ndef grade(score, breakpoints=[70, 80, 90, 100], grades='FBCDA'):\\n    i = bisect(breakpoints, score)\\n    return grades[i]\\n\\n\\nfor n in [66, 67, 77, 88, 80, 90, 91,100]:\\n    d[grade(n)] += n\\nprint(d)\\n{'A': 100, 'C': 168, 'B': 77, 'E': 0, 'D': 181, 'F': 145}", "id": "29593438", "code_sizes": 1}, {"nl_num": [3, 1592, 685, 3293, 3506, 2610, 188, 4], "code_num": [2], "code": "import re\\ncenter_part = GPSLocation.split(\"/\")[1]\\nN,W = centerpart.split()\\nN,W = N.split(\"\\xb0\")[0],W.split(\"\\xb0\")[0]\\ntpl = (N,W)\\nprint tpl", "id": "12684533", "code_sizes": 1}, {"nl_num": [3, 252, 2587, 2710, 4018, 1708, 223, 1959, 2624, 223, 2000, 889, 4], "code_num": [2], "code": "zeros = number_of_zeros * \"0\"", "id": "31837202", "code_sizes": 1}, {"nl_num": [3, 2456, 1828, 1170, 3886, 1400, 4749, 1563, 4695, 2326, 4], "code_num": [2], "code": "def bye():\\n  print 'goodbye world!!'\\n\\nimport atexit\\natexit.register(bye)", "id": "16590599", "code_sizes": 1}, {"nl_num": [3, 554, 3293, 2460, 1566, 1249, 3572, 4497, 4179, 3443, 314, 2464, 990, 4], "code_num": [2], "code": "selectList = [sktTCP,sys.stdin]\\n(read, write, exc) =  select.select(selectList, [], [], 0 )", "id": "23181121", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2878, 1828, 4238, 4179, 2929, 4585, 1605, 2244, 4042, 2, 3008, 2326, 4], "code_num": [2], "code": "df.isnull().any()", "id": "33168062", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2, 4227, 2238, 4182, 517, 3528, 1268, 4701, 2436, 2326, 4], "code_num": [2], "code": "pid = os.fork()\\nif pid:\\n    # we are the parent, continue on\\n    print \"This runs in a separate process from the else clause.\"\\n\\nelse:\\n    #child runs browser then quits.\\n    webbrowser.open_new(url)\\n    print \"Exiting...\"\\n    sys.exit()", "id": "1149233", "code_sizes": 1}, {"nl_num": [3, 2, 169, 3847, 1828, 3494, 365, 540, 2611, 4], "code_num": [2], "code": "true_x = canvas.canvasx(event.x)\\ntrue_y = canvas.canvasy(event.y)", "id": "25787523", "code_sizes": 1}, {"nl_num": [3, 2, 1385, 3293, 722, 4403, 1559, 2951, 1268, 2, 1422, 2, 1400, 2969, 4], "code_num": [2], "code": "import datetime\\nfrom threading import Timer\\n\\n# dummy timestamp for testing, gong should be the \\n# timestamp of the last keepAlive signal\\ngong = datetime.datetime(2012, 8, 16, 16, 3, 18, 341121)  \\n\\n#seconds before kill check is performed\\nidle = 5\\n\\ndef bringOutYourDead():\\n    \"\"\"If the last keep alive time stamp is more than 5 minutes ago, I am Audi 500.\"\"\"\\n    stoneDeadIn =  5\\n    if datetime.datetime.now() - datetime.timedelta(minutes=stoneDeadIn) >= gong:\\n        # I used print for whatever command for testing\\n        print('save_state_or_whatever()')\\n        print('gtk_main_quit()')\\n    else:\\n        print(\"I'm not dead yet!'\")\\n    # recurse this as you see fit\\n\\ndung = Timer(idle, bringOutYourDead)\\ndung.start()", "id": "11975259", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3191, 2473, 746, 3293, 1312, 2326, 4], "code_num": [2], "code": "set1 = set([1, 3, 5, 7])\\nset2 = set([3, 5])\\n\\nresult = set1 - set2", "id": "15051140", "code_sizes": 1}, {"nl_num": [3, 1339, 4570, 4179, 1828, 3867, 593, 879, 2610, 1828, 878, 4778, 4691, 4], "code_num": [2], "code": "class A(object):\\n    def method(self):\\n        return \"foo\"\\n\\ntry:\\n    import c_ext\\n    import types\\n    A.method = types.MethodType(c_ext.optimized_method, None, A)\\nexcept ImportError:\\n    pass", "id": "725777", "code_sizes": 1}, {"nl_num": [3, 236, 3843, 4585, 169, 3407, 2587, 4018, 4], "code_num": [2], "code": "import numpy as np\\n\\narr = np.array([[\"City\",\"Score1\",\"Score2\",\"Score3\"],\\n                [\"Berkley\",23,432,321],\\n                [\"Ohio\",3,432,54],\\n                [\"Columbia\",123,432,53]])\\n\\nnew_arr = arr[1:, 1:].astype(float)", "id": "30653114", "code_sizes": 1}, {"nl_num": [3, 236, 1007, 3155, 1007, 568, 3348, 2940, 802, 4179, 382, 2315, 4], "code_num": [2], "code": "def nested_getter(d, keys):\\n    return reduce(dict.get, keys, d)", "id": "16279026", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 4314, 1400, 926, 3963, 4179, 1828, 4238, 2464, 1708, 1637, 3814, 2610, 188, 2326, 4], "code_num": [2], "code": "def find_odds(numbers):\\n  if not numbers:\\n    return []\\n  if numbers[0] % 2 == 1:\\n    return [numbers[0]] + find_odds(numbers[1:])\\n  return find_odds(numbers[1:])", "id": "4039374", "code_sizes": 1}, {"nl_num": [3, 4137, 990, 2464, 69, 3659, 483, 2692, 1828, 869, 2610, 1828, 3004, 2613, 3332, 350, 1828, 155, 4], "code_num": [2], "code": "fileLines = []\\nwith open('field.txt') as f:\\n    for line in f:\\n        # mysql query to get 'query_result'\\n        if query_result != 1:\\n            fileLines.append(line) # These will be the lines you actually want\\n\\nwith open('field.txt', 'w') as f:\\n    for line in fileLines:\\n        f.write(line)", "id": "28162237", "code_sizes": 1}, {"nl_num": [3, 2385, 3188, 3908, 327, 2610, 655, 177, 2, 177, 2157, 169, 1828, 2, 4714, 4], "code_num": [2], "code": "choices = [(obj.id, obj.profile.display_name()) for obj in User.objects.all()]\\n\\nparticipants = UserMultipleChoiceField(\\n    queryset=User.objects.none(),\\n    label=\"\",\\n    widget=forms.SelectMultiple(\\n        attrs={\\n            \"data-placeholder\": \"Choose members.. \"\\n        }\\n    ),\\n    choices=choices\\n)", "id": "15853715", "code_sizes": 1}, {"nl_num": [3, 2, 1828, 4238, 2237, 4178, 327, 2610, 2639, 3747, 188, 4], "code_num": [2], "code": "import itertools\\nimport operator\\n\\nL = [(\"tearing\", 3), (\"me\", 3), (\"apart\", 3), (\"lisa\", 3), (\"denny\", 0), (\"mark\",0)]\\n\\nprint list(itertools.groupby(L, operator.itemgetter(1)).next()[1])\\n\\n# [('tearing', 3), ('me', 3), ('apart', 3), ('lisa', 3)]", "id": "5295508", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2878, 4047, 21, 4717, 777, 3004, 540, 188, 4407, 2326, 4], "code_num": [2], "code": "try:\\n    xmlschema.assertValid(xml_to_validate)\\nexcept etree.DocumentInvalid, xml_errors:\\n    pass\\nprint \"List of errors:\\r\\n\", xml_errors.error_log", "id": "11581351", "code_sizes": 1}, {"nl_num": [3, 4189, 864, 4330, 3703, 3909, 1297, 1312, 3909, 3157, 4178, 1400, 927, 4], "code_num": [2], "code": "df_daily = df[df[\"Date\"].hour == 16].copy().shift(1)\\ndf = df.join(df_daily, rsuffix=\"closing_\").fillna(method=\"ffill\")", "id": "24826483", "code_sizes": 1}, {"nl_num": [3, 4402, 764, 3909, 2610, 3079, 4], "code_num": [2], "code": "import csv\\nf = open(\"summary.csv\", \"r+w\")\\nlines=f.readlines()\\nlines=lines[:-1]\\n\\ncWriter = csv.writer(f, delimiter=',')\\nfor line in lines:\\n    cWriter.writerow(line)", "id": "10954748", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 3191, 4220, 4022, 1584, 2610, 4042, 4019, 817, 2326, 4], "code_num": [2], "code": "askuser = askuser.strip().replace(' ','').replace('\\t','')", "id": "32811481", "code_sizes": 1}, {"nl_num": [3, 4291, 191, 1828, 2, 1448, 2710, 4], "code_num": [2], "code": "dateRange.split('?')", "id": "16104374", "code_sizes": 1}, {"nl_num": [3, 4405, 1400, 4018, 428, 1400, 1959, 4], "code_num": [2], "code": "for i in range(10):\\n    temp = []\\n    temp.append(i)\\n\\nprint temp", "id": "21759262", "code_sizes": 1}, {"nl_num": [3, 442, 3518, 4179, 2094, 2238, 148, 2464, 1395, 3528, 568, 2094, 2238, 71, 2464, 1314, 3528, 2610, 2943, 1600, 4179, 549, 3565, 3004, 1708, 188, 4], "code_num": [2], "code": "import xlrd\\nimport xlwt\\nimport xlutils\\nfrom xlutils.copy import copy \\n\\nr_book = xlrd.open_workbook(fname)\\nw_book = xlutils.copy.copy(r_book)\\nr_sheet = r_book.sheets()[0] # Taking the first sheet\\nw_sheet = w_book.get_sheet(0)\\n\\nx_y_value = r_sheet.cell(X, Y).value\\nw_sheet.write(A, B, x_y_value)\\nw_book.save(fname)", "id": "13156730", "code_sizes": 1}, {"nl_num": [3, 2385, 2, 428, 4179, 2, 4], "code_num": [2], "code": "from  django.core.files.storage import FileSystemStorage\\n\\nupload_storage = FileSystemStorage(location=UPLOAD_ROOT, base_url='/uploads')\\n\\nimage = models.ImageField(upload_to='/images', storage=upload_storage)", "id": "1729051", "code_sizes": 1}, {"nl_num": [3, 2, 540, 1828, 2951, 955, 4], "code_num": [2], "code": "import subprocess\\ndef _run_command( _args, input=[],withShell=False):\\n    \"\"\"\\n    Pass args as array, like ['echo', 'hello']\\n    Waits for completion and returns\\n    tuple (returncode, stdout, stderr)\\n    \"\"\"\\n    p = subprocess.Popen(_args, shell = withShell,\\n                         stdin=subprocess.PIPE, stdout=subprocess.PIPE)\\n    [p.stdin.write(v) for v in input]\\n    stdout, stderr = p.communicate()\\n    return p.returncode, stdout, stderr\\n\\n_,op,er = _run_command(['cat'],[\"this\",\"is\",\"for\",\"testing\"])\\nvalue=\"\".join(op)\\nprint value\\n\\n_,op,er = _run_command(['ls',\"/tmp\"])\\nvalue=\"\".join(op)\\nprint value", "id": "10188389", "code_sizes": 1}, {"nl_num": [3, 706, 1828, 1807, 2087, 540, 1844, 169, 990, 2326, 4], "code_num": [2], "code": "driver.findElement(By.linkText(\"Send InMail\")).click();", "id": "19601086", "code_sizes": 1}, {"nl_num": [3, 3397, 1357, 1113, 2610, 188, 213, 2610, 2565, 1442, 2238, 2, 3293, 3280, 3528, 4], "code_num": [2], "code": "while left <= right:\\n        while arr[left] < pivotVal:\\n            left += 1\\n\\n        while arr[right] > pivotVal:\\n            right -= 1\\n\\n        if left <= right:\\n            temp = arr[left]\\n            arr[left] = arr[right]\\n            arr[right] = temp\\n            left += 1\\n            right -= 1", "id": "33750370", "code_sizes": 1}, {"nl_num": [3, 188, 864, 1727, 3167, 2827, 2714, 2610, 4238, 4], "code_num": [2], "code": "from collections import Counter\\nimport random\\n\\ntups = [ (1,2), (3,4), (5,6), (1,2), (3,4) ]\\nlst = Counter(tups).most_common()\\nhighest_count = max([i[1] for i in lst])\\nvalues = [i[0] for i in lst if i[1] == highest_count]\\nrandom.shuffle(values)\\nprint values[0]", "id": "18827897", "code_sizes": 1}, {"nl_num": [3, 3306, 1828, 2049, 938, 1708, 3247, 3293, 1828, 4640, 4], "code_num": [2], "code": "FilteredData = AllData[my_dict.keys()]", "id": "17449402", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3748, 2, 581, 568, 733, 2, 810, 2610, 188, 2326, 4], "code_num": [2], "code": "def convertEntities(s):\\n    return ''.join([getEntity(c) for c in s])\\n\\ndef getEntity(c):\\n    ord_c = ord(c)\\n    if ord_c > 127 and ord_c in htmlentitydefs.codepoint2name:\\n        return \"&%s;\" % htmlentitydefs.codepoint2name[ord_c]\\n    return c", "id": "3312810", "code_sizes": 1}, {"nl_num": [3, 1543, 3004, 2610, 2943, 4219, 1708, 188, 4], "code_num": [2], "code": "for eachjpgfile in filelist:\\n    os.chdir(eachjpgfile)\\n    newdirectorypath = os.curdir\\n    list_of_files = os.listdir(newdirectorypath)\\n    for eachfile in list_of_files:\\n         onlyfilename = os.path.splitext(eachfile)[0]\\n         if onlyfilename == 'doc':\\n            root, pathName= os.path.split(eachjpgfile) #split out dir name\\n            newjpgfilename = eachfile.replace(onlyfilename,pathName)\\n            os.rename(eachfile, newjpgfilename)", "id": "10592206", "code_sizes": 1}, {"nl_num": [3, 2, 3747, 550, 1352, 483, 4570, 1400, 3332, 1982, 2610, 1735, 540, 2, 2326, 4], "code_num": [2], "code": "for doc in findUsers:\\n    print(doc)", "id": "24579066", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3222, 1828, 4094, 1563, 1708, 1235, 2326, 4], "code_num": [2], "code": "import gtk\\n\\nd = gtk.Dialog()\\nd.add_buttons(gtk.STOCK_YES, 1, gtk.STOCK_NO, 2)\\n\\nlabel = gtk.Label('Do you like GTK?')\\nlabel.show()\\nd.vbox.pack_start(label)\\n\\nanswer = d.run()\\n\\nprint answer", "id": "3194436", "code_sizes": 1}, {"nl_num": [3, 69, 568, 3457, 2415, 1227, 2, 540, 990, 2, 4], "code_num": [2], "code": "Image.composite", "id": "24982160", "code_sizes": 1}, {"nl_num": [3, 3089, 2604, 1400, 159, 1442, 568, 3222, 1828, 2710, 4018, 2610, 990, 2326, 4], "code_num": [2], "code": "strs = [\"\" for x in range(size)]", "id": "6376886", "code_sizes": 1}, {"nl_num": [3, 1655, 4179, 3407, 2610, 1828, 3467, 3004, 169, 2, 2008, 4], "code_num": [2], "code": "from collections import defaultdict\\n\\ndata = list()\\ngroups = defaultdict(list)\\ni = 1\\nwith open('input') as f:\\n    for line in f:\\n        row = line.strip().split() + [ i ]\\n        gname = \" \".join(row[1:3])\\n        groups[gname] += [ row ]\\n        i += 1\\n\\noutput = defaultdict(list)\\nfor gname, group in groups.items():\\n    gr = []\\n    last_key,last_col4, last_idx='',-1,-1\\n    for row in group:\\n        key, idx = \" \".join(row[1:3]), int(row[-1])\\n        keys_same   = last_key == key and last_col4 + 1 == int(row[3])\\n        consequtive = last_idx + 1 == idx\\n        if not (gr and keys_same and consequtive):\\n            if gr: output[gr[0][1]] += [ float(row[0]) - float(gr[0][0]) ]\\n            gr = [ row ]\\n        else: gr += [ row ]\\n        last_key, last_col4, last_idx = key, int(row[3]), idx\\n\\nfor k,v in output.items():\\n    print k, ' --> ', v", "id": "17330048", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 483, 2217, 1828, 3843, 1442, 4179, 2758, 3514, 3747, 869, 817, 4], "code_num": [2], "code": "listed = []\\ninputs = None\\n\\nwhile inputs != '':\\n    inputs = input()\\n    listed.append(inputs)\\n\\nlisted = [i for i in listed if i != '']\\nprint listed", "id": "28395872", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 1869, 2710, 552, 1400, 3678, 4179, 3630, 869, 2326, 4], "code_num": [2], "code": "lines = \"Foo\\nBar\\nBaz\"\\n\\nfor line in lines.splitlines():\\n    print \"%s Hello\" % line", "id": "7198125", "code_sizes": 1}, {"nl_num": [3, 672, 1828, 96, 1170, 2610, 655, 4], "code_num": [2], "code": "from django.db import models\\nfrom datetime import datetime, timedelta\\n# Create your models here.\\nclass yourTextLineGroup(models.Model):\\n    # fields go here    \\n    lock_time = models.DateTimeField(null=True)\\n    locked_by = models.ForeignKey()#Point me to your user model\\n\\n    def lock(self):\\n        if self.is_locked(): #and code here to see if current user is not locked_by user\\n            #exception / bad return value here\\n            pass\\n\\n        self.lock_time = datetime.now()\\n\\n    def unlock(self):\\n        self.lock_time = None\\n\\n    def is_locked(self):\\n        return self.lock_time and datetime.now() - self.lock_time < timedelta(minutes=10)", "id": "1123367", "code_sizes": 1}, {"nl_num": [3, 2, 3747, 3715, 3376, 338, 2237, 4178, 1976, 3993, 540, 3758, 3747, 3163, 4], "code_num": [2], "code": "def get_query(self):\\n    role = current_user.role\\n    if role == 'contributor':\\n        return # filtered query\\n    elif role == 'admin':\\n        return # unfiltered query", "id": "21087077", "code_sizes": 1}, {"nl_num": [3, 2, 2, 4178, 2672, 540, 2, 4], "code_num": [2], "code": "index.write()", "id": "16056759", "code_sizes": 1}, {"nl_num": [3, 2007, 2021, 4350, 540, 990, 4], "code_num": [2], "code": "#! /usr/bin/python\\n\\nimport subprocess\\n\\npipe = subprocess.Popen([\"perl\", \"/sdb1/media/process.pl\"], stdout=subprocess.PIPE)", "id": "26667372", "code_sizes": 1}, {"nl_num": [3, 2, 1651, 2, 2238, 1017, 2516, 3155, 3528, 4178, 1400, 2279, 4179, 1828, 3072, 4], "code_num": [2], "code": "class Vector:\\n    def __init__(self, x, y, z):\\n        self.x = x\\n        self.y = y\\n        self.z = z\\n\\ndef dot(v1, v2):\\n    return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z\\n\\ndef cross(v1, v2):\\n    return Vector(v1.y * v2.z - v1.z * v2.y,\\n                  v1.z * v2.x - v1.x * v2.z,\\n                  v1.x * v2.y - v1.y * v2.x)\\n\\ndef det(v1, v2, v3):\\n    return dot(v1, cross(v2, v3))\\n\\nclass Pair:\\n    def __init__(self, v1, v2):\\n        self.v1 = v1\\n        self.v2 = v2\\n\\n# Returns True if the great circle segment determined by s\\n# straddles the great circle determined by l\\ndef straddles(s, l):\\n    return det(s.v1, l.v1, l.v2) * det(s.v2, l.v1, l.v2) < 0\\n\\n# Returns True if the great circle segments determined by a and b\\n# cross each other\\ndef intersects(a, b):\\n    return straddles(a, b) and straddles(b, a)\\n\\n# Test. Note that we don't need to normalize the vectors.\\nprint(intersects(Pair(Vector(1, 0, 1), Vector(-1, 0, 1)),\\n                 Pair(Vector(0, 1, 1), Vector(0, -1, 1))))", "id": "26668041", "code_sizes": 1}, {"nl_num": [3, 3397, 4121, 297, 3293, 3921, 684, 1460, 1708, 188, 4], "code_num": [2], "code": "self.client_address[0]", "id": "9389691", "code_sizes": 1}, {"nl_num": [3, 2, 4542, 4137, 188, 1650, 4], "code_num": [2], "code": "import sys\\n\\ndef function_four():\\n    # Does Stuff\\n    return function_one\\n\\ndef function_three():\\n    # Does Stuff\\n    return function_two\\n\\ndef function_one():\\n    usr_input = input(\"Options: '1') function_three | '2') Quit\\nOption: \")\\n    if usr_input == '1':\\n        return function_three\\n    elif usr_input == '2':\\n        return None\\n    else:\\n        print(\"Did not recognise command. Try again.\")\\n        return function_one\\n\\ndef function_two():\\n    usr_input = input(\"Options: '1') function_four | '2') function_three | '3') Quit\\nOption: \")\\n    if usr_input == '1':\\n        return function_four\\n    elif usr_input == '2':\\n        return function_three\\n    elif usr_input == '3':\\n        return None\\n    else:\\n        print(\"Did not recognise command. Try again.\")\\n        return function_two\\n\\nstate = function_one\\nwhile state is not None:\\n    state = state()", "id": "9367782", "code_sizes": 1}, {"nl_num": [3, 69, 568, 1886, 1297, 336, 265, 4491, 2326, 4], "code_num": [2], "code": "#! /usr/bin/python\\nimport sys\\nfrom datetime import datetime\\nd_format = \"%Y-%m-%d\"\\n\\ntry:\\n    start = datetime.strptime(sys.argv[1], d_format)\\n    end = datetime.strptime(sys.argv[2], d_format) \\nexcept (TypeError, IndexError):\\n    sys.stderr.write(\"Example: grep-date-range.py 2011-03-25 2011-04-02 \\n\")\\n\\nfor line in sys.stdin:\\n    try:\\n        date = datetime.strptime(line.split()[0], d_format)\\n        # suit the <=, <, comparisons bellow to your needs:\\n        if start <= date < end:\\n            sys.stdout.write(line)\\n    except (ValueError, IndexError):\\n        pass", "id": "5533671", "code_sizes": 1}, {"nl_num": [3, 1331, 2869, 4379, 3525, 4], "code_num": [2], "code": "def main():\\n    app = QtGui.QApplication(sys.argv)\\n    w = AuthWindow()\\n    w.exec_()\\n    w.show()\\n    sys.exit(app.exec_())", "id": "16862219", "code_sizes": 1}, {"nl_num": [3, 2, 223, 3597, 2610, 2385, 4], "code_num": [2], "code": "def edit(request):\\n    initial = {\\n       0: {'subject': 'Hello', 'sender': 'user@example.com'},\\n       1: {'message': 'Hi there!'}\\n       }\\n    wiz = FormWizard([form1,form2,form3],initial_dict = initial)\\n    return wiz(request)", "id": "2583829", "code_sizes": 1}, {"nl_num": [3, 3601, 3941, 1039, 4179, 4238, 3293, 4569, 4238, 2610, 990, 4], "code_num": [2], "code": "list_of_lists = [[1, 2], [1, 3], [1, 4]]\\nlen(set([sublist[0] for sublist in list_of_lists])) == 1\\n# True", "id": "23882162", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2878, 1400, 3087, 4179, 1828, 2, 3332, 2610, 2, 1708, 990, 4239, 4564, 4], "code_num": [2], "code": "from py2neo import Graph\\ngraph = Graph(\"http://nifty-site:1138/db/data/\")\\nresults = graph.cypher.execute(\"match (PPnode:Node) return PPnode\")\\n\\nfor r in results:\\n    # get the node you return in your query\\n    ppNode = r[0]\\n    # get the properties of your node\\n    props = ppNode.get_properties()\\n    # Do nifty stuff with properties, not JSON.", "id": "27840751", "code_sizes": 1}, {"nl_num": [3, 188, 1530, 1863, 1956, 2850, 4], "code_num": [2], "code": "newlinks = [a[\"href\"] for a in getdata]", "id": "34461080", "code_sizes": 1}, {"nl_num": [3, 4764, 1828, 1798, 841, 568, 1828, 2385, 2, 4], "code_num": [2], "code": "pi = ProductImage(product=product)\\npi.source_image.save(image_name, ContentFile(image_file.read()))\\npi.save()", "id": "5572466", "code_sizes": 1}, {"nl_num": [3, 2156, 4047, 990, 4505, 1708, 1828, 3316, 2799, 4], "code_num": [2], "code": "import one\\nimport two\\nimport three\\n\\nif __name__ == '__main__':\\n    one.foo()\\n    two.bar()\\n    three.baz()", "id": "12603482", "code_sizes": 1}, {"nl_num": [3, 2108, 540, 2385, 4139, 1207, 4], "code_num": [2], "code": "uid = User.objects.get(username='Greg').id\\npinyin = Pinyin.objects.get(pinyinWord='kuai')\\n\\nlearned, created = Learned.objects.get_or_create(pinyinWord=pinyin.pinyinWord, \\n                                                                 user__id=uid)\\nif created:   # newly INSERTed Learned  instance\\n     learned.date = datetime.date.today()\\n     learned.learned = False\\n     learned.save()", "id": "5694626", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1929, 3730, 1563, 4667, 2604, 1583, 1297, 2817, 177, 2040, 2238, 3528, 4], "code_num": [2], "code": "root.destroy()", "id": "17615775", "code_sizes": 1}, {"nl_num": [3, 69, 1535, 483, 746, 1400, 764, 3959, 265, 4179, 1828, 3004, 3293, 990, 2326, 4], "code_num": [2], "code": "os.utime", "id": "11348953", "code_sizes": 1}, {"nl_num": [3, 2101, 864, 3055, 3256, 3747, 640, 4562, 2464, 69, 568, 4727, 2, 2326, 4], "code_num": [2], "code": "import matplotlib.pyplot as plt\\nimport seaborn as sns\\nimport numpy as np\\nimport pandas as pd\\n\\nnp.random.seed(0)\\nfig = plt.figure()\\nax1 = fig.add_subplot(111)\\nax1.plot(pd.Series(np.random.uniform(0,1,size=10)))\\nax2 = ax1.twinx()\\nax2.plot(pd.Series(np.random.uniform(10,20,size=10)),color='r')\\n\\n# ADD THIS LINE\\nax2.set_yticks(np.linspace(ax2.get_yticks()[0],ax2.get_yticks()[-1],len(ax1.get_yticks())))\\n\\nplt.show()", "id": "26752464", "code_sizes": 1}, {"nl_num": [3, 2367, 4220, 3417, 1828, 1101, 4260, 4], "code_num": [2], "code": "soup = BeautifulSoup(page)\\nanchors = soup.findAll('a')\\nfor anchor in anchors:\\n  anchor.replaceWithChildren()", "id": "13058284", "code_sizes": 1}, {"nl_num": [3, 9, 1708, 2, 540, 655, 2616, 4042, 639, 2326, 4], "code_num": [2], "code": "views.py", "id": "1623538", "code_sizes": 1}, {"nl_num": [3, 655, 4583, 262, 3293, 2229, 853, 4688, 4], "code_num": [2], "code": "def next_page(request,location_id):\\n    loc = Location.objects.get(id=location_id)", "id": "25878113", "code_sizes": 1}, {"nl_num": [3, 188, 864, 69, 568, 586, 1828, 2556, 568, 1828, 1170, 4], "code_num": [2], "code": "def func(container):\\n    container[0] = True\\n\\n\\ncontainer = [False]\\nfunc(container)\\nprint container[0]", "id": "3648473", "code_sizes": 1}, {"nl_num": [3, 3331, 1400, 1598, 4179, 1828, 2, 122, 2610, 188, 1708, 3726, 169, 2, 4], "code_num": [2], "code": "import math\\nscanner.scan(image)\\n[a,b,c,d] = x.location   # it returns the four corners of the QR code in an order\\nw = math.sqrt((a[0]-b[0])**2 + (a[1]-b[1])**2)  # Just distance between two points\\nh = math.sqrt((b[0]-c[0])**2 + (b[1]-c[1])**2)\\nArea = w*h", "id": "22743213", "code_sizes": 1}, {"nl_num": [3, 188, 2810, 4505, 853, 4047, 4543, 4505, 4], "code_num": [2], "code": "with open('myfile.txt') as infp:\\n    files = [open('%d.txt' % i, 'w') for i in range(number_of_files)]\\n    for i, line in enumerate(infp):\\n        files[i % number_of_files].write(line)\\n    for f in files:\\n        f.close()", "id": "30582287", "code_sizes": 1}, {"nl_num": [3, 3135, 229, 2610, 188, 4], "code_num": [2], "code": "from scrapy.spider import BaseSpider\\nfrom scrapy.selector import HtmlXPathSelector\\n\\nclass DmozSpider(BaseSpider):\\n    name = \"dmoz.org\"\\n    allowed_domains = [\"dmoz.org\"]\\n    start_urls = [\\n        \"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\",\\n        \"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/\"\\n    ]\\ndef parse(self, response):\\n    hxs = HtmlXPathSelector(response)\\n    sites = hxs.select('//ul/li')\\n    for site in sites:\\n        title = site.select('a/text()').extract()\\n        link = site.select('a/@href').extract()\\n        desc = site.select('text()').extract()\\n        print title, link, desc", "id": "6529633", "code_sizes": 1}, {"nl_num": [3, 2385, 3558, 1708, 2, 3747, 722, 4], "code_num": [2], "code": "import sys, os\\nsys.path.append(os.path.join(os.getcwd(), 'projectname')) #I needed this\\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"settings\")\\nimport django.core.handlers.wsgi\\napplication = django.core.handlers.wsgi.WSGIHandler()", "id": "26130408", "code_sizes": 1}, {"nl_num": [3, 2834, 540, 4147, 2610, 188, 4], "code_num": [2], "code": "f = open('test_text.txt','wb')\\nfor a in range(65535):\\n    f.write(unichr(a).encode(\"utf32\"))\\nf.close()", "id": "17768164", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4769, 1828, 4714, 568, 3079, 4182, 2697, 822, 4], "code_num": [2], "code": "import csv\\ncursor = connection.cursor() # assuming you know how to connect to your oracle db\\ncursor.execute('select * from table_you_want_to_turn_to_csv')\\nwith open('output_file.csv', 'wb') as fout:\\n    writer = csv.writer(fout)\\n    writer.writerow([ i[0] for i in cursor.description ]) # heading row\\n    writer.writerows(cursor.fetchall())", "id": "5669773", "code_sizes": 1}, {"nl_num": [3, 3592, 2269, 122, 2039, 3991, 2, 3426, 55, 4], "code_num": [2], "code": "import random\\nimport nltk\\nimport pandas\\nimport csv\\nimport numpy as np\\nfrom sklearn.naive_bayes import MultinomialNB\\nfrom sklearn.feature_extraction.text import TfidfVectorizer\\nfrom sklearn import metrics\\nfrom operator import itemgetter\\nfrom sklearn.metrics import classification_report\\ntrain_setT = [tuple(x) for x in train_set]\\ntest_setT = [tuple(x) for x in test_set]\\n\\n\\ntrain_set = np.array([''.join(el[0]) for el in train_setT])\\ntest_set = np.array([''.join(el[0]) for el in test_setT])\\n\\ny_train = np.array([el[1] for el in train_setT])\\ny_test = np.array([el[1] for el in test_setT])\\n\\nvectorizer = TfidfVectorizer(min_df=2,ngram_range=(1, 2), strip_accents='unicode', norm='l2')\\n\\nX_train = vectorizer.fit_transform(train_set)\\nX_test = vectorizer.transform(test_set)\\n\\nnb_classifier = MultinomialNB().fit(X_train, y_train)\\n\\ny_nb_predicted = nb_classifier.predict(X_test)\\n\\n\\nprint metrics.confusion_matrix(y_test, y_nb_predicted)\\nprint classification_report(y_test, y_nb_predicted)", "id": "25817177", "code_sizes": 1}, {"nl_num": [3, 4504, 3247, 2610, 1828, 4640, 4], "code_num": [2], "code": "sum(item['key'] for item in array if 'key' in item)", "id": "22152153", "code_sizes": 1}, {"nl_num": [3, 4133, 3958, 262, 2, 2610, 188, 1379, 2326, 4], "code_num": [2], "code": "r = [rand_foo() for _ in range(10)]", "id": "21867749", "code_sizes": 1}, {"nl_num": [3, 2385, 4239, 206, 2, 2, 864, 550, 568, 2878, 4238, 4179, 4220, 184, 769, 2610, 2898, 1007, 451, 268, 2326, 4], "code_num": [2], "code": "class Parent(models.Model):\\n    name = models.CharField(max_length=50)\\n\\nclass Child(models.Model):\\n    parent = models.ForeignKey(Parent, related_name='children')  # <--- Add related_name\\n    child_name = models.CharField(max_length=80)", "id": "33853255", "code_sizes": 1}, {"nl_num": [3, 3486, 684, 1460, 568, 4160, 540, 3351, 177, 2963, 169, 3782, 4], "code_num": [2], "code": "data=\"league=1\\nSeasonString=2014-2015\\nYear=1\\nMonth=1\\nDay=1\"", "id": "26052110", "code_sizes": 1}, {"nl_num": [3, 554, 1828, 262, 1605, 2604, 1179, 250, 3674, 260, 3004, 2464, 2610, 1312, 3004, 4], "code_num": [2], "code": "type = forms.CharField(label='Type', widget=forms.Select(choices=User.USER_TYPE_CHOICES))", "id": "31051371", "code_sizes": 1}, {"nl_num": [3, 2, 549, 1856, 568, 1828, 2363, 3087, 4], "code_num": [2], "code": "yes_or_no = False\\nif result == wx.ID_YES:\\n    yes_or_no = True\\ndlg.Destroy()\\nif yes_or_no:\\n    self.IfYes()", "id": "10374003", "code_sizes": 1}, {"nl_num": [3, 2604, 4190, 1828, 1442, 568, 1352, 1828, 3559, 549, 1460, 1400, 2, 2238, 3528, 1708, 3037, 568, 3898, 2969, 2, 4], "code_num": [2], "code": "cur = con.execute(\\n         \"insert into sometable OUTPUT INSERTED.idcolumn values('something')\"\\n         )", "id": "4521612", "code_sizes": 1}, {"nl_num": [3, 4090, 2610, 1828, 3933, 2610, 549, 2, 3383, 2610, 2188, 4181, 1927, 4], "code_num": [2], "code": "combobox = wx.ComboBox(\\n    tb3, 2342, \"\", choices=[\"\", \"This\", \"is a\", \"wx.ComboBox\"],\\n    size=(150,-1), style=wx.CB_DROPDOWN\\n    )\\ntb3.AddControl(combobox)\\ntb3.Realize()\\ncombobox.Hide()\\ncombobox.Show()", "id": "26821512", "code_sizes": 1}, {"nl_num": [3, 4137, 4251, 822, 1062, 483, 153, 3293, 655, 568, 4410, 1268, 4583, 2287, 2878, 2326, 4], "code_num": [2], "code": "def pendingOrders(request):\\n    userprof = UserProfile.objects.get(user= request.user)\\n    if userprof.is_student:\\n        student_account = request.user\\n        dish = Dishes.objects.all()\\n        #Getting all pending orders\\n        order_all_pending = Orders.objects.filter(student_id = student_account,delivered = False)\\n        pending_orders = Orders.objects.filter(~Q(status = 2),delivered = False)\\n        for order in order_all_pending:\\n            #Hack to change QuerySet to pass as JSON \\n            order.quantity = pending_orders.filter(id__lt = order.id,counterid= order.counterid).count() + 1\\n\\n        #Returning JSON response to the objects obtained in above statement\\n        return HttpResponse(serializers.serialize('json',order_all_pending,use_natural_keys=True),mimetype='application/json')\\n    else:\\n        return HttpResponse(\"Something went wrong\")", "id": "9146668", "code_sizes": 1}, {"nl_num": [3, 4340, 4640, 327, 1828, 4238, 2610, 1828, 1170, 4], "code_num": [2], "code": "import itertools\\n\\nlist(itertools.chain.from_iterable(LISTS))", "id": "25115884", "code_sizes": 1}, {"nl_num": [3, 3397, 4047, 327, 4], "code_num": [2], "code": "find_element_by_css_selector(\".kpi.unit\");", "id": "29485067", "code_sizes": 1}, {"nl_num": [3, 346, 2346, 4178, 3514, 3747, 774, 4018, 4], "code_num": [2], "code": "hist, bin_edges = apply_along_axis(lambda x: histogram(x, bins=bins), 0, B)", "id": "18851471", "code_sizes": 1}, {"nl_num": [3, 188, 2, 864, 69, 568, 3348, 1216, 869, 4268, 2326, 2, 576, 3747, 3747, 732, 576, 4], "code_num": [2], "code": "from sys import argv as arguments\\n\\nif \"--failed\" in arguments :\\n    do_something()\\nelse :\\n    do_something_else()", "id": "25752001", "code_sizes": 1}, {"nl_num": [3, 4017, 4563, 3293, 2019, 990, 4], "code_num": [2], "code": "os.system(\"/path/to/myapp\")", "id": "2951182", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2878, 1400, 291, 109, 4633, 2, 4809, 3995, 3090, 2, 2326, 4], "code_num": [2], "code": "head = repo.lookup_reference('HEAD').resolve()\\nhead = repo.head\\n\\nbranch_name = head.name", "id": "26134026", "code_sizes": 1}, {"nl_num": [3, 188, 2810, 1773, 4], "code_num": [2], "code": "with open(\"test.txt\", \"r\") as my_file:\\n    for line in my_file:\\n        line = re.findall('(\\w+)', line)\\n        print '{Username:\"%s\", Application:%s}' % (line[0], line[1])\\n        print '{Username:\"%s\", Application:%s}' % (line[2], line[3])", "id": "32981929", "code_sizes": 1}, {"nl_num": [3, 2, 3524, 1292, 223, 287, 2610, 188, 4], "code_num": [2], "code": "alg = sklearn.linear_model.LogisticRegression()\\nalg.fit(x_train, y_train)\\ntest_score = alg.score(x_test, y_test)", "id": "32758857", "code_sizes": 1}, {"nl_num": [3, 3195, 1828, 338, 1074, 3293, 841, 4], "code_num": [2], "code": "df = pd.DataFrame(r)", "id": "25705666", "code_sizes": 1}, {"nl_num": [3, 333, 1151, 188, 971, 1726, 4179, 1828, 1430, 169, 1828, 694, 2326, 4], "code_num": [2], "code": "import random\\nrandom.random = 9 # Very weird but legal assignment.\\nrandom.random < 10 # True\\nrandom.random > 10 # False", "id": "1778521", "code_sizes": 1}, {"nl_num": [3, 1727, 2, 733, 2489, 540, 1544, 4], "code_num": [2], "code": "def innerHTML(node): \\n    buildString = ''\\n    for child in node:\\n        buildString += html.tostring(child)\\n    return buildString", "id": "15343218", "code_sizes": 1}, {"nl_num": [3, 4764, 4238, 4179, 2639, 853, 2587, 4018, 169, 2, 2605, 2326, 4], "code_num": [2], "code": "combine_list = [[[ (i, j, k) for k in c] for j in b] for i in a]\\ncombine_array = np.asarray(combine_list)", "id": "33115093", "code_sizes": 1}, {"nl_num": [3, 1468, 1828, 1871, 3004, 540, 188, 4], "code_num": [2], "code": "os.system(\"\"\"here some code you use to execute in Terminal\"\"\")", "id": "22020764", "code_sizes": 1}, {"nl_num": [3, 483, 62, 568, 2640, 3674, 883, 733, 3004, 853, 507, 3004, 4], "code_num": [2], "code": "import codecs\\nh = codecs.open('yyyy.txt', 'w', 'utf-8')", "id": "16445450", "code_sizes": 1}, {"nl_num": [3, 2604, 2605, 1394, 568, 3388, 4220, 1400, 2, 1268, 3232, 3559, 2610, 922, 2326, 4], "code_num": [2], "code": "num = 0\\ninsert_ids = []\\n\\nfor arg in args:\\n    num += cur.execute(sql, arg)\\n    insert_ids.append(cur.lastrowid)", "id": "9817134", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1138, 3055, 4716, 853, 1400, 3316, 4031, 1708, 2614, 2326, 4], "code_num": [2], "code": "# adding a pie chart to the drawing   \\nself._add(self,Pie(),name='pie',validate=None,desc=None)", "id": "9339572", "code_sizes": 1}, {"nl_num": [3, 4133, 4190, 1828, 1442, 568, 2, 1828, 2110, 574, 568, 262, 2326, 4], "code_num": [2], "code": "item.active = not item.active", "id": "8335029", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3119, 1828, 4238, 2610, 1400, 822, 4179, 1828, 746, 177, 4137, 3351, 4], "code_num": [2], "code": "s=[1,2,3]\\nprint(\"{\"+str(s)[1:-1]+\"}\")", "id": "25942400", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1545, 2, 2821, 568, 1828, 1556, 540, 2840, 2610, 188, 4], "code_num": [2], "code": "# _*_ coding: utf-8\\n\\nimport xlsxwriter\\n\\nworkbook = xlsxwriter.Workbook('example.xlsx')\\nworksheet = workbook.add_worksheet()\\n\\nworksheet.write('B3', u'Franz??sisch')\\n\\nworkbook.close()", "id": "27623434", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1875, 169, 4314, 4047, 327, 3293, 2385, 4678, 2326, 4], "code_num": [2], "code": "result = cache.get(cache_key)\\nif not result:\\n    result = filter_result()\\n    cache.set(cache_key, result, cache_time)\\n\\ncounter, college_user, name_college_list = result", "id": "11820527", "code_sizes": 1}, {"nl_num": [3, 69, 568, 2878, 351, 223, 1828, 3420, 2895, 568, 253, 2610, 655, 4], "code_num": [2], "code": "import pytz\\n\\nentered_at = request.session['entered_at']\\nentered_at = datetime.strptime(entered_at, \"%m-%d-%Y\")\\nday_start = entered_at.replace(hour=00, minute=00)\\nday_end = entered_at.replace(hour=23, minute=59)\\n\\ntimezone = pytz.timezone(\"America/Los_Angeles\")\\nday_start = timezone.localize(day_start)\\nday_end = timezone.localize(day_end)\\n\\nentries = Entry.objects.filter(customer=customer, \\n                               entered_at__lt=day_end, \\n                               entered_at__gte=day_start)", "id": "25489876", "code_sizes": 1}, {"nl_num": [3, 997, 3155, 540, 990, 2464, 3293, 1422, 1828, 1422, 3147, 1422, 4420, 1227, 4420, 1422, 827, 568, 1422, 1828, 1422, 3147, 1422, 4420, 1422, 827, 4], "code_num": [2], "code": "os.path.join(os.path.split(p1)[0], p2)", "id": "27327048", "code_sizes": 1}, {"nl_num": [3, 4108, 1828, 18, 1563, 2610, 3148, 4], "code_num": [2], "code": "class Main(QtGui.QMainWindow):\\n    ''' some stuff '''\\n    def on_Button_clicked(self, checked=None):\\n        if checked==None: return\\n        dialog = QDialog()\\n        dialog.ui = Ui_MyDialog()\\n        dialog.ui.setupUi(dialog)\\n        dialog.setAttribute(QtCore.Qt.WA_DeleteOnClose)\\n        dialog.exec_()", "id": "1807299", "code_sizes": 1}, {"nl_num": [3, 188, 3565, 864, 550, 568, 1945, 1828, 2094, 3518, 169, 1828, 3313, 169, 1279, 3119, 3282, 568, 1400, 2697, 4], "code_num": [2], "code": "import xlrd\\n\\nbook_input = xlrd.open_workbook('input.xls')\\nsheet_input = book_input.sheet_by_index(0)\\n\\nfor row in xrange(sheet_input.nrows):\\n    for col in xrange(sheet_input.ncols):\\n        cell_type = sheet_input.cell_type(row, col)\\n        cell_value = sheet_input.cell_value(row, col)\\n        if cell_type == 1 or (cell_type == 2 and cell_value >= 1):\\n            print \"%s:%s\" % (col + 1, cell_value)", "id": "18761927", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 4049, 4220, 1400, 3963, 3293, 1828, 4238, 568, 2360, 1828, 2406, 4238, 2326, 4], "code_num": [2], "code": "new_ingredients = [(name, quantity*multiplier, unit) for name,quantity,unit in ingredients]", "id": "23256134", "code_sizes": 1}, {"nl_num": [3, 3938, 3747, 2, 1598, 223, 2817, 1074, 4], "code_num": [2], "code": "import Tkinter\\n\\nroot = Tkinter.Tk()\\nmenubar = Tkinter.Menu(root)\\nroot.config(menu=menubar)\\n\\nfileMenu = Tkinter.Menu(menubar, tearoff=False)\\neditMenu = Tkinter.Menu(menubar, tearoff=False)\\n\\nmenubar.add_cascade(label=\"File\",underline=0, menu=fileMenu)\\nmenubar.add_cascade(label=\"Edit\",underline=0, menu=editMenu)\\n\\nfileMenu.add_command(label=\"Open...\", underline=0)\\nfileMenu.add_command(label=\"Save\", underline=0)\\nfileMenu.add_separator()\\nfileMenu.add_command(label=\"Exit\", underline=1)\\n\\neditMenu.add_command(label=\"Cut\", underline=2)\\neditMenu.add_command(label=\"Copy\", underline=0)\\neditMenu.add_command(label=\"Paste\", underline=0)\\n\\nroot.mainloop()", "id": "3511791", "code_sizes": 1}, {"nl_num": [3, 188, 2484, 338, 3293, 3004, 169, 1545, 568, 1312, 4], "code_num": [2], "code": "fp = open(\"data.txt\", \"r\")\\ndata = fp.read();\\n\\ndata = data.split(\">\");\\n\\ni = 0;\\n\\nwhile True:\\n    filename = data[i].split('\" ')[1].split('\"')[1]\\n    text = data[i+1].split('<')[0].strip()\\n\\n    fp1 = open(filename + \".txt\", \"w\")\\n    fp1.write(text)\\n    fp1.close()\\n\\n    i += 2\\n    if i >= (len(data) - 1):\\n        break;", "id": "14001510", "code_sizes": 1}, {"nl_num": [3, 188, 3946, 3712, 540, 1828, 2886, 528, 2, 4], "code_num": [2], "code": "import glob\\nfrom netCDF4 import Dataset\\nimport numpy as np\\nfrom PIL import Image\\n\\nWIDTH = 800\\nHEIGHT = 450\\n\\nroot = Dataset('test.nc', 'w')\\n\\nroot.createDimension('x', WIDTH)\\nroot.createDimension('y', HEIGHT)\\nroot.createDimension('channels', 3)\\nt = root.createDimension('t', None)\\n\\nimg = root.createVariable('image', 'u1', ('t','y','x','channels'))\\n\\nimages = glob.glob('images/*')\\n\\nfor i,fname in enumerate(images):\\n    im = Image.open(fname)\\n    im_array  = np.asarray(im)\\n    img[i] = im_array\\n\\nmedian = np.median(img, axis=0)\\nim = Image.fromarray(np.uint8(median))\\nim.save('out.png')", "id": "26457220", "code_sizes": 1}, {"nl_num": [3, 3415, 2702, 3254, 2610, 1828, 188, 4563, 4], "code_num": [2], "code": "from datetime import datetime\\nimport os\\n\\nfrom apscheduler.schedulers.blocking import BlockingScheduler\\n\\n\\ndef tick():\\n    print('Tick! The time is: %s' % datetime.now())\\n\\n\\nif __name__ == '__main__':\\n    scheduler = BlockingScheduler()\\n    scheduler.add_executor('processpool')\\n    scheduler.add_job(tick, 'interval', seconds=3)\\n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\\n\\ntry:\\n    scheduler.start()\\nexcept (KeyboardInterrupt, SystemExit):\\n    pass", "id": "30908032", "code_sizes": 1}, {"nl_num": [3, 2, 3565, 3293, 188, 4], "code_num": [2], "code": "from win32com.client import Dispatch\\nexcel = Dispatch('Excel.Application')\\nwb = excel.Workbooks.Open(r'c:\\path\\to\\file.xlsx')\\nws = wb.Sheets('My Sheet')\\n# do other stuff, just like VBA\\nwb.Close()\\nexcel.Quit()", "id": "15467229", "code_sizes": 1}, {"nl_num": [3, 3490, 4031, 4505, 540, 3351, 4], "code_num": [2], "code": "decimal.Decimal", "id": "15021912", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 38, 643, 540, 2084, 169, 789, 1701, 2326, 4], "code_num": [2], "code": "mystring.replace (\" \", \"_\")", "id": "1007481", "code_sizes": 1}, {"nl_num": [3, 550, 568, 586, 671, 4640, 3247, 2238, 2, 332, 4790, 4790, 3995, 3528, 568, 1828, 990, 1170, 2326, 4], "code_num": [2], "code": "def printAlbum(albums):\\n        for year in albums:\\n                print year, albums[year]\\n\\nprintAlbum(\\n{ 2002: 'by the way', 1999: 'californication', 2006:'stadium arcadium'}\\n)", "id": "15727368", "code_sizes": 1}, {"nl_num": [3, 4237, 1828, 862, 2385, 2725, 3715, 4], "code_num": [2], "code": "from django.test import TestCase\\nfrom django.template import Context, Template\\n\\nclass TagTests(TestCase):\\n    def tag_test(self, template, context, output):\\n        t = Template('{% load multifor %}'+template)\\n        c = Context(context)\\n        self.assertEqual(t.render(c), output)\\n    def test_for_tag_multi(self):\\n        template = \"{% for x in x_list; y in y_list %}{{ x }}:{{ y }}/{% endfor %}\"\\n        context = {\"x_list\": ('one', 1, 'carrot'), \"y_list\": ('two', 2, 'orange')}\\n        output = u\"one:two/1:2/carrot:orange/\"\\n        self.tag_test(template, context, output)", "id": "4496109", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2878, 887, 899, 2, 2326, 4], "code_num": [2], "code": "def parse(self, response):\\n    for obj in response.css(\"ul.search-results li\"):\\n        item = YelpItem()\\n\\n        item['name'] = obj.xpath(\".//div[@class='media-story']//h3//a/text()\").extract()[0]\\n        item['address'] = ''.join(obj.xpath(\".//div[@class='secondary-attributes']//address/text()\").extract()).strip()\\n\\n        yield item", "id": "30182697", "code_sizes": 1}, {"nl_num": [3, 4764, 990, 769, 223, 3585, 4], "code_num": [2], "code": "import rpy2.robjects.numpy2ri\\nrpy2.robjects.numpy2ri.activate()", "id": "2447454", "code_sizes": 1}, {"nl_num": [3, 736, 2756, 2610, 188, 4], "code_num": [2], "code": "liste = []\\nfor primeCandidate in range (2,100):\\n    isPrime = True\\n    for divisor in range (2,primeCandidate):\\n        if primeCandidate % divisor == 0:\\n            isPrime = False\\n            break\\n    if isPrime:\\n        liste.append(primeCandidate)\\n        print(liste)", "id": "8904921", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2484, 1400, 3995, 4179, 2, 223, 1400, 2, 3886, 1708, 990, 2326, 4], "code_num": [2], "code": "import os\\nimport fnmatch\\n\\nfilenamels = []\\ninputExtension = \".nc\"\\noutputExtension = \".img\"\\ninputDir = \"C:\\\\Users\\\\\"\\nfor filename in os.listdir(inputDir):\\n    if fnmatch.fnmatch(filename, '*' + inputExtension):\\n        filenamels.append(filename[:-len(inputExtension)])\\n\\nfor fn in filenamels:\\n    inputDataset = 'NETCDF:\\\"'+ fn + inputExtension +'\\\":sf'\\n    outputFile = inputDir + 'Nx.' + fn + '.SUB' + outputExtension\\n    gdalcmd='gdal_translate -of \"ENVI\" '+ inputDataset + ' '+ outputFile\\n    os.system( gdalcmd)", "id": "27778681", "code_sizes": 1}, {"nl_num": [3, 2, 2, 990, 4], "code_num": [2], "code": "import uno\\n\\ndef setMargin():\\n    doc = XSCRIPTCONTEXT.getDocument()\\n    oStyle = doc.StyleFamilies.getByName(\"PageStyles\").getByName(\"Default\")\\n    oStyle.TopMargin = 5000  #Not sure what the units are", "id": "10716313", "code_sizes": 1}, {"nl_num": [3, 3303, 3881, 2613, 869, 631, 540, 3518, 2610, 4238, 2326, 4], "code_num": [2], "code": "my_id_strs = map(str, my_ids)\\nfor line in source_file:\\n    first_part = line.split(\"|\")[0]\\n    if first_part in my_id_strs:\\n        target_file.write(line.replace(\",\",\";\").replace(\"|\",\",\"))", "id": "33623518", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2, 338, 2, 540, 2, 4], "code_num": [2], "code": "grid_x.ravel()\\ngrid_y.ravel()\\ngrid_z.ravel()\\ninterpolated_quantity.ravel()", "id": "22045809", "code_sizes": 1}, {"nl_num": [3, 2, 2610, 990, 4], "code_num": [2], "code": "chunk_split = lambda s: '\\r\\n'.join(s[i:min(i+76, len(s))] for i in xrange(0, len(s), 76))", "id": "959780", "code_sizes": 1}, {"nl_num": [3, 71, 3215, 102, 4499, 4], "code_num": [2], "code": "import urllib2\\nbio_page = urllib.urlopen(bio_url).read()", "id": "1810652", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 3178, 1400, 1240, 2238, 188, 3528, 4], "code_num": [2], "code": "amount = 0 # Used to increment your inv value\\nfor eachKey in stock:\\n# Iterate through your stock, pulling values for each item you have\\n    try:\\n        amount += stock[eachKey]*prices[eachKey]\\n        # Try to add your total inventory price for the current iteration\\n        # to your total, but if that item in your stock has no price set...\\n    except KeyError as e:\\n        print(\"Your item {} has no price!\".format(eachKey))\\n        # Let you know that there's no price for this item\\nprint(\"Your total inventory has value ${:.2f}\".format(amount))\\n# Print out your total inventory value", "id": "20580865", "code_sizes": 1}, {"nl_num": [3, 188, 2093, 2, 868, 540, 1844, 4], "code_num": [2], "code": "driver.find_elements_by_class_name(\"next_last\")[0].click()", "id": "32630968", "code_sizes": 1}, {"nl_num": [3, 4110, 2, 1708, 1828, 262, 4], "code_num": [2], "code": "select.select_by_value(str(entity_type))", "id": "21095884", "code_sizes": 1}, {"nl_num": [3, 1158, 1250, 2610, 3467, 3004, 977, 2693, 540, 1250, 2610, 1828, 3843, 4780, 540, 188, 4], "code_num": [2], "code": "firstline = True\\nwith open(\"server.txt\") as f:\\n    with open(\"output.txt\", \"w\") as fw:\\n        for line in f.readlines(): # For each line in server.txt\\n\\n            if firstline: # Do not process the header line\\n                firstline = False\\n                continue\\n\\n            if line[-2] == \"1\": # -2 because -1 is the line return character\\n                line = line[:-2] + \"noissue\\n\"\\n            else:\\n                line = line[:-2] + \"issue\\n\"\\n            fw.write(line)", "id": "24105871", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2103, 2571, 1432, 177, 528, 841, 568, 4534, 2710, 2326, 4], "code_num": [2], "code": "import base64\\nimport cStringIO\\n\\nbuffer = cStringIO.StringIO()\\nimage.save(buffer, format=\"JPEG\")\\nimg_str = base64.b64encode(buffer.getvalue())", "id": "31826335", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 3715, 2130, 4728, 2610, 1828, 2385, 2957, 2326, 4], "code_num": [2], "code": "def __init__(self, *args, **kwargs):\\n   # First pop your kwargs that may bother the parent __init__ method\\n   self.root_entity = kwargs.pop('root_entity')\\n   # Then, let the ModelForm initialize:\\n   super(MyForm, self).__init__(*args, **kwargs)\\n   # Finally, access the fields dict that was created by the super().__init__ call\\n   self.fields['parent_entities'].queryset = Entity.objects.filter(root_entity=self.root_entity)", "id": "10206658", "code_sizes": 1}, {"nl_num": [3, 2880, 1122, 3151, 3572, 2610, 3354, 4], "code_num": [2], "code": "session.retrbinary((\"RETR \" + f), open(f, 'wb').write)", "id": "24664002", "code_sizes": 1}, {"nl_num": [3, 2583, 380, 943, 2030, 4], "code_num": [2], "code": "import json\\nwith open('./gui-config.json','r') as f:\\n    js=json.load(f)\\n    js['configs'][0]['password']='123'\\n\\nwith open('./gui-config.json','w') as f:\\n    js.dumps(js, f)", "id": "30621399", "code_sizes": 1}, {"nl_num": [3, 2, 1400, 2, 1735, 2610, 1828, 3077, 2710, 3867, 990, 4], "code_num": [2], "code": "class Mutstr(object):\\n    def __init__(self, st=\"\"):\\n          self.st = st\\n\\n    def get(self):\\n          return self.st\\n\\n    def __delitem__(self, index):\\n          self.st = self.st[:index] + self.st[index+1:]\\n\\none = Mutstr('oogyboogy')\\ndel one[4]\\ndel one[3]\\ndel one[2]\\nprint one.get()", "id": "29251299", "code_sizes": 1}, {"nl_num": [3, 4328, 3843, 4684, 169, 327, 3293, 1828, 3004, 169, 453, 1280, 2610, 1828, 4640, 4], "code_num": [2, 2], "code": "r'^\\d(\\s[a-zA-Z])+'", "id": "29593664", "code_sizes": 2}, {"nl_num": [3, 3921, 684, 2464, 3317, 169, 3588, 3747, 550, 568, 1065, 684, 1460, 711, 733, 2, 1039, 2326, 4], "code_num": [2], "code": "def path(req):\\n    request_data = req.form.getfirst('request')", "id": "4364572", "code_sizes": 1}, {"nl_num": [3, 1224, 2347, 1347, 568, 1828, 1678, 4], "code_num": [2], "code": "docs = [('0,1,12','doc1'),('0,2,30','doc1'),('0,1','doc2')]\\nkeys = [('0','key1'),('0,1','key2'),('0,1,12','key3'),('0,2','key4'),('0,2,30','key5')]\\n\\nkeydict = dict(keys)\\nresultDict = {}\\n\\nfor doc in docs:\\n    (path, docname) = doc\\n    pathList = path.split(',')\\n    keyPath = []\\n    for i in range(0, len(pathList)):\\n        aPath = ','.join(pathList[:i+1])\\n        keyPath.append(keydict[aPath])\\n\\n    if docname not in resultDict :\\n        resultDict[docname] = []\\n    resultDict[docname].append(tuple(keyPath))\\n\\nprint resultDict", "id": "10616515", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 2190, 2485, 2610, 4429, 177, 1326, 4], "code_num": [2], "code": "html = \"<pre>\" + html + \"</pre>\"", "id": "33788047", "code_sizes": 1}, {"nl_num": [3, 3089, 1007, 451, 1400, 2402, 1442, 568, 2, 4220, 1400, 2, 3544, 2610, 1828, 4238, 2326, 4], "code_num": [2], "code": "mysets = [set([0, 1, 2]),\\n          set([3, 2]),\\n          set([4, 1]),\\n          set([5, 6]),\\n          set([7, 8])]\\n\\n# Require at least one set in the output.\\noutput = [mysets.pop(0)]\\n\\nwhile mysets:\\n  test = mysets.pop(0)\\n  for idx, other in enumerate(output):\\n    if test & other:\\n      output[idx] |= test\\n      break\\n  else:\\n    output.append(test)\\n\\n# output -> [set([0, 1, 2, 3, 4]), set([5, 6]), set([8, 7])]", "id": "9709311", "code_sizes": 1}, {"nl_num": [3, 1727, 1637, 3645, 3407, 3293, 1828, 3004, 4], "code_num": [2], "code": "with open('test.txt') as f:\\n    for i, line in enumerate(f):\\n        if i == 0 or i == 4:\\n            print(line)", "id": "27955366", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1378, 1828, 101, 2610, 2049, 338, 1074, 4], "code_num": [2], "code": "df['exr_ln_diff'] = df['exr_ln'].diff()", "id": "22277127", "code_sizes": 1}, {"nl_num": [3, 550, 1151, 2385, 4187, 2613, 549, 911, 528, 2604, 3777, 2326, 4], "code_num": [2], "code": "from PIL import Image\\ntrial_image = Image.open(file)\\ntrial_image.verify()", "id": "1368724", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 1242, 2617, 327, 551, 1828, 2176, 4092, 540, 388, 2610, 2101, 2326, 4], "code_num": [2], "code": "masked_array = np.ma.array (a, mask=np.isnan(a))\\ncmap = matplotlib.cm.jet\\ncmap.set_bad('w',1.)\\nax.imshow(masked_array, interpolation='nearest', cmap=cmap)", "id": "2578752", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4570, 990, 223, 1828, 560, 4], "code_num": [2], "code": "import cgi", "id": "3874477", "code_sizes": 1}, {"nl_num": [3, 2, 2964, 568, 85, 3494, 1563, 4], "code_num": [2], "code": "for row in range(7):\\n    window.grid_rowconfigure(row, weight=1)\\nfor col in range(3):\\n    window.grid_columnconfigure(col, weight=1)", "id": "31899502", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2878, 990, 568, 4756, 4251, 4219, 1757, 1007, 104, 314, 2610, 4], "code_num": [2], "code": "import os\\n\\nloc = os.getcwd()", "id": "21102091", "code_sizes": 1}, {"nl_num": [3, 2456, 1828, 4652, 4350, 2610, 188, 3293, 1400, 2583, 1678, 4], "code_num": [2], "code": "jsonDataaa = '{\"script\":\"#!/bin/bash \\\\n hello=$jj1 \\\\n echo $hello \\\\n echo $jj1 \\\\n echo $jj2 \\\\n for el1 in $jj3 \\\\n do \\\\n echo \\\\\"$el1\\\\\" \\\\n done \\\\n for el2 in $jj4 \\\\n do \\\\n echo \\\\\"$el2\\\\\" \\\\n done\"}'", "id": "20809820", "code_sizes": 1}, {"nl_num": [3, 2, 1828, 4238, 2610, 990, 4], "code_num": [2], "code": "def unflatten(l):\\n  def helper(l, start):\\n    if isinstance(l[start], int):\\n      ret = []\\n      start += 1\\n      for _ in range(l[start - 1]):\\n        sub, start = helper(l, start)\\n        ret.append(sub)\\n      return ret, start\\n    else:\\n      return l[start], start + 1\\n  return helper(l, 0)[0]\\n\\nprint unflatten([2, 'x', 'y'])\\nprint unflatten([ 3, \"a\", \"b\", 3, \"t\", \"y\", \"u\" ])\\nprint unflatten([ 4, \"a\", \"b\", 3, \"c\", \"d\", 2, \"x\", \"y\", 2, \"w\" , 3, \"t\", \"y\", \"u\" ])", "id": "27620855", "code_sizes": 1}, {"nl_num": [3, 550, 568, 746, 1750, 327, 540, 835, 2610, 3735, 3183, 2326, 4], "code_num": [2], "code": "name = fields.Char(\\n    string='Name',\\n    default=lambda self: self._get_default_name(),\\n)\\n\\n@api.model\\ndef _get_default_name(self):\\n    return \"test\"", "id": "31583328", "code_sizes": 1}, {"nl_num": [3, 188, 864, 3083, 4179, 2, 4121, 2107, 4], "code_num": [2], "code": "l = list(netaddr.IPNetwork('192.168.0.0/27').iter_hosts())", "id": "4525492", "code_sizes": 1}, {"nl_num": [3, 2, 2, 1712, 223, 2943, 3247, 2610, 990, 654, 4], "code_num": [2], "code": "return int(e)", "id": "5823677", "code_sizes": 1}, {"nl_num": [3, 188, 1223, 2, 540, 3083, 4572, 1398, 4], "code_num": [2], "code": "class User():\\n    def setup(self):\\n        self.listA = []                          # instance variable\\n        self.listB = []                          # instance variable\\n        for i in range(1):\\n            self.listA.append('a')\\n            self.listB.append('b')", "id": "11216783", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 2878, 336, 169, 265, 3293, 3055, 4585, 4179, 1828, 2587, 4018, 853, 1828, 425, 822, 1605, 1535, 840, 1971, 1297, 2101, 2326, 4], "code_num": [2], "code": "dtfix=[dt.datetime.strptime(x, \"%m/%d/%y %H:%M:%S\") for x in dtcode]", "id": "31280634", "code_sizes": 1}, {"nl_num": [3, 3860, 1442, 568, 1652, 3934, 169, 2, 338, 540, 188, 4], "code_num": [2], "code": "import os\\nimport numpy as np\\n\\n\\nclass Data(object):\\n    def __init__(self):\\n        super(Data, self).__init__()\\n        self.time = None\\n        self.pressure = None\\n\\n    def load(self, filename):\\n\\n        #Data Properties\\n        cols = 7\\n        lines_per_page = 59\\n        header_lines = 4\\n\\n        #Initialize Data\\n        data = np.empty([0, cols])\\n\\n        #Open the file\\n        with open(filename, 'r') as f:\\n\\n            #Traverse the file's lines\\n            for i, line in enumerate(f.readlines()):\\n\\n                #Check whether this is a header line\\n                if i % lines_per_page >= header_lines:\\n\\n                    #Split line into columns, convert to float, convert to numpy array, shape as a row\\n                    linedata = np.array(map(float, line.split())).reshape(1, cols)\\n\\n                    #Add the row to the bottom of the data\\n                    data = np.vstack([data, linedata])\\n\\n        self.time = data[:, 0]\\n        self.pressure = data[:, 1]", "id": "22992579", "code_sizes": 1}, {"nl_num": [3, 2361, 552, 1422, 527, 4691, 3369, 3087, 540, 655, 790, 4], "code_num": [2], "code": "from django.http import HttpResponse", "id": "24446830", "code_sizes": 1}, {"nl_num": [3, 2385, 2308, 4635, 3035, 3720, 223, 3163, 2, 4], "code_num": [2], "code": "settings.DEBUG_TOOLBAR_CONFIG['INSERT_BEFORE']", "id": "5684798", "code_sizes": 1}, {"nl_num": [3, 4328, 1828, 3004, 47, 1828, 1957, 667, 540, 990, 4], "code_num": [2], "code": "import random\\nrunning=True\\nwhile running:\\n    a=random.randint(1,1000)\\n    with open (\"lookin.txt\") as f:\\n        rl=f.readlines()\\n        for i in rl:\\n            if int(i)==a:\\n                print (\"Match found\")\\n                with open(\"found.txt\",\"w\") as t:\\n                    t.write(str(a))\\n                    running=False", "id": "27732782", "code_sizes": 1}, {"nl_num": [3, 1810, 1828, 4238, 4179, 2206, 540, 4409, 3963, 4], "code_num": [2], "code": "[[] for _ in range(4)]          # use xrange in python-2.x", "id": "2408452", "code_sizes": 1}, {"nl_num": [3, 2, 764, 4780, 4179, 938, 568, 1312, 938, 4], "code_num": [2], "code": "small_df['rating'] = rating_column.values", "id": "31589523", "code_sizes": 1}, {"nl_num": [3, 1708, 155, 4179, 1828, 990, 4350, 568, 4390, 3218, 2610, 1531, 2238, 931, 3528, 4], "code_num": [2], "code": "os.system('shutdown -h now')", "id": "5475186", "code_sizes": 1}, {"nl_num": [3, 550, 568, 746, 3518, 4179, 89, 2684, 2610, 508, 1422, 188, 2326, 4], "code_num": [2], "code": "form.find_control(\"foo\").readonly = False # allow changing .value of control foo \\nform.set_all_readonly(False) # allow changing the .value of all controls", "id": "5592088", "code_sizes": 1}, {"nl_num": [3, 4764, 549, 2, 2, 2, 3293, 1120, 568, 990, 4], "code_num": [2], "code": "import hashlib\\nimport brypt\\ndef myhash(word):\\n    salt = \"$2a$06$\" + hashlib.sha1(word).hexdigest()[0:22] + \"$\"\\n    return bcrypt.hashpw(word, salt)", "id": "17517475", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 1388, 1828, 1972, 3248, 2610, 1828, 495, 452, 2326, 4], "code_num": [2], "code": "end = min(x for x in (fileStr.find(key) for key in keys)\\n          if x > index)", "id": "30502558", "code_sizes": 1}, {"nl_num": [3, 1727, 1828, 2132, 1133, 113, 777, 4253, 2794, 2610, 1828, 990, 4238, 2326, 4], "code_num": [2], "code": "myElm3Dict = dict(myWebServiceData['elm3'][0])", "id": "18192823", "code_sizes": 1}, {"nl_num": [3, 1601, 3821, 3293, 3648, 540, 4182, 711, 2, 3143, 4], "code_num": [2], "code": "pattern = re.compile(r'([a-zA-Z]+)([0-9.]+)')", "id": "12993239", "code_sizes": 1}, {"nl_num": [3, 69, 568, 3715, 223, 769, 540, 265, 4], "code_num": [2], "code": "results.filter('created > ', now - datetime.timedelta(days=2))", "id": "3272723", "code_sizes": 1}, {"nl_num": [3, 188, 2082, 864, 1372, 2, 2, 2, 3293, 4790, 177, 1443, 3747, 3004, 4], "code_num": [2], "code": "data_per_channel = [data[offset::nchannels] for offset in range(nchannels)]", "id": "28604955", "code_sizes": 1}, {"nl_num": [3, 550, 568, 861, 1828, 3332, 2610, 2, 2326, 4], "code_num": [2], "code": "def state_query(doc):\\n    return TermQuery(field=\"STATE_ALPHA\", value=doc[\"state\"].lower())", "id": "23222374", "code_sizes": 1}, {"nl_num": [3, 3310, 3431, 540, 188, 2206, 4], "code_num": [2], "code": "LL= [['a', 2, 3, 4, 13], ['b', 6, 7, 8, 13], ['c', 10, 11, 12, 13]]\\n\\nfor row in LL:\\n    row[-1]= max(row[1: -1])\\n    row.append(14)\\nprint LL", "id": "4798288", "code_sizes": 1}, {"nl_num": [3, 3083, 3794, 4178, 4640, 4179, 2639, 4], "code_num": [2], "code": "points = [partial\\n          for partial in partials\\n          for point in partials[partial]\\n          if point[0] == time]", "id": "10127017", "code_sizes": 1}, {"nl_num": [3, 4140, 4238, 841, 1812, 4589, 3191, 3293, 4238, 4], "code_num": [2], "code": "added = [f for f in after if not f in before and '_status' not in f]", "id": "6773506", "code_sizes": 1}, {"nl_num": [3, 4328, 169, 453, 3844, 374, 1022, 2013, 3293, 1828, 3004, 4], "code_num": [2], "code": "buf = \"000000111111222222\"\\na = np.ndarray(len(buf), np.dtype('>i1'), buf)\\ne = np.zeros(len(buf) / 6, np.dtype('>i8'))\\nfor i in range(3):\\n    e.view(dtype='>i2')[i + 1::4] = a.view(dtype='>i2')[i::3]\\n[hex(x) for x in e]", "id": "11508010", "code_sizes": 1}, {"nl_num": [3, 38, 4059, 540, 2, 169, 3191, 8, 3293, 2710, 4], "code_num": [2], "code": "artistName = artistName.replace(' ', '-').lower()\\nif artistName.startswith('the-'):\\n    artistName = artistName[4:]\\nartistName = ''.join(e for e in artistName if e.isalnum() or e == '-')", "id": "5861361", "code_sizes": 1}, {"nl_num": [3, 23, 2637, 552, 1400, 3678, 4179, 3703, 869, 4178, 2, 552, 25, 1077, 3886, 338, 2604, 4015, 1297, 188, 2711, 4], "code_num": [2], "code": "string.rstrip()", "id": "25909775", "code_sizes": 1}, {"nl_num": [3, 69, 568, 2878, 1400, 291, 2823, 2610, 949, 897, 4], "code_num": [2], "code": "getattr(aa, i)", "id": "5242264", "code_sizes": 1}, {"nl_num": [3, 3384, 4238, 889, 2610, 990, 2326, 4], "code_num": [2], "code": "a = list(set(a))", "id": "14490243", "code_sizes": 1}, {"nl_num": [3, 2480, 69, 449, 3821, 2610, 817, 4], "code_num": [2], "code": "if len(cliente) == 14:\\n    print \"ID\"\\n\\n\\nelif len(cliente) == 18:\\n    print \"Registration\"\\n\\nelse:\\n    print \"You entered an incorrect option\"", "id": "34387841", "code_sizes": 1}, {"nl_num": [3, 188, 2889, 3506, 3467, 3715, 4], "code_num": [2], "code": "filterKeyword=['eat','cinnamon','fruit','pie','juice']\\nfor tweet in tweets:\\n    for key in filterKeyword:\\n        if key in tweet['text']:\\n            pass\\n        else:\\n            tweetsFiltered.append(tweet)\\n            tweetStr+=str(tweet['text'])\\nprint(tweetStr)", "id": "28545002", "code_sizes": 1}, {"nl_num": [3, 69, 568, 3222, 1828, 2133, 2727, 2610, 1828, 2, 4092, 1297, 990, 2, 2238, 2, 2571, 3528, 4], "code_num": [2], "code": "img1 = Image.new('RGBA', (255, 255)) # Use RGBA\\nimg2 = Image.new('RGBA', (255, 255)) # Use RGBA\\ndraw1 = ImageDraw.Draw(img1)\\ndraw2 = ImageDraw.Draw(img2)\\n\\ndraw1.polygon([(0, 0), (0, 255), (255, 255), (255, 0)], fill = (255,255,255,255))\\n\\ntransparence = 100 # Define transparency for the triangle.\\ndraw2.polygon([(1,1), (20, 100), (100,20)], fill = (200, 0, 0, transparence))\\n\\nimg = Image.alpha_composite(img1, img2)\\nimg.save(\"my_pic.png\", 'PNG')", "id": "25018134", "code_sizes": 1}, {"nl_num": [3, 3486, 1081, 3293, 1828, 2385, 4563, 2, 4178, 1295, 540, 3396, 3551, 2610, 2541, 1805, 4], "code_num": [2], "code": "message = EmailMessage(subject, body, from_email, bcc=recipient_list)\\nmessage.attach(FILENAME, mymodel.myfilefield.read())", "id": "21319187", "code_sizes": 1}, {"nl_num": [3, 4764, 549, 2, 568, 82, 540, 188, 169, 2571, 4], "code_num": [2], "code": "import codecs\\nnfoText = codecs.open('something.nfo', 'r', 'cp437').read()", "id": "6364226", "code_sizes": 1}, {"nl_num": [3, 3990, 1485, 3747, 2255, 540, 1485, 2, 4], "code_num": [2], "code": "from app import admin", "id": "33324125", "code_sizes": 1}, {"nl_num": [3, 2, 1828, 2711, 2610, 4243, 2464, 2401, 1268, 990, 2, 4], "code_num": [2], "code": "import resolve_ip\\nimport os\\nhost = resolve_ip.get_host_to_use() # you figure this part out\\nos.execlp('ssh', 'ssh', host)", "id": "22433913", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3332, 2898, 2790, 3293, 184, 2790, 2610, 717, 2822, 1857, 2238, 188, 3528, 3227, 1422, 832, 2326, 4], "code_num": [2], "code": "image_instance.key.parent().get()", "id": "10067624", "code_sizes": 1}, {"nl_num": [3, 3195, 1828, 1486, 2610, 1828, 2211, 1563, 2326, 4], "code_num": [2], "code": "import tempfile, os\\n\\nfrom pyx import *\\nimport Tkinter\\nimport Image, ImageTk\\n\\n# first we create some pyx graphics\\nc = canvas.canvas()\\nc.text(0, 0, \"Hello, world!\")\\nc.stroke(path.line(0, 0, 2, 0))\\n\\n# now we use pipeGS (ghostscript) to create a bitmap graphics\\nfd, fname = tempfile.mkstemp()\\nf = os.fdopen(fd, \"wb\")\\nf.close()\\nc.pipeGS(fname, device=\"pngalpha\", resolution=100)\\n# and load with PIL\\ni = Image.open(fname)\\ni.load()\\n# now we can already remove the temporary file\\nos.unlink(fname)\\n\\n# finally we can use this image in Tkinter\\nroot = Tkinter.Tk()\\nroot.geometry('%dx%d' % (i.size[0],i.size[1]))\\ntkpi = ImageTk.PhotoImage(i)\\nlabel_image = Tkinter.Label(root, image=tkpi)\\nlabel_image.place(x=0,y=0,width=i.size[0],height=i.size[1])\\nroot.mainloop()", "id": "7950137", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 2878, 1400, 216, 4129, 552, 3858, 4], "code_num": [2], "code": "app_identity.get_application_id()", "id": "5523281", "code_sizes": 1}, {"nl_num": [3, 3492, 3119, 1712, 2464, 326, 1637, 2473, 4179, 1280, 4], "code_num": [2], "code": "score, rid, title, artist = results[0]", "id": "32568164", "code_sizes": 1}, {"nl_num": [3, 1372, 1828, 2, 2710, 3293, 1828, 4238, 169, 3343, 2610, 188, 4], "code_num": [2], "code": "lst = ['2    19   2839475239874 hda']\\n\\n# Extracting the device part\\ndev = filter(lambda s: s[0] is 'h', lst[0].split())[0]\\n\\n# Inserting it\\ncmd = 'dd if=/dev/zero of=/dev/{0} bs=512 count=1'.format(dev)", "id": "17593160", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4570, 1530, 3047, 568, 3047, 1828, 262, 3518, 4], "code_num": [2], "code": "#!/usr/bin/env python\\n# -*- coding: utf-8 -*-\\n\\nimport re\\nvar = '\\[1984\\]'\\nwith open(\"test.log\")  as fp: # assuming your log file is test.log\\n    lines = fp.readlines()\\n    for line in lines:\\n        line = line.strip()\\n        if re.match(r'.*'+str(var)+'.*',line): # may be you want to add some more strict matching rules here.\\n            print line\\n\\n# vim:ai:et:sts=4:sw=4:", "id": "28037588", "code_sizes": 1}, {"nl_num": [3, 3611, 4585, 853, 2206, 3293, 3079, 540, 188, 4], "code_num": [2], "code": "col0 = []\\ncol1 = []\\ncol2 = []\\ncol3 = []\\ncol4 = []\\n\\nf = open('cdc_data.tsv', 'r')\\ncontents = f.read()\\nlines = contents.split('\\n')    # split file into seperate lines\\nfor line in lines:\\n    if (line[0:1] == '#'):   # filter out comments\\n       continue\\n\\n    split_line = line.split('\\t')   # split line into seperate words seperated by TAB\\n\\n    if (len(split_line) < 5): # drop any line that isn't 5 columns\\n       continue\\n\\n    # assign each column into a separate list\\n    col0.append(split_line[0])\\n    col1.append(split_line[1])\\n    col2.append(split_line[2])\\n    col3.append(split_line[3])\\n    col4.append(split_line[4])", "id": "27727117", "code_sizes": 1}, {"nl_num": [3, 2385, 188, 2, 3747, 69, 1352, 483, 2878, 1400, 2, 4633, 4179, 1828, 4078, 4254, 2326, 4], "code_num": [2], "code": "tot=PurchaseOrderLine.objects.aggregate(total=Sum('price'))['total'] \\nreturn HttpResponse(tot)", "id": "6480189", "code_sizes": 1}, {"nl_num": [3, 1503, 1400, 2481, 4179, 1782, 2610, 549, 2, 1486, 4], "code_num": [2], "code": "total = 0.0\\ncount = 0.0\\nfor s in G:        \\n    G1=ShortestPaths(G,s)\\n    total += sum([G1[s] for s in G1])\\n    count += (len(G1)-1)\\nreturn float(total / count) if count else None", "id": "22452279", "code_sizes": 1}, {"nl_num": [3, 3990, 4729, 177, 3994, 2947, 2610, 4418, 540, 4127, 3898, 3138, 4], "code_num": [2], "code": "ids = range(1,10)\\nplaceholders = ','.join('%s' for i in ids)\\nreq = \"SELECT * FROM t1 where id in ({})\".format(placeholders)\\ncursor.execute(req, ids)\\nres = cursor.fetchall()", "id": "32384458", "code_sizes": 1}, {"nl_num": [3, 1500, 2, 540, 2341, 1915, 4], "code_num": [2], "code": "self.ui.btn_lief.clicked.connect(self.addTab(lambda: Lieferschein(),'Lieferschein'))", "id": "25640854", "code_sizes": 1}, {"nl_num": [3, 2480, 2613, 4238, 1812, 1637, 2714, 1927, 4], "code_num": [2], "code": "A=[w,y,x,z]\\nall(p == x for p in A)", "id": "12222706", "code_sizes": 1}, {"nl_num": [3, 1574, 2583, 2610, 188, 4], "code_num": [2], "code": "import json\\nj = json.loads('{\"one\" : \"1\", \"two\" : \"2\", \"three\" : \"3\"}')\\nprint j['two']", "id": "7771011", "code_sizes": 1}, {"nl_num": [3, 188, 568, 2484, 338, 3293, 1828, 3004, 4], "code_num": [2], "code": "inFile = open(\"data.txt\")\\noutFile = open(\"result.txt\", \"w\")\\nbuffer = []\\nkeepCurrentSet = True\\nfor line in inFile:\\n    buffer.append(line)\\n    if line.startswith(\"----\"):\\n        #---- starts a new data set\\n        if keepCurrentSet:\\n            outFile.write(\"\".join(buffer))\\n        #now reset our state\\n        keepCurrentSet = False\\n        buffer = []\\n    elif line.startswith(\"extractme\"):\\n        keepCurrentSet = True\\ninFile.close()\\noutFile.close()", "id": "2474216", "code_sizes": 1}, {"nl_num": [3, 2, 2, 2610, 2, 2167, 188, 4], "code_num": [2], "code": "from autobahn.wamp.types import CallOptions\\n\\noptions = CallOptions(on_progress=None, timeout=120, disclose_me=True)\\nres = session.call(u'com.example.function', server_events, options=options)", "id": "32825839", "code_sizes": 1}, {"nl_num": [3, 2385, 1422, 188, 864, 1127, 568, 4340, 4465, 1594, 3293, 1400, 2385, 4688, 568, 1828, 2725, 4], "code_num": [2], "code": "html = t.render(Context({'matrix': matrix, 'passcount': passcount, 'count': count}))", "id": "31194534", "code_sizes": 1}, {"nl_num": [3, 1287, 862, 2549, 223, 2, 2610, 717, 2, 95, 2, 4], "code_num": [2], "code": "import gdata.contacts.data\\n\\nnew_contact = gdata.contacts.data.ContactEntry()\\n\\n# Set the contact's name.\\nnew_contact.name = gdata.data.Name(\\n    given_name=gdata.data.GivenName(text='Elizabeth'),\\n    family_name=gdata.data.FamilyName(text='Bennet'),\\n    full_name=gdata.data.FullName(text='Elizabeth Bennet')\\n)\\n\\n# Set user defined fields\\nnew_contact.user_defined_field.append(\\n    gdata.contacts.data.UserDefinedField(\\n        key='Field Name',\\n        value='Field Value'\\n    )\\n)", "id": "12003422", "code_sizes": 1}, {"nl_num": [3, 3001, 1442, 568, 2878, 927, 4179, 3073, 3518, 2610, 1825, 2394, 2464, 990, 4], "code_num": [2], "code": "import numpy\\nnplats = numpy.array(lats)\\nnplons = numpy.array(lons)\\n\\n# this part is 20x faster than using the built-in python functions\\nindex = numpy.argmin(nplats)\\n\\nprint nplats[index], nplons[index]", "id": "6044645", "code_sizes": 1}, {"nl_num": [3, 1401, 1422, 188, 3227, 2252, 1273, 4], "code_num": [2], "code": "def __gt__(self, other):\\n    \"\"\"Greater than ordering.\"\"\"\\n    if not isinstance(other, Key):\\n      return NotImplemented\\n    return self.__tuple() > other.__tuple()\\n\\ndef __tuple(self):\\n    \"\"\"Helper to return an orderable tuple.\"\"\"\\n    return (self.app(), self.namespace(), self.pairs())", "id": "15437320", "code_sizes": 1}, {"nl_num": [3, 4731, 1242, 2610, 360, 2536, 4], "code_num": [2], "code": "# level, time and conc are previously read from a file\\n\\nX,Y=[level,time]   \\nZ=conc.transpose() # Create the data to be plotted\\n\\ncax = matshow(Z, origin='lower', vmin=0, vmax=500)\\n    # I am telling all the Z values above 500 will have the same color\\n    # in the plot (if vmin or vmax are not given, they are taken from\\n    # the input???s minimum and maximum value respectively)\\ngrid(True)\\ncbar = colorbar(cax)", "id": "9579217", "code_sizes": 1}, {"nl_num": [3, 544, 4220, 1237, 250, 2, 1708, 990, 4], "code_num": [2], "code": "model = self.listView.model()\\nfor index in range(model.rowCount()):\\n    item = model.item(index)\\n    if item.isCheckable() and item.checkState() == QtCore.Qt.Unchecked:\\n        item.setCheckState(QtCore.Qt.Checked)", "id": "30075138", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4174, 1400, 900, 3506, 3004, 540, 3506, 338, 990, 4], "code_num": [2], "code": "with open(os.path.abspath(os.path.join(os.path.dirname(__file__),'static', 'result', file_name + '_issues.json')), 'r+') as nInfo:\\n  count = 0\\n  for data in file_data:\\n      count += 1\\n      if count == 1:\\n        nInfo.seek(-2, 2)\\n      if file_data.index(data) != len(file_data):\\n        nInfo.write(',')\\n      nInfo.write(json.dumps(data, default=lambda a: '[%s,%s]'(str(type(a)), a.pk)))\\n  nInfo.write(']')\\n  nInfo.write(' ')", "id": "30515424", "code_sizes": 1}, {"nl_num": [3, 19, 4072, 568, 2051, 568, 1563, 4178, 1828, 18, 2360, 4], "code_num": [2], "code": "window.set_fullscreen(fullscreen=True,screen=experiment_screen)", "id": "14732935", "code_sizes": 1}, {"nl_num": [3, 990, 1530, 568, 38, 4220, 4379, 3266, 540, 4059, 4], "code_num": [2], "code": "htmlspaced = re.sub(r\"\\r\\n\", \" \", html)", "id": "6523893", "code_sizes": 1}, {"nl_num": [3, 4237, 265, 1941, 335, 2610, 188, 4], "code_num": [2], "code": "def is_expired(self, check_date=None):\\n    _check_date = check_date or datetime.utcnow()\\n    return self.create_date + timedelta(days=15) < _check_date", "id": "765773", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2878, 593, 2, 4179, 1331, 841, 3293, 2, 1470, 4350, 2326, 4], "code_num": [2], "code": "widget = waitForObject(':Test Widget')\\n\\nmetaObject = widget.metaObject();\\nmethodCount =  metaObject.methodCount()\\n\\nfor x in range(0, methodCount):\\n    method = metaObject.method(x)\\n    test.log(method.signature())", "id": "20241397", "code_sizes": 1}, {"nl_num": [3, 4340, 1948, 1422, 2, 1170, 1422, 1593, 551, 1750, 399, 4], "code_num": [2], "code": "def execute(func=None, *args, **kwargs):\\n    if func:\\n        func(*args, **kwargs)", "id": "8818197", "code_sizes": 1}, {"nl_num": [3, 3397, 4238, 4179, 4253, 2804, 250, 1828, 4019, 4219, 4], "code_num": [2], "code": "import os\\nimport subprocess\\nfrom xml.sax.saxutils import quoteattr as xml_quoteattr\\n\\ndef DirAsLessXML(path):\\n\\n    result = '<dir type ={0} name={1} path={2}>\\n'.format(xml_quoteattr('dir'),xml_quoteattr(os.path.basename(path)),xml_quoteattr(path))\\n\\n    list = subprocess.Popen(['find', path,'-maxdepth', '1', '-type', 'd'],stdout=subprocess.PIPE, shell=False).communicate()[0]\\n\\n    output_list = list.splitlines()\\n    if len(output_list) == 1:\\n        result = '<dir type ={0} name={1} path={2}>\\n'.format(xml_quoteattr('leaf_dir'),xml_quoteattr(os.path.basename(path)),xml_quoteattr(path))\\n\\n    for item in output_list[1:]:\\n        result += '\\n'.join('  ' + line for line in DirAsLessXML(item).split('\\n'))\\n    result += '</dir>\\n'\\n    return result", "id": "12624324", "code_sizes": 1}, {"nl_num": [3, 2, 177, 2, 169, 69, 568, 1959, 568, 1400, 942, 869, 4], "code_num": [2], "code": "i = 1\\n\\nfile.write('' + linecache.getline('support_files/sub_page_top_links.txt', i) + '')\\ni += 1", "id": "19326570", "code_sizes": 1}, {"nl_num": [3, 2788, 2, 864, 2, 841, 994, 551, 2, 711, 3939, 2, 4], "code_num": [2], "code": "rot_output = object.rotation_euler.to_quaternion()", "id": "26163743", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 3881, 2613, 1828, 2710, 631, 540, 3055, 2940, 1773, 2326, 4], "code_num": [2], "code": "def derivatesFromAnglicism(word):\\n        return any([word.startswith('ge'+a) for a in listOfAnglicisms])", "id": "33890741", "code_sizes": 1}, {"nl_num": [3, 3990, 1828, 848, 568, 3119, 3505, 2464, 188, 4], "code_num": [2], "code": "import sys, glob, win32api, os\\n\\npdfLoc = sys.argv[1]\\ntry:\\n    copies = int(sys.argv[2])\\nexcept:\\n    copies = 1\\n\\nfor pdfname in glob.glob(os.path.join(pdfLoc, \"*.pdf\")):\\n    fullpath = os.path.join(pdfLoc, pdfname)\\n    for copy in range(copies):\\n        win32api.ShellExecute(0, \"print\", pdfname, None, \".\", 0)", "id": "10824983", "code_sizes": 1}, {"nl_num": [3, 188, 1398, 2583, 4238, 2019, 223, 1959, 4], "code_num": [2], "code": "data = json.dumps([columns for key, columns in crime.get_range()])", "id": "13399321", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2878, 338, 3293, 1828, 4238, 2321, 540, 990, 2326, 4], "code_num": [2], "code": "json_data = [] # your list with json objects (dicts)\\n\\nfor item in json_data:\\n    for data_item in item['data']:\\n        print data_item['name'], data_item['value']", "id": "30510352", "code_sizes": 1}, {"nl_num": [3, 188, 864, 550, 568, 822, 578, 694, 711, 977, 4], "code_num": [2], "code": "print \"number : {0:.0f}\".format(b)", "id": "28238375", "code_sizes": 1}, {"nl_num": [3, 2, 338, 540, 2587, 1422, 990, 4], "code_num": [2], "code": "import numpy as np\\nfrom scipy.optimize import curve_fit\\nimport matplotlib.pyplot as plt\\n\\ndef exponential_fit(x, a, b, c):\\n    return a*np.exp(-b*x) + c\\n\\nif __name__ == \"__main__\":\\n    x = np.array([0, 1, 2, 3, 4, 5])\\n    y = np.array([30, 50, 80, 160, 300, 580])\\n    fitting_parameters, covariance = curve_fit(exponential_fit, x, y)\\n    a, b, c = fitting_parameters\\n\\n    next_x = 6\\n    next_y = exponential_fit(next_x, a, b, c)\\n\\n    plt.plot(y)\\n    plt.plot(np.append(y, next_y), 'ro')\\n    plt.show()", "id": "19406049", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2616, 1828, 2406, 4018, 2610, 2587, 2464, 540, 889, 982, 3293, 2473, 4018, 2237, 4178, 1312, 2326, 4], "code_num": [2], "code": "C = A[B]", "id": "23978140", "code_sizes": 1}, {"nl_num": [3, 188, 346, 3747, 4325, 2756, 3747, 4133, 4190, 1828, 1170, 223, 2041, 568, 2, 4043, 2326, 4], "code_num": [2], "code": "def P2R(radii, angles):\\n    return radii * exp(1j*angles)\\n\\ndef R2P(x):\\n    return abs(x), angle(x)", "id": "16444719", "code_sizes": 1}, {"nl_num": [3, 839, 338, 853, 4037, 1977, 1708, 990, 4], "code_num": [2], "code": "\"INSERT INTO md_patentinfo (patentno, filed) VALUES ('%s',STR_TO_DATE('%s','%%M %%d,%%Y'))\" % ('123','Apr 14,2012')", "id": "10237466", "code_sizes": 1}, {"nl_num": [3, 664, 540, 2, 3821, 3346, 3799, 4], "code_num": [2], "code": "# Python 3\\nimport urllib.parse\\nurl = 'http://www.lingvo.ua' + urllib.parse.quote('/uk/Interpret/uk-ru/?????')\\n\\n# Python 2\\nimport urllib\\nurl = 'http://www.lingvo.ua' + urllib.quote(u'/uk/Interpret/uk-ru/?????'.encode('UTF-8'))", "id": "30260993", "code_sizes": 1}, {"nl_num": [3, 2385, 1548, 400, 2, 3030, 4], "code_num": [2], "code": "class Meta:\\n    unique_together = ('id', 'password', 'device_id')", "id": "33402824", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 3150, 1828, 1482, 262, 2610, 990, 2326, 4], "code_num": [2], "code": "#!/usr/bin/python\\n\\ndef travel():\\n    travel.totrate=0\\n    def guide():\\n        print\"Due to prefer a guide??\"\\n        print\"a guide inperson...rate=1000\"\\n        print\"maps,3g....rate=2000\"\\n        ch6=raw_input(\"ENter your choice\")\\n        if(ch6==\"person\") or (ch6==\"PERSON\"):\\n            increment = 1000\\n        elif(ch6==\"gadget\" or ch6==\"GADGET\"):\\n            increment = 2000\\n        else:\\n            print \"invalid\"\\n        travel.totrate += increment\\n        print travel.totrate\\n\\n    guide()\\ntravel()", "id": "27970413", "code_sizes": 1}, {"nl_num": [3, 188, 1708, 1007, 235, 540, 3793, 4], "code_num": [2], "code": "answer = bool(re.findall('(?:[A-Z]|[1-9])[^A-Z]',cad))", "id": "22460333", "code_sizes": 1}, {"nl_num": [3, 2, 589, 2610, 4119, 2548, 2610, 990, 1650, 169, 3494, 4], "code_num": [2], "code": "import sys    \\nfrom tkinter import *\\nimport time\\n\\ndef tick():\\n    global time1\\n    # get the current local time from the PC\\n    time2 = time.strftime('%H:%M:%S')\\n    # if time string has changed, update it\\n    if time2 != time1:\\n        time1 = time2\\n        clock.config(text=time2)\\n        # calls itself every 200 milliseconds\\n        # to update the time display as needed\\n        # could use >200 ms, but display gets jerky\\n    clock.after(200, tick)\\n\\nroot = Tk()\\ntime1 = ''\\n\\nstatus = Label(root, text=\"v1.0\", bd=1, relief=SUNKEN, anchor=W)\\nstatus.grid(row=0, column=0)\\n\\nclock = Label(root, font=('times', 20, 'bold'), bg='green')\\nclock.grid(row=0, column=1) \\n\\ntick()\\nroot.mainloop()", "id": "15689667", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3222, 1828, 338, 1074, 223, 3703, 2794, 2610, 1400, 2049, 177, 1661, 1170, 2326, 4], "code_num": [2], "code": "d = {}\\nfor name, group in data.groupby('hour'):\\n    d['group_' + str(name)] = group", "id": "30215677", "code_sizes": 1}, {"nl_num": [3, 226, 4563, 4178, 4563, 4102, 1987, 551, 4345, 2319, 4178, 365, 4552, 4], "code_num": [2], "code": "if u'signed_request' in self.request.POST:\\n    facebook.load_signed_request(self.request.get('signed_request'))", "id": "6594568", "code_sizes": 1}, {"nl_num": [3, 1820, 169, 3460, 4505, 1708, 582, 2610, 990, 4], "code_num": [2], "code": "def search(doc):\\n    print \"Visiting\", doc\\n    f = open(doc, 'r')\\n    for line in f:\\n        if line.strip():\\n            search(line.strip())", "id": "2083185", "code_sizes": 1}, {"nl_num": [3, 791, 1057, 568, 2441, 4], "code_num": [2], "code": "raise cherrypy.HTTPRedirect(\"/auth/login\")", "id": "12030195", "code_sizes": 1}, {"nl_num": [3, 3011, 2710, 2019, 1887, 2711, 2, 4], "code_num": [2], "code": "q = \"D\\:/imagesequence/thumbnail.jpg\"\\ntask = \"movie= '%s'[watermark]; [in][watermark] overlay=(main_w-overlay_w)/2:(main_h-overlay_h)/3 [out]\" % q\\n\\nc = subprocess.check_call([\"ffmpeg\", \"-i\", \"D:/imagesequence/background222.jpg\", \"-vf\", task, \"D:/imagesequence/fwtm106.jpg\"],shell=True)", "id": "11356665", "code_sizes": 1}, {"nl_num": [3, 4002, 2, 568, 650, 1708, 2385, 4], "code_num": [2], "code": "if request.method == 'POST':\\n    from django.core.files.uploadedfile import SimpleUploadedFile\\n    object = Model.objects.get(pk=1)\\n    file_contents = SimpleUploadedFile(\"%s.mp3\" % \"myfile\", request.raw_post_data, \"audio/mp3\")\\n    object.audio.save(\"%s.mp3\" % \"myfile\", upfile, True)", "id": "6232089", "code_sizes": 1}, {"nl_num": [3, 66, 549, 4018, 4179, 2639, 2610, 1828, 4523, 4347, 4714, 4347, 4], "code_num": [2], "code": "columns = dict()\\ncolumnsTitles = []\\nrows = dict()\\ncolIdxCounter = 1 # Start with 1 because the first col are ids \\nrowIdxCounter = 1 # Start with 1 because the columns titles\\n\\nfor i in dataset:\\n    if not rows.has_key(i[0]):\\n        rows[i[0]] = rowIdxCounter\\n        rowIdxCounter += 1\\n    if not columns.has_key(i[1]):\\n        columns[i[1]] = colIdxCounter\\n        colIdxCounter += 1\\n        columnsTitles.append(i[1])\\n\\ntoRet = [columnsTitles]\\nfor i in range(len(rows)):\\n    toAppend = []\\n    for j in range(colIdxCounter):\\n        toAppend.append(\"\")\\n    toRet.append(toAppend)\\n\\nfor i in dataset:\\n    toRet[rows[i[0]]][columns[i[1]]] = i[2]\\n\\nfor i in toRet:\\n    print i", "id": "980000", "code_sizes": 1}, {"nl_num": [3, 69, 568, 2990, 262, 3372, 2610, 1400, 733, 897, 4179, 990, 4], "code_num": [2], "code": "\"\"\"\\nyour HTML stuff here\\n\"\"\" % (hostname, change, pwd, changeref, changeref)", "id": "14113713", "code_sizes": 1}, {"nl_num": [3, 609, 1828, 1597, 3293, 990, 2710, 4], "code_num": [2, 2, 2], "code": "re.search(r\"message\\s+=\\s+'([^']*)'\",text_string,re.M).group(1)", "id": "25801761", "code_sizes": 3}, {"nl_num": [3, 2385, 864, 3306, 3188, 4268, 2237, 4178, 2303, 1976, 769, 4], "code_num": [2], "code": "truck = forms.ModelChoiceField(\\n    label='Trucks',\\n    empty_label=None,  # No empty label\\n    required=False,\\n)", "id": "31630261", "code_sizes": 1}, {"nl_num": [3, 4347, 696, 4718, 223, 1182, 2238, 3528, 540, 1867, 2845, 864, 1007, 2270, 1007, 4347, 4], "code_num": [2], "code": "person = UserProfile.objects.get(user__username=username)", "id": "27029198", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3881, 2, 223, 1400, 771, 4684, 2693, 1297, 1910, 2326, 4], "code_num": [2], "code": "name = frozenset(string1.split(','))\\n\\nif name.issubset(string.split(',')):\\n    print 'yes'\\nelse:\\n    print 'no'", "id": "25050504", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4570, 568, 1856, 4265, 2610, 2473, 2326, 188, 4], "code_num": [2], "code": "if event.type == pygame.KEYDOWN:\\n    if event.key == pygame.K_2:\\n        highlight = pygame.image.load('Highlightmenu.png')\\n        highlight = pygame.transform.scale(highlight, (270, 110))\\n        window.blit(highlight,(316, 300))\\n        pygame.display.flip()\\n        title()\\n    elif event.key == pygame.K_e:\\n        playerNames()\\n        print(\"Loading the player names menu...\")", "id": "21352497", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 4536, 1828, 4399, 4350, 2610, 188, 2326, 4], "code_num": [2], "code": "import subprocess\\n\\ndef php(script_path):\\n    p = subprocess.Popen(['php', script_path], stdout=subprocess.PIPE)\\n    result = p.communicate()[0]\\n    return result\\n\\n# YOUR CODE BELOW:\\npage_html = \"<h1>News and Updates</h1>\"\\nnews_script_output = php(\"news-generator.php\") \\nprint page_html + news_script_output", "id": "1060436", "code_sizes": 1}, {"nl_num": [3, 697, 2, 2238, 3528, 568, 2692, 943, 1041, 540, 3891, 4], "code_num": [2], "code": "db.collection.ensure_index([(\"x\" , pymongo.ASCENDING), (\"unique\" , True), (\"dropDups\" , True)])", "id": "23403190", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 2878, 568, 4756, 2613, 1828, 2951, 2604, 3513, 2610, 990, 2, 3912, 2326, 4], "code_num": [2], "code": "print \"FINISHED\"", "id": "32178262", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3881, 2613, 4220, 338, 4403, 1373, 540, 1828, 3199, 3916, 2610, 188, 4], "code_num": [2], "code": "socket.recv()", "id": "23732930", "code_sizes": 1}, {"nl_num": [3, 2, 1902, 327, 2610, 954, 1242, 1422, 3767, 4], "code_num": [2], "code": "x = np.arange(10)\\ny = np.arange(10)\\n\\nalphas = np.linspace(0.1, 1, 10)\\nrgba_colors = np.zeros((10,4))\\n# for red the first column needs to be one\\nrgba_colors[:,0] = 1.0\\n# the fourth column needs to be your alphas\\nrgba_colors[:, 3] = alphas\\n\\nplt.scatter(x, y, color=rgba_colors)", "id": "24767355", "code_sizes": 1}, {"nl_num": [3, 2385, 864, 4720, 425, 3008, 1297, 4790, 1637, 4790, 1400, 1580, 3518, 2326, 4], "code_num": [2], "code": "date_list = Note.objects.all().dates('created', 'year')\\n\\nfor years in date_list:\\n    Note.objects.filter(created__year = years.year)", "id": "2997433", "code_sizes": 1}, {"nl_num": [3, 990, 3119, 1125, 1712, 2604, 1841, 3282, 3886, 3496, 1828, 1285, 3293, 2, 4], "code_num": [2], "code": "import sys\\nsys.stdout.flush()", "id": "16685253", "code_sizes": 1}, {"nl_num": [3, 2, 4585, 1268, 4177, 2419, 2610, 188, 4], "code_num": [2], "code": "pdb_data = []\\nfor line in open('input.txt'):\\n    line = line.split()\\n    if len(line)<8:\\n        pre = line[0:2]\\n        post = line[3:]\\n        col3 = line[2][:-4]\\n        col4 = line[2][-4:]\\n        new_line = pre+[col3,col4]+post\\n        pdb_data.append(new_line)\\n    else:\\n        pdb_data.append(line)", "id": "17769009", "code_sizes": 1}, {"nl_num": [3, 69, 568, 4747, 1400, 927, 4179, 1566, 3738, 1039, 223, 3703, 4780, 2610, 2587, 2326, 4], "code_num": [2], "code": "[np.flatnonzero(row) for row in coefs1.T]", "id": "25250068", "code_sizes": 1}, {"nl_num": [3, 2, 4179, 3821, 2610, 3192, 2610, 3055, 1773, 4], "code_num": [2], "code": "count = 0\\n\\nfor letter in set(string1):\\n  count += string2.count(letter)\\n\\nprint(count)", "id": "9732515", "code_sizes": 1}, {"nl_num": [3, 2, 864, 3747, 2153, 3446, 327, 2610, 2776, 670, 4], "code_num": [2], "code": "from mrjob.job import MRJob\\nimport sys\\nclass MRWordCounter(MRJob):\\n    def mapper(self, key, line):\\n        sys.stderr.write(\"MAPPER INPUT: ({0},{1})\\n\".format(key,line))\\n        for word in line.split():\\n            yield word, 1\\n\\n    def reducer(self, word, occurrences):\\n        occurencesList= list(occurrences)\\n        sys.stderr.write(\"REDUCER INPUT: ({0},{1})\\n\".format(word,occurencesList))\\n        yield word, sum(occurencesList)\\n\\nif __name__ == '__main__':\\n    MRWordCounter.run()", "id": "14501647", "code_sizes": 1}, {"nl_num": [3, 1372, 2, 327, 3293, 3506, 3004, 4], "code_num": [2], "code": "import json\\ndef my_main(ifile_name, ofile_name):\\n  ifile = open(ifile_name, 'r')\\n  ofile = open(ofile_name, \"w\")\\n  json_decode=json.load(ifile)\\n  result = []\\n  for i in json_decode['Culture']['Movies']:\\n      for k in json_decode['Culture']['Movies'][i]:\\n          if json_decode['Culture']['Movies'][i][k]['Oscars'] == 0  and  json_decode['Culture']['Movies'][i][k]['Genre'] == \"Comedy\":\\n            data = json_decode['Culture']['Movies'][i][k]['Actors']\\n            print data\\n            result.append(data)\\n\\nfor j in result:\\n    ofile.write(str(j)+str('\\n'))\\n\\nmy_main('movies.json','o.txt')", "id": "34104325", "code_sizes": 1}, {"nl_num": [3, 2, 2238, 3528, 3747, 69, 568, 2, 2725, 3216, 4], "code_num": [2], "code": "app.jinja_env.globals.update(global_key1=global_value1,\\n                             global_key2=global_value2,\\n                             global_key3=global_value3)", "id": "19501628", "code_sizes": 1}, {"nl_num": [3, 1615, 3805, 2, 2610, 759, 3293, 990, 2969, 2, 2464, 2, 4], "code_num": [2], "code": "com.myapp.add2client", "id": "24780681", "code_sizes": 1}, {"nl_num": [3, 2, 4179, 472, 2710, 1422, 472, 338, 2610, 990, 4], "code_num": [2], "code": "import binascii\\ndata = '0110100001100101011011000110110001101111' # 'hello' encoded in UTF-8\\nint_arr = [int(data[i:i+8], 2) for i in range(0, len(data), 8)] # split the data into 8-bit chunks\\nprint(hex(binascii.crc32(bytes(int_arr))))\\n\\n# output = 0x3610a686", "id": "30575339", "code_sizes": 1}, {"nl_num": [3, 69, 568, 1875, 1828, 4238, 4179, 327, 568, 1828, 990, 2, 262, 841, 2326, 4], "code_num": [2], "code": "netdata.variables['x_data'][:]=newlist[:]", "id": "11750552", "code_sizes": 1}, {"nl_num": [3, 2, 169, 1573, 540, 2, 2610, 836, 4], "code_num": [2], "code": "def OnDropFiles(self, x, y, filenames):\\n    mouse = wx.GetMouseState()\\n    if mouse.CmdDown():\\n        self.frame.paths += filenames\\n    else:\\n        self.frame.paths = filenames\\n    self.frame.draw_figure()", "id": "4832407", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 2291, 4575, 949, 2746, 3288, 425, 2326, 4], "code_num": [2], "code": "sorted(d.values(), key=lambda item: item[\"l\"][\"created_on\"])", "id": "7559712", "code_sizes": 1}, {"nl_num": [3, 188, 4572, 4189, 864, 550, 568, 1352, 511, 4587, 4], "code_num": [2], "code": "df['degree'] = df['degree'].apply(lambda x: x + 360 if x < 0 else x)", "id": "31872659", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 1400, 2144, 2464, 3167, 2858, 2464, 2565, 1442, 568, 2878, 2, 4], "code_num": [2], "code": "consonants = 'bcdfghjklmnpqrstvwxyz'", "id": "29467755", "code_sizes": 1}, {"nl_num": [3, 69, 568, 4570, 1447, 223, 3898, 2326, 4], "code_num": [2], "code": "for model, category in self.current_session.query(Model, Category).join(Category).distinct():\\n    print model.category_id, category.name", "id": "4874043", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 2878, 1400, 2238, 1927, 2464, 3256, 3528, 327, 4179, 1400, 869, 1605, 2604, 2, 1297, 1828, 754, 1242, 2238, 2101, 3528, 2326, 4], "code_num": [2], "code": "cs.collections[0].get_paths()", "id": "1560424", "code_sizes": 1}, {"nl_num": [3, 188, 69, 568, 1704, 764, 2582, 3407, 4179, 1828, 177, 41, 3004, 2464, 169, 1869, 2929, 1237, 853, 1828, 4238, 2326, 4], "code_num": [2], "code": "with open('list.txt') as f:\\n    lines = f.readlines()\\nline_list = lines[-3:]", "id": "21358509", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 2092, 1828, 2590, 1708, 990, 1650, 2326, 4], "code_num": [2], "code": "from urllib.request import urlopen\\nhtml = urlopen(\"http://www.stackoverflow.com/\").read().decode('utf-8')\\nprint(html)", "id": "4485113", "code_sizes": 1}, {"nl_num": [3, 1592, 777, 3004, 1708, 2, 3293, 2728, 177, 2, 177, 4084, 209, 2, 2251, 2326, 4], "code_num": [2], "code": "lxml.iterparse", "id": "28437257", "code_sizes": 1}, {"nl_num": [3, 1897, 1400, 188, 1848, 4347, 2, 4347, 841, 2464, 69, 1352, 1757, 906, 1828, 1942, 711, 1828, 3518, 2326, 4], "code_num": [2], "code": "subprocess.call(['curl', '-i', '-H', '\"emptyheader\"', '\"http://somewhere:5000/somewhere\"'])", "id": "15165706", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2, 769, 3293, 2, 2610, 2385, 2326, 4], "code_num": [2], "code": "delete()", "id": "19182001", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 2, 2038, 1007, 1711, 2729, 4178, 4171, 1861, 4097, 3747, 3277, 4], "code_num": [2], "code": "stdint.h", "id": "14094824", "code_sizes": 1}, {"nl_num": [3, 4133, 4190, 4042, 1566, 3747, 4317, 897, 4633, 4190, 1605, 4250, 3222, 2, 2, 4179, 1828, 3107, 3587, 2326, 4], "code_num": [2], "code": "splmake/spleval", "id": "11018433", "code_sizes": 1}, {"nl_num": [3, 2, 4178, 517, 2610, 3148, 2047, 4], "code_num": [2], "code": "def closeEvent(self, event):\\n\\n    quit_msg = \"Are you sure you want to exit the program?\"\\n    reply = QtGui.QMessageBox.question(self, 'Message', \\n                     quit_msg, QtGui.QMessageBox.Yes, QtGui.QMessageBox.No)\\n\\n    if reply == QtGui.QMessageBox.Yes:\\n        event.accept()\\n    else:\\n        event.ignore()", "id": "1414781", "code_sizes": 1}, {"nl_num": [3, 3990, 1828, 1959, 568, 3068, 1773, 2610, 188, 4], "code_num": [2], "code": "NAME_LIST = 4\\n\\nfirst_name = \"\"\\nlast_name  = \"\"\\n\\nfor nameCount in range(NAME_LIST):\\n    name = raw_input('Please enter a name: ').title()\\n    first_name = first_name or name\\n    first_name = min(first_name, name)\\n    last_name  = max(last_name, name)\\n\\nprint(\"First: %s\" % first_name)\\nprint(\"Last: %s\" % last_name)", "id": "23900139", "code_sizes": 1}, {"nl_num": [3, 2482, 4619, 2, 4666, 2076, 2583, 4], "code_num": [2], "code": "t = threading.Thread(target=some_function, args=[argument])\\nt.setDaemon(False)\\nt.start()", "id": "18430692", "code_sizes": 1}, {"nl_num": [3, 3324, 540, 1374, 1007, 2878, 2610, 188, 4], "code_num": [2], "code": "urls = []\\nwith open('filename.csv', 'rb') as f:\\n    read = f.readlines()\\n    urls = [row.split(\",\")[34] for row in read[1:]]", "id": "23862404", "code_sizes": 1}, {"nl_num": [3, 1737, 327, 4179, 802, 2610, 754, 1242, 4], "code_num": [2], "code": "CS = pl.contour(x1,y1,kde)\\nlevels = CS.levels", "id": "19865892", "code_sizes": 1}, {"nl_num": [3, 2, 1699, 2454, 4182, 3461, 1760, 3293, 2535, 4124, 4741, 4], "code_num": [2], "code": "class EmployeeResource(ModelResource):\\n    def dehydrate(self, bundle):\\n        t = bundle.request.GET.get('t')\\n        if t:\\n            bundle.data['custom_field'] = bundle.obj.custom_field\\n        return bundle\\n\\n    class Meta:\\n        fields = common_fields", "id": "16618868", "code_sizes": 1}, {"nl_num": [3, 188, 1574, 2, 2, 4], "code_num": [2], "code": "packfmt = '>issiibBB'\\noutput=struct.unpack(packfmt,response)", "id": "9603036", "code_sizes": 1}, {"nl_num": [3, 3397, 1400, 2828, 889, 3288, 3909, 2610, 549, 4018, 2610, 188, 2326, 4], "code_num": [2], "code": "t = tuple(x[0] for x in s)", "id": "2054416", "code_sizes": 1}, {"nl_num": [3, 2495, 1828, 1482, 4640, 3293, 2019, 1828, 1170, 4], "code_num": [2], "code": "def login():    \\n    with requests.Session() as c:\\n\\n        c.get(page['login'])\\n\\n        login_data = dict(email = USERNAME, password = PASSWORD, submit = 'Login', cookie = 'yes')\\n        c.post(url, data = login_data, headers = {'Referer': page['index']})\\n        # this is the offending line\\n        page_ret = c.get(page['portfolio'])\\n\\n        print page_ret.content", "id": "24536831", "code_sizes": 1}, {"nl_num": [3, 3860, 1943, 568, 1945, 2794, 2, 568, 1828, 1095, 2610, 4189, 4], "code_num": [2], "code": "df['TotalCount'] = df.groupby('Group')['Count'].transform(sum)", "id": "30949020", "code_sizes": 1}, {"nl_num": [3, 3531, 2803, 2551, 1227, 2, 4], "code_num": [2, 2], "code": "import unicodedata\\nimport re\\n\\nsplitter = re.compile(r'[\\s|\\-|\\)|\\(|/]+')\\n\\ndef remove_accents(text):\\n    nkfd_form = unicodedata.normalize('NFKD', unicode(text))\\n    return u\"\".join([c for c in nkfd_form if not unicodedata.combining(c)])\\n\\ndef get_words(text):    \\n    return [s.lower() for s in splitter.split(remove_accents(text)) if s!= '']\\n\\ndef get_unique_words(text):\\n    word_set = set(get_words(text))\\n    return word_set\\n\\ndef get_starts(text):\\n    word_set = get_unique_words(text)\\n    starts = set()\\n    for word in word_set:\\n        for i in range(len(word)):\\n            starts.add(word[:i+1])\\n    return sorted(starts)", "id": "2078738", "code_sizes": 2}, {"nl_num": [3, 550, 1535, 483, 3202, 1828, 2710, 169, 1828, 694, 2610, 188, 2326, 4], "code_num": [2], "code": "\"asd%d\" % 9\\n\"asd\" + str(9)", "id": "6981495", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 2878, 1400, 771, 3467, 4179, 549, 1039, 1708, 494, 2326, 4], "code_num": [2], "code": "def element_to_string(element):\\n    s = element.text or \"\"\\n    for sub_element in element:\\n        s += etree.tostring(sub_element)\\n    s += element.tail\\n    return s", "id": "380603", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2878, 1789, 551, 1828, 2710, 4], "code_num": [2], "code": "print dict(r.cookies) # show all cookies received. OR\\nprint requests.utils.dict_from_cookiejar(r.cookies) # same as above\\n\\nprint r.cookies['x'] # to get cookie x", "id": "32572691", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3348, 2344, 4640, 1237, 4179, 1828, 4640, 2610, 188, 4], "code_num": [2], "code": "mydic['q4a1_0']['choices']", "id": "15964900", "code_sizes": 1}, {"nl_num": [3, 2, 1897, 2385, 864, 863, 4058, 3747, 863, 492, 1205, 3594, 1569, 1585, 4537, 4], "code_num": [2], "code": "profile = profile_form.save(commit=False)", "id": "27452780", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 2616, 1828, 4805, 1732, 3493, 540, 1645, 2326, 4], "code_num": [2], "code": "from webapp2_extras.routes import RedirectRoute\\n\\nroute = RedirectRoute('/feed', handler=feed, strict_slash=True)", "id": "8834332", "code_sizes": 1}, {"nl_num": [3, 3763, 1442, 568, 1704, 2, 3004, 853, 4189, 938, 4], "code_num": [2], "code": "pd.read_csv", "id": "33813815", "code_sizes": 1}, {"nl_num": [3, 188, 1650, 3557, 223, 3012, 769, 4], "code_num": [2], "code": "s = xmlrpc.client.ServerProxy('http://localhost:8000')", "id": "1609749", "code_sizes": 1}, {"nl_num": [3, 2456, 4652, 4227, 2610, 188, 711, 326, 568, 445, 4], "code_num": [2], "code": "p = subprocess.Popen(command, shell=True, stdin=subprocess.PIPE, stderr=subprocess.STDOUT, stdout=subprocess.PIPE, close_fds=True)\\nout,err = p.communicate()", "id": "18214057", "code_sizes": 1}, {"nl_num": [3, 4502, 879, 2610, 1956, 1959, 1642, 840, 879, 4], "code_num": [2], "code": "h = 0\\nphase = 0\\nwhile True:\\n    try:\\n        h = int(raw_input(\"Please Enter your altitude in metres > \"))\\n        if h > 0 and h < 11000:\\n            phase = 'Troposphere'\\n            break\\n    except ValueError:\\n            print 'Your entered value contained letters or punctuation. Please enter a numerical value.'", "id": "28787682", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1519, 4238, 1901, 2610, 1828, 1959, 4], "code_num": [2], "code": "url = 'http://www.nasa.gov/rss/dyn/lg_image_of_the_day.rss'\\ndescribe_text = urlopen(url).read()\\ndescription = findall('<description>(.+)</description>',describe_text)\\nglobal myVariable\\nmyVariable = 1\\nx = description[myVariable]\\n\\n\\n#Button Functions\\ndef next_button_description():\\n   global myVariable\\n   myVariable = myVariable + 1\\n   x = description[myVariable]\\n   return x", "id": "30301033", "code_sizes": 1}, {"nl_num": [3, 2, 1422, 1096, 2624, 568, 772, 82, 2974, 540, 2496, 4], "code_num": [2], "code": "try:\\n   import SDL_image\\n   print \"Loaded SDL_image\"\\nexcept:\\n   print \"Failed to import SDL_image\"\\n\\ntry:\\n   import libpng\\n   print \"Loaded libpng\"\\nexcept:\\n   print \"Failed to import libpng\"", "id": "2883237", "code_sizes": 1}, {"nl_num": [3, 2, 957, 4179, 338, 2610, 549, 4115, 2, 2610, 990, 4], "code_num": [2], "code": "from bs4 import BeautifulSoup\\nsoup = BeautifulSoup(body)\\nfor div in soup.find_all(class_='highlight-nginx'):\\n    div.pre.string = my_function(div.pre.string)", "id": "17555761", "code_sizes": 1}, {"nl_num": [3, 2561, 1828, 1170, 3630, 148, 3604, 3747, 188, 4], "code_num": [2], "code": "def my_timer(*args):\\n    return True# do ur work here, but not for long\\n\\ngtk.timeout_add(60*1000, my_timer) # call every min", "id": "1052574", "code_sizes": 1}, {"nl_num": [3, 1503, 2577, 3813, 1828, 3843, 2710, 4], "code_num": [2], "code": "from BeautifulSoup import BeautifulSoup\\nsoup = BeautifulSoup(html_string)\\n# To find just 'Uge##' or 'uge##', as specified in the question:\\nurls = [el[\"href\"] for el in soup.findAll(\"a\", href=re.compile(\"[Uu]ge\\d+\"))]\\n# To find without regard to case at all:\\nurls = [el[\"href\"] for el in soup.findAll(\"a\", href=re.compile(\"(?i)uge\\d+\"))]", "id": "13140136", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 4073, 1295, 1007, 451, 3912, 2326, 4], "code_num": [2], "code": "on_heroku = False\\nif 'YOUR_ENV_VAR' in os.environ:\\n  on_heroku = True", "id": "9383450", "code_sizes": 1}, {"nl_num": [3, 483, 1007, 827, 681, 568, 2426, 1400, 4171, 1075, 1227, 1227, 1170, 2, 3293, 188, 3747, 1535, 949, 840, 3133, 2326, 4], "code_num": [2], "code": "import ctypes\\n\\nwinHttp = ctypes.windll.LoadLibrary(\"Winhttp.dll\")\\n\\nWINHTTP_ACCESS_TYPE_DEFAULT_PROXY=0\\nWINHTTP_NO_PROXY_NAME=WINHTTP_NO_PROXY_BYPASS=0\\nWINHTTP_FLAG_ASYNC=0x10000000\\n# http://msdn.microsoft.com/en-us/library/aa384098(VS.85).aspx\\nHINTERNET = winHttp.WinHttpOpen(\"PyWin32\", WINHTTP_ACCESS_TYPE_DEFAULT_PROXY, WINHTTP_NO_PROXY_NAME, WINHTTP_NO_PROXY_BYPASS, WINHTTP_FLAG_ASYNC)\\n\\nprint HINTERNET", "id": "1078939", "code_sizes": 1}, {"nl_num": [3, 2696, 864, 3895, 511, 4091, 4179, 449, 3079, 4505, 2610, 990, 4], "code_num": [2], "code": "import glob,csv\\nfiles = glob.glob(\"*.txt\")\\nfo = open(\"combined.csv\",\"a\")\\nwriter = csv.writer(fo,delimiter=' ')\\n\\ndatum = {}\\n\\nfor f in files:\\n    with open(f) as fi:\\n        for row in csv.reader(fi,delimiter=' '):\\n            crow = row[0],row[4]\\n            if crow in datum:\\n                if float(datum[crow][-4]) < float(row[3]):\\n                    datum[crow] = row[0:]\\n            else:\\n                datum[crow] = row[0:]", "id": "17252224", "code_sizes": 1}, {"nl_num": [3, 1817, 4179, 4238, 169, 2710, 4], "code_num": [2], "code": "day_dictionary={'mon':0,'tues':0,'wed':0,'thurs':0,'fri':0,'sat':0,'sun':0}\\nfor i in random_day_list:\\n     for position, day in enumerate(i):\\n         if day in day_dictionary:\\n             day_dictionary[day] += (6 - position)", "id": "13610348", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 3178, 4667, 2795, 1400, 2611, 2793, 2604, 2610, 540, 990, 2326, 4], "code_num": [2], "code": "from Xlib import display\\ndata = display.Display().screen().root.query_pointer()._data\\nlocationtuple = (data[\"root_x\"], data[\"root_y\"])", "id": "29569823", "code_sizes": 1}, {"nl_num": [3, 1011, 568, 4469, 338, 3293, 3958, 4505, 1708, 4429, 4], "code_num": [2], "code": "if path.endswith(\".html\"):\\n    htmlfile = open(dirpath)\\n    for link in BeautifulSoup(htmlfile,parse_only=SoupStrainer(target=\"_blank\")):\\n        print link", "id": "17574119", "code_sizes": 1}, {"nl_num": [3, 550, 568, 703, 242, 2684, 4548, 223, 1400, 955, 568, 4314, 4], "code_num": [2], "code": "sudo(\"python test.py  2>/dev/null >/dev/null &\")", "id": "16934172", "code_sizes": 1}, {"nl_num": [3, 3460, 1828, 262, 169, 2048, 2605, 540, 1828, 869, 3293, 1828, 3004, 2610, 1828, 1959, 4], "code_num": [2], "code": "for line in path:\\n    print str(host) + str(line)", "id": "32131730", "code_sizes": 1}, {"nl_num": [3, 188, 4189, 864, 938, 3715, 1243, 327, 4], "code_num": [2], "code": "for cols in data.columns.tolist()[1:]:\\n    data = data.ix[data[cols] > 0]", "id": "24214941", "code_sizes": 1}, {"nl_num": [3, 4462, 655, 4139, 2751, 1828, 2, 1537, 3293, 1605, 2, 4], "code_num": [2], "code": "def __init__(self, *args, **kwargs):\\n    super(YourModel, self).__init__(*args, **kwargs)\\n    self.impact = self.user.get_profile().someIntField", "id": "10071882", "code_sizes": 1}, {"nl_num": [3, 550, 568, 611, 1828, 4219, 169, 4356, 1400, 816, 1708, 3494, 2610, 188, 4], "code_num": [2], "code": "tkFileDialog.askdirectory", "id": "11295917", "code_sizes": 1}, {"nl_num": [3, 2, 169, 825, 338, 3293, 1828, 3467, 3004, 4], "code_num": [2], "code": "with open(\"names.txt\") as f:\\n    # splitlines of the content\\n    content = f.read().splitlines()\\n    for line in content:\\n        # split at spaces\\n        splittedLine = line.split(\" \")\\n\\n        # get the first element which is the name\\n        name = splittedLine[0]\\n\\n        # get the all the elements except the first\\n        scores = splittedLine[1:]\\n\\n        # get the last element of the sorted list which is the highscore\\n        highscore = sorted(scores)[-1]\\n        print(\"{} : {}\".format(name, highscore))", "id": "33746400", "code_sizes": 1}, {"nl_num": [3, 2, 3433, 3004, 2610, 990, 223, 1556, 4], "code_num": [2], "code": "import csv\\nDELIMITER = ','\\n\\nwith open('data.csv', 'wb') as csvfile:\\n    writer = csv.writer(csvfile, delimiter=DELIMITER)\\n    row = [None, None]\\n    with open('input_data.txt', 'rt') as textfile:\\n        for line in (line.strip() for line in textfile):\\n            if line.endswith('(i)'):\\n                row[0] = line\\n                writer.writerow(row)\\n            else:\\n                row[1] = line", "id": "24587997", "code_sizes": 1}, {"nl_num": [3, 550, 3659, 483, 2616, 3674, 2, 360, 1519, 3760, 1297, 3949, 1312, 360, 4178, 3674, 365, 2326, 4], "code_num": [2], "code": "from tkinter import*\\n\\n\\n\\ndef onKeyDown(event):\\n    if(event.keysym == \"Up\"):\\n        canvas.move(rect, 0, -2)\\n    if(event.keysym == \"Down\"):\\n        canvas.move(rect, 0, 2)\\n    if(event.keysym == \"Left\"):\\n        canvas.move(rect, -2, 0)\\n    if(event.keysym == \"Right\"):\\n        canvas.move(rect, 2, 0)\\n\\n\\ndef onClick1(event):\\n    canvas.itemconfigure(rect, fill=\"red\");\\ndef onClick2(event):\\n    canvas.itemconfigure(rect, fill=\"green\");\\ndef onClick3(event):\\n    canvas.itemconfigure(rect, fill=\"blue\")\\n\\n\\n\\n\\nmaster = Tk()\\ncanvas = Canvas(master, width=600, height=600)\\ncanvas.pack()\\nrect = canvas.create_rectangle(250,250,350,350, fill=\"red\")\\ncanvas.update()\\n\\nrrect = canvas.create_rectangle(0,0,30,30, fill=\"red\")\\ngrect = canvas.create_rectangle(33,0,60,30, fill=\"green\")\\nbrect = canvas.create_rectangle(63,0,90,30, fill=\"blue\")\\n\\nmaster.bind(\"<Key>\", onKeyDown)\\n\\ncanvas.tag_bind(rrect,\"<Button-1>\", onClick1)\\ncanvas.tag_bind(grect,\"<Button-1>\", onClick2)\\ncanvas.tag_bind(brect,\"<Button-1>\", onClick3)", "id": "26836992", "code_sizes": 1}, {"nl_num": [3, 550, 1020, 483, 3047, 1828, 4588, 1605, 2244, 3417, 2, 1101, 2610, 1828, 188, 3927, 3178, 2238, 3528, 2426, 4], "code_num": [2], "code": "soup.find(lambda tag: tag.name == 'b' and\\n          \"Particulate Matter\" in tag.text)", "id": "19749788", "code_sizes": 1}, {"nl_num": [3, 188, 825, 2464, 4656, 1400, 3119, 4179, 155, 4], "code_num": [2], "code": "for p in paired_tweets[:100]:\\n    print p[1].encode('utf-8').strip()", "id": "24637525", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 163, 2, 95, 2326, 4], "code_num": [2], "code": "import ckan.plugins as plugins\\nimport ckan.plugins.toolkit as toolkit\\n\\n# Required so that GET requests workr\\n@toolkit.side_effect_free\\ndef get_news(context,data_dict=None):\\n  # The actual custom API method\\n  return {\"hello\":\"world\"}\\n\\n\\nclass CustomAPIPlugin(plugins.SingletonPlugin):\\n  plugins.implements(plugins.interfaces.IActions)\\n\\n  def get_actions(self):\\n    # Registers the custom API method defined above\\n    return {'get_news': get_news}", "id": "28043973", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2616, 327, 3563, 2906, 4220, 1470, 835, 2326, 4], "code_num": [2], "code": "class Test(unittest.TestCase):\\n    Site_Home = None\\n    Profile_Home = None\\n\\n    def redirectToFalconHostUI(self):\\n        #Start GOOGLE CHROME Browser\\n        self.browser = webdriver.Chrome(executable_path='E:\\\\chromedriver.exe')\\n\\n        #Navigate to Website URL\\n        Test.Site_Home = Home(self.browser)\\n        Test.Site_Home.navigate()\\n\\n\\n    def testloginToWebsite(self):\\n        #Get Logged in the Falcon Web UI\\n        loginPage = Test.Site_Home.getLoginForm()\\n        loginPage.enter_email(SINGLE_LOGIN_USERNAME)\\n        loginPage.enter_password(SINGLE_LOGIN_PASSWORD)\\n        Test.Profile_Home = loginPage.get_logged_into_Site()\\n\\n    def testProfilePageSection(self):\\n        Test.Profile_home.go_to_Section1()", "id": "26859795", "code_sizes": 1}, {"nl_num": [3, 587, 2610, 2385, 2801, 4], "code_num": [2], "code": "Model2.objects.filter(pk__in=Model1.objcts.values_list('post_id', flat=True)).values('p_slug')", "id": "30385206", "code_sizes": 1}, {"nl_num": [3, 3990, 3793, 2, 2365, 2610, 188, 568, 3074, 169, 2, 4], "code_num": [2], "code": "url_pattern.sub(getExpandedURL, text)", "id": "285931", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3161, 1828, 472, 123, 1605, 2613, 412, 2, 4314, 292, 2610, 990, 4], "code_num": [2], "code": "return self.left.insert(data)", "id": "32365218", "code_sizes": 1}, {"nl_num": [3, 4133, 4190, 1828, 3156, 3747, 4137, 1170, 2610, 990, 568, 1176, 1400, 694, 4179, 3971, 1007, 451, 2610, 1828, 694, 2326, 4], "code_num": [2], "code": "str(number).count(\"1\")", "id": "12563629", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3348, 568, 1828, 2252, 4179, 1828, 155, 4179, 177, 3518, 2238, 3528, 4660, 4], "code_num": [2], "code": "p = RespuestaPreguntaSeleccionMultiple.objects.all().values('respuesta').annotate(Count('respuesta'))\\n\\nfor item in p:\\n    item['respuesta__count']  # This will return 2\\n    item['respuesta']  # This will return 'Una vez'", "id": "31465711", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1573, 1400, 377, 3886, 3694, 3055, 3079, 4505, 540, 2049, 2326, 4], "code_num": [2], "code": "import csv\\nfrom collections import defaultdict\\n\\nrows = defaultdict(list)\\n\\nfor csv in ['csv_one.csv', 'csv_two.csv', 'csv_three.csv']:\\n    with open(csv) as f:\\n        next(f) # skips the header row\\n        reader = csv.reader(f, delimiter=',')\\n        for row in reader:\\n            rows[row[0]].append(row[1:])\\n\\nwith open('out.csv', 'w') as f:\\n    writer = csv.writer(f, delimiter=',')\\n    for k,v in rows.iteritems():\\n         writer.writerow([k]+v)", "id": "31398345", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 4187, 2613, 2473, 2, 2604, 1164, 2610, 1312, 1708, 1881, 3948, 2326, 4], "code_num": [2], "code": "print sql.literal_column('ARRAY[2]').op('<@')(table.c.lineage)\\n# ARRAY[2] <@ \"treeItems\".lineage", "id": "957762", "code_sizes": 1}, {"nl_num": [3, 2, 1405, 1438, 568, 2969, 4423, 653, 4], "code_num": [2], "code": "register = 3\\nslave_id = 0x00\\naddress  = 0x01\\n\\nvalues   = context[slave_id].getValues(register, address, count=2)\\n\\n# Two integers to a floating point\\ni1 = values[0]\\ni2 = values[1]\\nf = unpack('l',pack('<HH',i1,i2))[0]\\nf = f+1\\n# Floating point to two integers\\ni1, i2 = unpack('<HH',pack('l',f))\\nprint(f,i1,i2)\\n\\ncontext[slave_id].setValues(register, address, [i1,i2])", "id": "25862853", "code_sizes": 1}, {"nl_num": [3, 2049, 3897, 4570, 265, 2895, 568, 3128, 4], "code_num": [2], "code": "begin = pd.datetime(2013,1,5,5,53)\\nend = pd.datetime(2013,1,7,7,16)\\n\\nrng = pd.DatetimeIndex(start=begin, end=end, freq=pd.datetools.Minute(15))\\ndf = pd.DataFrame(np.random.randn(rng.size), index=rng)\\n\\nfig, axs = plt.subplots(2,1, figsize=(15,6))\\nfig.subplots_adjust(hspace=.5)\\n\\ndf.plot(ax=axs[0])\\naxs[0].set_title('Original')\\n\\ndf.index = [idx - df.index[0] for idx in df.index]\\ndf.plot(ax=axs[1])\\naxs[1].set_title('Normalized')", "id": "14867512", "code_sizes": 1}, {"nl_num": [3, 2039, 3881, 2613, 2605, 2604, 664, 2610, 3467, 169, 2613, 2, 1279, 4625, 2605, 540, 1807, 4588, 3990, 188, 4], "code_num": [2], "code": "import re\\ninput = \"< p >This is a sample text. sydney.edu.au/ somthing else text.< /p >\"\\nregex = \"((?:https?://)?(?:www\\.)?[a-zA-Z]+\\.[a-z]+[^ ]*)\"\\nre.sub(regex, '<a href=\\\\1>\\\\1</a>', input)", "id": "24606826", "code_sizes": 1}, {"nl_num": [3, 3491, 2743, 2, 2610, 188, 4], "code_num": [2], "code": "query = \"SELECT table1, table2, table3 FROM `db`-tables;\"\\nself.clickcursor.execute(query)\\nresults = self.clickcursor.fetchall()\\nfor item in results:\\n  print(item)     #this is the strange line that I need!\\n  self.data.append(item)\\nself.clickcnx.close()", "id": "13045923", "code_sizes": 1}, {"nl_num": [3, 188, 864, 550, 568, 611, 4220, 4807, 1237, 2610, 1828, 223, 1959, 4], "code_num": [2], "code": "def recursive(data):\\n   for i,j in enumerate(data):\\n      if condition:\\n         recursive(data[i:])", "id": "13087791", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2214, 1828, 188, 3829, 1712, 568, 1828, 2, 4], "code_num": [2], "code": "self.process = QProcess()\\nself.connect(self.process, SIGNAL(\"readyReadStdout()\"), self.readOutput)\\nself.connect(self.process, SIGNAL(\"readyReadStderr()\"), self.readErrors)\\ntarsourcepath=\"sudo tar xvpf \"+ self.path1\\nself.process.setArguments(QStringList.split(\" \",tarsourcepath))\\nself.process.start()\\n\\n\\n\\ndef readOutput(self):\\n\\n    self.textBrowser2.append(QString(self.process.readStdout()))\\n    if self.process.isRunning()==False:\\n        self.textBrowser2.append(\"\\n Completed Successfully\")\\n\\n\\n\\n\\ndef readErrors(self):\\n    self.textBrowser2.append(\"error: \" + QString(self.process.readLineStderr()))", "id": "2859256", "code_sizes": 1}, {"nl_num": [3, 1158, 687, 4179, 3821, 552, 1742, 4179, 2710, 540, 1828, 3316, 2637, 4], "code_num": [2], "code": "re.sub(r'^(-+)\\1', r'\\1', \"------foo--bar\")", "id": "31419979", "code_sizes": 1}, {"nl_num": [3, 2385, 864, 1727, 4139, 2549, 1882, 2238, 2, 169, 2605, 1007, 451, 2549, 3528, 551, 1773, 853, 1828, 3971, 3919, 4238, 4], "code_num": [2], "code": "def do_prefix(name, prefix):\\n    if prefix:\\n        return \"%s.%s\" % (prefix, name)\\n    return name\\n\\ndef get_fields_flat(model):\\n    return [name for name in iter_fields(model)]\\n\\ndef iter_fields(model, prefix=None):\\n    fields = model._meta.fields\\n    for field in fields:\\n        name = do_prefix(field.attname, prefix)\\n        yield  name\\n        if field.rel:\\n            rel = field.rel.to\\n            for f in iter_fields(rel, name):\\n                yield f", "id": "29366375", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1519, 2373, 28, 3205, 2610, 2, 2326, 4], "code_num": [2], "code": "serializer.is_valid(raise_exception=True)", "id": "28197199", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1637, 4356, 1650, 327, 223, 1828, 2252, 2610, 1828, 4640, 2326, 188, 4], "code_num": [2], "code": "d.setdefault(name,[]).append(scores)\\nif len(d[name])>3:\\n    del d[name][0]", "id": "28398758", "code_sizes": 1}, {"nl_num": [3, 4762, 540, 338, 3293, 727, 1708, 188, 4], "code_num": [2], "code": "import pandas\\ncur = db.cursor()\\nnf = pandas.io.sql.read_frame(\"select * from tablename limit 50;\", db)", "id": "21039715", "code_sizes": 1}, {"nl_num": [3, 1734, 4275, 2, 568, 2101, 1242, 1708, 3851, 4], "code_num": [2], "code": "import numpy as np\\nimport matplotlib as mpl\\nimport matplotlib.pyplot as plt\\nimport seaborn as sbn\\n\\nx = np.linspace(0, 2 * np.pi, 100)\\ny = np.sin(x)\\n\\nfig, ax = plt.subplots(1, 1)\\n\\nax.scatter(x, y)\\nax.get_xaxis().set_minor_locator(mpl.ticker.AutoMinorLocator())\\nax.get_yaxis().set_minor_locator(mpl.ticker.AutoMinorLocator())\\nax.grid(b=True, which='major', color='w', linewidth=1.0)\\nax.grid(b=True, which='minor', color='w', linewidth=0.5)", "id": "21923463", "code_sizes": 1}, {"nl_num": [3, 820, 1438, 568, 1182, 4043, 2610, 188, 4], "code_num": [2], "code": "def floatToInt(x):\\n    return int((x+1.0) * (2**31))", "id": "2499933", "code_sizes": 1}, {"nl_num": [3, 4583, 500, 856, 169, 3209, 540, 2087, 2, 223, 2817, 793, 4], "code_num": [14], "code": "from __future__ import division", "id": "32185077", "code_sizes": 1}, {"nl_num": [3, 3990, 188, 69, 1352, 483, 4335, 1828, 3759, 694, 2019, 1828, 4491, 223, 3703, 3909, 2610, 4189, 1095, 2326, 4], "code_num": [2], "code": "import numpy as np\\ndf['Birth'] = np.random.randint(1905,1995, len(df))", "id": "33643763", "code_sizes": 1}, {"nl_num": [3, 3346, 1406, 327, 568, 2710, 4238, 4], "code_num": [2], "code": "actors={}\\ntotal=[]\\n\\nwith open('ID_actor','r') as f1:\\n    for line in f1:\\n        id, name = line.split()\\n        actors[name] = int(id)\\n\\nwith open('the other file','r') as f2:\\n    input = f2.read()\\n    items = input.split('#')\\n    for i in range(len(items)):\\n        items[i] = str(actors.get(name,name))\\n\\n\\nwith open('m.dat','w') as f3:\\n    f3.write( '#'.join(items) )", "id": "27510075", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 3881, 223, 1828, 4345, 528, 2610, 1331, 4182, 3148, 2326, 4], "code_num": [2], "code": "im = Image.open('image.png')\\nbands = im.split()\\nisBlank = all(band.getextrema() == (255, 255) for band in bands)", "id": "1110403", "code_sizes": 1}, {"nl_num": [3, 4624, 483, 2187, 2, 2610, 990, 568, 4111, 1828, 2710, 4597, 4179, 1828, 3004, 2326, 4], "code_num": [2], "code": "import pep8\\n\\nlines = \"\"\"\\ndef a:\\n    pass\\n\\ndef b:\\n   pass\\n\"\"\"\\n\\nchecker = pep8.Checker(\\n    lines=lines.strip().splitlines(),\\n    filename=None,\\n    show_source=True\\n)\\nresult = checker.check_all()", "id": "24314217", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2028, 1545, 949, 3332, 4], "code_num": [2], "code": "from datetime import timedelta \\n\\ndate = datetime.datetime.now() - datetime.timedelta(minutes=10)\\ndocs = db.collection.find(\\n    {\\n        'processed': 0,\\n        '$or': [\\n            {'process_lock_date': {'$lt': date}},\\n            {'process_lock_date': null}\\n        ]\\n    }).sort({'date_added': 1}).limit(50)\\n\\nfor doc in docs:\\n    print(doc)", "id": "30553561", "code_sizes": 1}, {"nl_num": [3, 2, 3747, 2878, 3433, 3293, 4139, 4], "code_num": [2], "code": "for row in range(model.rowCount()):\\n    for col in range(model.columnCount()):\\n        value = model.index( row, col, QModelIndex() ).data( Qt.DisplayRole ).toString()\\n        #write v, add separator...\\n    #finish row...", "id": "4669711", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2692, 2804, 3616, 540, 4347, 2, 4347, 2610, 188, 2326, 4], "code_num": [2], "code": "import os\\nfrom glob import glob\\nfrom shutil import rmtree\\n\\npath = os.getcwd()\\npattern = os.path.join(path, \"tin*\")\\n\\nfor item in glob(pattern):\\n    if not os.path.isdir(item):\\n        continue\\n    rmtree(item)", "id": "19238797", "code_sizes": 1}, {"nl_num": [3, 2776, 1400, 4640, 169, 4238, 4179, 4640, 2464, 2, 4174, 1400, 4238, 4179, 4640, 1268, 648, 4], "code_num": [2], "code": "print [{key: value} for key, value in req_dict.iteritems()]", "id": "34349435", "code_sizes": 1}, {"nl_num": [3, 1926, 2765, 4179, 2, 2206, 2610, 188, 4], "code_num": [2], "code": "x_sub, y_sub = zip(*random.sample(list(zip(x, y)), m))", "id": "32576914", "code_sizes": 1}, {"nl_num": [3, 990, 3178, 889, 1708, 1844, 177, 2062, 4], "code_num": [2], "code": "browser.find_element_by_xpath(\"//div[@class='info_list']//input\")", "id": "24158886", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 1652, 1828, 1935, 4691, 853, 1828, 2, 4350, 2326, 4], "code_num": [2], "code": "import sys\\nsys.path.append(\"/Library/Python/2.5/site-packages/simplejson-2.3.2-py2.5-macosx-10.7-x86_64.egg\")\\nimport simplejson", "id": "9046972", "code_sizes": 1}, {"nl_num": [3, 2749, 3378, 2, 540, 2667, 4442, 177, 2963, 169, 2583, 2549, 243, 4], "code_num": [2], "code": "from playhouse.pool import PooledPostgresqlExtDatabase\\n\\ndb = PooledPostgresqlExtDatabase(\\n    'my_database',\\n    max_connections=8,\\n    stale_timeout=300,\\n    user='postgres')", "id": "31520136", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2435, 1828, 2587, 4018, 3293, 4420, 4018, 2610, 904, 2326, 4], "code_num": [2], "code": "ret = np.asarray(pd_view)", "id": "29036068", "code_sizes": 1}, {"nl_num": [3, 3568, 1442, 568, 4727, 2094, 2610, 990, 1708, 4156, 4], "code_num": [2], "code": "from openpyxl.styles import Alignment\\nws['B2'].alignment = Alignment(horizontal=\"justify\")", "id": "33453188", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2103, 425, 568, 3100, 188, 4], "code_num": [2], "code": "def time_difference(datetime_time):\\n    delta = datetime.now() - datetime_time\\n    return int(delta.total_seconds())", "id": "10858319", "code_sizes": 1}, {"nl_num": [3, 314, 540, 4238, 4179, 4238, 1708, 990, 4], "code_num": [2], "code": "new = [s2 or s1 for s1, s2 in zip (stringList, stringList[1:])] # + last element", "id": "10410134", "code_sizes": 1}, {"nl_num": [3, 4137, 188, 4625, 2074, 1495, 810, 4], "code_num": [2], "code": "def Buttons():\\n    global button1\\n    button1=Rectangle(Point(1,1),Point(100,100))\\n    button1.setFill('gold')\\n    button.draw(keyPad)", "id": "19749830", "code_sizes": 1}, {"nl_num": [3, 3089, 2604, 1400, 2540, 223, 2, 2710, 350, 4178, 2529, 3022, 2326, 4], "code_num": [2], "code": "import re  \\nif re.search(r'.*apps\\.facebook\\.com.*', stringName):\\n    print('Yay, it matches!')", "id": "4596286", "code_sizes": 1}, {"nl_num": [3, 3748, 336, 568, 1438, 223, 2492, 3524, 4178, 4189, 338, 1074, 4], "code_num": [2], "code": "df = pd.read_csv('test.csv')\\ndf['date'] = pd.to_datetime(df['date'])    \\ndf['date_delta'] = (df['date'] - df['date'].min())  / np.timedelta64(1,'D')\\ncity_data = df[df['city'] == 'London']\\nresult = sm.ols(formula = 'sales ~ date_delta', data = city_data).fit()", "id": "24588437", "code_sizes": 1}, {"nl_num": [3, 3601, 2940, 3048, 223, 3843, 2252, 3518, 2868, 2610, 990, 2326, 4], "code_num": [2], "code": "comm_one = {}\\n\\nfor key,value in dot_105.items():\\n    containing = [key in d and d[key]==value for d in (dot_110, dot_81, dot_82, dot_100)]\\n    if all(containing):\\n        comm_one[key] = value\\n    elif not any(containing):\\n        print(key, value,' is only in dot_105.')", "id": "33308150", "code_sizes": 1}, {"nl_num": [3, 1372, 4220, 3647, 3293, 1828, 3514, 3747, 3919, 4640, 4], "code_num": [2], "code": "def walk(d, path):\\n    paths = []\\n    if len(d) == 0:\\n        return path\\n    for k, v in d.iteritems():\\n        child_path = path + k + '/'\\n        if isinstance(v, basestring):\\n            paths.append(child_path + v)\\n        else:\\n            paths.extend(walk(v, child_path))\\n    return paths", "id": "33606521", "code_sizes": 1}, {"nl_num": [3, 2, 2, 694, 495, 3747, 188, 4], "code_num": [2], "code": "import random\\ndef biasedRandom(lo, hi, target, steps=1):\\n    if lo >= hi:\\n        raise ValueError(\"lo should be less than hi\")\\n    elif target < lo or target >= hi:\\n        raise ValueError(\"target not in range(lo, hi)\")\\n    else:\\n        num = random.randint(lo, hi)\\n        for i in range(steps):\\n            num += int(random.random() * (target - num))\\n        return num", "id": "4982145", "code_sizes": 1}, {"nl_num": [3, 2952, 3482, 540, 4041, 4], "code_num": [2], "code": "#!/usr/bin/env python\\n\\n\\nimport cherrypy\\n\\n\\nclass Tree(cherrypy._cptree.Tree):\\n\\n  def __call__(self, environ, start_response):\\n    # do more complex check likewise\\n    if environ['PATH_INFO'].startswith('/api/badurl'):\\n      start_response('404 Not Found', [])\\n      return []\\n\\n    return super(Tree, self).__call__(environ, start_response)\\n\\ncherrypy.tree = Tree()\\n\\n\\nglobalConf = {\\n  'server.socket_host': '0.0.0.0',\\n  'server.socket_port': 8080,\\n}\\ncherrypy.config.update(globalConf)\\n\\n\\nclass HelloApiWsgi:\\n\\n  def __call__(self, environ, start_response):\\n    start_response('200 OK', [('Content-Type', 'text/html')])\\n    return ['Hello World from WSGI']\\n\\nclass HelloApi:\\n\\n  @cherrypy.expose\\n  def index(self):\\n    return \"Hello from api\"\\n\\n\\ncherrypy.tree.graft(HelloApiWsgi(), '/api')\\ncherrypy.tree.mount(HelloApi(), '/api/hello')\\n\\n\\nif __name__ == '__main__':\\n  cherrypy.engine.signals.subscribe()\\n  cherrypy.engine.start()\\n  cherrypy.engine.block()", "id": "31144371", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 1057, 549, 1976, 3282, 568, 1400, 2319, 1288, 2851, 1747, 568, 3348, 4531, 1288, 1738, 2610, 2326, 2238, 2385, 3528, 4], "code_num": [2], "code": "response = HttpResponseRedirect(next)\\n# Do whatever else you need to do here with the response object\\nreturn response", "id": "9595497", "code_sizes": 1}, {"nl_num": [3, 990, 864, 2551, 1773, 2610, 2473, 4238, 2610, 1312, 4238, 2464, 1279, 2048, 549, 3339, 4238, 3257, 568, 1828, 2406, 4238, 4], "code_num": [2], "code": "s = set(L1)\\nnew_list = [a for a in L2 if any(b in s for b in a)]", "id": "4785403", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1742, 1828, 188, 4350, 3293, 2385, 2590, 2326, 4], "code_num": [2], "code": "import yourscript # is in yourscript.py\\n\\nyourclass = yourscript.Yourclass()\\nyourclass.run()", "id": "6602913", "code_sizes": 1}, {"nl_num": [3, 188, 3004, 3647, 2624, 2610, 1575, 1530, 3786, 4], "code_num": [2], "code": "engine='python'", "id": "27301477", "code_sizes": 1}, {"nl_num": [3, 437, 421, 567, 1485, 568, 1712, 4377, 2610, 1400, 1531, 4], "code_num": [2], "code": "import sys\\nimport logging\\nlogging.basicConfig(stream=sys.stdout, level=logging.DEBUG, format=\"%(message)s\")\\n\\n# Now we can import salt.\\nimport salt", "id": "28041539", "code_sizes": 1}, {"nl_num": [3, 1016, 1915, 568, 4067, 1170, 2610, 1828, 4488, 4], "code_num": [2], "code": "from mapreduce import context\\n\\ndef mapper(model_entity_instance, params_dict):\\n  \"\"\" my mapper function \"\"\"\\n  ctx=context.get()\\n  mapper_params=ctx.mapreduce_spec.mapper.params", "id": "21070411", "code_sizes": 1}, {"nl_num": [3, 4445, 2528, 2637, 1268, 3630, 869, 1708, 188, 4], "code_num": [2], "code": "with open(data_file) as source:\\n    with open(data_file[:-4]+'_for_SS_Fit.txt','w') as output:\\n        for line in source:\\n            f.write(line+'\\n')", "id": "31407411", "code_sizes": 1}, {"nl_num": [3, 188, 864, 69, 568, 2190, 1637, 2828, 3842, 881, 4179, 1828, 2710, 4], "code_num": [2], "code": "x = x[:50]", "id": "7610694", "code_sizes": 1}, {"nl_num": [3, 69, 568, 1945, 2, 4182, 3575, 568, 655, 97, 1738, 2326, 4], "code_num": [2], "code": "logging.Filter", "id": "25273473", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2281, 1828, 1074, 3293, 1828, 2112, 3964, 2204, 3886, 1828, 2252, 2604, 2, 1708, 1407, 2610, 990, 2326, 4], "code_num": [2], "code": "import cv\\n\\ncv.NamedWindow(\"w1\")\\ncamera = cv.CaptureFromCAM(-1)\\n\\nwhile True:\\n    image = cv.QueryFrame(camera)\\n    key = cv.WaitKey(33)\\n\\n    if key == 'q':\\n        break\\n    elif key != -1:\\n        cv.ShowImage(\"w1\", image)\\n\\ncv.DestroyWindow(\"w1\")", "id": "6686498", "code_sizes": 1}, {"nl_num": [3, 188, 3381, 2834, 4], "code_num": [2], "code": "import functools\\n\\ndef f(a,b):\\n    return a*b\\n\\nfuncs = []\\n\\nfor i in range(0,10):\\n    funcs.append(functools.partial(f,i))", "id": "1107210", "code_sizes": 1}, {"nl_num": [3, 3333, 2, 540, 2101, 4], "code_num": [2], "code": "from pylab import *\\n\\nz = rand(10, 25)\\n\\nc = pcolor(z)\\nset_cmap('hot')\\ncolorbar()\\nc = pcolor(z, edgecolors='w', linewidths=1)\\naxis([0,25,0,10])\\nsavefig('plt.png')\\nshow()", "id": "10756900", "code_sizes": 1}, {"nl_num": [3, 188, 2, 3747, 550, 568, 2878, 2489, 3293, 949, 2319, 4], "code_num": [2], "code": "form = browser.get_forma(action='/ObjedinjenePretrage/Search/SearchResult')[1]", "id": "32105605", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 2007, 1828, 4691, 3293, 1828, 2898, 3867, 2019, 1828, 184, 3867, 2326, 4], "code_num": [2], "code": "class Parent(object):\\n    def __init__(self, name):\\n        self.name = name\\n\\n    def something(self):\\n        return 'something'\\n\\nclass Child(Parent):\\n    def __init__(self, name):\\n        super().__init__(name) # calls the __init__ function of Parent\\n        self.something = super().something() # calls the something function of Parent\\n\\n\\nc = Child('John')\\nsomething = c.something\\nname = c.name\\nprint(something, name) # output = something John", "id": "27187682", "code_sizes": 1}, {"nl_num": [3, 1503, 4347, 1681, 4347, 1773, 2610, 1828, 188, 4238, 2238, 4700, 3528, 4], "code_num": [2], "code": "import bisect\\n\\ndef closest(haystack, needle):\\n    if len(haystack) == 0: return None, None\\n\\n    index = bisect.bisect_left(haystack, needle)\\n    if index == 0:\\n        return None, haystack[0]\\n    if index == len(haystack):\\n        return haystack[index], None\\n    if haystack[index] == needle:\\n        return haystack[index], haystack[index]        \\n    return haystack[index-1], haystack[index]", "id": "1322934", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2, 2000, 3467, 2610, 1828, 4115, 868, 2710, 2610, 990, 4], "code_num": [2], "code": "from BeautifulSoup import BeautifulSoup\\nsoup = BeautifulSoup('<a href=\"path/tomyhtml/foo.html\">foo</a>')\\nsoup.a[\"title\"] = \"Some cool title\"", "id": "5420560", "code_sizes": 1}, {"nl_num": [3, 2, 4195, 864, 2103, 568, 2710, 4], "code_num": [2], "code": "rddstr = rddfloat( (unicode(x[0]), str(x[1]), str(x[2])) )", "id": "34207473", "code_sizes": 1}, {"nl_num": [3, 4260, 540, 4147, 2610, 3372, 2464, 169, 1544, 4], "code_num": [2], "code": "print unicode(x).encode('utf8')", "id": "10091737", "code_sizes": 1}, {"nl_num": [3, 2616, 2, 3687, 4589, 2462, 4221, 1125, 2238, 2817, 2464, 188, 2464, 4110, 3528, 4], "code_num": [2], "code": "def submit(self):\\n\\n    if self.name.get() == \"\":\\n        messagebox.showerror(title=\"No name\",message=\"No name\")\\n        return\\n\\n    driver = webdriver.Firefox()\\n    driver.get(\"http://stackoverflow.com/\")", "id": "30447903", "code_sizes": 1}, {"nl_num": [3, 2153, 528, 551, 460, 1708, 2101, 4], "code_num": [2], "code": "import numpy as np\\nimport matplotlib.pyplot as plt\\nimport matplotlib.cm as cm\\nimport Image\\n\\nfname = 'cartoon.png'\\nimage = Image.open(fname).convert(\"L\")\\narr = np.asarray(image)\\nplt.imshow(arr, cmap = cm.Greys_r)\\nplt.show()", "id": "3823752", "code_sizes": 1}, {"nl_num": [3, 69, 568, 713, 1443, 3004, 2610, 990, 2326, 4], "code_num": [2], "code": "#!usr/bin/env python  \\n#coding=utf-8  \\n\\nimport pyaudio  \\nimport wave  \\n\\n#define stream chunk   \\nchunk = 1024  \\n\\n#open a wav format music  \\nf = wave.open(r\"/usr/share/sounds/alsa/Rear_Center.wav\",\"rb\")  \\n#instantiate PyAudio  \\np = pyaudio.PyAudio()  \\n#open stream  \\nstream = p.open(format = p.get_format_from_width(f.getsampwidth()),  \\n                channels = f.getnchannels(),  \\n                rate = f.getframerate(),  \\n                output = True)  \\n#read data  \\ndata = f.readframes(chunk)  \\n\\n#paly stream  \\nwhile data != '':  \\n    stream.write(data)  \\n    data = f.readframes(chunk)  \\n\\n#stop stream  \\nstream.stop_stream()  \\nstream.close()  \\n\\n#close PyAudio  \\np.terminate()", "id": "17657103", "code_sizes": 1}, {"nl_num": [3, 1727, 1736, 816, 3090, 990, 4], "code_num": [2], "code": "import requests\\nimport json\\n\\nsend_url = 'http://freegeoip.net/json'\\nr = requests.get(send_url)\\nj = json.loads(r.text)\\nlat = j['latitude']\\nlon = j['longitude']", "id": "24906833", "code_sizes": 1}, {"nl_num": [3, 2, 3747, 3843, 523, 435, 2610, 3631, 55, 4], "code_num": [2], "code": "import sublime, sublime_plugin\\n\\nclass PythonREPLHelperCommand(sublime_plugin.EventListener):\\n  def on_activated(self, view):\\n    syntax = view.settings().get('syntax')\\n    if syntax=='Packages/Python/Python.tmLanguage':\\n      plugin_settings = sublime.load_settings('SublimeREPL.sublime-settings')\\n      plugin_settings.set(\"show_transferred_text\", True)\\n    else:\\n      plugin_settings = sublime.load_settings('SublimeREPL.sublime-settings')\\n      plugin_settings.set(\"show_transferred_text\", False)", "id": "19434988", "code_sizes": 1}, {"nl_num": [3, 990, 1708, 749, 568, 3222, 1828, 3316, 3909, 4179, 327, 1112, 449, 4498, 4179, 327, 3293, 2, 4], "code_num": [2], "code": "print fileName, testName, diff,", "id": "5395142", "code_sizes": 1}, {"nl_num": [3, 188, 864, 2, 3222, 2998, 2237, 4178, 470, 327, 4], "code_num": [2], "code": "def make_fruit(name, kwargs):\\n    def my_init(self):\\n        Fruit.__init__(self, **kwargs)\\n    return type(name, (Fruit,), {'__init__': my_init})\\n\\nApple = make_fruit('Apple', apple)", "id": "18402975", "code_sizes": 1}, {"nl_num": [3, 188, 2367, 764, 1650, 3821, 4179, 1828, 2710, 4], "code_num": [2], "code": "foo = foo.replace(' ', '')[:-3].upper()", "id": "1798465", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 4375, 1400, 1712, 3293, 2, 2326, 4], "code_num": [2], "code": "formatter = HtmlFormatter(style=MyStyle)\\nformatter.noclasses = True\\nprint highlight(content,PythonLexer(),formatter)", "id": "624345", "code_sizes": 1}, {"nl_num": [3, 188, 4476, 2, 1592, 4], "code_num": [2], "code": "import shlex\\nshlex.split('arg arg1 \"arg2 with quotes\" arg4 arg5=1')", "id": "5035702", "code_sizes": 1}, {"nl_num": [3, 2, 389, 177, 1861, 777, 1917, 3697, 568, 1828, 3004, 4358, 2326, 4], "code_num": [2], "code": "with open(filename, 'w') as fh:\\n indent(tree.getroot())\\n tree.write(fh, encoding=\"ISO-8859-1\")", "id": "23144412", "code_sizes": 1}, {"nl_num": [3, 188, 1200, 593, 223, 1250, 3747, 240, 2610, 3565, 2326, 4], "code_num": [2], "code": "for i in range(0,active_sheets):\\n    ws = wb.Worksheets(i+1)\\n    ws.Columns.WrapText = True", "id": "24108791", "code_sizes": 1}, {"nl_num": [3, 550, 568, 128, 1400, 3420, 2610, 425, 2326, 188, 4], "code_num": [2], "code": "date = datetime.datetime(2003,8,1,12,4,5)\\nfor i in range(5): \\n    date += datetime.timedelta(days=1)\\n    print(date)", "id": "3240458", "code_sizes": 1}, {"nl_num": [3, 4181, 177, 4732, 4178, 4379, 3221, 2, 4597, 4179, 2, 4], "code_num": [2], "code": "try:\\n    raise os.rename('nonexisting_file', 'def')\\nexcept OSError:\\n    print 'caught'", "id": "8890010", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1738, 3293, 4265, 2610, 4048, 2610, 4749, 2326, 4], "code_num": [2], "code": "define(\"logging\", default=\"info\",\\n       help=(\"Set the Python log level. If 'none', tornado won't touch the \"\\n             \"logging configuration.\"),\\n       metavar=\"debug|info|warning|error|none\")", "id": "14268056", "code_sizes": 1}, {"nl_num": [3, 4137, 188, 3747, 69, 568, 3994, 1033, 1125, 540, 3884, 1712, 4], "code_num": [2], "code": "import os\\nimport subprocess\\nsubprocess.call([\"ls\", \"-l\"], stdout=open(os.devnull, \"w\"), stderr=subprocess.STDOUT)", "id": "500477", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 191, 4182, 4229, 1828, 2710, 2610, 990, 1268, 1828, 977, 2610, 990, 4], "code_num": [2], "code": "x=s.split(',')\\n\\nif len(x)>1:\\n    x=x[1:] # since you are only concerned with what comes after a ','\\n    print x[0].strip() # remove the strip(), depends on the usage\\nelse:\\n    print ''", "id": "26558230", "code_sizes": 1}, {"nl_num": [3, 188, 2571, 3747, 1170, 568, 4330, 2, 3055, 2974, 2326, 4], "code_num": [2], "code": "import numpy as np\\nimport scipy.misc as mpl\\n\\na = mpl.imread('01background.jpg')\\nb = mpl.imread('02testgray.jpg')\\n\\nc = a/((b.astype('float')+1)/256)\\nd = c*(c < 255)+255*np.ones(np.shape(c))*(c > 255)\\n\\ne = d.astype('uint8')\\n\\nmpl.imshow(e)\\nmpl.imsave('output.png', e)", "id": "5605174", "code_sizes": 1}, {"nl_num": [3, 3990, 188, 4327, 540, 2, 2725, 4], "code_num": [2], "code": "import jinja2\\nfrom tempfile import NamedTemporaryFile\\n\\ndef return_hosts():\\n    'return a list of host names'\\n    with open('./tfhosts') as hosts:\\n        return [host.split()[1].strip() for host in hosts]\\n\\ninventory = \"\"\"\\n[master1]\\n{{ host_master01 }}\\n[master2]\\n{{ host_master02 }}\\n\"\"\"\\n\\ngethosts = return_hosts()\\n\\ninventory_template = jinja2.Template(inventory)\\n\\nrendered_inventory = inventory_template.render({ \\n    'host_master01': gethosts[0], \\n    'host_master02': gethosts[1], \\n  })\\n\\nhosts = NamedTemporaryFile(delete=False)\\nhosts.write(rendered_inventory)\\nhosts.close()", "id": "32936255", "code_sizes": 1}, {"nl_num": [3, 3942, 4498, 4179, 1828, 4714, 3293, 4115, 3004, 551, 1828, 4238, 2610, 990, 4], "code_num": [2], "code": "with open('htmlfile.html','r') as file:\\n  rows = []\\n  for line in file:\\n    start = max(line.find('FORWARD'),line.find('REVERSE'))\\n    rows.append(line[start:].replace('<','').replace('>','').replace('/','').replace('td',' ').replace('tr',' ').strip().split('  '))\\nprint(rows)", "id": "14969667", "code_sizes": 1}, {"nl_num": [3, 3333, 578, 3963, 4179, 2536, 169, 486, 2610, 2101, 4], "code_num": [2], "code": "from matplotlib import pyplot as plt\\nfrom matplotlib.collections import LineCollection\\nlc = LineCollection(points[edges])\\nfig = plt.figure()\\nplt.gca().add_collection(lc)\\nplt.xlim(points[:,0].min(), points[:,0].max())\\nplt.ylim(points[:,1].min(), points[:,1].max())\\nplt.plot(points[:,0], points[:,1], 'ro')\\nfig.savefig('full_figure.png')", "id": "8068183", "code_sizes": 1}, {"nl_num": [3, 2426, 2940, 2366, 2237, 4178, 332, 4], "code_num": [2], "code": "def verify(self, param, val):\\n    self.assertEqual(getattr(self.tm.get, param), val)", "id": "28268545", "code_sizes": 1}, {"nl_num": [3, 3991, 549, 841, 976, 2610, 1828, 4103, 2, 1096, 4], "code_num": [2], "code": "class Orb(object):\\n    def __init__(self,posorg,posdest):\\n        self.posx=posorg[0]\\n        self.posy=posorg[1]\\n        self.targ=posdest\\n        self.posorg=posorg\\n        self.bullet_vector=Move(self.targ[0],self.targ[1],self.posx,self.posy,20)\\n    def update(self):\\n        self.posx += self.bullet_vector[0]\\n        self.posy += self.bullet_vector[1]\\n        pygame.draw.circle(screen, ((0,0,255)), (int(self.posx),int(self.posy)), 5)", "id": "22724829", "code_sizes": 1}, {"nl_num": [3, 2258, 990, 3506, 2315, 4], "code_num": [2], "code": "print json.loads(data)['example'][0]['id']", "id": "24381435", "code_sizes": 1}, {"nl_num": [3, 4189, 2141, 2659, 4179, 3915, 4], "code_num": [2], "code": "df['day_name'] = df['pub_date'].apply(\\n    lambda x: pd.to_datetime(x).strftime(\"%A\"))", "id": "24328226", "code_sizes": 1}, {"nl_num": [3, 2207, 2, 4179, 990, 2587, 4167, 864, 3932, 864, 2464, 1864, 2464, 864, 1623, 4], "code_num": [2], "code": "a <- matrix(c(1,2,3,4), 2, byrow=TRUE)\\nb <- array(t(a), dim=c(2,1,2))\\nb", "id": "34092663", "code_sizes": 1}, {"nl_num": [3, 1181, 326, 2, 3214, 4179, 2, 2610, 990, 4], "code_num": [2], "code": "path = \"\"\\ncount = 0\\nwhile count < 10 and path == \"\":\\n    p1 = subprocess.Popen([\"df\", \"-h\"], stdout=subprocess.PIPE)\\n    p2 = subprocess.Popen([\"grep\", device_file], stdin=p1.stdout, stdout=subprocess.PIPE)\\n    p3 = subprocess.Popen([\"awk\", \"{ print $6 }\"], stdin=p2.stdout, stdout=subprocess.PIPE)\\n    path = p3.communicate()[0]\\n    count += 1\\n    if path == \"\":\\n        time.sleep(1)\\nprint path", "id": "4373474", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4625, 1485, 3747, 2255, 568, 243, 3514, 2, 2326, 4], "code_num": [2], "code": "class MyDealModelView(ModelView):\\n    form_excluded_columns = ('merchant_id',)\\n\\n    def on_model_change(form, model, is_created):\\n        model.merchant_id = login.current_user.merchant_id;", "id": "22461795", "code_sizes": 1}, {"nl_num": [3, 4640, 2905, 3293, 4691, 4], "code_num": [2], "code": "import root_file as f1\\n\\nid = 1\\napp = 'Name'\\nprint getattr(f1, app)[id] # or f1.Name[id]", "id": "5514606", "code_sizes": 1}, {"nl_num": [3, 3490, 2, 3412, 540, 4649, 2, 2, 4], "code_num": [2], "code": "f1=open('first.txt','r')\\nf2=open('second.txt', 'r')\\nnew_file=open(\"new_text.txt\", 'w')\\nfor line in f1:\\n    new_line=line +\"....\" + f2.readline()\\n    new_file.write(new_line,\"\\n\")", "id": "20009700", "code_sizes": 1}, {"nl_num": [3, 990, 2710, 90, 540, 1828, 4238, 4], "code_num": [2], "code": "liPos = [(2,5),(8,9),(18,22)]\\ns = \"I hope that I will find an answer to my question!\"\\n\\nexclusions = set().union(* (set(range(t[0], t[1]+1)) for t in liPos) )\\npruned = ''.join(c for i,c in enumerate(s) if i not in exclusions)\\n\\nprint pruned", "id": "7018812", "code_sizes": 1}, {"nl_num": [3, 3427, 2, 2610, 549, 3102, 4018, 2610, 990, 4], "code_num": [2], "code": "from itertools import product\\nl = [[0, 3], [1, 4], [2]]\\n\\nfor prod in product(*l):\\n    print(prod)", "id": "28070777", "code_sizes": 1}, {"nl_num": [3, 1727, 1400, 3995, 4179, 2542, 181, 3293, 250, 1828, 2542, 3254, 2326, 4], "code_num": [2], "code": "from celery import task\\nfrom billiard import current_process\\n\\n@task\\ndef getName():\\n    p = current_process()\\n    return p.index", "id": "23857005", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3047, 223, 1250, 2610, 3467, 3004, 169, 3119, 3143, 4179, 869, 540, 188, 2326, 4], "code_num": [2], "code": "with open(\"textfile.txt\") as openfile:\\n    for line in openfile:\\n        for part in line.split():\\n            if \"color=\" in part:\\n                print part", "id": "18366554", "code_sizes": 1}, {"nl_num": [3, 1734, 4047, 3963, 1813, 3293, 1976, 817, 169, 3344, 2605, 568, 1828, 4238, 4], "code_num": [2], "code": "def access():\\n    room_code = 12534\\n    code = int(raw_input('Enter the code: '))\\n    if code == room_code:\\n        return 'good'\\n    return 'death'", "id": "18774811", "code_sizes": 1}, {"nl_num": [3, 1535, 1007, 1711, 2028, 772, 540, 3506, 4178, 990, 4], "code_num": [2], "code": "lineaactual = json.loads(line.replace(\"'\", '\"'))", "id": "19506553", "code_sizes": 1}, {"nl_num": [3, 990, 1650, 4790, 3803, 1227, 3971, 3747, 2378, 4393, 3824, 223, 1828, 4238, 4179, 3963, 4], "code_num": [2], "code": "def read_input(list_of_urls):\\n    with open(list_of_urls) as f, open('output.txt', 'w+') as f2:\\n        for line in f:\\n            n,m = line.split(' ')\\n            n=int(n)\\n            m=int(m)\\n            _,_,thisMaxCycle = max_cycle(n,m)\\n            f2.write(\"{0} {1} {2} #{2} being the max cycle for all numbers between {0} and {1}\\n\".format(n,m,thisMaxCycle))", "id": "28081391", "code_sizes": 1}, {"nl_num": [3, 1810, 1828, 2, 2610, 188, 4], "code_num": [2], "code": "def makeboard(rows, cols):\\n    board = []\\n    for r in range(rows):\\n        brow = []\\n        for c in range(cols):\\n            if r == c == 0:\\n                 brow.append(' ')\\n            elif r == 0:\\n                 brow.append(str(c-1))\\n            elif c == 0:\\n                 brow.append(str(r-1))\\n            else:\\n                 brow.append('*')\\n        board.append(brow)\\n    return board\\n\\nb = makeboard(4,3)\\n\\nfor row in b:\\n    print ' '.join(row)", "id": "30679481", "code_sizes": 1}, {"nl_num": [3, 3801, 4047, 2577, 552, 4531, 1422, 2610, 3685, 4], "code_num": [2], "code": "def process_url(url):\\n    # Do what you want\\n    return what_you_want\\n\\npool = multiprocessing.Pool(processes=4) # how much parallelism?\\npool.map(process_url, list_of_urls)", "id": "3530955", "code_sizes": 1}, {"nl_num": [3, 2, 4261, 4179, 3119, 2238, 3528, 3886, 3689, 3293, 2019, 1828, 2, 1563, 2610, 3617, 4], "code_num": [2], "code": "print('Hello World!!')\\nsys.stdout.flush()", "id": "31649445", "code_sizes": 1}, {"nl_num": [3, 990, 864, 2, 2, 2746, 250, 1828, 1170, 3747, 2, 2591, 4], "code_num": [2], "code": "def clean_high(dict_name,key_string,limit):\\n    '''clean all the keys to eliminate the bad values from the arrays'''\\n    new_dict = {}\\n    for key in dict_name:\\n        new_dict[key] = dict_name[key][dict_name[key_string]<limit]\\n    return new_dict", "id": "26444938", "code_sizes": 1}, {"nl_num": [3, 2367, 1400, 764, 2368, 889, 4179, 1828, 4238, 4], "code_num": [2], "code": "lst = lst[:n-1]", "id": "15715912", "code_sizes": 1}, {"nl_num": [3, 333, 646, 1007, 1711, 3674, 4768, 4179, 1828, 188, 2710, 314, 2326, 4], "code_num": [2], "code": "response.read()", "id": "13446166", "code_sizes": 1}, {"nl_num": [3, 1016, 2, 1594, 551, 1915, 4], "code_num": [2], "code": "import os\\n\\nenv_name = 'g_folder'\\nassembly_name = 'genome_assembly_name'\\n\\ng = os.getenv(env_name)\\nassembly = os.getenv(assembly_name)\\n\\nfile_name = os.path.join(g, assembly) + \".fa\"", "id": "34190531", "code_sizes": 1}, {"nl_num": [3, 2758, 2, 4771, 540, 28, 4400, 2101, 4], "code_num": [2], "code": "import matplotlib.pyplot as plt\\nfrom matplotlib.patches import Ellipse\\n\\nfig=plt.figure(1)\\nax1=fig.add_subplot(111)\\nplt.xlim([0,5])\\nplt.ylim([0,10])\\nax1.errorbar([2.5], [5], yerr=[1], fmt=\"o\", color=\"black\", ms=0.1, zorder=1)\\nax1.add_artist(Ellipse((2.5, 5), 1, 1, facecolor=\"green\", edgecolor=\"black\",zorder=2))\\n\\nplt.show()\\n\\nexit(0)", "id": "11322584", "code_sizes": 1}, {"nl_num": [3, 3986, 1227, 2, 435, 4], "code_num": [2], "code": "checkbox1.set_sensitive(False)\\ncheckbox1.set_active(True)", "id": "2954461", "code_sizes": 1}, {"nl_num": [3, 3268, 4301, 4220, 2947, 2610, 1828, 225, 4], "code_num": [2], "code": "class B(A):\\n    def __init__(self, *a, **k):\\n      if 'W' in k:\\n        w = k.pop('W')\\n      else:\\n        w = a.pop()\\n      A.__init__(self, *a, **k)\\n      self._W = w", "id": "2215923", "code_sizes": 1}, {"nl_num": [3, 2, 3747, 550, 568, 611, 4714, 4498, 169, 4295, 3597, 2353, 4], "code_num": [2], "code": "self.table.setEditTriggers(QtGui.QAbstractItemView.NoEditTriggers)", "id": "17104413", "code_sizes": 1}, {"nl_num": [3, 1096, 389, 2464, 1861, 3118, 2039, 1650, 2464, 1650, 4], "code_num": [2], "code": "def get_surrounding_blocks(self, sprite):\\n    # calculate the grid position of the sprite\\n    sprite_x = sprite.rect.x / 64\\n    sprite_y = sprite.rect.y / 64", "id": "21558952", "code_sizes": 1}, {"nl_num": [3, 319, 332, 2610, 990, 540, 769, 4], "code_num": [2], "code": "def exitDevice(ip,m=None,sendExit=True):\\n   if m is None: m = getDefaultValueForM()\\n   if sendExit: m.send ( 'exit' )", "id": "11192090", "code_sizes": 1}, {"nl_num": [3, 3990, 4582, 568, 3509, 4251, 262, 4238, 568, 3047, 4], "code_num": [2], "code": "d = {'A': ['available', 'unavailable','available','available','available'],\\n     'B': ['unavailable', 'unavailable','available','available','available'],\\n     'C': ['available', 'unavailable','unavailable','available','available'],\\n     'D': ['available', 'unavailable','available','unavailable','unavailable']}\\n\\nletter = raw_input().upper()    \\nd[letter].count('available')", "id": "16036088", "code_sizes": 1}, {"nl_num": [3, 2, 648, 4179, 2710, 568, 580, 3475, 3747, 1022, 2710, 4], "code_num": [2], "code": "cheap_hash = lambda input: hashlib.md5(input).hexdigest()[:6]", "id": "14023350", "code_sizes": 1}, {"nl_num": [3, 188, 897, 568, 602, 4633, 4220, 1394, 2146, 3293, 1828, 4238, 2326, 4], "code_num": [2], "code": "itertools.combinations(iterable, r)", "id": "464864", "code_sizes": 1}, {"nl_num": [3, 188, 4047, 3970, 3995, 2, 4], "code_num": [2], "code": "class D(C, B):\\n    a = A.a", "id": "20728527", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 38, 1828, 2637, 2610, 1828, 2710, 540, 1312, 2637, 2610, 188, 2326, 4], "code_num": [2], "code": "def changeWord(word):\\n    for letter in word:\\n        if letter != \"i\":\\n            word = word.replace(letter,\"!\")\\n    return word", "id": "13437114", "code_sizes": 1}, {"nl_num": [3, 586, 2610, 1799, 1915, 4], "code_num": [2], "code": "constant_cmd_part = [\"/path/to/program\", \"-opt\", \"-more_opt\"]\\nproc = subprocess.Popen(constant_cmd_part + [variable_part],\\n                        stdout=subprocess.PIPE)", "id": "15924294", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2484, 3921, 3087, 3353, 3293, 1828, 188, 1374, 2426, 2326, 4], "code_num": [2], "code": "r = requests.get(\"http://www.google.com\"); print r.content", "id": "9029287", "code_sizes": 1}, {"nl_num": [3, 4402, 4557, 2464, 2, 3747, 836, 4], "code_num": [2], "code": "txt.SetSelection(0, 0)", "id": "10883636", "code_sizes": 1}, {"nl_num": [3, 2, 69, 568, 2762, 4178, 2406, 338, 4], "code_num": [2], "code": "data2014 = n.activate([0,1,0,1,0,1])\\nprint 'data2014',data2014", "id": "26079302", "code_sizes": 1}, {"nl_num": [3, 2, 568, 1828, 3004, 169, 3655, 1637, 1400, 4684, 1605, 2532, 1007, 1711, 3452, 4042, 3648, 2610, 1280, 4], "code_num": [2], "code": "with open(\"lolpa.txt\") as f:\\n    for word in f.readline().split(): # assuming all words are on the first line\\n        digits = [c for c in word if c.isdigit()]\\n        if digits: # digits list is not empty\\n            print(' '.join(digits)) # shows digits with space in between\\n        else:\\n            print(word) # prints word normally", "id": "11856566", "code_sizes": 1}, {"nl_num": [3, 69, 1352, 483, 4335, 1828, 1313, 1546, 4179, 3817, 1594, 1708, 990, 2, 2326, 4], "code_num": [2], "code": "import itertools\\nsite_range=[0,1,2]\\n[x for x in itertools.product(site_range, repeat=len(site_range))]", "id": "4013730", "code_sizes": 1}, {"nl_num": [3, 1264, 1422, 346, 1422, 4189, 645, 864, 3889, 549, 4018, 1039, 540, 4767, 4], "code_num": [2], "code": "X = np.array(list(working_df['array_list'][1:]))\\ny = working_df['outcome'][1:].values\\nrf_clf.fit(X, y)", "id": "33268857", "code_sizes": 1}, {"nl_num": [3, 550, 568, 746, 1750, 4688, 2429, 2610, 2, 2206, 2326, 4], "code_num": [2], "code": "import xbmc\\nxbmc.executebuiltin('Container.SetViewMode(%d)' % view_mode_id)", "id": "11530658", "code_sizes": 1}, {"nl_num": [3, 2551, 2575, 1828, 1243, 746, 4179, 4684, 4], "code_num": [2], "code": "import BeautifulSoup\\n\\nnegative_keywords = ['basement', 'unfinished', 'hardwood']\\n\\nhtml = '''\\n<section id=\"postingbody\">\\n    Looking for a corporate rental, this beautiful decorated 5 BR,\\n    4.5 BA two story house is in a desirable location, 7 minutes off\\n    I 85. Beautiful solid cherry cabinets in kitchen and laundry room.\\n    All stainless steel appliances. Hardwood floors in kitchen and foyer,\\n    Ceramic tile floors in all bathrooms, laundry room, dining room and sunroom.\\n\\n    <br>\\n    </br>\\n\\n</section>\\n'''\\n\\nsoup = BeautifulSoup.BeautifulSoup(html)\\nbodyContents = soup.find(attrs={'id' : 'postingbody'})\\n\\nif any([k in bodyContents.getText().lower() for k in negative_keywords]):\\n    print \"keyword was found\"", "id": "21208246", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 1519, 1828, 114, 1766, 3467, 4092, 2610, 3351, 2326, 4], "code_num": [2], "code": "self.myOkEntry.override_color(Gtk.StateFlags.NORMAL, Gdk.RGBA(0.0, 1.0, 0.0, 1.0))", "id": "15245886", "code_sizes": 1}, {"nl_num": [3, 2367, 323, 1162, 3293, 1828, 2710, 2610, 990, 4], "code_num": [2], "code": "word='www.wgoowglew.cowm'\\n\\nprint '.' + word.split('.')[1].replace('w', '') + '.'", "id": "24536935", "code_sizes": 1}, {"nl_num": [3, 2, 1663, 762, 3747, 188, 4], "code_num": [2], "code": "import win32com.client\\noSiebelApp = win32com.client.Dispatch(\"SiebelDataControl.SiebelDataControl.1\")\\noSiebelApp.Login(\"Connection String\")", "id": "16722555", "code_sizes": 1}, {"nl_num": [3, 3397, 28, 540, 2887, 2610, 887, 990, 4], "code_num": [2], "code": "def parse_items(self, response):\\n    hxs = HtmlXPathSelector(response)\\n    sites = hxs.select(\"//li[contains(concat(' ', @class, ' '), ' mod-searchresult-entry ')]\")\\n    items = []\\n\\n    for site in sites[:2]:\\n        item = SeekItem()\\n        item['title'] = myfilter(site.select('dl/dd/h2/a').select(\"string()\").extract())\\n        item['link_url'] = myfilter(site.select('dl/dd/h2/em').select(\"string()\").extract())\\n        item['description'] = myfilter(site.select('dl/dd/p').select(\"string()\").extract())\\n        if item['link_url']:\\n            request = Request(\"http://www.example.com/some_page.html\", callback=self.parseItemDescription)\\n            request.meta['item'] = item\\n            return request\\n\\ndef parseItemDescription(self, response):\\n\\n    item = response.meta['item']\\n    hxs = HtmlXPathSelector(response)\\n    sites = hxs.select(\"//li[contains(concat(' ', @class, ' '), ' mod-searchresult-entry ')]\")\\n    item['description'] = \"mytest\"\\n\\n    return item", "id": "13833143", "code_sizes": 1}, {"nl_num": [3, 550, 568, 134, 1828, 223, 1959, 2610, 990, 4], "code_num": [2], "code": "img[ix, iy] = dummy", "id": "12040587", "code_sizes": 1}, {"nl_num": [3, 3733, 4238, 4179, 2315, 223, 3995, 990, 4], "code_num": [2], "code": "records = {}\\n\\nfor line in data:\\n    # parsing codes\\n\\n    # store player -> gameid mappings to the index\\n    if player not in records:\\n        records[player] = []\\n    records[player].append(info)\\n\\nprint records['Sona']\\n# this should print out list of games played with Sona", "id": "13595830", "code_sizes": 1}, {"nl_num": [3, 2, 2610, 2317, 2237, 4178, 2, 2610, 655, 260, 4], "code_num": [2], "code": "rows = Model.objects.all()\\nfor row in rows:\\n    # Modify rows as appropriate\\n    row.T_val = delta / (cnt -1) * row.sheet_num + min_tvc_of_subgroup\\nModel.objects.bulk_update(rows)", "id": "32333700", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 634, 1828, 4350, 223, 4314, 327, 3293, 1828, 1498, 4350, 2610, 990, 2326, 4], "code_num": [2], "code": "import ToBuildOrNot\\nneedsBuild = ToBuildOrNot.run() # or whatever you call your top-level function", "id": "17323564", "code_sizes": 1}, {"nl_num": [3, 1266, 4178, 1237, 2610, 420, 540, 188, 4], "code_num": [2], "code": "from os import makedirs, path\\nfrom itertools import product, chain\\n\\ndata = {\\n    '0001': ['123101203', '1221231102136'],\\n    '0002': ['1681235932', '22612312303', '213412312341', '123123610116'],\\n    '0003': ['123408503']\\n}\\n\\ndirs = chain(*list(product((k,), v) for k, v in data.items()))\\nfor parent, sub in dirs:\\n    makedirs(path.join(parent, sub))", "id": "28949417", "code_sizes": 1}, {"nl_num": [3, 2, 2610, 188, 4], "code_num": [2], "code": "objc.IBOutlet", "id": "1351480", "code_sizes": 1}, {"nl_num": [3, 990, 1652, 4179, 4350, 540, 651, 4], "code_num": [2], "code": "if __name__ == \"__main__\":\\n    parser = argparse.ArgumentParser()\\n    parser.add_argument(\"-k\", dest = \"foo\",  action='store_true')\\n    args = parser.parse_args()\\n    # do things...", "id": "19977741", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 2360, 1712, 2610, 1828, 2, 1268, 1828, 3865, 1125, 2326, 4], "code_num": [2], "code": "import subprocess\\n\\nproc=subprocess.Popen('less', stdin=subprocess.PIPE)\\nlines=(str(i) for i in range(1000))\\nproc.stdin.write('\\n'.join(lines))\\nproc.stdin.close()\\nproc.communicate()", "id": "8138206", "code_sizes": 1}, {"nl_num": [3, 2, 2529, 3022, 540, 990, 1374, 4691, 4], "code_num": [2], "code": "r = requests.get(url)\\npat = re.search(regex, r.text)", "id": "26597009", "code_sizes": 1}, {"nl_num": [3, 3767, 619, 1608, 1650, 3407, 4178, 2943, 290, 4], "code_num": [2], "code": "import numpy as np \\nimport pylab as plt \\nfrom math import *\\nplt.figure()\\nth=np.linspace(0,np.pi,num=200)\\ny=range(10)\\nfor i in range(10):\\n    alph=np.exp(i/2)\\n    y[i]=((np.cos(alph*np.cos(th)) - np.cos(alph))/np.sin(th))**2\\n    plt.plot(th/pi,y[i],  label = 'Line %d' %i)\\nplt.legend(loc =2)    \\nplt.show()", "id": "30423812", "code_sizes": 1}, {"nl_num": [3, 483, 2217, 353, 4035, 353, 3803, 4597, 4179, 353, 3803, 2610, 3467, 4], "code_num": [2], "code": "encoded = clipboard.encode('utf8').replace(\"\\n\",\"\\r\\n\")", "id": "16576359", "code_sizes": 1}, {"nl_num": [3, 717, 2822, 1857, 2125, 770, 2, 2299, 2, 4], "code_num": [2], "code": "date_posted = db.DateTimeProperty(auto_now_add=True)", "id": "19210616", "code_sizes": 1}, {"nl_num": [3, 346, 420, 864, 3845, 3178, 2977, 1218, 4], "code_num": [2], "code": "import numpy as np, numpy.random as nprand, time, bisect\\n\\nbigN = 5e6\\nsmallN = 1000\\nmaxn = 1e7\\nnprand.seed(1)  \\nbigArr = nprand.randint(0, maxn, size=bigN)\\nsmallArr = nprand.randint(0, maxn, size=smallN)\\n\\n# brute force \\nt1 = time.time()\\nfor i in range(len(smallArr)):\\n    inds = np.where(bigArr == smallArr[i])[0]\\nt2 = time.time()\\nprint \"Brute\", t2-t1\\n\\n# not brute force (like nested loop with index scan)\\nt1 = time.time()\\nsortedind = np.argsort(bigArr)\\nsortedbigArr = bigArr[sortedind]\\nfor i in range(len(smallArr)):\\n    i1 = bisect.bisect_left(sortedbigArr, smallArr[i])\\n    i2 = bisect.bisect_right(sortedbigArr, smallArr[i])\\n    inds = sortedind[i1:i2]\\nt2=time.time()\\nprint \"Non-brute\", t2-t1", "id": "10320751", "code_sizes": 1}, {"nl_num": [3, 2723, 1422, 2101, 3099, 3166, 540, 3006, 4092, 3157, 4178, 3518, 4], "code_num": [2], "code": "import matplotlib.pyplot as plt\\nfrom matplotlib import cm\\nimport numpy as np\\n\\ny = np.array([1, 4, 3, 2, 7, 11])\\ncolors = cm.hsv(y / float(max(y)))\\nplot = plt.scatter(y, y, c = y, cmap = 'hsv')\\nplt.clf()\\nplt.colorbar(plot)\\nplt.bar(range(len(y)), y, color = colors)\\nplt.show()", "id": "31313606", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2878, 1635, 3293, 3867, 1537, 2610, 1497, 2238, 188, 1422, 887, 3528, 4], "code_num": [2], "code": "item['date'] = sel.xpath('//*[@class=\"ratingDate relativeDate\"]/@title').extract()\\nitem['date'] += sel.xpath('//div[@class=\"col2of2\"]//span[@class=\"ratingDate\"]/text()').extract()", "id": "31510643", "code_sizes": 1}, {"nl_num": [3, 2, 4179, 188, 4227, 4], "code_num": [2], "code": "from x import *", "id": "15839663", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 2426, 1007, 3865, 541, 1007, 3293, 2019, 188, 2326, 4], "code_num": [2], "code": "import git \\n\\ng = git.cmd.Git(git_dir)\\ng.pull()", "id": "15315573", "code_sizes": 1}, {"nl_num": [3, 188, 2822, 1857, 97, 1422, 3065, 3572, 4], "code_num": [2], "code": "IS_DEV_APPSERVER = 'development' in os.environ.get('SERVER_SOFTWARE', '').lower()", "id": "25279731", "code_sizes": 1}, {"nl_num": [3, 2, 223, 4379, 4182, 4042, 4807, 2, 891, 4], "code_num": [2], "code": "import arabic_reshaper\\nfrom bidi.algorithm import get_display\\n\\n#...\\nreshaped_text = arabic_reshaper.reshape(u'????? ??????? ?????')\\nbidi_text = get_display(reshaped_text)\\npass_arabic_text_to_render(bidi_text)\\n#...", "id": "6137119", "code_sizes": 1}, {"nl_num": [3, 3901, 223, 2910, 2610, 990, 4], "code_num": [2], "code": "from datetime import date\\nfrom dateutil.rrule import rrule, DAILY\\n\\niterdates=iter(rrule(DAILY, dtstart=date(2012, 9, 1), until=date(2012, 9, 30)))", "id": "13933678", "code_sizes": 1}, {"nl_num": [3, 2367, 3407, 3293, 3667, 540, 990, 4], "code_num": [2], "code": "lines = open('textfile.txt').readlines()\\nopen('newfile.txt', 'w').writelines(lines[3:-1])", "id": "2064184", "code_sizes": 1}, {"nl_num": [3, 4298, 1773, 2610, 188, 711, 191, 2238, 3528, 4], "code_num": [2], "code": "sentence = 'This is a sentence'\\nsplit_values = []\\ntmp = ''\\nfor c in sentence:\\n    if c == ' ':\\n        split_value.append(tmp)\\n        tmp = ''\\n    else:\\n        tmp += c\\nif tmp:\\n    splie_value.append(tmp)", "id": "32877531", "code_sizes": 1}, {"nl_num": [3, 550, 568, 568, 2616, 1828, 3004, 3370, 1297, 2, 1400, 2229, 1605, 1637, 4440, 4524, 1535, 750, 4], "code_num": [2], "code": "from django.conf.urls import patterns, include, url\\nfrom django.contrib.auth.decorators import login_required\\nfrom django.views.static import serve\\nfrom django.conf import settings\\n\\nfrom django.core.exceptions import ObjectDoesNotExist\\nfrom django.shortcuts import HttpResponse\\n\\n@login_required\\ndef protected_serve(request, path, document_root=None):\\n    try:\\n        obj = Photobox.objects.get(user=request.user.id)\\n        obj_image_url = obj.image.url\\n        correct_image_url = obj_image_url.replace(\"/media/\", \"\")\\n        if correct_image_url == path:\\n            return serve(request, path, document_root)\\n    except ObjectDoesNotExist:\\n        return HttpResponse(\"Sorry you don't have permission to access this file\")\\n\\n\\nurl(r'^{}(?P<path>.*)$'.format(settings.MEDIA_URL[1:]), protected_serve, {'file_root': settings.MEDIA_ROOT}),", "id": "28007770", "code_sizes": 1}, {"nl_num": [3, 69, 568, 746, 1828, 26, 1007, 451, 1598, 2610, 3494, 2326, 4], "code_num": [2], "code": "Text(self.tk,width=60,height=40)", "id": "17398926", "code_sizes": 1}, {"nl_num": [3, 1011, 568, 3119, 4047, 3407, 2610, 1828, 990, 4640, 2610, 1273, 4], "code_num": [2], "code": "from collections import OrderedDict\\nboard = OrderedDict([(\"1\", [a,a,a,a,a,a]), (\"2\", [a,a,a,a,a,a])]) # continued for other keys\\n\\nfor k,v in board.items():\\n    print k,v", "id": "28991927", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3559, 1773, 540, 4672, 1153, 2610, 3390, 4], "code_num": [2], "code": "s.execute('INSERT INTO mytable (col_name) VALUES (?);', (\"a|b\",))", "id": "15691342", "code_sizes": 1}, {"nl_num": [3, 69, 568, 2203, 2, 2605, 1007, 451, 1251, 169, 2267, 223, 1933, 2326, 4], "code_num": [2], "code": "R[\"Sweave\"](\"/var/www/tmp/pywps/central.Rnw\")\\nR('Sweave(\"/var/www/tmp/pywps/central.Rnw\")')", "id": "4160318", "code_sizes": 1}, {"nl_num": [3, 188, 3747, 1028, 568, 2, 2969, 604, 3580, 4], "code_num": [2], "code": "netstat -nlp", "id": "25822482", "code_sizes": 1}, {"nl_num": [3, 69, 568, 997, 1828, 694, 4179, 2206, 2610, 568, 2473, 4238, 4], "code_num": [2], "code": "old_list = [\\n['ID 1d6b:0002'],\\n['ID 1d6b:0002'],\\n['ID 1d6b:0001'],\\n['ID 1d6b:0001'],\\n['ID 1d6b:0001'],\\n['ID 1d6b:0001'],\\n['ID 1d6b:0001'],\\n['ID 0b38:0010'],\\n['ID 093a:2510']]\\n\\n\\nnew_list = [x[0] for x in old_list]", "id": "22804304", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 746, 1828, 1750, 2319, 2610, 1725, 2326, 4], "code_num": [2], "code": "map.connect('/', controller='main', action='index')", "id": "2406630", "code_sizes": 1}, {"nl_num": [3, 4527, 4589, 2330, 540, 990, 1650, 169, 389, 4], "code_num": [2], "code": "def printme(s):\\n    sys.stdout.write(str(s))\\n\\ndef get_input(prompt):\\n    if sys.hexversion > 0x03000000:\\n        return input(prompt)\\n    else:\\n        return raw_input(prompt)", "id": "31090659", "code_sizes": 1}, {"nl_num": [3, 990, 2, 3747, 1576, 3995, 2540, 4], "code_num": [2], "code": "from parsley import makeGrammar\\nimport ometa\\ndef check_the_rest(s):\\n    if '-' in s:\\n        return s[-1].isalnum()\\n    return True\\n\\ndomain = makeGrammar('''\\nletdighyp = (letterOrDigit|'-')\\n# label = <letterOrDigit (letdighyp* letterOrDigit)*>\\nlabel = <letter the_rest>\\nthe_rest = letdighyp*:r ?(check_the_rest(r)) -> r\\n''', dict(check_the_rest=check_the_rest))\\n\\ntests = ('a', 'abcd1000', 'a-',)\\nfor t in tests:\\n    try:\\n        print('???', domain(t).label())\\n    except ometa.runtime.ParseError as e:\\n        print('parse failed for', t)\\n        print(e)", "id": "22107347", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3190, 1400, 2, 2610, 4459, 2, 3146, 2326, 3747, 990, 4], "code_num": [2], "code": "corpus = corpora.MmCorpus('foobar.mm')", "id": "18867516", "code_sizes": 1}, {"nl_num": [3, 777, 2677, 2610, 188, 4], "code_num": [2], "code": "from xml.dom.minidom import parse\\ndoc = parse(\"filename.xml\")", "id": "1373707", "code_sizes": 1}, {"nl_num": [3, 188, 3793, 691, 1762, 4], "code_num": [2], "code": "[name for name in names if not '??' in name]", "id": "32319817", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2103, 1828, 4238, 4179, 2, 853, 1828, 977, 2693, 2710, 2610, 990, 4], "code_num": [2], "code": "','.join([str(i) for i in list_of_ints])", "id": "438684", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2103, 2049, 1007, 938, 568, 938, 4182, 2, 2610, 3078, 2326, 4], "code_num": [2], "code": "sqlContext.createDataFrame(PANDASDATA)", "id": "32555462", "code_sizes": 1}, {"nl_num": [3, 761, 524, 4525, 380, 1828, 3004, 911, 1708, 1374, 177, 684, 4], "code_num": [2], "code": "dest.write(ufile)", "id": "14564479", "code_sizes": 1}, {"nl_num": [3, 720, 2429, 4780, 551, 1828, 2, 2610, 1881, 4], "code_num": [2], "code": "from sqlalchemy import *\\nfrom sqlalchemy.orm import *\\nfrom sqlalchemy.ext.declarative import declarative_base\\n\\nBase = declarative_base()\\n\\nclass A(Base):\\n    __tablename__ = \"a\"\\n\\n    id = Column(Integer, primary_key=True)\\n    data = Column(String(20))\\n    boolean = Column(Boolean)\\n\\n# works\\ne = create_engine(\"sqlite://\", echo=True)\\n\\n# works\\n#e = create_engine(\"postgresql://scott:tiger@localhost/test\", echo=True)\\n\\n# works\\n#e = create_engine(\"mysql://scott:tiger@localhost/test\", echo=True)\\n\\nBase.metadata.create_all(e)\\n\\ns = Session(e)\\ns.add_all([\\n    A(data='a1', boolean=True),\\n    A(data='a2', boolean=False),\\n    A(data='a3', boolean=True),\\n])\\n\\n# works\\nprint s.query(A).filter(A.data > 'a1', A.boolean).all()\\n\\n# works\\nprint s.query(A).filter(A.boolean).all()\\n\\n# if before 0.8, need to use and_() or table-bound column\\n# print s.query(A).filter(and_(A.data > 'a1', A.boolean)).all()\\n# print s.query(A).filter(A.__table__.c.boolean).all()", "id": "15994938", "code_sizes": 1}, {"nl_num": [3, 2551, 3090, 1828, 4238, 1708, 3814, 2610, 188, 2326, 4], "code_num": [2], "code": "def srch(item, myList, i=0):\\n  if i < len(myList):\\n    return myList[i] == item or srch(item, myList, i+1)\\n  return -1", "id": "24112824", "code_sizes": 1}, {"nl_num": [3, 3148, 864, 1315, 3467, 2610, 1828, 3612, 1405, 135, 1297, 135, 4], "code_num": [2], "code": "import sys\\nfrom PyQt4 import QtCore, QtGui\\n\\nclass Example(QtGui.QWidget):\\n    def __init__(self):\\n        QtGui.QWidget.__init__(self)\\n        self.label = QtGui.QLabel(self)\\n        layout = QtGui.QVBoxLayout(self)\\n        layout.addWidget(self.label)\\n        self._text = 'this is a test'\\n        self._index = 0\\n        self.timer = QtCore.QTimer(self)\\n        self.timer.timeout.connect(self.handleTimer)\\n        self.timer.start(200)\\n\\n    def handleTimer(self):\\n        self._index += 1\\n        self.label.setText(self._text[:self._index])\\n        if self._index > len(self._text):\\n            self.timer.stop()\\n\\nif __name__ == '__main__':\\n\\n    app = QtGui.QApplication(sys.argv)\\n    ex = Example()\\n    ex.setGeometry(300, 300, 250, 150)\\n    ex.show()\\n    sys.exit(app.exec_())", "id": "27608011", "code_sizes": 1}, {"nl_num": [3, 236, 188, 540, 1544, 568, 4111, 1828, 2728, 1678, 169, 1545, 889, 853, 1828, 3467, 3004, 4], "code_num": [2], "code": "from lxml import etree\\ndoc = etree.parse(\"data.xml\")\\nfor con in doc.xpath(\"//specification\"):\\n    for cons in con.xpath(\"./@body\"):\\n        with open(\"output.txt\", \"w\") as cons_out:\\n            content = cons.split(\"inv: name =\")[1]\\n            cons_out.write(content)\\n        cons_out.close()", "id": "33323598", "code_sizes": 1}, {"nl_num": [3, 4764, 1828, 4238, 4179, 2746, 568, 1828, 4238, 4179, 1828, 3843, 3518, 4], "code_num": [2], "code": "names = [person.GetName() for person in persons]", "id": "5602265", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2430, 1400, 2338, 1828, 593, 4021, 1828, 4238, 3813, 1637, 1828, 3843, 2429, 4179, 476, 2610, 188, 2326, 4], "code_num": [2], "code": "list[MyObject]", "id": "34437103", "code_sizes": 1}, {"nl_num": [3, 2, 1828, 1170, 540, 449, 1915, 2238, 990, 3528, 4], "code_num": [2], "code": "scipy.optimize.minimize", "id": "17814169", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2484, 3407, 3963, 1605, 1957, 1828, 2529, 452, 2610, 1828, 3467, 3004, 4], "code_num": [2], "code": "import re\\n# open the files\\noutputLineNumbers = open('OutputLineNumbers', 'w')\\ninputFile = open('Corpus.txt','r')\\n\\n# read the corpus first\\ncorpusLines = inputFile.readlines()\\n\\n# loop through each line in corpus\\nfor line_i in range(len(corpusLines)):\\n    line = corpusLines[line_i]\\n\\n    # check if we have a regex match with \"phrase\" variable\\n    # if so, write it the output file\\n    if re.match( phrase, line ):\\n        outputLineNumbers.write( str(line_i+1) + \"\\n\" )\\n\\n# close the file handles\\noutputLineNumbers.close()\\ninputFile.close()", "id": "17076635", "code_sizes": 1}, {"nl_num": [3, 3426, 1828, 578, 3467, 3004, 568, 1828, 1417, 1006, 540, 188, 4], "code_num": [2], "code": "A=[0]*len(matrix)\\nB=[0]*len(matrix)\\nC=[0]*len(matrix)\\nfor i in range(len(matrix)):\\n    full_array = np.fromstring(matrix[i], dtype=float, sep=\" \")\\n    A[i]=full_array[0]\\n    B[i]=full_array[1]\\n    C[i]=full_array[2]", "id": "22839386", "code_sizes": 1}, {"nl_num": [3, 1727, 253, 2327, 2610, 655, 1422, 990, 4], "code_num": [2], "code": "import django.utils.timezone as tz\\nimport datetime\\n\\nmy_tz = tz.get_default_timezone() # The one in settings.TIME_ZONE\\n\\n# My dates:\\ndate1 = tz.make_aware(datetime.datetime.now(), my_tz)\\ndate2 = tz.make_aware(datetime.datetime(2015,5,1), my_tz)\\n\\n# Get timezone names\\ndate1.tzname() # CST\\ndate2.tzname() # CDT\\n\\n# Get offset from UTC\\ndate1.utcoffset() # datetime.timedelta(-1, 64800) is UTC-6\\ndate2.utcoffset() # datetime.timedelta(-1, 68400) is UTC-5\\n\\n# Get daylight saving time\\ndate1.dst() # datetime.timedelta(0)\\ndate2.dst() # datetime.timedelta(0, 3600) is +1 hour", "id": "28100008", "code_sizes": 1}, {"nl_num": [3, 2, 4179, 1828, 547, 694, 2610, 1828, 2394, 540, 3971, 2, 1901, 4], "code_num": [2], "code": "from random import randint\\nl=[]\\nl = [randint(0,3) for i in xrange(100)]\\nfor i in xrange(0,100,10):\\n    print l[i:i+10].count(2)*10\\n\\n10\\n10\\n20\\n20\\n10\\n0\\n30\\n20\\n30\\n20", "id": "34007528", "code_sizes": 1}, {"nl_num": [3, 806, 3024, 1465, 1650, 540, 990, 3747, 2, 2, 2, 4], "code_num": [2], "code": "n = 600851475143\\ni = 2\\nwhile i * i < n:\\n    while n % i == 0:\\n        n = n / i\\n    i = i + 1\\nprint n", "id": "14138053", "code_sizes": 1}, {"nl_num": [3, 2, 4524, 4670, 2797, 1828, 3843, 2, 540, 2431, 223, 990, 2326, 4], "code_num": [2], "code": "from twython import Twython, TwythonError\\n\\n# Requires Authentication as of Twitter API v1.1\\ntwitter = Twython(APP_KEY, APP_SECRET, OAUTH_TOKEN, OAUTH_TOKEN_SECRET)\\ntry:\\n    search_results = twitter.search(q='#python', count=50)\\nexcept TwythonError as e:\\n    print e\\n\\nfor tweet in search_results['statuses']:\\n    print tweet['user']['screen_name'].encode('utf-8')", "id": "23178727", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1945, 1828, 2710, 552, 1400, 3678, 4179, 1828, 4238, 540, 990, 2326, 4], "code_num": [2], "code": "list = [('string0', 'string1'),('stringN', 'stringN-1')]\\nlist.append(\"hello\")\\nprint list", "id": "27416058", "code_sizes": 1}, {"nl_num": [3, 188, 4350, 568, 1704, 3316, 3518, 3293, 1973, 2317, 761, 3330, 4], "code_num": [2], "code": "username = cur.fetchone()[0]", "id": "24496126", "code_sizes": 1}, {"nl_num": [3, 2, 864, 453, 1789, 2610, 1977, 169, 2, 1280, 4], "code_num": [2], "code": "ssid = uuid.uuid4().hex", "id": "20180033", "code_sizes": 1}, {"nl_num": [3, 3990, 2385, 2725, 2366, 2610, 2822, 1857, 1334, 4], "code_num": [2], "code": "import os\\nos.environ['DJANGO_SETTINGS_MODULE'] = 'settings'\\n\\nfrom django.template.defaultfilters import slugify", "id": "5862791", "code_sizes": 1}, {"nl_num": [3, 2, 899, 2610, 2, 4], "code_num": [2], "code": "#8  0x00007fffe4c6a332 in gtk_icon_theme_lookup_icon () from /usr/lib/libgtk-x11-2.0.so.0\\n#9  0x00007fffe4c6ae14 in gtk_icon_theme_load_icon () from /usr/lib/libgtk-x11-2.0.so.0\\n#10 0x00007fffe4c66311 in gtk_icon_set_render_icon () from /usr/lib/libgtk-x11-2.0.so.0\\n#18 0x00007fffd9965847 in QMessageBox::setIcon(QMessageBox::Icon) () from /usr/lib/libQtGui.so.4", "id": "14013004", "code_sizes": 1}, {"nl_num": [3, 3704, 2, 4018, 327, 568, 2127, 1600, 4], "code_num": [2], "code": "s1 = wb.add_sheet(\"Test\")\\n\\ns1.write(0, 0, \"Col 1\")\\ns1.write(0, 1, \"Col 2\")\\ns1.write(0, 2, \"Col 3\")\\ns1.write(0, 3, \"Col 4\")\\ns1.write(0, 4, \"Col 5\")\\n\\ntest_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\\nlist2 = []\\nfor val in test_list:\\n    list2.append(str(val))\\n\\n# Generator for column\\ndef next_c_index():\\n    c = [1, 2, 3, 4]\\n    while True:\\n        for i in c:\\n            yield i\\n\\n# Generator for row\\ndef next_r_index(ncolumns=5):\\n    \"\"\"\\n    Assumes you start from writing from 2nd row.\\n    :ncolumns = number of columns (default 5)\\n    Eg. 1, 1, 1, 1, 2, 2, 2, 2\\n    \"\"\"\\n    n = 0\\n    r = 0\\n    while True:\\n        # In every cycle of 4\\n        if (n)%(ncolumns-1)==0:\\n            r += 1\\n        n += 1\\n        yield r\\n\\n# Since you have 5 columns I pass 5 while calling row generator\\nrow = next_r_index(ncolumns=5)\\ncol = next_c_index()\\nfor val in list2:\\n    s1.write(row.next(), col.next(), val)", "id": "28870136", "code_sizes": 1}, {"nl_num": [3, 882, 2858, 1652, 449, 338, 4505, 853, 1225, 938, 2610, 188, 4], "code_num": [2], "code": "dir_path = os.path.join(data_dir, 'master_*.dat')\\nmaster_all = pd.concat(pd.read_table(data_file, delimiter='|', header=0)\\n                                     for data_file in glob.glob(dir_path))", "id": "12391758", "code_sizes": 1}, {"nl_num": [3, 3453, 1726, 4179, 4575, 1112, 862, 3780, 1170, 223, 1773, 2610, 188, 4], "code_num": [2], "code": "primes = list(historic(26))\\nprimes = {c : primes[ord(c) - ord('a')] for c in string.lowercase}\\n\\ndef prime_hash2(s):\\n   res = 1\\n   for c in s:\\n      res = res * primes[c]\\n   return res", "id": "13522262", "code_sizes": 1}, {"nl_num": [3, 2101, 1796, 1048, 4179, 1828, 1170, 1242, 4], "code_num": [2], "code": "import numpy as np\\nimport matplotlib.pyplot as plt\\nfrom scipy.stats import norm\\nx = np.linspace(-4,4,150)\\n# plot density with shaded area showing Pr(-2 <= x <= 1)\\nlb = -2\\nub = 1\\nd = norm.pdf(x)\\nfig = plt.figure()\\nax = fig.add_subplot(1, 1, 1)\\nax.plot(x, d)\\n\\nidx = np.searchsorted(x,[lb,ub])\\nsx = x[idx[0]:idx[1]]\\nsd = d[idx[0]:idx[1]]\\nplt.fill_between(sx, sd, 0, color = 'b')\\nplt.show()", "id": "14261988", "code_sizes": 1}, {"nl_num": [3, 2679, 3467, 4505, 540, 188, 169, 4411, 177, 3354, 3293, 4516, 1422, 4181, 4], "code_num": [2], "code": "def writeline(line):\\n    file.write(line + \"\\n\")\\n\\nfile = open(filename, \"w\")\\nftp.retrlines(\"retr \" + filename, writeline)", "id": "1184844", "code_sizes": 1}, {"nl_num": [3, 69, 568, 4187, 4798, 1828, 3008, 3477, 250, 1828, 3518, 4179, 1828, 2252, 2326, 4], "code_num": [2], "code": "db.collection.find( { \"emotions.emotion1\": { \"$exists\":True } } )", "id": "34063402", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4570, 2587, 1007, 451, 2, 2326, 4], "code_num": [2], "code": "a[:,[3,4]]", "id": "20077146", "code_sizes": 1}, {"nl_num": [3, 188, 1227, 4171, 864, 550, 568, 1545, 1828, 4350, 1605, 2, 873, 1828, 2, 4178, 2023, 3624, 1422, 3218, 2326, 4], "code_num": [2], "code": "from tkinter import *\\nroot = Tk()\\nw = Label(root, text=\"Take your Medicine \\n :):)...Get Well Soon...\")\\nw.pack()\\nroot.mainloop()", "id": "12022670", "code_sizes": 1}, {"nl_num": [3, 2, 2613, 4042, 2252, 2604, 787, 2464, 4135, 4], "code_num": [2], "code": "import pythoncom, pyHook \\n\\ndef OnKeyboardEvent(event):\\n    print 'Ascii:', event.Ascii, chr(event.Ascii)\\n    print 'Key:', event.Key\\n    print 'KeyID:', event.KeyID\\n    print 'ScanCode:', event.ScanCode\\n    print 'Extended:', event.Extended\\n\\n    return True #for pass through key events, False to eat Keys\\n\\nhm = pyHook.HookManager()\\nhm.KeyDown = OnKeyboardEvent\\nhm.HookKeyboard()\\npythoncom.PumpMessages()", "id": "1786194", "code_sizes": 1}, {"nl_num": [3, 3397, 2, 3293, 2578, 4500, 4], "code_num": [2], "code": "row_cols = [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]\\n\\nx_sizes = [50, 50, 50, 50, 50, 50, 50, 50, 50]\\ny_sizes = [60, 60, 60, 60, 60, 60, 60, 60, 60]\\n\\nfor row_col, x_size, y_size in zip(row_cols, x_sizes, y_sizes):\\n    row, col = row_col[0], row_col[1]\\n\\n    coord = (col * x_size, row * y_size)\\n    print coord", "id": "31161797", "code_sizes": 1}, {"nl_num": [3, 1997, 2300, 4179, 2536, 3293, 4649, 954, 1242, 2610, 990, 4], "code_num": [2], "code": "from scipy import linalg as la\\ne = la.eigvals(my_matrix)\\nhist,xedges,yedges = np.histogram2d(e.real,e.imag,bins=40,normed=False)", "id": "29533268", "code_sizes": 1}, {"nl_num": [3, 1872, 1039, 3293, 4238, 438, 4253, 3747, 1039, 350, 2710, 4], "code_num": [2], "code": "persons_list = [person for person in persons_list if person.sexe != 'Male']", "id": "23844912", "code_sizes": 1}, {"nl_num": [3, 4583, 3004, 4238, 1708, 3750, 2610, 990, 4], "code_num": [2], "code": "import glob\\n\\nmydir = \"C:\\Data\"\\n\\nfile_list = glob.glob(mydir + \"/*.csv\") # Include slash or it will search in the wrong directory!!\\nprint('file_list {}'.format(file_list))", "id": "33747968", "code_sizes": 1}, {"nl_num": [3, 2385, 864, 550, 568, 2878, 291, 3645, 1039, 2610, 2684, 4], "code_num": [2], "code": "request.GET", "id": "20891500", "code_sizes": 1}, {"nl_num": [3, 4133, 4190, 1828, 2402, 1442, 568, 4174, 1828, 4640, 3518, 3886, 1400, 4174, 2604, 4596, 4178, 1400, 3518, 3239, 2326, 4], "code_num": [2], "code": "def update(dictionary, key, newvalue, func=max):\\n    dictionary[key] = func(dictionary[key], newvalue)", "id": "10757660", "code_sizes": 1}, {"nl_num": [3, 2, 3852, 568, 3079, 1708, 1828, 1959, 4], "code_num": [2], "code": "i = 1\\nfor group in groups:\\n    out1=df.ix[group]\\n    out1.to_csv('group%s.csv' % i)\\n    out1.pl.describe()\\n    i += 1", "id": "15485605", "code_sizes": 1}, {"nl_num": [3, 2, 2613, 237, 2610, 2, 4], "code_num": [2], "code": "# you don't even need a comment to find out what the intention is here\\nif is_invalid(abc):\\n    error()", "id": "33562222", "code_sizes": 1}, {"nl_num": [3, 2, 2, 3779, 540, 498, 4182, 4807, 2, 4], "code_num": [2], "code": "#!/usr/bin/env python\\nfrom itertools import combinations\\n\\nimport igraph\\nimport optparse\\n\\nparser = optparse.OptionParser(usage=\"%prog [options] infile\")\\nparser.add_option(\"-k\", metavar=\"K\", default=3, type=int,\\n        help=\"use a clique size of K\")\\n\\noptions, args = parser.parse_args()\\n\\nif not args:\\n    parser.error(\"Required input file as first argument\")\\n\\nk = options.k\\ng = igraph.load(args[0], format=\"ncol\", directed=False)\\ncls = map(set, g.maximal_cliques(min=k))\\n\\nedgelist = []\\nfor i, j in combinations(range(len(cls)), 2):\\n    if len(cls[i].intersection(cls[j])) >= k-1:\\n        edgelist.append((i, j))\\n\\ncg = igraph.Graph(edgelist, directed=False)\\nclusters = cg.clusters()\\nfor cluster in clusters:\\n    members = set()\\n    for i in cluster:\\n        members.update(cls[i])\\n    print \"\\t\".join(g.vs[members][\"name\"])", "id": "20063927", "code_sizes": 1}, {"nl_num": [3, 2432, 4500, 853, 2, 3538, 4], "code_num": [2], "code": "with open('test.txt', 'r') as inf:\\n    lst = inf.readlines()  # much easier than iterating and accumulating\\n\\nlst[1:] = sorted(lst[1:])  # this will leave the first line: \"Test List\" intact\\n\\nwith open('test.txt', 'w') as outf:\\n    outf.writelines(lst)  # re-write the file", "id": "29868946", "code_sizes": 1}, {"nl_num": [3, 550, 2857, 483, 3991, 1828, 1790, 4108, 540, 1400, 1325, 464, 540, 4135, 2326, 4], "code_num": [2], "code": "wx.Frame.__init__(self, None, -1, 'CR Part 1', size=(800, 600))", "id": "19576850", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 3348, 1460, 338, 2610, 1828, 2725, 4], "code_num": [2], "code": "return template('hello_template', name=name, request=request)", "id": "13649951", "code_sizes": 1}, {"nl_num": [3, 2, 4179, 2473, 4238, 4179, 2206, 3293, 1312, 4238, 4179, 2206, 4], "code_num": [2], "code": "c=[map(lambda x, y: x-y, ii, jj) for ii, jj in zip(a,b)]", "id": "27199469", "code_sizes": 1}, {"nl_num": [3, 894, 2320, 2, 4238, 2610, 990, 1708, 2431, 4], "code_num": [2], "code": "count=100", "id": "25529629", "code_sizes": 1}, {"nl_num": [3, 3397, 1400, 1218, 4179, 1400, 148, 4739, 3963, 2610, 1828, 4238, 4], "code_num": [2], "code": "def find_K_highest(lst, k):\\n    # escape index error\\n    if k>len(lst):\\n        k=len(lst)\\n    # the output array\\n    idxs = [None]*k\\n    to_watch = range(len(lst))\\n    # do it k times\\n    for i in range(k):\\n        # guess that max value is at least at idx '0' of to_watch\\n        to_del=0\\n        idx = to_watch[to_del]\\n        max_val = lst[idx]\\n        # search through the list for bigger value and its index\\n        for jj in range(len(to_watch)):\\n            j=to_watch[jj]\\n            val = lst[j]\\n            # check that its bigger that previously finded max\\n            if val > max_val:\\n                idx = j\\n                max_val = val\\n                to_del=jj\\n            # append it\\n        idxs[i] = idx\\n        del to_watch[to_del]\\n        # return answer\\n    return idxs", "id": "10560607", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4373, 476, 2610, 1828, 549, 900, 3004, 4], "code_num": [2], "code": "class People:\\n\\n    def __init__(self, fname=None, lname=None, age=None, gender=None):\\n        self.fname = fname\\n        self.lname = lname\\n        self.age = age\\n        self.gender = gender\\n\\ndef display(self):\\n    print self.fname\\n\\npeople = [People('John','W Cooper',23,'Male'),\\n           People('James','W Cooper',30,'Male'),\\n           People('Kate','W Cooper',20,'Female')]\\nf = open(\"abc.txt\", \"w\")\\nfor person in people:\\n    f.write( person.fname +\",\"+ person.lname +\",\"+ str(person.age) +\",\"+ person.gender + '\\n' )\\n    person.display()\\nf.close()", "id": "19423845", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1138, 3055, 4238, 1605, 2244, 4454, 4], "code_num": [2], "code": "import sys\\n\\nif len(sys.argv) != 3:\\n    print 'parameters: list1 list2'\\n    sys.exit(1)\\n\\nlist1 = []\\nfor line in file(sys.argv[1]):\\n    fields = line.split()\\n    f1 = fields[0]\\n    f2, f3 = fields[1].split('-')\\n    list1.append((f1, int(f2), int(f3), [], ))\\n\\nfor line in file(sys.argv[2]):\\n    value = int(line)\\n    for name, lb, ub, values in list1:\\n        if value >= lb and value <= ub:\\n            values.append(str(value))\\n\\nfor name, lb, ub, values in list1:\\n    if values: vals = ','.join(values)\\n    else: vals = ''\\n    print '%s %d-%d %s' % (name, lb, ub, vals, )", "id": "5861745", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2776, 3821, 568, 4465, 4491, 3932, 3747, 2, 2464, 2, 1623, 2610, 188, 2326, 4], "code_num": [2], "code": "# gotcha|pitfall: my original idea, but this generates a list of 1-tuples:\\n# x = [struct.unpack(\"b\",a) for a in charlist]\\n\\nfmt = \"%ib\"%len(charlist) # eg. \"5b\", if charlist's length is 5\\nx = struct.unpack(fmt,charlist) # tuple of ints", "id": "15334465", "code_sizes": 1}, {"nl_num": [3, 3333, 1650, 2206, 4179, 1400, 2943, 1598, 2464, 540, 3197, 3337, 4], "code_num": [2], "code": "import matplotlib.pyplot as plt\\nimport math\\n\\nmy_lists = [[i*math.exp(-x/10.) for x in range(10) ] for i in range(1,7)]\\nlegend_names = [\"line 1\", \"line 2\", \"line 3\", \"line 4\", \"line 5\", \"line 6\"]\\nfor ydata, name in zip(my_lists, legend_names):\\n    plt.plot(ydata, label = name)\\nplt.legend(loc = 'best')\\nplt.show()", "id": "10775817", "code_sizes": 1}, {"nl_num": [3, 4438, 2121, 2464, 3886, 2951, 223, 1959, 4], "code_num": [2], "code": "for i,v in enumerate (['item0', 'item01', 'item02']):\\n    print (i, \":\", v)", "id": "16479519", "code_sizes": 1}, {"nl_num": [3, 326, 4238, 2610, 990, 2028, 4], "code_num": [2], "code": "mylist = ['x', 3, 'b']\\nprint '[%s]' % ', '.join(map(str, mylist))", "id": "5445970", "code_sizes": 1}, {"nl_num": [3, 520, 990, 2746, 540, 1170, 327, 4], "code_num": [2], "code": "def f1():\\n  print \"hi\"\\n\\ndef f2():\\n  print \"bye\"\\n\\nfunctions = {1: f1, 2: f2}  # dict of functions (Note: no parenthesis)\\n\\ndef options(x):\\n    return functions[x]()   # Get the function against the index and invoke it\\n\\noptions(1)\\n# hi\\n\\noptions(2)\\n# bye", "id": "22199417", "code_sizes": 1}, {"nl_num": [3, 1132, 568, 2, 3747, 1754, 3747, 1355, 3747, 3132, 3293, 821, 4], "code_num": [2], "code": "import boto\\n\\nrds = boto.connect_rds()\\ninstances = rds.get_all_dbinstances()\\ninstances[0].status", "id": "9526203", "code_sizes": 1}, {"nl_num": [3, 1592, 1828, 2710, 223, 382, 1124, 4], "code_num": [2], "code": "from xml.parsers.expat import ParserCreate\\n\\nopen_elements = {}\\nresult_dict = {}\\n\\ndef start_element(name, attrs):\\n    open_elements[name] = True\\n\\ndef end_element(name):\\n    del open_elements[name]\\n\\ndef char_data(data):\\n    for element in open_elements:\\n        cur = result_dict.setdefault(element, '')\\n        result_dict[element] = cur + data\\n\\nif __name__ == '__main__':\\n    p = ParserCreate()\\n\\n    p.StartElementHandler = start_element\\n    p.EndElementHandler = end_element\\n    p.CharacterDataHandler = char_data\\n\\n    p.Parse(u'<_133_3><_135_3><_116_2>The other system worked for about 1 month</_116_2> got some good images <_137_3>on it then it started doing the same thing as the first one</_137_3> so then I quit using either camera now they are just sitting and collecting dust.</_135_3></_133_3>', 1)\\n\\n    print result_dict", "id": "330334", "code_sizes": 1}, {"nl_num": [3, 3222, 1828, 3746, 3293, 4585, 2610, 1828, 2049, 938, 4], "code_num": [2], "code": "tuple([tuple(df[col]) for col in df])", "id": "32485488", "code_sizes": 1}, {"nl_num": [3, 188, 3047, 2710, 169, 38, 2637, 2610, 942, 869, 4], "code_num": [2], "code": "import os\\n\\noutfile = open('bla.txt.2', 'w')\\n\\nsearch = \"#test search 123\"\\nflag = 0\\n\\nwith open('bla.txt', 'r') as f:\\n\\n    for line in f:\\n        if flag == 1:\\n            mod_line = \"#\" + line\\n            outfile.write(mod_line)\\n            flag = 0\\n            continue\\n\\n        outfile.write(line)\\n        if (search in line):\\n            flag = 1\\n\\noutfile.close()\\n\\nos.remove('bla.txt')\\nos.rename('bla.txt.2', 'bla.txt')", "id": "30936032", "code_sizes": 1}, {"nl_num": [3, 980, 2, 1297, 1530, 4], "code_num": [2], "code": "import re\\nreferrer = \"http://myapp.com/other/page/aaa\"\\nm = re.match(\"^http://myapp.com/other/page/(.*)\", referrer)\\nif m:\\n    print m.group(1)", "id": "15213792", "code_sizes": 1}, {"nl_num": [3, 71, 2, 1442, 4179, 1333, 1828, 3867, 1537, 2610, 2998, 4], "code_num": [2], "code": "Parent.options = dict(\\n    option1='value1',\\n    option2='value2',\\n)\\n\\nChild.options = dict(Parent.options,\\n    option2='value2a',\\n    option3='value3',\\n)", "id": "907324", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1352, 1828, 1566, 3747, 1014, 2, 2238, 3528, 4], "code_num": [2], "code": "re.sub(r'^[a-z]:','',string)", "id": "16307463", "code_sizes": 1}, {"nl_num": [3, 1997, 169, 38, 2710, 327, 2610, 188, 4238, 4], "code_num": [2], "code": "words = [w.replace('[br]', '<br />') for w in words]", "id": "3136689", "code_sizes": 1}, {"nl_num": [3, 3793, 188, 3387, 2, 4], "code_num": [2], "code": "import re\\n\\ndata = \"Time:01.09.25.258 O:Localhost R:192.168.1.1 id:62 \"\\n\\nresult = {}\\nfor i in data.split():\\n    j, k = re.findall(r'[^: ]+', i)\\n    result[j] = k\\n\\nprint(result) #Prints {'id': '62', 'O': 'Localhost', 'Time': '01.09.25.258', 'R': '192.168.1.1'}", "id": "16055641", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4570, 990, 169, 3927, 568, 4330, 2473, 338, 2, 3817, 338, 2019, 2473, 4588, 4], "code_num": [2], "code": "data=[\"C Aug-14 - 15000\"]\\nalldata=[]\\nfor i in data:\\n    ROIdata=i.replace('-',' ')\\n    alldata.append(';'.join(ROIdata.split()))", "id": "25375047", "code_sizes": 1}, {"nl_num": [3, 4349, 540, 389, 3247, 169, 3971, 3518, 568, 2049, 196, 4], "code_num": [2], "code": "d = {('chr6:286000-288000', 'chr6:152152000-152154000'): 1, ('chr6:182000-184000', 'chr6:152968000-152970000'): 1}\\n\\ndf = pd.DataFrame(d.values(), index=pd.MultiIndex.from_tuples(d.keys())).unstack(1)", "id": "27218233", "code_sizes": 1}, {"nl_num": [3, 2238, 2, 3528, 3958, 262, 1007, 517, 1007, 2984, 2462, 3248, 2326, 4], "code_num": [2], "code": "exit = False\\n\\nwhile not exit:\\n    selection = int(raw_input(\"Press 1 to go and 0 to quit: \"))       #added ) to correct syntax error\\n    if selection == 1:\\n        print(\"yay\")\\n    elif selection == 0:\\n        print(\"Goodbye\")\\n        exit = True\\n    else:\\n        print(\"Go away\")", "id": "23441389", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 1545, 480, 3747, 3183, 169, 3821, 2610, 4807, 2, 568, 3004, 2610, 188, 2326, 4], "code_num": [2], "code": "codecs.open()", "id": "10908195", "code_sizes": 1}, {"nl_num": [3, 69, 568, 2007, 328, 990, 897, 2610, 3279, 4563, 4102, 3219, 4], "code_num": [2], "code": "from google.appengine.ext import deferred\\ndeferred.defer(yourfile.your_fetcher_method, _target='mybackend')", "id": "17783634", "code_sizes": 1}, {"nl_num": [3, 3492, 3828, 3747, 4332, 2610, 2473, 1242, 1708, 2101, 540, 2, 4], "code_num": [2], "code": "test = []\\nfor name, group in cleaned_data:\\n    test.append(group)\\nboxplot(test)", "id": "24437825", "code_sizes": 1}, {"nl_num": [3, 3733, 1828, 346, 420, 2237, 4178, 4018, 927, 4], "code_num": [2], "code": "condition = np.zeros_like(A, dtype='bool')\\ncondition[0:2, 0:1] = (A[0:2, 0:1] % 2 ==0)", "id": "24457110", "code_sizes": 1}, {"nl_num": [3, 3333, 1958, 2, 2610, 188, 4], "code_num": [2], "code": "import numpy as np\\nfrom matplotlib import pyplot as plt\\nfrom matplotlib import animation\\n\\nX, Y = np.mgrid[:2*np.pi:0.2,:2*np.pi:0.2]\\nU = np.cos(X)\\nV = np.sin(Y)\\n\\nfig, ax = plt.subplots(1,1)\\nQ = ax.quiver(X, Y, U, V, pivot='mid', color='r', units='inches')\\n\\nax.set_xlim(-1, 7)\\nax.set_ylim(-1, 7)\\n\\ndef update_quiver(num, Q, X, Y):\\n    \"\"\"updates the horizontal and vertical vector components by a\\n    fixed increment on each frame\\n    \"\"\"\\n\\n    U = np.cos(X + num*0.1)\\n    V = np.sin(Y + num*0.1)\\n\\n    Q.set_UVC(U,V)\\n\\n    return Q,\\n\\n# you need to set blit=False, or the first set of arrows never gets\\n# cleared on subsequent frames\\nanim = animation.FuncAnimation(fig, update_quiver, fargs=(Q, X, Y),\\n                               interval=10, blit=False)\\n\\nplt.show()", "id": "19329039", "code_sizes": 1}, {"nl_num": [3, 4527, 1828, 3787, 1708, 4487, 2238, 440, 2604, 213, 524, 873, 3528, 4], "code_num": [2], "code": "t.left(90) # then call tree after with tree()", "id": "29154455", "code_sizes": 1}, {"nl_num": [3, 2, 540, 1828, 2474, 4], "code_num": [2], "code": "def logger(foo):\\n    def fn():\\n        try:\\n            print foo()\\n        except Exception as e:\\n            print e\\n    return fn", "id": "8855183", "code_sizes": 1}, {"nl_num": [3, 188, 761, 2, 2, 2, 4], "code_num": [2], "code": "MAGIC = b'258EAFA5-E914-47DA-95CA-C5AB0DC85B11'  # Fix key for handshake on server side\\nclass WebSocketsHandler(socketserver.StreamRequestHandler):\\n   def handshake(self):\\n      data = self.request.recv(1024).strip()\\n      hsKey = hsUpgrade = b''\\n      for header in data.split(b'\\r\\n'):\\n         if header.startswith(b'Sec-WebSocket-Key'): hsKey = header.split(b':')[1].strip()\\n         if header.startswith(b'Upgrade'): hsUpgrade = header.split(b':')[1].strip()\\n      if hsUpgrade != b\"websocket\": return\\n      digest = b64encode(bytes.fromhex(sha1(hsKey + MAGIC).hexdigest())).decode('utf-8')\\n      response = ('HTTP/1.1 101 Switching Protocols\\r\\nUpgrade: websocket\\r\\n'\\n            'Connection: Upgrade\\r\\nSec-WebSocket-Accept: {}\\r\\n\\r\\n'.format(digest))\\n      print('Handshaking...{}'.format(digest))\\n      self.handshake_done = self.request.send(response.encode('utf8'))", "id": "30720111", "code_sizes": 1}, {"nl_num": [3, 3248, 2610, 990, 4], "code_num": [2], "code": "a.__dict__ = dict(b.__dict__)", "id": "4204075", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2616, 2, 990, 4691, 1704, 4047, 612, 3004, 2610, 1828, 4219, 4], "code_num": [2], "code": "import glob\\nimport pefile\\n\\nfor filename in glob.iglob('C:\\Documents and Settings\\Zha\\Desktop\\\\test\\*.exe'):\\n    pe =  pefile.PE(filename)\\n    pe.parse_data_directories()\\n    print '%x' % pe.FILE_HEADER.NumberOfSections", "id": "23905796", "code_sizes": 1}, {"nl_num": [3, 2385, 860, 1828, 4458, 338, 2237, 4178, 1312, 4714, 4], "code_num": [2], "code": "Note.objects.all().order_by('note_data__created')", "id": "8037103", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 541, 4220, 528, 2126, 3293, 1828, 2, 2319, 2326, 4], "code_num": [2], "code": "#!/usr/bin/python\\n\\nimport wikipedia\\npage = wikipedia.page(\"caravaggio\")\\n#links = page.links\\n#for tuple_ in page:\\n#    print tuple_\\n#print dir(page)\\nprint page.content\\n#print page.coordinates\\nprint 'page.html'\\nprint page.html\\nprint\\nprint 'page.images'\\nprint page.images\\nprint\\nprint 'page.links'\\nprint page.links\\nprint\\nprint 'page.original_title'\\nprint page.original_title\\nprint\\nprint 'page.pageid'\\nprint page.pageid\\nprint\\nprint 'page.parent_id'\\nprint page.parent_id\\nprint\\nprint 'page.references'\\nprint page.references\\nprint\\nprint 'page.revision_id'\\nprint page.revision_id\\nprint\\nprint 'page.section'\\nprint page.section\\nprint\\nprint 'page.sections'\\nprint page.sections\\nprint\\nprint 'page.summary'\\nprint page.summary\\nprint\\nprint 'page.title'\\nprint page.title\\nprint\\nprint 'page.url'\\nprint page.url\\nprint\\n#print links", "id": "26006310", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2616, 1828, 4238, 4179, 2473, 2714, 2629, 1605, 2714, 4], "code_num": [2], "code": "s = your_lst[0]", "id": "30282942", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1945, 990, 2517, 1366, 551, 4588, 3498, 2610, 1544, 2326, 4], "code_num": [2], "code": "aspectTermTag = etree.SubElement(aspectTermsTag, \"aspectTerm\", {\"term\":asp[0], \"from\": asp[1], \"to\":asp[2]})", "id": "26946305", "code_sizes": 1}, {"nl_num": [3, 527, 3119, 1712, 3293, 184, 284, 177, 2595, 3459, 1400, 4227, 3975, 4], "code_num": [2], "code": "import sys\\nprint \"foo\"\\nsys.stdout.flush()", "id": "367053", "code_sizes": 1}, {"nl_num": [3, 2, 1442, 568, 2878, 1406, 327, 4], "code_num": [2], "code": "uniques = set(x for x in names.split(u', ') for names in input_list)", "id": "32446174", "code_sizes": 1}, {"nl_num": [3, 2, 188, 864, 3119, 262, 250, 1828, 1170, 3293, 1312, 1170, 4], "code_num": [2], "code": "class C:\\n    def func1(self):\\n     self.var1 = \"something\"\\n\\n    def func2(self):\\n     print self.var1\\n\\nfoo = C()\\nfoo.func1()\\nfoo.func2()", "id": "5262264", "code_sizes": 1}, {"nl_num": [3, 3252, 338, 1297, 668, 1708, 990, 4], "code_num": [2], "code": "from datetime import datetime\\nimport itertools\\n\\nsales = [\\n    ('2013-05-01', 100),\\n    ('2013-05-02', 200),\\n    ('2013-05-03', 150),\\n    ('2013-05-03', 120),\\n    ('2013-05-04', 200),\\n    ('2013-08-01', 250),\\n]\\n\\ndef toWeek(sale):\\n    '''(date,volume) -> date of the Sunday of that week'''\\n    sunday = datetime.strptime(sale[0], '%Y-%m-%d').strftime('%Y-%U-0')\\n    return datetime.strptime(sunday, '%Y-%U-%w').strftime('%Y-%m-%d')\\n\\ngrouped_sales = itertools.groupby(sales, toWeek)\\n\\naggregate_sales = (\\n    (week, sum(day_sales for date, day_sales in week_sales))\\n    for week, week_sales in grouped_sales)\\n\\nprint list(aggregate_sales)", "id": "18797479", "code_sizes": 1}, {"nl_num": [3, 69, 568, 1138, 3055, 338, 3299, 2610, 990, 2049, 4], "code_num": [2], "code": "bigdata=data1.append(data2,ignore_index = True)", "id": "12850345", "code_sizes": 1}, {"nl_num": [3, 3460, 1828, 3467, 123, 2610, 990, 4], "code_num": [2], "code": "def tree(n):\\n    treeStr = \"\"\\n    for i in range(0,n):\\n        level = \" \"*(n-i) + \"/\" + \" \"*(2*i) + \"\\\\\"\\n        treeStr += level.center(n+1) + \"\\n\"\\n    print(treeStr)\\n\\ntree(10);", "id": "34236207", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1519, 327, 2610, 3758, 726, 4640, 1708, 1561, 2326, 4], "code_num": [2], "code": "session.modified = True", "id": "32713380", "code_sizes": 1}, {"nl_num": [3, 4137, 655, 4128, 1400, 3004, 3995, 4179, 3825, 3004, 4], "code_num": [2], "code": "def update_filename(instance, filename):\\n    path = \"upload/path/\"\\n    format = instance.userid + instance.transaction_uuid + instance.file_extension\\n    return os.path.join(path, format)", "id": "2680391", "code_sizes": 1}, {"nl_num": [3, 4402, 927, 4780, 2610, 2049, 4], "code_num": [2], "code": "df.reset_index()", "id": "20107570", "code_sizes": 1}, {"nl_num": [3, 990, 864, 3167, 17, 1442, 568, 2, 1828, 4238, 540, 549, 1039, 4], "code_num": [2], "code": "def joinit(iterable, delimiter):\\n    it = iter(iterable)\\n    yield next(it)\\n    for x in it:\\n        yield delimiter\\n        yield x", "id": "5655708", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4174, 2728, 3004, 1708, 1544, 169, 990, 2326, 4], "code_num": [2], "code": "example = etree.Element(\"example\")\\nlogin = etree.SubElement(example, \"login\")\\npassword = etree.SubElement(login,\"password\")\\npassword.text = \"newPassword\"", "id": "2108334", "code_sizes": 1}, {"nl_num": [3, 1595, 3705, 1477, 568, 2616, 3252, 161, 2610, 943, 3779, 891, 4], "code_num": [2], "code": "1/(1+exp(sum))", "id": "9561231", "code_sizes": 1}, {"nl_num": [3, 4527, 2817, 4379, 2869, 873, 2610, 1400, 539, 4], "code_num": [2], "code": "try:\\n    from tkinter import *\\nexcept ImportError:\\n    from Tkinter import *\\n\\n\\nclass NewRoot(Tk):    \\n    def __init__(self):\\n        Tk.__init__(self)\\n        self.attributes('-alpha', 0.0)\\n\\nclass MyMain(Toplevel):\\n    def __init__(self, master):\\n        Toplevel.__init__(self, master)\\n        self.overrideredirect(1)\\n        self.attributes('-topmost', 1)\\n        self.geometry('+100+100')\\n        self.bind('<ButtonRelease-3>', self.on_close)  #right-click to get out\\n\\n    def on_close(self, event):\\n        self.master.destroy()\\n\\n\\nif __name__ == '__main__':\\n\\n    root = NewRoot()\\n    root.lower()\\n    root.iconify()\\n    root.title('Spam 2.0')\\n\\n    app = MyMain(root)\\n    app.mainloop()", "id": "4066027", "code_sizes": 1}, {"nl_num": [3, 1882, 3222, 2639, 3293, 2206, 4], "code_num": [2], "code": "import itertools\\nlol = [[1,2,3],[4,5,6],[7,8,9]]\\nresult = list()\\nwhile lol:\\n    l=lol.pop(0)\\n    o=itertools.chain(*lol)\\n    result += itertools.product( l,o )", "id": "8658995", "code_sizes": 1}, {"nl_num": [3, 3387, 1400, 764, 3976, 4179, 2229, 2610, 188, 4], "code_num": [2], "code": "urlparse.urlparse(url).path.rsplit(\"/\", 1)[-1]", "id": "34388752", "code_sizes": 1}, {"nl_num": [3, 4135, 3747, 550, 568, 4335, 549, 1856, 3886, 2097, 2610, 1828, 321, 2326, 4], "code_num": [2], "code": "event.SetEventObject(self.myList)", "id": "34026452", "code_sizes": 1}, {"nl_num": [3, 1997, 3803, 4684, 3616, 540, 2, 135, 2462, 389, 4684, 4179, 2, 1162, 2238, 1530, 3528, 4], "code_num": [2, 2, 2], "code": "re.findall('((?:[A-Z][\\w]+\\s*){1,2}),[\\s]([A-Z]{2})', input)", "id": "18834466", "code_sizes": 3}, {"nl_num": [3, 188, 3344, 3506, 568, 3506, 3004, 2610, 1828, 1956, 1959, 4], "code_num": [2], "code": "import requests\\nimport json\\n\\nurl = 'https://api.github.com/users'\\ntoken = \"my_token\"\\nheaders = {'Authorization': 'token %s' % token}\\n\\noutfile = open('users.json', 'a')\\n\\nwhile True:\\n    r = requests.get(url, headers=headers)\\n    users = r.json()\\n    json.dump(users, outfile)\\n    url = r.links['next'].get('url')\\n    # I don't know what Github return in case there is no more users, so you need to double check by yourself\\n    if url == '':\\n        break\\n\\noutfile.close()", "id": "30744468", "code_sizes": 1}, {"nl_num": [3, 69, 568, 4575, 1828, 4238, 4179, 32, 4], "code_num": [2], "code": "# transform into a source:target dictionary\\nlinks = {d['pred'] if d['pred'] else 'root':d['id'] for d in unordered_linked_list}\\n\\n# follow links and print\\nsource = 'root'\\nwhile source in links:\\n    print links[source]\\n    source = links[source]", "id": "32076140", "code_sizes": 1}, {"nl_num": [3, 990, 746, 1948, 2710, 568, 1894, 2610, 4238, 4], "code_num": [2], "code": "for i, item in enumerate(domaininfo[1:]):\\n    if not item:\\n        domaininfo[i + 1] = None", "id": "33423667", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2531, 3690, 4238, 4179, 4640, 2610, 990, 2326, 4], "code_num": [2], "code": "for a in listofobs:\\n    print str( a['timestamp'] ), a['ip'], a['user']", "id": "11370913", "code_sizes": 1}, {"nl_num": [3, 2, 593, 2610, 990, 4], "code_num": [2], "code": "class ProjectType(object):\\n    build_cmd = \"\"\\n    markers = []\\n\\n    @classmethod\\n    def make_project(cls, path):\\n        prj_types = (PythonProject, AutoconfProject, MakefileOnly, ProjectType)\\n        for p in prj_types:\\n            markers = p.markers\\n            if any(path.isfile(path.join(path, x)) for x in markers):\\n                return p()\\n\\nclass PythonProject(ProjectType):\\n    build_cmd = \"python setup.py develop --user\"\\n    markers = ['setup.py']\\n\\nclass AutoconfProject(ProjectType):\\n    #TODO: there should be also a way to configure it\\n    build_cmd = \"./configure && make -j3\"\\n    markers = ['configure.in', 'configure.ac', 'makefile.am']\\n\\nclass MakefileOnly(ProjectType):\\n    build_cmd = \"make\"\\n    markers = ['Makefile']", "id": "8129018", "code_sizes": 1}, {"nl_num": [3, 4310, 4179, 1828, 4347, 4323, 4347, 332, 2610, 3887, 2326, 4], "code_num": [2], "code": "table = gtk.Table(rows=1, columns=3)\\ntable.attach(photo_container, 0, 2, 0, 1) # Span column 0..2\\ntable.attach(exif_container, 2, 3, 0, 1)  # Span final column\\nwindow.add(table)", "id": "25701666", "code_sizes": 1}, {"nl_num": [3, 554, 2833, 4586, 3293, 3004, 169, 2103, 568, 1850, 4], "code_num": [2], "code": "import struct\\ndecoded = []\\nwith open(\"some_bin_file.rt\",\"rb\") as f:\\n     while True:\\n          try: \\n             decoded.append(struct.unpack_from(\"<Q\",f)[0])\\n             # `<` means little endian; `Q` means unsigned long long (8 bytes)            \\n          except struct.error:\\n             break\\n\\nprint decoded", "id": "24965862", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 2616, 1828, 2, 4179, 1828, 1170, 2610, 188, 2326, 4], "code_num": [2], "code": "import types\\ndef copy_func(f, name=None):\\n    return types.FunctionType(f.func_code, f.func_globals, name or f.func_name,\\n        f.func_defaults, f.func_closure)\\n\\ndef A():\\n    \"\"\"A\"\"\"\\n    pass\\nB = copy_func(A, \"B\")\\nB.__doc__ = \"\"\"B\"\"\"", "id": "6527633", "code_sizes": 1}, {"nl_num": [3, 1742, 990, 4350, 551, 2644, 955, 3293, 2019, 1828, 990, 4350, 4], "code_num": [2], "code": "import subprocess\\nfrom multiprocessing import Process\\n\\nProcess(target=subprocess.call, args=(('ls', '-l', ), )).start()", "id": "3595685", "code_sizes": 1}, {"nl_num": [3, 1601, 2385, 441, 540, 1828, 3192, 2, 1422, 4788, 3219, 4], "code_num": [2], "code": "django.contrib.sites", "id": "7334498", "code_sizes": 1}, {"nl_num": [3, 176, 425, 4347, 3598, 4347, 3747, 3747, 380, 2969, 2115, 265, 4597, 4179, 291, 3100, 4], "code_num": [2], "code": "db.DateTimeField(default=datetime.datetime.now)", "id": "33025434", "code_sizes": 1}, {"nl_num": [3, 3991, 4507, 3004, 3293, 990, 1844, 3556, 4], "code_num": [2], "code": "from distutils.core import setup\\nimport py2exe\\n\\n# Change the path in the following line for webdriver.xpi\\ndata_files = [('selenium/webdriver/firefox', ['D:/Python27/Lib/site-packages/selenium/webdriver/firefox/webdriver.xpi'])]\\n\\nsetup(\\n    name='General name of app',\\n    version='1.0',\\n    description='General description of app',\\n    author='author name',\\n    author_email='author email',\\n    url='',\\n    windows=[{'script': 'abc.py'}],   # the main py file\\n    data_files=data_files,\\n    options={\\n        'py2exe':\\n            {\\n                'skip_archive': True,\\n                'optimize': 2,\\n            }\\n    }\\n)", "id": "21098527", "code_sizes": 1}, {"nl_num": [3, 2, 3986, 2200, 1297, 1976, 4], "code_num": [2], "code": "vpan = gtk.VPaned()\\nvpan.show()\\nvpan.pack1(box1, shrink=False)\\nvpan.pack2(box2, shrink=False)", "id": "4560048", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1704, 2176, 3821, 4179, 1828, 777, 3004, 540, 4084, 4], "code_num": [2], "code": "NameValue = unicode(Item.getElementsByTagName(\"Name\")[0].childNodes[0].data.encode(\"latin-1\"), \"utf-8\")", "id": "11306860", "code_sizes": 1}, {"nl_num": [3, 4137, 655, 3747, 2625, 2464, 69, 568, 2878, 4260, 223, 769, 1605, 4403, 4518, 540, 1828, 3843, 1976, 2326, 4], "code_num": [2], "code": "tags = Tag.objects.filter(book__owner=me)\\ntags |= Tag.objects.filter(journalarticle__owner=me)\\ntags = tags.distinct()", "id": "11321906", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1545, 1659, 3467, 853, 1828, 188, 3004, 841, 4], "code_num": [2], "code": "f.write(u'R??o Negro'.encode('utf-8'))", "id": "16923416", "code_sizes": 1}, {"nl_num": [3, 467, 223, 1828, 2, 3747, 681, 4208, 4], "code_num": [2], "code": "import operator\\nimport functools\\n\\nnums = [1, 2, 3]\\nfuncs = iter([operator.add, operator.sub])\\n\\ndef special_foldl(nums, funcs):\\n    return functools.reduce(lambda x,y: next(funcs)(x,y), nums)\\n\\nprint(special_foldl(nums, funcs))\\n# 0", "id": "16616720", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3119, 2234, 1597, 540, 2250, 695, 1162, 2326, 4], "code_num": [2], "code": "message2 = message2.replace(guess[0], guess[2].upper())\\nprint message2", "id": "25777358", "code_sizes": 1}, {"nl_num": [3, 2359, 2549, 2610, 2385, 2255, 223, 4524, 4807, 1608, 2, 4], "code_num": [2], "code": "class MyUserAdmin(admin.ModelAdmin):\\n    def get_form(self, request, obj=None, **kwargs):\\n        self.exclude = []\\n        if not request.user.is_superuser:\\n            self.exclude.append('Permissions') #here!\\n        return super(MyUserAdmin, self).get_form(request, obj, **kwargs)", "id": "19203067", "code_sizes": 1}, {"nl_num": [3, 1734, 1838, 568, 990, 4691, 4], "code_num": [2], "code": "\"\"\"\\nThis module contains methods and classes\\n\"\"\"\\n\\nclass class_:\\n    \"\"\"\\n    This class is well... a class\\n    \"\"\"\\n    def method(self, in_):\\n        \"\"\"\\n        This method takes one argument: in_ and returns it\\n        \"\"\"\\n        return in_", "id": "28627852", "code_sizes": 1}, {"nl_num": [3, 1727, 817, 3293, 3004, 2610, 4465, 2684, 4], "code_num": [2], "code": "file_descriptor = open('file.name')\\nbytes = file_descriptor.read()\\ntry:\\n    newint=int(bytes)\\nexcept Exception as e:\\n    print(str(e))\\nprint(newint)", "id": "23025044", "code_sizes": 1}, {"nl_num": [3, 554, 1828, 177, 3079, 853, 2049, 3293, 2, 864, 416, 4178, 4171, 1861, 4], "code_num": [2], "code": "import pandas as pd\\nimport os\\n\\ntrainFile = \"F:/Projects/Python/coursera/intro-to-data-science/kaggle/data/train.csv\"\\n\\npwd = os.getcwd()\\nos.chdir(os.path.dirname(trainFile))\\ntrainData = pd.read_csv(os.path.basename(trainFile))\\nos.chdir(pwd)", "id": "16952632", "code_sizes": 1}, {"nl_num": [3, 2088, 3433, 4585, 2237, 4178, 3481, 4], "code_num": [2], "code": "matches = [i for i,x in enumerate(yourstring.split(',')) if \"#E\" in x]", "id": "24215305", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3366, 2, 2969, 524, 540, 188, 2326, 4], "code_num": [2], "code": "class MainHandler(tornado.web.RequestHandler):\\n    @tornado.web.asynchronous\\n    def get(self):\\n        http = tornado.httpclient.AsyncHTTPClient()\\n        http.fetch(\"http://friendfeed-api.com/v2/feed/bret\",\\n               callback=self.async_callback(self.on_response))\\n\\n    def on_response(self, response):\\n        if response.error: raise tornado.web.HTTPError(500)\\n        json = tornado.escape.json_decode(response.body)\\n        self.write(\"Fetched \" + str(len(json[\"entries\"])) + \" entries \"\\n                   \"from the FriendFeed API\")\\n        self.finish()", "id": "2441533", "code_sizes": 1}, {"nl_num": [3, 2288, 3518, 4179, 2892, 2022, 3747, 990, 4], "code_num": [2], "code": "def calc_32bit_diff(old, new):\\n  return (new - old + 0x100000000) % 0x100000000\\n\\nprint calc_32bit_diff(1, 42)\\nprint calc_32bit_diff(2147483647, -2147483648)\\nprint calc_32bit_diff(-2147483648, 2147483647)", "id": "28014608", "code_sizes": 1}, {"nl_num": [3, 4347, 609, 4347, 1828, 694, 853, 2582, 3759, 3963, 4], "code_num": [2], "code": "from itertools import combinations\\nwith open(\"rand.txt\",\"w\") as f:\\n    combs = [x for x in combinations(range(16),3) if sum(x ) == 15 ][:10]   \\n    for a,b,c in combs:\\n        f.write(\"{} {} {}\\n\".format(a,b,c))", "id": "26518784", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 2291, 1470, 655, 2, 2610, 3674, 2047, 2326, 4], "code_num": [2], "code": "unique_together = (('content_type', 'object_id', 'key', 'user', 'ip_address'))", "id": "3109150", "code_sizes": 1}, {"nl_num": [3, 2048, 568, 1828, 382, 4238, 2610, 990, 4], "code_num": [2], "code": "_list = [[] for _ in xrange(7)]", "id": "13763157", "code_sizes": 1}, {"nl_num": [3, 69, 568, 955, 1712, 4179, 1940, 4], "code_num": [2], "code": "subnet_ids = [s.id for s in subnet_list]", "id": "23065563", "code_sizes": 1}, {"nl_num": [3, 2, 1828, 2479, 4018, 853, 1828, 3079, 3004, 4], "code_num": [2], "code": "import numpy\\na = numpy.asarray([ [1,2,3], [4,5,6], [7,8,9] ])\\nnumpy.savetxt(\"foo.csv\", a, delimiter=\",\")", "id": "6081008", "code_sizes": 1}, {"nl_num": [3, 1432, 994, 2610, 3194, 4], "code_num": [2], "code": "spinPicture003 = Picture003.rotate(30)", "id": "30888134", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2, 1663, 2610, 4171, 3293, 188, 389, 177, 1861, 4], "code_num": [2], "code": "from win32com.client import Dispatch", "id": "4831702", "code_sizes": 1}, {"nl_num": [3, 2, 3495, 3245, 864, 550, 568, 2878, 3348, 568, 2, 177, 2, 2714, 3293, 3495, 4], "code_num": [2], "code": "def get(self, section, key, default=''):\\n     return self[section].get(key, default)", "id": "10959292", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 3770, 1828, 4591, 3923, 540, 2, 2238, 1944, 3528, 2326, 4], "code_num": [2], "code": "import os\\n\\nfrom PyQt4.QtCore import QCoreApplication, QSocketNotifier, SIGNAL\\n\\n\\ndef readAllData(fd):\\n        bufferSize = 1024\\n        while True:\\n                data = os.read(fd, bufferSize)\\n                if not data:\\n                        break\\n                print 'data read:'\\n                print repr(data)\\n\\n\\na = QCoreApplication([])\\n\\nfd = os.open('foo.txt', os.O_RDONLY)\\nnotifier = QSocketNotifier(fd, QSocketNotifier.Read)\\na.connect(notifier, SIGNAL('activated(int)'), readAllData)\\n\\na.exec_()", "id": "789304", "code_sizes": 1}, {"nl_num": [3, 3991, 1828, 1133, 113, 1708, 188, 568, 2426, 188, 4350, 4], "code_num": [2], "code": "#!/usr/bin/env python\\n\\nfrom subprocess import check_output\\n\\n\\nfrom circuits.web import Controller, Server\\n\\n\\nclass Root(Controller):\\n\\n    def index(self):\\n        return check_output(\"python hello.py\", shell=True)\\n\\n\\napp = Server(\"0.0.0.0:5000\")\\nRoot().register(app)\\n\\napp.run()", "id": "20487461", "code_sizes": 1}, {"nl_num": [3, 550, 568, 2, 711, 4128, 1594, 4], "code_num": [2], "code": "def list_range(self, low, high, rangelist = None):\\n\\n    if rangelist is None:\\n        rangelist = []\\n    # here goes the code of helper_list_range", "id": "26703059", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1545, 2710, 551, 4147, 374, 2610, 990, 2326, 4], "code_num": [2], "code": "with open(\"g:/test-unicode.txt\", \"w\", encoding=\"utf-16le\") as output:\\n  output.write(str1)", "id": "22852795", "code_sizes": 1}, {"nl_num": [3, 1574, 3506, 338, 4], "code_num": [2], "code": "print ', '.join((data[\"d\"][0][\"e\"].keys()))", "id": "21911853", "code_sizes": 1}, {"nl_num": [3, 2561, 1828, 4350, 568, 4373, 1828, 655, 1355, 4], "code_num": [2], "code": "import sys\\nsys.path.append('/path/to/your/djangoproject/')", "id": "20220588", "code_sizes": 1}, {"nl_num": [3, 474, 2473, 2637, 4179, 1828, 2710, 2610, 990, 4], "code_num": [2], "code": "someString[:3] + 'a' + someString[4:]", "id": "2165172", "code_sizes": 1}, {"nl_num": [3, 188, 4350, 568, 4570, 3987, 3293, 2473, 3004, 169, 1945, 327, 3293, 2977, 3987, 2610, 1312, 3004, 4], "code_num": [2], "code": "def fetch_data(filename1, filename2):\\n    lines = []\\n    data = {}\\n    with open (filename1) as f:\\n        lines = f.readlines()\\n\\n    for line in lines:\\n        if not line.strip():\\n            continue\\n        data[' '.join(line.split())] = 0\\n\\n    with open (filename2) as f:\\n        lines = f.readlines()\\n\\n    for line in lines:\\n        if not line.strip():\\n            continue\\n        arr = line.split()\\n        data[' '.join(arr[:-1])] += int(arr[3])\\n\\n    return data\\n\\n\\nwith open ('output.txt', 'w') as f:\\n    for key,value in fetch_data('original.txt','data.txt').iteritems():\\n        f.write('{0}    {1} \\n\\n'.format('    '.join(key.split()), str(value)))", "id": "22899846", "code_sizes": 1}, {"nl_num": [3, 525, 4178, 4220, 3023, 552, 4531, 4178, 2135, 26, 4], "code_num": [2], "code": "[textEditor.clear() for textEditor in myGroupBox.findChildren(QtGui.QTextEdit)]", "id": "30074784", "code_sizes": 1}, {"nl_num": [3, 4527, 1828, 4198, 2, 3866, 1422, 1780, 338, 4198, 4], "code_num": [2], "code": "def apply_wavelet_transform(data):\\n    results_list = []\\n    for row in data:\\n        ca, cd = pywt.dwt(row, 'haar')\\n        results_list.append(ca)\\n    result = np.array(results_list)\\n    return result", "id": "32042193", "code_sizes": 1}, {"nl_num": [3, 1315, 262, 540, 2406, 869, 169, 4590, 4], "code_num": [2], "code": "companyInfo = \"\\n\\n\".join(\"\\t%s\" % x for x in companyList)", "id": "16991955", "code_sizes": 1}, {"nl_num": [3, 990, 1460, 2878, 3514, 2577, 4], "code_num": [2], "code": "urls = ['http://google.com/page','http://yahoo.com/page']\\n\\nfor url in urls:\\n    for number in range(1,10):\\n        page = requests.get(url+str(number))", "id": "22155871", "code_sizes": 1}, {"nl_num": [3, 188, 2728, 177, 988, 177, 494, 3747, 69, 568, 2556, 1400, 291, 3893, 1605, 483, 548, 2677, 4], "code_num": [2], "code": "def get_info(self,node):\\n    self.values_list.append([node.get(i) for i in list_of_attributes])", "id": "34187271", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 1065, 1828, 2, 1856, 2610, 2, 2326, 4], "code_num": [2], "code": "def on_mouseDrag( self, event ):       \\n    do_stuff()\\n\\n    if event.MiddleIsDown():\\n        do_other_stuff()", "id": "916435", "code_sizes": 1}, {"nl_num": [3, 188, 864, 4570, 922, 568, 1652, 1828, 727, 4714, 551, 1828, 4640, 2326, 4], "code_num": [2], "code": "import MySQLdb.cursors\\nMySQLdb.connect(host='...', cursorclass=MySQLdb.cursors.DictCursor)", "id": "2180226", "code_sizes": 1}, {"nl_num": [3, 69, 568, 2616, 1828, 4486, 4550, 1720, 4182, 1308, 2610, 990, 4], "code_num": [2], "code": "cmd.Cmd", "id": "3910160", "code_sizes": 1}, {"nl_num": [3, 71, 3270, 3004, 540, 4147, 3821, 2604, 2758, 2385, 1724, 873, 1828, 4384, 2594, 4], "code_num": [2], "code": "# coding=utf8\\n# -*- coding: utf8 -*-\\n# vim: set fileencoding=utf8 :", "id": "6812612", "code_sizes": 1}, {"nl_num": [3, 69, 568, 134, 2110, 166, 2610, 2613, 1950, 3138, 2326, 4], "code_num": [2], "code": "if self.phone:\\n    if self.isp() == \"east\":\\n        self.launchbell()\\n    else:\\n        self.launchtelus()\\n\\nif self.cpe_ip and self.cpe_passwd:\\n    print 'check modem...'\\n    self.modemstatus()\\n\\nif self.pppoe:\\n    radius = sgp_radius.Radius(self.pppoe)\\n    print 'check radius logs...'\\n    self.data = radius.sgp()\\n    self.radius_save()", "id": "24422765", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 1757, 4625, 1400, 1750, 576, 2, 4669, 3995, 576, 869, 2610, 3833, 4], "code_num": [2], "code": "__author__ = blah", "id": "21786317", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3559, 3467, 568, 2, 2610, 3148, 2326, 4], "code_num": [2], "code": "q.exec_(\"insert into COMPANY (id, \\\\n                              name, \\\\n                              age, \\\\n                              address, \\\\n                              salary) values ( \\\\n                              '{0}', \\\\n                              '{1}', \\\\n                              '{2}', \\\\n                              '{3}', \\\\n                              '{4}')\".format(self.IDEdit.text(),\\n                                             self.NameEdit.text(),\\n                                             self.AgeEdit.text(),\\n                                             self.AddressEdit.text(),\\n                                             self.SalaryEdit.text()))", "id": "31174779", "code_sizes": 1}, {"nl_num": [3, 1601, 4633, 2, 327, 2610, 188, 4189, 4], "code_num": [2], "code": "count = df.loc[:, 'start station id'].value_counts()\\ntuples = [tuple((x, y)) for x, y in count.items()]", "id": "34027384", "code_sizes": 1}, {"nl_num": [3, 442, 4505, 540, 188, 3627, 4171, 4], "code_num": [2], "code": "open(fname, 'rb')", "id": "3257471", "code_sizes": 1}, {"nl_num": [3, 3716, 1400, 2516, 1651, 327, 540, 990, 4], "code_num": [2], "code": "seq=\"TCATTCTaTTTAAAAAAatATAAAaGGGgTTTTGGGgTTTtGGGGTTTtGGGG\"\\nstop_codons = [\"TAG\", \"TAA\"]\\n\\ndef printcount(seq, stop_codons, start):\\n    found = False\\n    count = 0\\n    n = start\\n    while n < len(seq):\\n        if seq[n:n+3] in stop_codons:\\n            found = True\\n            break        \\n        count += 1\\n        n += 3\\n    print count if found else 0\\n\\nprintcount(seq, stop_codons, 0)\\nprintcount(seq, stop_codons, 1)\\nprintcount(seq, stop_codons, 2)", "id": "18609601", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 1242, 1828, 2676, 452, 4179, 3055, 1594, 2610, 990, 2326, 4], "code_num": [2], "code": "import matplotlib.pyplot as plt\\nimport numpy as np\\n\\ndef f(z,t):\\n    return np.exp(-z)*np.sin(t-z)\\n\\nz = np.linspace(0,5,3001)\\nt = np.arange(0,40000,4000)\\n\\nfor tval in t:\\n    plt.plot(z, f(z, tval))\\nplt.show()", "id": "13812697", "code_sizes": 1}, {"nl_num": [3, 550, 568, 4073, 2610, 3131, 188, 4251, 1400, 4350, 2604, 492, 4517, 3293, 2326, 4], "code_num": [2], "code": "System.AppDomain.CurrentDomain.GetAssemblies()", "id": "6217545", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 483, 611, 1237, 2610, 2, 2238, 3148, 1422, 188, 3528, 4], "code_num": [2], "code": "def createMenusAndToolbars(self):\\n    fileMenu = self.menuBar().addMenu('File')\\n    fileMenu.addAction('Save As...', self.save)\\n    fileMenu.addAction('Quit', self.quit)\\n\\ndef save(self):\\n    save = SaveTest(self)", "id": "23145572", "code_sizes": 1}, {"nl_num": [3, 4238, 551, 1125, 869, 399, 2610, 990, 4], "code_num": [2], "code": "osize = sys.argv[1].split(',')", "id": "15631117", "code_sizes": 1}, {"nl_num": [3, 1094, 3747, 2914, 2610, 1075, 1773, 4], "code_num": [2], "code": "printf(\"\\x41\\x42\\x43\\n\");", "id": "11136702", "code_sizes": 1}, {"nl_num": [3, 69, 568, 583, 3055, 677, 2969, 1297, 990, 4], "code_num": [2], "code": "from ftplib import FTP\\nftpretr = FTP('get.ftp.com')   # connect to host, default port\\nftpretr.login()               # user anonymous, passwd anonymous@\\nftpretr.retrbinary('RETR README', open('README', 'wb').write)\\nftpretr.quit()\\nftpsend = FTP('send-to.ftp.com','login','password')\\nftpsend.storbinary('STOR todo.txt', open('README','rb'))\\nftpsend.quit()", "id": "7315294", "code_sizes": 1}, {"nl_num": [3, 1922, 1959, 568, 1792, 4047, 889, 2610, 1828, 382, 1959, 4], "code_num": [2], "code": "def getInput(myList):\\n    while True:\\n        rows = input(\"Enter the row or 'q': \")\\n        if rows == 'q':\\n            break\\n        col = input(\"Enter the column: \")\\n        myList[int(rows)-1][int(col)-1] = \"X\"\\n    return myList", "id": "29482715", "code_sizes": 1}, {"nl_num": [3, 236, 990, 389, 2, 2610, 990, 1650, 4], "code_num": [2], "code": "import shelve\\nimport dumbdbm\\n\\ndef dumbdbm_shelve(filename,flag=\"c\"):\\n    return shelve.Shelf(dumbdbm.open(filename,flag))\\n\\nout_shelf=dumbdbm_shelve(\"shelved.dumbdbm.shelf\")\\nin_shelf=shelve.open(\"shelved.shelf\")\\n\\nkey_list=in_shelf.keys()\\nfor key in key_list:\\n    out_shelf[key]=in_shelf[key]\\n\\nout_shelf.close()\\nin_shelf.close()", "id": "27493733", "code_sizes": 1}, {"nl_num": [3, 550, 568, 1232, 2092, 4804, 1708, 990, 2326, 4], "code_num": [2], "code": "from multiprocessing.pool import ThreadPool\\nfrom urllib import urlretrieve\\n\\ndef loadpage(x):\\n    urlretrieve('http://google.com/search?q={}'.format(x), '{}.html'.format(x))\\n\\np = ThreadPool(10) # the max number of webpages to get at once\\np.map(loadpage, range(50))", "id": "30299848", "code_sizes": 1}, {"nl_num": [3, 550, 568, 3191, 1828, 869, 3293, 1828, 3079, 2613, 2605, 1812, 1828, 547, 1250, 2326, 4], "code_num": [2], "code": "csv_domain = line.split(',')[2]", "id": "30314368", "code_sizes": 1}, {"nl_num": [3, 2153, 694, 540, 4352, 2510, 4], "code_num": [2], "code": "print \"%02d\" % (1,)", "id": "134934", "code_sizes": 1}, {"nl_num": [3, 188, 2211, 2878, 1068, 4588, 2610, 3467, 26, 4], "code_num": [2], "code": "def click(self, event):\\n        # get the index of the mouse click\\n        index = self.MT.index(\"@%s,%s\" % (event.x, event.y))\\n\\n        # get the indices of all \"adj\" tags\\n        tag_indices = list(self.MT.tag_ranges('adj'))\\n\\n        # iterate them pairwise (start and end index)\\n        for start, end in zip(tag_indices[0::2], tag_indices[1::2]):\\n            # check if the tag matches the mouse click index\\n            if self.MT.compare(start, '<=', index) and self.MT.compare(index, '<', end):\\n                # return string between tag start and end\\n                return (start, end, self.MT.get(start, end))", "id": "33954343", "code_sizes": 1}, {"nl_num": [3, 550, 1535, 483, 361, 1828, 3004, 841, 3293, 1400, 334, 2019, 1828, 3945, 2326, 4], "code_num": [2], "code": "class SendDocuments(webapp2.RequestHandler):\\n    def post(self):\\n        document_key = self.request.get(\"document_key\")\\n        document_key = Key(str(document_key))\\n        the_document = DocumentsModel.all().filter(\"__key__ =\", document_key).get()\\n        file_data = blobstore.BlobInfo.get(str(the_document.blobstore_key))\\n        payload = {}\\n        payload['user_id'] = '1234123412341234'\\n        payload['test_file'] = MultipartParam('the_file', filename=\"something\",\\n                                      filetype=file_data.content_type,\\n                                      fileobj=file_data.open())", "id": "10259162", "code_sizes": 1}, {"nl_num": [3, 188, 3492, 4550, 3315, 1060, 4], "code_num": [2], "code": "import os\\nimport time\\n\\nwhile(1):\\n    time.sleep(.05)\\n    os.system('cls')\\n    print \"This is a multi-line screen print test\"\\n    print \"Line 1\" \\n    print \"Line 2\"", "id": "7122775", "code_sizes": 1}, {"nl_num": [3, 69, 568, 2878, 2086, 4179, 1566, 1948, 327, 2610, 1828, 4640, 2610, 188, 4], "code_num": [2], "code": "d={\"1\":\"\", \"2\":\"\", \"3\":\"\", \"4\":\"rock\" , \"5\":\"\" , \"6\":\"\" ,\"7\":\"paper\",\"8\":\"\"}\\n\\nfor key, value in d.items():\\n    if value:\\n        print(key, value)", "id": "32028524", "code_sizes": 1}, {"nl_num": [3, 333, 1151, 2605, 403, 2223, 1825, 223, 2644, 4092, 568, 1519, 2326, 4], "code_num": [2], "code": "wx.CallAfter(self.bottom_right.SetBackgroundColour, \"red\")", "id": "28006666", "code_sizes": 1}, {"nl_num": [3, 822, 169, 3427, 1828, 4238, 2610, 1828, 3004, 4], "code_num": [2], "code": "l = [(0, 3), (0, 2), (0, 1), (1, 1), (1, 2), (2, 2)]\\n\\nfor i in range(0, len(l), 2):\\n    print(', '.join([str(l[i]), str(l[i+1])]))\\n\\n# (0, 3), (0, 2)\\n# (0, 1), (1, 1)\\n# (1, 2), (2, 2)", "id": "29331892", "code_sizes": 1}, {"nl_num": [3, 3990, 990, 2497, 523, 2464, 69, 568, 3559, 2341, 1383, 853, 4047, 2304, 4265, 1605, 3452, 4649, 4785, 2, 2326, 4], "code_num": [2], "code": "# (make a LEVELS dict out of all the logging levels first)    \\ndef indent(self, step = 1):\\n        \"Change the current indent level by the step (use negative to decrease)\"\\n        self._indent_level += step\\n        if self._indent_level < 0:\\n            self._indent_level = 0\\n        self._indent_str = self._indent_str_base * self._indent_level\\n        for lvl in LEVELS:\\n            level_name = self._indent_str + LEVELS[lvl]\\n            logging.addLevelName(lvl, level_name)", "id": "4742919", "code_sizes": 1}, {"nl_num": [3, 3656, 1297, 2464, 3053, 2464, 1176, 2610, 655, 4], "code_num": [2], "code": "from django.db.models import Count\\nUsage.objects.filter(no_of_people_house='4', city='HYDERABAD', nursing_cnt='2ND TIME MOTHER', bucket='BRAND PENETRATION').values('final_category').annotate(responders=Count('responders'))", "id": "25160064", "code_sizes": 1}, {"nl_num": [3, 1810, 4349, 2610, 188, 604, 3492, 223, 1752, 4], "code_num": [2], "code": "import itertools\\nscores = {}\\nfor a,b in itertools.permutations(('human', 'loud', 'big'), 2):\\n    scores[\"{0} + {1}\".format(a,b)] = 0\\nprint scores", "id": "30043982", "code_sizes": 1}, {"nl_num": [3, 2052, 2686, 2, 3293, 1828, 4238, 4179, 327, 3747, 188, 4], "code_num": [2], "code": "import socket\\nfile = '/Users/Python/Scripts/URL-list.txt'\\nf = open(file, 'r')\\nlines = f.readlines()\\nf.close()\\nfor i in lines:\\n    host = i.strip()\\n    print(\"%s - %s\" % (host, socket.gethostbyname(host)))", "id": "22119586", "code_sizes": 1}, {"nl_num": [3, 1226, 3502, 1708, 990, 4], "code_num": [2], "code": "import re\\nre.sub(r'number=\"([0-9]+)\"',r\"number='\\1'\", etree.tostring(root, pretty_print=True))", "id": "10783910", "code_sizes": 1}, {"nl_num": [3, 2385, 3747, 3990, 2255, 2464, 69, 1535, 483, 2869, 1400, 2473, 568, 449, 700, 2610, 1400, 2255, 2319, 2326, 4], "code_num": [2], "code": "#admin.py    \\n\\nclass ModelAdmin(admin.ModelAdmin):\\n  list_display = ['brand', 'model_name']\\n  fields = ['model_name', 'brand']\\n\\nclass ModelInline(admin.TabularInline):\\n    model = Model\\n\\nclass BrandAdmin(admin.ModelAdmin):\\n    model = Brand\\n    inlines = [\\n        ModelInline,\\n    ]\\n\\n\\nadmin.site.register(Brand, BrandAdmin)\\nadmin.site.register(Model, ModelAdmin)", "id": "20725426", "code_sizes": 1}, {"nl_num": [3, 545, 2448, 2610, 1400, 4640, 2684, 3293, 223, 1959, 4], "code_num": [2], "code": "answers_dict = {}\\nfor x, y in my_data.iteritems():\\n    lons, lats = y[0], y[1]\\n    answers = []\\n    for e,f in zip(lons,lats):\\n        answer = Pysolar.GetAltitude(e, f, datetime.datetime.utcnow())\\n        answers.append(answer)\\n    answers_dict[x] = answers", "id": "23380850", "code_sizes": 1}, {"nl_num": [3, 696, 4718, 223, 1182, 2238, 3528, 540, 1867, 2845, 864, 3886, 1747, 568, 2640, 549, 841, 4], "code_num": [2], "code": "developer = User.objects.get(username=request.POST['developer'])", "id": "28153817", "code_sizes": 1}, {"nl_num": [3, 1235, 864, 1664, 3760, 4179, 1828, 2, 347, 4], "code_num": [2], "code": "# Textview with inverted colors\\nimport gtk\\n\\ntv = gtk.TextView()\\ntv.modify_base(gtk.STATE_NORMAL, gtk.gdk.color_parse('black'))\\ntv.modify_text(gtk.STATE_NORMAL, gtk.gdk.color_parse('white'))", "id": "2150142", "code_sizes": 1}, {"nl_num": [3, 2367, 1404, 3293, 2583, 3004, 4], "code_num": [2], "code": "import re\\nwith open(\"data.json\") as inp:\\n    lines = inp.readlines()\\n\\nwith open(\"clean.json\", \"w\") as output:\\n    for line in lines:\\n        output.write(re.sub(r'\"(\\d+)\"', r\"\\1\", line))", "id": "32544854", "code_sizes": 1}, {"nl_num": [3, 550, 1352, 1757, 97, 1436, 193, 2326, 4], "code_num": [2], "code": "from mako import exceptions\\n\\ntry:\\n    template = lookup.get_template(uri)\\n    print template.render()\\nexcept:\\n    print exceptions.html_error_template().render()", "id": "390409", "code_sizes": 1}, {"nl_num": [3, 188, 864, 3748, 3963, 568, 4684, 4], "code_num": [2], "code": "value = input(\"Enter a number 1 - 9 separted by commas: \")\\n\\ndef user_input(value):\\n    if isinstance(value, tuple):\\n        return list(value)\\n    else:\\n        user_list = value.split(',')\\n        numbers = [(x.strip()) for x in user_list]\\n        return numbers\\n\\n\\nunit_number = {0: 'zero', 1: 'one', 2: 'two', 3: 'three', 4: 'four', \\n           5: 'five', 6: 'six', 7: 'seven', 8: 'eight', 9: 'nine'}\\n\\ndef convert_n_to_w(numbers):\\n    for n in numbers:\\n        print(unit_number[int(n)])\\n\\nnumbers = user_input(value)\\n\\nconvert_n_to_w(numbers)", "id": "15598083", "code_sizes": 1}]